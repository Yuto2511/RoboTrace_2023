
RoboTrcae_2023_TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c12c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800c2b8  0800c2b8  0001c2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c720  0800c720  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c720  0800c720  0001c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c728  0800c728  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c728  0800c728  0001c728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c6b4  200001e0  0800c910  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c894  0800c910  0002c894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d515  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000399c  00000000  00000000  0003d725  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  000410c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  00042608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024116  00000000  00000000  000439b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000146cb  00000000  00000000  00067ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cec6f  00000000  00000000  0007c191  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ae00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006348  00000000  00000000  0014ae7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c29c 	.word	0x0800c29c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	0800c29c 	.word	0x0800c29c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <read_byte>:
//#include <stdio.h>

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <read_byte+0x50>)
 8000efa:	f004 fae3 	bl	80054c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&ret,1,100);
 8000efe:	f107 010f 	add.w	r1, r7, #15
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <read_byte+0x54>)
 8000f08:	f005 fa95 	bl	8006436 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&val,1,100);
 8000f0c:	f107 010e 	add.w	r1, r7, #14
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	2201      	movs	r2, #1
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <read_byte+0x54>)
 8000f16:	f005 fbc2 	bl	800669e <HAL_SPI_Receive>
	CS_SET;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <read_byte+0x50>)
 8000f20:	f004 fad0 	bl	80054c4 <HAL_GPIO_WritePin>

	return val;
 8000f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020800 	.word	0x40020800
 8000f34:	2000c770 	.word	0x2000c770

08000f38 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <write_byte+0x50>)
 8000f58:	f004 fab4 	bl	80054c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&ret,1,100);
 8000f5c:	f107 010f 	add.w	r1, r7, #15
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	2201      	movs	r2, #1
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <write_byte+0x54>)
 8000f66:	f005 fa66 	bl	8006436 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&val,1,100);
 8000f6a:	1db9      	adds	r1, r7, #6
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <write_byte+0x54>)
 8000f72:	f005 fa60 	bl	8006436 <HAL_SPI_Transmit>
	CS_SET;
 8000f76:	2201      	movs	r2, #1
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4803      	ldr	r0, [pc, #12]	; (8000f88 <write_byte+0x50>)
 8000f7c:	f004 faa2 	bl	80054c4 <HAL_GPIO_WritePin>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	2000c770 	.word	0x2000c770

08000f90 <IMU_init>:

uint16_t IMU_init() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff ffa0 	bl	8000ee0 <read_byte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	717b      	strb	r3, [r7, #5]
	//printf("who am i -> %x\r\n", who_am_i);
	if ( who_am_i == 0xE0 ) {
 8000fa4:	797b      	ldrb	r3, [r7, #5]
 8000fa6:	2be0      	cmp	r3, #224	; 0xe0
 8000fa8:	d119      	bne.n	8000fde <IMU_init+0x4e>
		ret = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2006      	movs	r0, #6
 8000fb2:	f7ff ffc1 	bl	8000f38 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f7ff ffbd 	bl	8000f38 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	207f      	movs	r0, #127	; 0x7f
 8000fc2:	f7ff ffb9 	bl	8000f38 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8000fc6:	2106      	movs	r1, #6
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff ffb5 	bl	8000f38 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±500	01:±1000 10:±2000 11:±4000
		write_byte(0x14,0x06);	//レンジ±16g
 8000fce:	2106      	movs	r1, #6
 8000fd0:	2014      	movs	r0, #20
 8000fd2:	f7ff ffb1 	bl	8000f38 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±4	01:±8 10:±16 11:±30
		write_byte(0x7F,0x00);	//USER_BANK0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	207f      	movs	r0, #127	; 0x7f
 8000fda:	f7ff ffad 	bl	8000f38 <write_byte>
	}
	return ret;
 8000fde:	88fb      	ldrh	r3, [r7, #6]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <read_gyro_data>:

void read_gyro_data() {
 8000fe8:	b598      	push	{r3, r4, r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8000fec:	2033      	movs	r0, #51	; 0x33
 8000fee:	f7ff ff77 	bl	8000ee0 <read_byte>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21c      	sxth	r4, r3
 8000ff8:	2034      	movs	r0, #52	; 0x34
 8000ffa:	f7ff ff71 	bl	8000ee0 <read_byte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b21b      	sxth	r3, r3
 8001002:	4323      	orrs	r3, r4
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <read_gyro_data+0x64>)
 8001008:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800100a:	2035      	movs	r0, #53	; 0x35
 800100c:	f7ff ff68 	bl	8000ee0 <read_byte>
 8001010:	4603      	mov	r3, r0
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21c      	sxth	r4, r3
 8001016:	2036      	movs	r0, #54	; 0x36
 8001018:	f7ff ff62 	bl	8000ee0 <read_byte>
 800101c:	4603      	mov	r3, r0
 800101e:	b21b      	sxth	r3, r3
 8001020:	4323      	orrs	r3, r4
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <read_gyro_data+0x68>)
 8001026:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001028:	2037      	movs	r0, #55	; 0x37
 800102a:	f7ff ff59 	bl	8000ee0 <read_byte>
 800102e:	4603      	mov	r3, r0
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21c      	sxth	r4, r3
 8001034:	2038      	movs	r0, #56	; 0x38
 8001036:	f7ff ff53 	bl	8000ee0 <read_byte>
 800103a:	4603      	mov	r3, r0
 800103c:	b21b      	sxth	r3, r3
 800103e:	4323      	orrs	r3, r4
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <read_gyro_data+0x6c>)
 8001044:	801a      	strh	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	bd98      	pop	{r3, r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	20009810 	.word	0x20009810
 8001050:	2000980e 	.word	0x2000980e
 8001054:	20009808 	.word	0x20009808

08001058 <SpeedContorol_R>:

#include "speed.h"


double SpeedContorol_R(double Speed_Ref)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 500.0, IGain = 0.0, duty;
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	4c3c      	ldr	r4, [pc, #240]	; (8001158 <SpeedContorol_R+0x100>)
 8001068:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	f04f 0400 	mov.w	r4, #0
 8001074:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref + SR;
 8001078:	4b38      	ldr	r3, [pc, #224]	; (800115c <SpeedContorol_R+0x104>)
 800107a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800107e:	461a      	mov	r2, r3
 8001080:	4623      	mov	r3, r4
 8001082:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001086:	f7ff f8ad 	bl	80001e4 <__adddf3>
 800108a:	4603      	mov	r3, r0
 800108c:	460c      	mov	r4, r1
 800108e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedR_I_buff += delta_speed * TIM05 * 0.001;
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b32      	ldr	r3, [pc, #200]	; (8001160 <SpeedContorol_R+0x108>)
 8001098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800109c:	f7ff fa58 	bl	8000550 <__aeabi_dmul>
 80010a0:	4603      	mov	r3, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	4618      	mov	r0, r3
 80010a6:	4621      	mov	r1, r4
 80010a8:	a325      	add	r3, pc, #148	; (adr r3, 8001140 <SpeedContorol_R+0xe8>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fa4f 	bl	8000550 <__aeabi_dmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	460c      	mov	r4, r1
 80010b6:	4618      	mov	r0, r3
 80010b8:	4621      	mov	r1, r4
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <SpeedContorol_R+0x10c>)
 80010bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	f7ff f88e 	bl	80001e4 <__adddf3>
 80010c8:	4603      	mov	r3, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <SpeedContorol_R+0x10c>)
 80010ce:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff >= 1000000) speedR_I_buff = 1000000;
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <SpeedContorol_R+0x10c>)
 80010d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d8:	a31b      	add	r3, pc, #108	; (adr r3, 8001148 <SpeedContorol_R+0xf0>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fcbd 	bl	8000a5c <__aeabi_dcmpge>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <SpeedContorol_R+0x9c>
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <SpeedContorol_R+0x10c>)
 80010ea:	a417      	add	r4, pc, #92	; (adr r4, 8001148 <SpeedContorol_R+0xf0>)
 80010ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80010f0:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff <= -1000000) speedR_I_buff = -1000000;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <SpeedContorol_R+0x10c>)
 80010f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fa:	a315      	add	r3, pc, #84	; (adr r3, 8001150 <SpeedContorol_R+0xf8>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fca2 	bl	8000a48 <__aeabi_dcmple>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <SpeedContorol_R+0xbe>
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <SpeedContorol_R+0x10c>)
 800110c:	a410      	add	r4, pc, #64	; (adr r4, 8001150 <SpeedContorol_R+0xf8>)
 800110e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001112:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedR_I_buff * IGain )*/;
 8001116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800111a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800111e:	f7ff fa17 	bl	8000550 <__aeabi_dmul>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 800112a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800112e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001132:	eeb0 0a47 	vmov.f32	s0, s14
 8001136:	eef0 0a67 	vmov.f32	s1, s15
 800113a:	372c      	adds	r7, #44	; 0x2c
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	d2f1a9fc 	.word	0xd2f1a9fc
 8001144:	3f50624d 	.word	0x3f50624d
 8001148:	00000000 	.word	0x00000000
 800114c:	412e8480 	.word	0x412e8480
 8001150:	00000000 	.word	0x00000000
 8001154:	c12e8480 	.word	0xc12e8480
 8001158:	407f4000 	.word	0x407f4000
 800115c:	20009858 	.word	0x20009858
 8001160:	3fe00000 	.word	0x3fe00000
 8001164:	20009820 	.word	0x20009820

08001168 <SpeedContorol_L>:

double SpeedContorol_L(double Speed_Ref)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b08b      	sub	sp, #44	; 0x2c
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 500.0, IGain = 0.0, duty;
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	4c3c      	ldr	r4, [pc, #240]	; (8001268 <SpeedContorol_L+0x100>)
 8001178:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	f04f 0400 	mov.w	r4, #0
 8001184:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref - SL;
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <SpeedContorol_L+0x104>)
 800118a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800118e:	461a      	mov	r2, r3
 8001190:	4623      	mov	r3, r4
 8001192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001196:	f7ff f823 	bl	80001e0 <__aeabi_dsub>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedL_I_buff += delta_speed * TIM05 * 0.001;
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <SpeedContorol_L+0x108>)
 80011a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ac:	f7ff f9d0 	bl	8000550 <__aeabi_dmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	4618      	mov	r0, r3
 80011b6:	4621      	mov	r1, r4
 80011b8:	a325      	add	r3, pc, #148	; (adr r3, 8001250 <SpeedContorol_L+0xe8>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff f9c7 	bl	8000550 <__aeabi_dmul>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <SpeedContorol_L+0x10c>)
 80011cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4623      	mov	r3, r4
 80011d4:	f7ff f806 	bl	80001e4 <__adddf3>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <SpeedContorol_L+0x10c>)
 80011de:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff >= 1000000) speedL_I_buff = 1000000;
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <SpeedContorol_L+0x10c>)
 80011e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e8:	a31b      	add	r3, pc, #108	; (adr r3, 8001258 <SpeedContorol_L+0xf0>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fc35 	bl	8000a5c <__aeabi_dcmpge>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <SpeedContorol_L+0x9c>
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <SpeedContorol_L+0x10c>)
 80011fa:	a417      	add	r4, pc, #92	; (adr r4, 8001258 <SpeedContorol_L+0xf0>)
 80011fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001200:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff <= -1000000) speedL_I_buff = -1000000;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <SpeedContorol_L+0x10c>)
 8001206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800120a:	a315      	add	r3, pc, #84	; (adr r3, 8001260 <SpeedContorol_L+0xf8>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff fc1a 	bl	8000a48 <__aeabi_dcmple>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <SpeedContorol_L+0xbe>
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <SpeedContorol_L+0x10c>)
 800121c:	a410      	add	r4, pc, #64	; (adr r4, 8001260 <SpeedContorol_L+0xf8>)
 800121e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001222:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedL_I_buff * IGain )*/;
 8001226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800122a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800122e:	f7ff f98f 	bl	8000550 <__aeabi_dmul>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 800123a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800123e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001242:	eeb0 0a47 	vmov.f32	s0, s14
 8001246:	eef0 0a67 	vmov.f32	s1, s15
 800124a:	372c      	adds	r7, #44	; 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}
 8001250:	d2f1a9fc 	.word	0xd2f1a9fc
 8001254:	3f50624d 	.word	0x3f50624d
 8001258:	00000000 	.word	0x00000000
 800125c:	412e8480 	.word	0x412e8480
 8001260:	00000000 	.word	0x00000000
 8001264:	c12e8480 	.word	0xc12e8480
 8001268:	407f4000 	.word	0x407f4000
 800126c:	20009838 	.word	0x20009838
 8001270:	3fe00000 	.word	0x3fe00000
 8001274:	20009860 	.word	0x20009860

08001278 <StearingContorol>:

	return value;
}

double StearingContorol( double Delta )
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 0.1, IGain = 0.0, DGain = 0.0, duty;
 8001282:	a461      	add	r4, pc, #388	; (adr r4, 8001408 <StearingContorol+0x190>)
 8001284:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001288:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	f04f 0400 	mov.w	r4, #0
 80012a0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	stear_I_buff += Delta * TIM05 * 0.001;
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <StearingContorol+0x180>)
 80012aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ae:	f7ff f94f 	bl	8000550 <__aeabi_dmul>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	4618      	mov	r0, r3
 80012b8:	4621      	mov	r1, r4
 80012ba:	a349      	add	r3, pc, #292	; (adr r3, 80013e0 <StearingContorol+0x168>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f946 	bl	8000550 <__aeabi_dmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <StearingContorol+0x184>)
 80012ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4623      	mov	r3, r4
 80012d6:	f7fe ff85 	bl	80001e4 <__adddf3>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	4a47      	ldr	r2, [pc, #284]	; (80013fc <StearingContorol+0x184>)
 80012e0:	e9c2 3400 	strd	r3, r4, [r2]
	if(stear_I_buff >= 1000000) stear_I_buff = 1000000;
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <StearingContorol+0x184>)
 80012e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ea:	a33f      	add	r3, pc, #252	; (adr r3, 80013e8 <StearingContorol+0x170>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff fbb4 	bl	8000a5c <__aeabi_dcmpge>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <StearingContorol+0x8e>
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <StearingContorol+0x184>)
 80012fc:	a43a      	add	r4, pc, #232	; (adr r4, 80013e8 <StearingContorol+0x170>)
 80012fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001302:	e9c2 3400 	strd	r3, r4, [r2]
	if(stear_I_buff <= -1000000) stear_I_buff = -1000000;
 8001306:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <StearingContorol+0x184>)
 8001308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130c:	a338      	add	r3, pc, #224	; (adr r3, 80013f0 <StearingContorol+0x178>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fb99 	bl	8000a48 <__aeabi_dcmple>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <StearingContorol+0xb0>
 800131c:	4a37      	ldr	r2, [pc, #220]	; (80013fc <StearingContorol+0x184>)
 800131e:	a434      	add	r4, pc, #208	; (adr r4, 80013f0 <StearingContorol+0x178>)
 8001320:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001324:	e9c2 3400 	strd	r3, r4, [r2]
	stear_D_buff = (stear_buff - Delta) * TIM05 * 0.001;
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <StearingContorol+0x188>)
 800132a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001332:	f7fe ff55 	bl	80001e0 <__aeabi_dsub>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <StearingContorol+0x180>)
 8001344:	f7ff f904 	bl	8000550 <__aeabi_dmul>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	a323      	add	r3, pc, #140	; (adr r3, 80013e0 <StearingContorol+0x168>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff f8fb 	bl	8000550 <__aeabi_dmul>
 800135a:	4603      	mov	r3, r0
 800135c:	460c      	mov	r4, r1
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <StearingContorol+0x18c>)
 8001360:	e9c2 3400 	strd	r3, r4, [r2]
	stear_buff = Delta;
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <StearingContorol+0x188>)
 8001366:	e9d7 3400 	ldrd	r3, r4, [r7]
 800136a:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( Delta * PGain ) + ( stear_I_buff * IGain ) - ( stear_D_buff * DGain );
 800136e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001376:	f7ff f8eb 	bl	8000550 <__aeabi_dmul>
 800137a:	4603      	mov	r3, r0
 800137c:	460c      	mov	r4, r1
 800137e:	4625      	mov	r5, r4
 8001380:	461c      	mov	r4, r3
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <StearingContorol+0x184>)
 8001384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800138c:	f7ff f8e0 	bl	8000550 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4620      	mov	r0, r4
 8001396:	4629      	mov	r1, r5
 8001398:	f7fe ff24 	bl	80001e4 <__adddf3>
 800139c:	4603      	mov	r3, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	4625      	mov	r5, r4
 80013a2:	461c      	mov	r4, r3
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <StearingContorol+0x18c>)
 80013a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ae:	f7ff f8cf 	bl	8000550 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7fe ff11 	bl	80001e0 <__aeabi_dsub>
 80013be:	4603      	mov	r3, r0
 80013c0:	460c      	mov	r4, r1
 80013c2:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 80013c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013ca:	ec44 3b17 	vmov	d7, r3, r4
}
 80013ce:	eeb0 0a47 	vmov.f32	s0, s14
 80013d2:	eef0 0a67 	vmov.f32	s1, s15
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	f3af 8000 	nop.w
 80013e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013e4:	3f50624d 	.word	0x3f50624d
 80013e8:	00000000 	.word	0x00000000
 80013ec:	412e8480 	.word	0x412e8480
 80013f0:	00000000 	.word	0x00000000
 80013f4:	c12e8480 	.word	0xc12e8480
 80013f8:	3fe00000 	.word	0x3fe00000
 80013fc:	20009868 	.word	0x20009868
 8001400:	20009850 	.word	0x20009850
 8001404:	20009848 	.word	0x20009848
 8001408:	9999999a 	.word	0x9999999a
 800140c:	3fb99999 	.word	0x3fb99999

08001410 <z_gyro>:
 */

#include "accelerometer.h"

double z_gyro()
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	double z_gyro;
	read_gyro_data();
 8001416:	f7ff fde7 	bl	8000fe8 <read_gyro_data>
	z_gyro = zg;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <z_gyro+0x88>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f82b 	bl	800047c <__aeabi_i2d>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	e9c7 3400 	strd	r3, r4, [r7]
	z_gyro = ((0.01) * (z_gyro) + (1.0 - (0.01)) * (pre_zg)); // lowpath filter
 800142e:	a316      	add	r3, pc, #88	; (adr r3, 8001488 <z_gyro+0x78>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001438:	f7ff f88a 	bl	8000550 <__aeabi_dmul>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4625      	mov	r5, r4
 8001442:	461c      	mov	r4, r3
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <z_gyro+0x8c>)
 8001446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144a:	a311      	add	r3, pc, #68	; (adr r3, 8001490 <z_gyro+0x80>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f87e 	bl	8000550 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe fec2 	bl	80001e4 <__adddf3>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	e9c7 3400 	strd	r3, r4, [r7]
	pre_zg = z_gyro;
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <z_gyro+0x8c>)
 800146a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800146e:	e9c2 3400 	strd	r3, r4, [r2]

	return z_gyro;
 8001472:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001476:	ec44 3b17 	vmov	d7, r3, r4
}
 800147a:	eeb0 0a47 	vmov.f32	s0, s14
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	47ae147b 	.word	0x47ae147b
 800148c:	3f847ae1 	.word	0x3f847ae1
 8001490:	7ae147ae 	.word	0x7ae147ae
 8001494:	3fefae14 	.word	0x3fefae14
 8001498:	20009808 	.word	0x20009808
 800149c:	20009878 	.word	0x20009878

080014a0 <ADCStart>:
 */

#include "analog.h"

void ADCStart()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog_, 6);
 80014a4:	2206      	movs	r2, #6
 80014a6:	490a      	ldr	r1, [pc, #40]	; (80014d0 <ADCStart+0x30>)
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <ADCStart+0x34>)
 80014aa:	f002 fe07 	bl	80040bc <HAL_ADC_Start_DMA>
	R_Min = L_Min = 1000;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <ADCStart+0x38>)
 80014b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <ADCStart+0x38>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <ADCStart+0x3c>)
 80014bc:	6013      	str	r3, [r2, #0]
	R_Max = L_Max = 0;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <ADCStart+0x40>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <ADCStart+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <ADCStart+0x44>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20009908 	.word	0x20009908
 80014d4:	2000c55c 	.word	0x2000c55c
 80014d8:	200098b0 	.word	0x200098b0
 80014dc:	20009924 	.word	0x20009924
 80014e0:	20009918 	.word	0x20009918
 80014e4:	20009920 	.word	0x20009920

080014e8 <adc_getValues>:

void adc_getValues()
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	if (num >= 9) num = 0;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <adc_getValues+0x7c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d902      	bls.n	80014fa <adc_getValues+0x12>
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <adc_getValues+0x7c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
	line_L1_[num] = analog_[12];
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <adc_getValues+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1a      	ldr	r2, [pc, #104]	; (8001568 <adc_getValues+0x80>)
 8001500:	8b11      	ldrh	r1, [r2, #24]
 8001502:	4a1a      	ldr	r2, [pc, #104]	; (800156c <adc_getValues+0x84>)
 8001504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_L2_[num] = analog_[3];
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <adc_getValues+0x7c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <adc_getValues+0x80>)
 800150e:	88d1      	ldrh	r1, [r2, #6]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <adc_getValues+0x88>)
 8001512:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_L3_[num] = analog_[4];
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <adc_getValues+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <adc_getValues+0x80>)
 800151c:	8911      	ldrh	r1, [r2, #8]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <adc_getValues+0x8c>)
 8001520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R3_[num] = analog_[15];
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <adc_getValues+0x7c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <adc_getValues+0x80>)
 800152a:	8bd1      	ldrh	r1, [r2, #30]
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <adc_getValues+0x90>)
 800152e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R2_[num] = analog_[8];
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <adc_getValues+0x7c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0c      	ldr	r2, [pc, #48]	; (8001568 <adc_getValues+0x80>)
 8001538:	8a11      	ldrh	r1, [r2, #16]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <adc_getValues+0x94>)
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R1_[num] = analog_[9];
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <adc_getValues+0x7c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a08      	ldr	r2, [pc, #32]	; (8001568 <adc_getValues+0x80>)
 8001546:	8a51      	ldrh	r1, [r2, #18]
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <adc_getValues+0x98>)
 800154a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	num++;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <adc_getValues+0x7c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <adc_getValues+0x7c>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	2000991c 	.word	0x2000991c
 8001568:	20009908 	.word	0x20009908
 800156c:	200098f4 	.word	0x200098f4
 8001570:	200098b4 	.word	0x200098b4
 8001574:	200098c8 	.word	0x200098c8
 8001578:	20009888 	.word	0x20009888
 800157c:	200098dc 	.word	0x200098dc
 8001580:	2000989c 	.word	0x2000989c

08001584 <updateValues>:

void updateValues()
{
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
	uint32_t tmp;
	for(int i = 0; i < 10; i++){
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e0bb      	b.n	8001708 <updateValues+0x184>
		for(int j = i+1; j < 10; j++){
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	e0b0      	b.n	80016fa <updateValues+0x176>
			if(line_L1_[i] > line_L1_[j]){
 8001598:	4aaa      	ldr	r2, [pc, #680]	; (8001844 <updateValues+0x2c0>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015a0:	49a8      	ldr	r1, [pc, #672]	; (8001844 <updateValues+0x2c0>)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d912      	bls.n	80015d2 <updateValues+0x4e>
				tmp = line_L1_[i];
 80015ac:	4aa5      	ldr	r2, [pc, #660]	; (8001844 <updateValues+0x2c0>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b4:	607b      	str	r3, [r7, #4]
				line_L1_[i] = line_L1_[j];
 80015b6:	4aa3      	ldr	r2, [pc, #652]	; (8001844 <updateValues+0x2c0>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015be:	4aa1      	ldr	r2, [pc, #644]	; (8001844 <updateValues+0x2c0>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L1_[j] = tmp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	4a9e      	ldr	r2, [pc, #632]	; (8001844 <updateValues+0x2c0>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_L2_[i] > line_L2_[j]){
 80015d2:	4a9d      	ldr	r2, [pc, #628]	; (8001848 <updateValues+0x2c4>)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015da:	499b      	ldr	r1, [pc, #620]	; (8001848 <updateValues+0x2c4>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d912      	bls.n	800160c <updateValues+0x88>
				tmp = line_L2_[i];
 80015e6:	4a98      	ldr	r2, [pc, #608]	; (8001848 <updateValues+0x2c4>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ee:	607b      	str	r3, [r7, #4]
				line_L2_[i] = line_L2_[j];
 80015f0:	4a95      	ldr	r2, [pc, #596]	; (8001848 <updateValues+0x2c4>)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015f8:	4a93      	ldr	r2, [pc, #588]	; (8001848 <updateValues+0x2c4>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L2_[j] = tmp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	b299      	uxth	r1, r3
 8001604:	4a90      	ldr	r2, [pc, #576]	; (8001848 <updateValues+0x2c4>)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_L3_[i] > line_L3_[j]){
 800160c:	4a8f      	ldr	r2, [pc, #572]	; (800184c <updateValues+0x2c8>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001614:	498d      	ldr	r1, [pc, #564]	; (800184c <updateValues+0x2c8>)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800161c:	429a      	cmp	r2, r3
 800161e:	d912      	bls.n	8001646 <updateValues+0xc2>
				tmp = line_L3_[i];
 8001620:	4a8a      	ldr	r2, [pc, #552]	; (800184c <updateValues+0x2c8>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001628:	607b      	str	r3, [r7, #4]
				line_L3_[i] = line_L3_[j];
 800162a:	4a88      	ldr	r2, [pc, #544]	; (800184c <updateValues+0x2c8>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001632:	4a86      	ldr	r2, [pc, #536]	; (800184c <updateValues+0x2c8>)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L3_[j] = tmp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	b299      	uxth	r1, r3
 800163e:	4a83      	ldr	r2, [pc, #524]	; (800184c <updateValues+0x2c8>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R3_[i] > line_R3_[j]){
 8001646:	4a82      	ldr	r2, [pc, #520]	; (8001850 <updateValues+0x2cc>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800164e:	4980      	ldr	r1, [pc, #512]	; (8001850 <updateValues+0x2cc>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001656:	429a      	cmp	r2, r3
 8001658:	d912      	bls.n	8001680 <updateValues+0xfc>
				tmp = line_R3_[i];
 800165a:	4a7d      	ldr	r2, [pc, #500]	; (8001850 <updateValues+0x2cc>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001662:	607b      	str	r3, [r7, #4]
				line_R3_[i] = line_R3_[j];
 8001664:	4a7a      	ldr	r2, [pc, #488]	; (8001850 <updateValues+0x2cc>)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800166c:	4a78      	ldr	r2, [pc, #480]	; (8001850 <updateValues+0x2cc>)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R3_[j] = tmp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	b299      	uxth	r1, r3
 8001678:	4a75      	ldr	r2, [pc, #468]	; (8001850 <updateValues+0x2cc>)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R2_[i] > line_R2_[j]){
 8001680:	4a74      	ldr	r2, [pc, #464]	; (8001854 <updateValues+0x2d0>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001688:	4972      	ldr	r1, [pc, #456]	; (8001854 <updateValues+0x2d0>)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001690:	429a      	cmp	r2, r3
 8001692:	d912      	bls.n	80016ba <updateValues+0x136>
				tmp = line_R2_[i];
 8001694:	4a6f      	ldr	r2, [pc, #444]	; (8001854 <updateValues+0x2d0>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169c:	607b      	str	r3, [r7, #4]
				line_R2_[i] = line_R2_[j];
 800169e:	4a6d      	ldr	r2, [pc, #436]	; (8001854 <updateValues+0x2d0>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016a6:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <updateValues+0x2d0>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R2_[j] = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	b299      	uxth	r1, r3
 80016b2:	4a68      	ldr	r2, [pc, #416]	; (8001854 <updateValues+0x2d0>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R1_[i] > line_R1_[j]){
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <updateValues+0x2d4>)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016c2:	4965      	ldr	r1, [pc, #404]	; (8001858 <updateValues+0x2d4>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d912      	bls.n	80016f4 <updateValues+0x170>
				tmp = line_R1_[i];
 80016ce:	4a62      	ldr	r2, [pc, #392]	; (8001858 <updateValues+0x2d4>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d6:	607b      	str	r3, [r7, #4]
				line_R1_[i] = line_R1_[j];
 80016d8:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <updateValues+0x2d4>)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016e0:	4a5d      	ldr	r2, [pc, #372]	; (8001858 <updateValues+0x2d4>)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R1_[j] = tmp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	b299      	uxth	r1, r3
 80016ec:	4a5a      	ldr	r2, [pc, #360]	; (8001858 <updateValues+0x2d4>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = i+1; j < 10; j++){
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	3301      	adds	r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	f77f af4b 	ble.w	8001598 <updateValues+0x14>
	for(int i = 0; i < 10; i++){
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b09      	cmp	r3, #9
 800170c:	f77f af40 	ble.w	8001590 <updateValues+0xc>
			}

		}
	}
	Line_Sens_L = (line_L1_[4] + line_L2_[4] + line_L3_[4]) / 3;
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <updateValues+0x2c0>)
 8001712:	891b      	ldrh	r3, [r3, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <updateValues+0x2c4>)
 8001718:	891b      	ldrh	r3, [r3, #8]
 800171a:	4413      	add	r3, r2
 800171c:	4a4b      	ldr	r2, [pc, #300]	; (800184c <updateValues+0x2c8>)
 800171e:	8912      	ldrh	r2, [r2, #8]
 8001720:	4413      	add	r3, r2
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <updateValues+0x2d8>)
 8001724:	fb82 1203 	smull	r1, r2, r2, r3
 8001728:	17db      	asrs	r3, r3, #31
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <updateValues+0x2dc>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_R = (line_R1_[4] + line_R2_[4] + line_R3_[4]) / 3;
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <updateValues+0x2d4>)
 800173c:	891b      	ldrh	r3, [r3, #8]
 800173e:	461a      	mov	r2, r3
 8001740:	4b44      	ldr	r3, [pc, #272]	; (8001854 <updateValues+0x2d0>)
 8001742:	891b      	ldrh	r3, [r3, #8]
 8001744:	4413      	add	r3, r2
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <updateValues+0x2cc>)
 8001748:	8912      	ldrh	r2, [r2, #8]
 800174a:	4413      	add	r3, r2
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <updateValues+0x2d8>)
 800174e:	fb82 1203 	smull	r1, r2, r2, r3
 8001752:	17db      	asrs	r3, r3, #31
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <updateValues+0x2e0>)
 8001760:	edc3 7a00 	vstr	s15, [r3]

	Line_Calib_R = ((Line_Sens_R - (double)R_Min) / (double)(R_Max - R_Min)) * 1000;
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <updateValues+0x2e0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe99 	bl	80004a0 <__aeabi_f2d>
 800176e:	4604      	mov	r4, r0
 8001770:	460d      	mov	r5, r1
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <updateValues+0x2e4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe80 	bl	800047c <__aeabi_i2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fd2c 	bl	80001e0 <__aeabi_dsub>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	4625      	mov	r5, r4
 800178e:	461c      	mov	r4, r3
 8001790:	4b36      	ldr	r3, [pc, #216]	; (800186c <updateValues+0x2e8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b34      	ldr	r3, [pc, #208]	; (8001868 <updateValues+0x2e4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe6e 	bl	800047c <__aeabi_i2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fffc 	bl	80007a4 <__aeabi_ddiv>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	4618      	mov	r0, r3
 80017b2:	4621      	mov	r1, r4
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <updateValues+0x2ec>)
 80017ba:	f7fe fec9 	bl	8000550 <__aeabi_dmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	4618      	mov	r0, r3
 80017c4:	4621      	mov	r1, r4
 80017c6:	f7ff f9bb 	bl	8000b40 <__aeabi_d2f>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <updateValues+0x2f0>)
 80017ce:	601a      	str	r2, [r3, #0]
	Line_Calib_L = ((Line_Sens_L - (double)L_Min) / (double)(L_Max - L_Min)) * 1000;
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <updateValues+0x2dc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe63 	bl	80004a0 <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <updateValues+0x2f4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe4a 	bl	800047c <__aeabi_i2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fcf6 	bl	80001e0 <__aeabi_dsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4625      	mov	r5, r4
 80017fa:	461c      	mov	r4, r3
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <updateValues+0x2f8>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <updateValues+0x2f4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe38 	bl	800047c <__aeabi_i2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe ffc6 	bl	80007a4 <__aeabi_ddiv>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	4618      	mov	r0, r3
 800181e:	4621      	mov	r1, r4
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <updateValues+0x2ec>)
 8001826:	f7fe fe93 	bl	8000550 <__aeabi_dmul>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	4618      	mov	r0, r3
 8001830:	4621      	mov	r1, r4
 8001832:	f7ff f985 	bl	8000b40 <__aeabi_d2f>
 8001836:	4602      	mov	r2, r0
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <updateValues+0x2fc>)
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	200098f4 	.word	0x200098f4
 8001848:	200098b4 	.word	0x200098b4
 800184c:	200098c8 	.word	0x200098c8
 8001850:	20009888 	.word	0x20009888
 8001854:	200098dc 	.word	0x200098dc
 8001858:	2000989c 	.word	0x2000989c
 800185c:	55555556 	.word	0x55555556
 8001860:	20009914 	.word	0x20009914
 8001864:	2000992c 	.word	0x2000992c
 8001868:	20009924 	.word	0x20009924
 800186c:	20009920 	.word	0x20009920
 8001870:	408f4000 	.word	0x408f4000
 8001874:	20009930 	.word	0x20009930
 8001878:	200098b0 	.word	0x200098b0
 800187c:	20009918 	.word	0x20009918
 8001880:	20009928 	.word	0x20009928

08001884 <led_num>:


#include "led.h"

void led_num(uint8_t num)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	// 1000
	if(num >= 8){
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b07      	cmp	r3, #7
 8001892:	d908      	bls.n	80018a6 <led_num+0x22>
		num = num - 8;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	3b08      	subs	r3, #8
 8001898:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2104      	movs	r1, #4
 800189e:	4821      	ldr	r0, [pc, #132]	; (8001924 <led_num+0xa0>)
 80018a0:	f003 fe10 	bl	80054c4 <HAL_GPIO_WritePin>
 80018a4:	e004      	b.n	80018b0 <led_num+0x2c>
	}
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2104      	movs	r1, #4
 80018aa:	481e      	ldr	r0, [pc, #120]	; (8001924 <led_num+0xa0>)
 80018ac:	f003 fe0a 	bl	80054c4 <HAL_GPIO_WritePin>
	// 0001
	if( !(num % 2) ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <led_num+0x44>
 80018bc:	2200      	movs	r2, #0
 80018be:	2101      	movs	r1, #1
 80018c0:	4819      	ldr	r0, [pc, #100]	; (8001928 <led_num+0xa4>)
 80018c2:	f003 fdff 	bl	80054c4 <HAL_GPIO_WritePin>
 80018c6:	e004      	b.n	80018d2 <led_num+0x4e>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	4816      	ldr	r0, [pc, #88]	; (8001928 <led_num+0xa4>)
 80018ce:	f003 fdf9 	bl	80054c4 <HAL_GPIO_WritePin>

	// 0010
	if( (num/2)%2 ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <led_num+0x6c>
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <led_num+0xa4>)
 80018ea:	f003 fdeb 	bl	80054c4 <HAL_GPIO_WritePin>
 80018ee:	e005      	b.n	80018fc <led_num+0x78>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <led_num+0xa4>)
 80018f8:	f003 fde4 	bl	80054c4 <HAL_GPIO_WritePin>

	// 0100
	if( num >= 4 ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d906      	bls.n	8001910 <led_num+0x8c>
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <led_num+0xa4>)
 800190a:	f003 fddb 	bl	80054c4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}
 800190e:	e005      	b.n	800191c <led_num+0x98>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <led_num+0xa4>)
 8001918:	f003 fdd4 	bl	80054c4 <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40020800 	.word	0x40020800

0800192c <Trace_Init>:
 */

#include "linetrace.h"

void Trace_Init()
{
 800192c:	b490      	push	{r4, r7}
 800192e:	af00      	add	r7, sp, #0
	//Time = Start_Flag = 0;
	Speed_Ref = 0;
 8001930:	4a05      	ldr	r2, [pc, #20]	; (8001948 <Trace_Init+0x1c>)
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	f04f 0400 	mov.w	r4, #0
 800193a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc90      	pop	{r4, r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20009840 	.word	0x20009840
 800194c:	00000000 	.word	0x00000000

08001950 <LineTrace>:

void LineTrace(uint8_t state, uint8_t memory)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]

	degree = Degree_S();
 8001960:	f001 fc8a 	bl	8003278 <Degree_S>
 8001964:	eeb0 7a40 	vmov.f32	s14, s0
 8001968:	eef0 7a60 	vmov.f32	s15, s1
 800196c:	4bbc      	ldr	r3, [pc, #752]	; (8001c60 <LineTrace+0x310>)
 800196e:	ed83 7b00 	vstr	d7, [r3]
	theta = (180 / M_PI) * degree;
 8001972:	4bbb      	ldr	r3, [pc, #748]	; (8001c60 <LineTrace+0x310>)
 8001974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001978:	a3af      	add	r3, pc, #700	; (adr r3, 8001c38 <LineTrace+0x2e8>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fde7 	bl	8000550 <__aeabi_dmul>
 8001982:	4603      	mov	r3, r0
 8001984:	460c      	mov	r4, r1
 8001986:	4ab7      	ldr	r2, [pc, #732]	; (8001c64 <LineTrace+0x314>)
 8001988:	e9c2 3400 	strd	r3, r4, [r2]
	Turning_Radius = 60 / tan(theta);
 800198c:	4bb5      	ldr	r3, [pc, #724]	; (8001c64 <LineTrace+0x314>)
 800198e:	ed93 7b00 	vldr	d7, [r3]
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	f008 fc71 	bl	800a280 <tan>
 800199e:	ec54 3b10 	vmov	r3, r4, d0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4623      	mov	r3, r4
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	49af      	ldr	r1, [pc, #700]	; (8001c68 <LineTrace+0x318>)
 80019ac:	f7fe fefa 	bl	80007a4 <__aeabi_ddiv>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	4aad      	ldr	r2, [pc, #692]	; (8001c6c <LineTrace+0x31c>)
 80019b6:	e9c2 3400 	strd	r3, r4, [r2]


	Speed_input_R = SpeedContorol_R( (Turning_Radius - TREAD) * (Speed_Ref / Turning_Radius) );
 80019ba:	4bac      	ldr	r3, [pc, #688]	; (8001c6c <LineTrace+0x31c>)
 80019bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	4baa      	ldr	r3, [pc, #680]	; (8001c70 <LineTrace+0x320>)
 80019c6:	f7fe fc0b 	bl	80001e0 <__aeabi_dsub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	461d      	mov	r5, r3
 80019d0:	4626      	mov	r6, r4
 80019d2:	4ba8      	ldr	r3, [pc, #672]	; (8001c74 <LineTrace+0x324>)
 80019d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d8:	4ba4      	ldr	r3, [pc, #656]	; (8001c6c <LineTrace+0x31c>)
 80019da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019de:	461a      	mov	r2, r3
 80019e0:	4623      	mov	r3, r4
 80019e2:	f7fe fedf 	bl	80007a4 <__aeabi_ddiv>
 80019e6:	4603      	mov	r3, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	4628      	mov	r0, r5
 80019f0:	4631      	mov	r1, r6
 80019f2:	f7fe fdad 	bl	8000550 <__aeabi_dmul>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	ec44 3b17 	vmov	d7, r3, r4
 80019fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001a02:	eef0 0a67 	vmov.f32	s1, s15
 8001a06:	f7ff fb27 	bl	8001058 <SpeedContorol_R>
 8001a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a0e:	eef0 7a60 	vmov.f32	s15, s1
 8001a12:	4b99      	ldr	r3, [pc, #612]	; (8001c78 <LineTrace+0x328>)
 8001a14:	ed83 7b00 	vstr	d7, [r3]
	Speed_input_L = SpeedContorol_L( (Turning_Radius + TREAD) * (Speed_Ref / Turning_Radius) );
 8001a18:	4b94      	ldr	r3, [pc, #592]	; (8001c6c <LineTrace+0x31c>)
 8001a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b93      	ldr	r3, [pc, #588]	; (8001c70 <LineTrace+0x320>)
 8001a24:	f7fe fbde 	bl	80001e4 <__adddf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	4626      	mov	r6, r4
 8001a30:	4b90      	ldr	r3, [pc, #576]	; (8001c74 <LineTrace+0x324>)
 8001a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a36:	4b8d      	ldr	r3, [pc, #564]	; (8001c6c <LineTrace+0x31c>)
 8001a38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	f7fe feb0 	bl	80007a4 <__aeabi_ddiv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	4631      	mov	r1, r6
 8001a50:	f7fe fd7e 	bl	8000550 <__aeabi_dmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	ec44 3b17 	vmov	d7, r3, r4
 8001a5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a60:	eef0 0a67 	vmov.f32	s1, s15
 8001a64:	f7ff fb80 	bl	8001168 <SpeedContorol_L>
 8001a68:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6c:	eef0 7a60 	vmov.f32	s15, s1
 8001a70:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <LineTrace+0x32c>)
 8001a72:	ed83 7b00 	vstr	d7, [r3]
	Stearing_input = StearingContorol( Line_Calib_R - Line_Calib_L );
 8001a76:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <LineTrace+0x330>)
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	4b81      	ldr	r3, [pc, #516]	; (8001c84 <LineTrace+0x334>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	ee17 0a90 	vmov	r0, s15
 8001a8a:	f7fe fd09 	bl	80004a0 <__aeabi_f2d>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	ec44 3b10 	vmov	d0, r3, r4
 8001a96:	f7ff fbef 	bl	8001278 <StearingContorol>
 8001a9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9e:	eef0 7a60 	vmov.f32	s15, s1
 8001aa2:	4b79      	ldr	r3, [pc, #484]	; (8001c88 <LineTrace+0x338>)
 8001aa4:	ed83 7b00 	vstr	d7, [r3]

	switch(state){
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f200 80bf 	bhi.w	8001c2e <LineTrace+0x2de>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <LineTrace+0x168>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001af1 	.word	0x08001af1
 8001ac0:	08001b67 	.word	0x08001b67
 8001ac4:	08001bb5 	.word	0x08001bb5
		case 0:
			motor_R(0);
 8001ac8:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8001c40 <LineTrace+0x2f0>
 8001acc:	f001 fa90 	bl	8002ff0 <motor_R>
			motor_L(0);
 8001ad0:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8001c40 <LineTrace+0x2f0>
 8001ad4:	f001 fad2 	bl	800307c <motor_L>
			motor_S(0);
 8001ad8:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001c40 <LineTrace+0x2f0>
 8001adc:	f001 fb14 	bl	8003108 <motor_S>
			Speed_Ref = 0;
 8001ae0:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <LineTrace+0x324>)
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	f04f 0400 	mov.w	r4, #0
 8001aea:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001aee:	e09f      	b.n	8001c30 <LineTrace+0x2e0>
		case 1:
			motor_R( Speed_input_R );
 8001af0:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <LineTrace+0x328>)
 8001af2:	ed93 7b00 	vldr	d7, [r3]
 8001af6:	eeb0 0a47 	vmov.f32	s0, s14
 8001afa:	eef0 0a67 	vmov.f32	s1, s15
 8001afe:	f001 fa77 	bl	8002ff0 <motor_R>
			motor_L( Speed_input_L );
 8001b02:	4b5e      	ldr	r3, [pc, #376]	; (8001c7c <LineTrace+0x32c>)
 8001b04:	ed93 7b00 	vldr	d7, [r3]
 8001b08:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0c:	eef0 0a67 	vmov.f32	s1, s15
 8001b10:	f001 fab4 	bl	800307c <motor_L>
			motor_S( Stearing_input );
 8001b14:	4b5c      	ldr	r3, [pc, #368]	; (8001c88 <LineTrace+0x338>)
 8001b16:	ed93 7b00 	vldr	d7, [r3]
 8001b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1e:	eef0 0a67 	vmov.f32	s1, s15
 8001b22:	f001 faf1 	bl	8003108 <motor_S>
			//Speed_Ref = 0;
			Speed_Ref += 0.002;
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <LineTrace+0x324>)
 8001b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b2c:	a346      	add	r3, pc, #280	; (adr r3, 8001c48 <LineTrace+0x2f8>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fb57 	bl	80001e4 <__adddf3>
 8001b36:	4603      	mov	r3, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	4a4e      	ldr	r2, [pc, #312]	; (8001c74 <LineTrace+0x324>)
 8001b3c:	e9c2 3400 	strd	r3, r4, [r2]
			if(Speed_Ref >= MIN_SPEED) Speed_Ref = MIN_SPEED;
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <LineTrace+0x324>)
 8001b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b46:	a342      	add	r3, pc, #264	; (adr r3, 8001c50 <LineTrace+0x300>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe ff86 	bl	8000a5c <__aeabi_dcmpge>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d100      	bne.n	8001b58 <LineTrace+0x208>
			break;
 8001b56:	e06b      	b.n	8001c30 <LineTrace+0x2e0>
			if(Speed_Ref >= MIN_SPEED) Speed_Ref = MIN_SPEED;
 8001b58:	4a46      	ldr	r2, [pc, #280]	; (8001c74 <LineTrace+0x324>)
 8001b5a:	a43d      	add	r4, pc, #244	; (adr r4, 8001c50 <LineTrace+0x300>)
 8001b5c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001b60:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001b64:	e064      	b.n	8001c30 <LineTrace+0x2e0>
		case 2:
			motor_R( Speed_input_R );
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <LineTrace+0x328>)
 8001b68:	ed93 7b00 	vldr	d7, [r3]
 8001b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b70:	eef0 0a67 	vmov.f32	s1, s15
 8001b74:	f001 fa3c 	bl	8002ff0 <motor_R>
			motor_L( Speed_input_L );
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <LineTrace+0x32c>)
 8001b7a:	ed93 7b00 	vldr	d7, [r3]
 8001b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b82:	eef0 0a67 	vmov.f32	s1, s15
 8001b86:	f001 fa79 	bl	800307c <motor_L>
			motor_S( Stearing_input );
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <LineTrace+0x338>)
 8001b8c:	ed93 7b00 	vldr	d7, [r3]
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	f001 fab6 	bl	8003108 <motor_S>
			Speed_Ref = route_calculation(memory);
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 ff2a 	bl	80029f8 <route_calculation>
 8001ba4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ba8:	eef0 7a60 	vmov.f32	s15, s1
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <LineTrace+0x324>)
 8001bae:	ed83 7b00 	vstr	d7, [r3]
			break;
 8001bb2:	e03d      	b.n	8001c30 <LineTrace+0x2e0>
		case 3:
			motor_R( Speed_input_R );
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <LineTrace+0x328>)
 8001bb6:	ed93 7b00 	vldr	d7, [r3]
 8001bba:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbe:	eef0 0a67 	vmov.f32	s1, s15
 8001bc2:	f001 fa15 	bl	8002ff0 <motor_R>
			motor_L( Speed_input_L );
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <LineTrace+0x32c>)
 8001bc8:	ed93 7b00 	vldr	d7, [r3]
 8001bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd0:	eef0 0a67 	vmov.f32	s1, s15
 8001bd4:	f001 fa52 	bl	800307c <motor_L>
			motor_S( Stearing_input );
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <LineTrace+0x338>)
 8001bda:	ed93 7b00 	vldr	d7, [r3]
 8001bde:	eeb0 0a47 	vmov.f32	s0, s14
 8001be2:	eef0 0a67 	vmov.f32	s1, s15
 8001be6:	f001 fa8f 	bl	8003108 <motor_S>
			Speed_Ref -= 0.004;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <LineTrace+0x324>)
 8001bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf0:	a319      	add	r3, pc, #100	; (adr r3, 8001c58 <LineTrace+0x308>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe faf3 	bl	80001e0 <__aeabi_dsub>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <LineTrace+0x324>)
 8001c00:	e9c2 3400 	strd	r3, r4, [r2]
			if(Speed_Ref <= 0) Speed_Ref = 0.0;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <LineTrace+0x324>)
 8001c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f7fe ff19 	bl	8000a48 <__aeabi_dcmple>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d100      	bne.n	8001c1e <LineTrace+0x2ce>
			break;
 8001c1c:	e008      	b.n	8001c30 <LineTrace+0x2e0>
			if(Speed_Ref <= 0) Speed_Ref = 0.0;
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <LineTrace+0x324>)
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001c2c:	e000      	b.n	8001c30 <LineTrace+0x2e0>
		default:
			break;
 8001c2e:	bf00      	nop
	}

}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	1a63c1f8 	.word	0x1a63c1f8
 8001c3c:	404ca5dc 	.word	0x404ca5dc
	...
 8001c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c4c:	3f60624d 	.word	0x3f60624d
 8001c50:	cccccccd 	.word	0xcccccccd
 8001c54:	3ffccccc 	.word	0x3ffccccc
 8001c58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c5c:	3f70624d 	.word	0x3f70624d
 8001c60:	2000c3a0 	.word	0x2000c3a0
 8001c64:	2000ba18 	.word	0x2000ba18
 8001c68:	404e0000 	.word	0x404e0000
 8001c6c:	2000ba28 	.word	0x2000ba28
 8001c70:	40490000 	.word	0x40490000
 8001c74:	20009840 	.word	0x20009840
 8001c78:	2000c3a8 	.word	0x2000c3a8
 8001c7c:	2000c3b0 	.word	0x2000c3b0
 8001c80:	20009930 	.word	0x20009930
 8001c84:	20009928 	.word	0x20009928
 8001c88:	2000ba10 	.word	0x2000ba10

08001c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c90:	f002 f93c 	bl	8003f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c94:	f000 f84c 	bl	8001d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c98:	f000 fdca 	bl	8002830 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c9c:	f000 fda8 	bl	80027f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ca0:	f000 f8c8 	bl	8001e34 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ca4:	f000 f95e 	bl	8001f64 <MX_I2C1_Init>
  MX_RTC_Init();
 8001ca8:	f000 f98a 	bl	8001fc0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001cac:	f000 f9ae 	bl	800200c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001cb0:	f000 f9e2 	bl	8002078 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cb4:	f000 fa62 	bl	800217c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cb8:	f000 fab4 	bl	8002224 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cbc:	f000 fb06 	bl	80022cc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001cc0:	f000 fb58 	bl	8002374 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001cc4:	f000 fc18 	bl	80024f8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001cc8:	f000 fc98 	bl	80025fc <MX_TIM9_Init>
  MX_TIM10_Init();
 8001ccc:	f000 fcda 	bl	8002684 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001cd0:	f000 fcfc 	bl	80026cc <MX_TIM11_Init>
  MX_TIM12_Init();
 8001cd4:	f000 fd1e 	bl	8002714 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001cd8:	f000 fd60 	bl	800279c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001cdc:	f000 fba2 	bl	8002424 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001ce0:	f000 fbd4 	bl	800248c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <main+0x8c>)
 8001ce6:	f005 f8c2 	bl	8006e6e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001cea:	480c      	ldr	r0, [pc, #48]	; (8001d1c <main+0x90>)
 8001cec:	f005 f8bf 	bl	8006e6e <HAL_TIM_Base_Start_IT>
  init();
 8001cf0:	f002 f846 	bl	8003d80 <init>
  // reload flash data
  loadFlash(start_address_sector11, (uint8_t*)&read_data_sector11, sizeof(READ_DATA_SECTOR11));
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <main+0x94>)
 8001cf6:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8001cfa:	490a      	ldr	r1, [pc, #40]	; (8001d24 <main+0x98>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 f93f 	bl	8002f80 <loadFlash>
  loadFlash(start_address_sector10, (uint8_t*)&read_data_sector10, sizeof(READ_DATA_SECTOR10));
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <main+0x9c>)
 8001d04:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001d08:	4908      	ldr	r1, [pc, #32]	; (8001d2c <main+0xa0>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 f938 	bl	8002f80 <loadFlash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_loop();
 8001d10:	f002 f854 	bl	8003dbc <main_loop>
 8001d14:	e7fc      	b.n	8001d10 <main+0x84>
 8001d16:	bf00      	nop
 8001d18:	2000c6ac 	.word	0x2000c6ac
 8001d1c:	2000c848 	.word	0x2000c848
 8001d20:	080e0000 	.word	0x080e0000
 8001d24:	20003a3c 	.word	0x20003a3c
 8001d28:	080c0000 	.word	0x080c0000
 8001d2c:	2000853c 	.word	0x2000853c

08001d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b098      	sub	sp, #96	; 0x60
 8001d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d3a:	2230      	movs	r2, #48	; 0x30
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f006 fd79 	bl	8008836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <SystemClock_Config+0xfc>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <SystemClock_Config+0xfc>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <SystemClock_Config+0xfc>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <SystemClock_Config+0x100>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <SystemClock_Config+0x100>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <SystemClock_Config+0x100>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d9a:	2309      	movs	r3, #9
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001da4:	2301      	movs	r3, #1
 8001da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da8:	2302      	movs	r3, #2
 8001daa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001db2:	2319      	movs	r3, #25
 8001db4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001db6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001dba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fccd 	bl	8005768 <HAL_RCC_OscConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001dd4:	f000 fe0a 	bl	80029ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd8:	230f      	movs	r3, #15
 8001dda:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	2105      	movs	r1, #5
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 ff26 	bl	8005c48 <HAL_RCC_ClockConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001e02:	f000 fdf3 	bl	80029ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e06:	2302      	movs	r3, #2
 8001e08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 f8e3 	bl	8005fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001e20:	f000 fde4 	bl	80029ec <Error_Handler>
  }
}
 8001e24:	bf00      	nop
 8001e26:	3760      	adds	r7, #96	; 0x60
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000

08001e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e46:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e48:	4a44      	ldr	r2, [pc, #272]	; (8001f5c <MX_ADC1_Init+0x128>)
 8001e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e54:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e60:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e76:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <MX_ADC1_Init+0x12c>)
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e82:	2206      	movs	r2, #6
 8001e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e86:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e94:	4830      	ldr	r0, [pc, #192]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001e96:	f002 f8cd 	bl	8004034 <HAL_ADC_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ea0:	f000 fda4 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4828      	ldr	r0, [pc, #160]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001eb6:	f002 fa11 	bl	80042dc <HAL_ADC_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ec0:	f000 fd94 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4821      	ldr	r0, [pc, #132]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001ed2:	f002 fa03 	bl	80042dc <HAL_ADC_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001edc:	f000 fd86 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4619      	mov	r1, r3
 8001eec:	481a      	ldr	r0, [pc, #104]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001eee:	f002 f9f5 	bl	80042dc <HAL_ADC_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001ef8:	f000 fd78 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001efc:	2309      	movs	r3, #9
 8001efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f00:	2304      	movs	r3, #4
 8001f02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f04:	463b      	mov	r3, r7
 8001f06:	4619      	mov	r1, r3
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001f0a:	f002 f9e7 	bl	80042dc <HAL_ADC_ConfigChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f14:	f000 fd6a 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f20:	463b      	mov	r3, r7
 8001f22:	4619      	mov	r1, r3
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001f26:	f002 f9d9 	bl	80042dc <HAL_ADC_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f30:	f000 fd5c 	bl	80029ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f34:	230f      	movs	r3, #15
 8001f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001f38:	2306      	movs	r3, #6
 8001f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_ADC1_Init+0x124>)
 8001f42:	f002 f9cb 	bl	80042dc <HAL_ADC_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001f4c:	f000 fd4e 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000c55c 	.word	0x2000c55c
 8001f5c:	40012000 	.word	0x40012000
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <MX_I2C1_Init+0x54>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f70:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_I2C1_Init+0x58>)
 8001f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa0:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <MX_I2C1_Init+0x50>)
 8001fa2:	f003 faa9 	bl	80054f8 <HAL_I2C_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fac:	f000 fd1e 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000c438 	.word	0x2000c438
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	000186a0 	.word	0x000186a0

08001fc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_RTC_Init+0x44>)
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <MX_RTC_Init+0x48>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_RTC_Init+0x44>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_RTC_Init+0x44>)
 8001fd2:	227f      	movs	r2, #127	; 0x7f
 8001fd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_RTC_Init+0x44>)
 8001fd8:	22ff      	movs	r2, #255	; 0xff
 8001fda:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_RTC_Init+0x44>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_RTC_Init+0x44>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_RTC_Init+0x44>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_RTC_Init+0x44>)
 8001ff0:	f004 f8d8 	bl	80061a4 <HAL_RTC_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ffa:	f000 fcf7 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000c688 	.word	0x2000c688
 8002008:	40002800 	.word	0x40002800

0800200c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_SPI1_Init+0x64>)
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <MX_SPI1_Init+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <MX_SPI1_Init+0x64>)
 8002018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800201c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_SPI1_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_SPI1_Init+0x64>)
 800202c:	2202      	movs	r2, #2
 800202e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_SPI1_Init+0x64>)
 8002032:	2201      	movs	r2, #1
 8002034:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_SPI1_Init+0x64>)
 8002038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_SPI1_Init+0x64>)
 8002040:	2228      	movs	r2, #40	; 0x28
 8002042:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MX_SPI1_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_SPI1_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <MX_SPI1_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_SPI1_Init+0x64>)
 8002058:	220a      	movs	r2, #10
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_SPI1_Init+0x64>)
 800205e:	f004 f986 	bl	800636e <HAL_SPI_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002068:	f000 fcc0 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000c770 	.word	0x2000c770
 8002074:	40013000 	.word	0x40013000

08002078 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b092      	sub	sp, #72	; 0x48
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
 8002098:	615a      	str	r2, [r3, #20]
 800209a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2220      	movs	r2, #32
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f006 fbc7 	bl	8008836 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <MX_TIM1_Init+0x100>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020b0:	2253      	movs	r2, #83	; 0x53
 80020b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020bc:	2209      	movs	r2, #9
 80020be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020d2:	4828      	ldr	r0, [pc, #160]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020d4:	f004 feef 	bl	8006eb6 <HAL_TIM_PWM_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80020de:	f000 fc85 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ee:	4619      	mov	r1, r3
 80020f0:	4820      	ldr	r0, [pc, #128]	; (8002174 <MX_TIM1_Init+0xfc>)
 80020f2:	f005 fc7f 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80020fc:	f000 fc76 	bl	80029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002100:	2360      	movs	r3, #96	; 0x60
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800210c:	2300      	movs	r3, #0
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002120:	2200      	movs	r2, #0
 8002122:	4619      	mov	r1, r3
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_TIM1_Init+0xfc>)
 8002126:	f005 f901 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002130:	f000 fc5c 	bl	80029ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4619      	mov	r1, r3
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <MX_TIM1_Init+0xfc>)
 8002158:	f005 fcc8 	bl	8007aec <HAL_TIMEx_ConfigBreakDeadTime>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002162:	f000 fc43 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <MX_TIM1_Init+0xfc>)
 8002168:	f001 fc04 	bl	8003974 <HAL_TIM_MspPostInit>

}
 800216c:	bf00      	nop
 800216e:	3748      	adds	r7, #72	; 0x48
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000c6ec 	.word	0x2000c6ec
 8002178:	40010000 	.word	0x40010000

0800217c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f006 fb53 	bl	8008836 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <MX_TIM2_Init+0xa4>)
 800219a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <MX_TIM2_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_TIM2_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_TIM2_Init+0xa4>)
 80021ae:	f04f 32ff 	mov.w	r2, #4294967295
 80021b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_TIM2_Init+0xa4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <MX_TIM2_Init+0xa4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021c0:	2303      	movs	r3, #3
 80021c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021c8:	2301      	movs	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021d8:	2301      	movs	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4619      	mov	r1, r3
 80021ea:	480d      	ldr	r0, [pc, #52]	; (8002220 <MX_TIM2_Init+0xa4>)
 80021ec:	f004 fecc 	bl	8006f88 <HAL_TIM_Encoder_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80021f6:	f000 fbf9 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4806      	ldr	r0, [pc, #24]	; (8002220 <MX_TIM2_Init+0xa4>)
 8002208:	f005 fbf4 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002212:	f000 fbeb 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000c7c8 	.word	0x2000c7c8

08002224 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f006 faff 	bl	8008836 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <MX_TIM3_Init+0xa0>)
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <MX_TIM3_Init+0xa4>)
 8002244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_TIM3_Init+0xa0>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <MX_TIM3_Init+0xa0>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <MX_TIM3_Init+0xa0>)
 8002254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002258:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MX_TIM3_Init+0xa0>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_TIM3_Init+0xa0>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002266:	2303      	movs	r3, #3
 8002268:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800227e:	2301      	movs	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4619      	mov	r1, r3
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MX_TIM3_Init+0xa0>)
 8002292:	f004 fe79 	bl	8006f88 <HAL_TIM_Encoder_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800229c:	f000 fba6 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_TIM3_Init+0xa0>)
 80022ae:	f005 fba1 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80022b8:	f000 fb98 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	3730      	adds	r7, #48	; 0x30
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000c518 	.word	0x2000c518
 80022c8:	40000400 	.word	0x40000400

080022cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f006 faab 	bl	8008836 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <MX_TIM4_Init+0xa0>)
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <MX_TIM4_Init+0xa4>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_TIM4_Init+0xa0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_TIM4_Init+0xa0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_TIM4_Init+0xa0>)
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_TIM4_Init+0xa0>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <MX_TIM4_Init+0xa0>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800230e:	2303      	movs	r3, #3
 8002310:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002316:	2301      	movs	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002326:	2301      	movs	r3, #1
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4619      	mov	r1, r3
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <MX_TIM4_Init+0xa0>)
 800233a:	f004 fe25 	bl	8006f88 <HAL_TIM_Encoder_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002344:	f000 fb52 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_TIM4_Init+0xa0>)
 8002356:	f005 fb4d 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002360:	f000 fb44 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3730      	adds	r7, #48	; 0x30
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000c3f8 	.word	0x2000c3f8
 8002370:	40000800 	.word	0x40000800

08002374 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	f107 0320 	add.w	r3, r7, #32
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_TIM5_Init+0xa8>)
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <MX_TIM5_Init+0xac>)
 800239a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 20;
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_TIM5_Init+0xa8>)
 800239e:	2214      	movs	r2, #20
 80023a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM5_Init+0xa8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_TIM5_Init+0xa8>)
 80023aa:	2213      	movs	r2, #19
 80023ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM5_Init+0xa8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_TIM5_Init+0xa8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023ba:	4818      	ldr	r0, [pc, #96]	; (800241c <MX_TIM5_Init+0xa8>)
 80023bc:	f004 fd7b 	bl	8006eb6 <HAL_TIM_PWM_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80023c6:	f000 fb11 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	4619      	mov	r1, r3
 80023d8:	4810      	ldr	r0, [pc, #64]	; (800241c <MX_TIM5_Init+0xa8>)
 80023da:	f005 fb0b 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80023e4:	f000 fb02 	bl	80029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e8:	2360      	movs	r3, #96	; 0x60
 80023ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <MX_TIM5_Init+0xa8>)
 8002400:	f004 ff94 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800240a:	f000 faef 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800240e:	4803      	ldr	r0, [pc, #12]	; (800241c <MX_TIM5_Init+0xa8>)
 8002410:	f001 fab0 	bl	8003974 <HAL_TIM_MspPostInit>

}
 8002414:	bf00      	nop
 8002416:	3728      	adds	r7, #40	; 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000c4d8 	.word	0x2000c4d8
 8002420:	40000c00 	.word	0x40000c00

08002424 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242a:	463b      	mov	r3, r7
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_TIM6_Init+0x60>)
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <MX_TIM6_Init+0x64>)
 8002436:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_TIM6_Init+0x60>)
 800243a:	2253      	movs	r2, #83	; 0x53
 800243c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_TIM6_Init+0x60>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_TIM6_Init+0x60>)
 8002446:	2231      	movs	r2, #49	; 0x31
 8002448:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_TIM6_Init+0x60>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <MX_TIM6_Init+0x60>)
 8002452:	f004 fce1 	bl	8006e18 <HAL_TIM_Base_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800245c:	f000 fac6 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_TIM6_Init+0x60>)
 800246e:	f005 fac1 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002478:	f000 fab8 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000c6ac 	.word	0x2000c6ac
 8002488:	40001000 	.word	0x40001000

0800248c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002492:	463b      	mov	r3, r7
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_TIM7_Init+0x64>)
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <MX_TIM7_Init+0x68>)
 800249e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MX_TIM7_Init+0x64>)
 80024a2:	2253      	movs	r2, #83	; 0x53
 80024a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_TIM7_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_TIM7_Init+0x64>)
 80024ae:	f240 12f3 	movw	r2, #499	; 0x1f3
 80024b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_TIM7_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024ba:	480d      	ldr	r0, [pc, #52]	; (80024f0 <MX_TIM7_Init+0x64>)
 80024bc:	f004 fcac 	bl	8006e18 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80024c6:	f000 fa91 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024d2:	463b      	mov	r3, r7
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <MX_TIM7_Init+0x64>)
 80024d8:	f005 fa8c 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80024e2:	f000 fa83 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000c848 	.word	0x2000c848
 80024f4:	40001400 	.word	0x40001400

080024f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b092      	sub	sp, #72	; 0x48
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
 8002518:	615a      	str	r2, [r3, #20]
 800251a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2220      	movs	r2, #32
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f006 f987 	bl	8008836 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <MX_TIM8_Init+0xfc>)
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <MX_TIM8_Init+0x100>)
 800252c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <MX_TIM8_Init+0xfc>)
 8002530:	2253      	movs	r2, #83	; 0x53
 8002532:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <MX_TIM8_Init+0xfc>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <MX_TIM8_Init+0xfc>)
 800253c:	2209      	movs	r2, #9
 800253e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <MX_TIM8_Init+0xfc>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002546:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <MX_TIM8_Init+0xfc>)
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <MX_TIM8_Init+0xfc>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002552:	4828      	ldr	r0, [pc, #160]	; (80025f4 <MX_TIM8_Init+0xfc>)
 8002554:	f004 fcaf 	bl	8006eb6 <HAL_TIM_PWM_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800255e:	f000 fa45 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800256a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800256e:	4619      	mov	r1, r3
 8002570:	4820      	ldr	r0, [pc, #128]	; (80025f4 <MX_TIM8_Init+0xfc>)
 8002572:	f005 fa3f 	bl	80079f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 800257c:	f000 fa36 	bl	80029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002580:	2360      	movs	r3, #96	; 0x60
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	2200      	movs	r2, #0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4813      	ldr	r0, [pc, #76]	; (80025f4 <MX_TIM8_Init+0xfc>)
 80025a6:	f004 fec1 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 80025b0:	f000 fa1c 	bl	80029ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4807      	ldr	r0, [pc, #28]	; (80025f4 <MX_TIM8_Init+0xfc>)
 80025d8:	f005 fa88 	bl	8007aec <HAL_TIMEx_ConfigBreakDeadTime>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80025e2:	f000 fa03 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <MX_TIM8_Init+0xfc>)
 80025e8:	f001 f9c4 	bl	8003974 <HAL_TIM_MspPostInit>

}
 80025ec:	bf00      	nop
 80025ee:	3748      	adds	r7, #72	; 0x48
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000c3b8 	.word	0x2000c3b8
 80025f8:	40010400 	.word	0x40010400

080025fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <MX_TIM9_Init+0x80>)
 8002616:	4a1a      	ldr	r2, [pc, #104]	; (8002680 <MX_TIM9_Init+0x84>)
 8002618:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <MX_TIM9_Init+0x80>)
 800261c:	2253      	movs	r2, #83	; 0x53
 800261e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <MX_TIM9_Init+0x80>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <MX_TIM9_Init+0x80>)
 8002628:	2213      	movs	r2, #19
 800262a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_TIM9_Init+0x80>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <MX_TIM9_Init+0x80>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <MX_TIM9_Init+0x80>)
 800263a:	f004 fc3c 	bl	8006eb6 <HAL_TIM_PWM_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8002644:	f000 f9d2 	bl	80029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002648:	2360      	movs	r3, #96	; 0x60
 800264a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	4619      	mov	r1, r3
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <MX_TIM9_Init+0x80>)
 8002660:	f004 fe64 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 800266a:	f000 f9bf 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800266e:	4803      	ldr	r0, [pc, #12]	; (800267c <MX_TIM9_Init+0x80>)
 8002670:	f001 f980 	bl	8003974 <HAL_TIM_MspPostInit>

}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000c730 	.word	0x2000c730
 8002680:	40014000 	.word	0x40014000

08002684 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_TIM10_Init+0x40>)
 800268a:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <MX_TIM10_Init+0x44>)
 800268c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <MX_TIM10_Init+0x40>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_TIM10_Init+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <MX_TIM10_Init+0x40>)
 800269c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_TIM10_Init+0x40>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_TIM10_Init+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_TIM10_Init+0x40>)
 80026b0:	f004 fbb2 	bl	8006e18 <HAL_TIM_Base_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80026ba:	f000 f997 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000c48c 	.word	0x2000c48c
 80026c8:	40014400 	.word	0x40014400

080026cc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_TIM11_Init+0x40>)
 80026d2:	4a0f      	ldr	r2, [pc, #60]	; (8002710 <MX_TIM11_Init+0x44>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <MX_TIM11_Init+0x40>)
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <MX_TIM11_Init+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <MX_TIM11_Init+0x40>)
 80026e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <MX_TIM11_Init+0x40>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_TIM11_Init+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_TIM11_Init+0x40>)
 80026f8:	f004 fb8e 	bl	8006e18 <HAL_TIM_Base_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002702:	f000 f973 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000c5e8 	.word	0x2000c5e8
 8002710:	40014800 	.word	0x40014800

08002714 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <MX_TIM12_Init+0x80>)
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <MX_TIM12_Init+0x84>)
 8002730:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MX_TIM12_Init+0x80>)
 8002734:	2229      	movs	r2, #41	; 0x29
 8002736:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <MX_TIM12_Init+0x80>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_TIM12_Init+0x80>)
 8002740:	2213      	movs	r2, #19
 8002742:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <MX_TIM12_Init+0x80>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <MX_TIM12_Init+0x80>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002750:	4810      	ldr	r0, [pc, #64]	; (8002794 <MX_TIM12_Init+0x80>)
 8002752:	f004 fbb0 	bl	8006eb6 <HAL_TIM_PWM_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800275c:	f000 f946 	bl	80029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002760:	2360      	movs	r3, #96	; 0x60
 8002762:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	; (8002794 <MX_TIM12_Init+0x80>)
 8002778:	f004 fdd8 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002782:	f000 f933 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002786:	4803      	ldr	r0, [pc, #12]	; (8002794 <MX_TIM12_Init+0x80>)
 8002788:	f001 f8f4 	bl	8003974 <HAL_TIM_MspPostInit>

}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000c808 	.word	0x2000c808
 8002798:	40001800 	.word	0x40001800

0800279c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <MX_USART1_UART_Init+0x50>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART1_UART_Init+0x4c>)
 80027d4:	f005 f9f0 	bl	8007bb8 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027de:	f000 f905 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000c5a8 	.word	0x2000c5a8
 80027ec:	40011000 	.word	0x40011000

080027f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_DMA_Init+0x3c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a0b      	ldr	r2, [pc, #44]	; (800282c <MX_DMA_Init+0x3c>)
 8002800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_DMA_Init+0x3c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	2038      	movs	r0, #56	; 0x38
 8002818:	f002 f8db 	bl	80049d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800281c:	2038      	movs	r0, #56	; 0x38
 800281e:	f002 f8f4 	bl	8004a0a <HAL_NVIC_EnableIRQ>

}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <MX_GPIO_Init+0x174>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a55      	ldr	r2, [pc, #340]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <MX_GPIO_Init+0x174>)
 800286c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a47      	ldr	r2, [pc, #284]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <MX_GPIO_Init+0x174>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <MX_GPIO_Init+0x174>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <MX_GPIO_Init+0x174>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <MX_GPIO_Init+0x174>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <MX_GPIO_Init+0x174>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a39      	ldr	r2, [pc, #228]	; (80029a4 <MX_GPIO_Init+0x174>)
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <MX_GPIO_Init+0x174>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	f242 2118 	movw	r1, #8728	; 0x2218
 80028d8:	4833      	ldr	r0, [pc, #204]	; (80029a8 <MX_GPIO_Init+0x178>)
 80028da:	f002 fdf3 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e4:	4831      	ldr	r0, [pc, #196]	; (80029ac <MX_GPIO_Init+0x17c>)
 80028e6:	f002 fded 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f0:	482f      	ldr	r0, [pc, #188]	; (80029b0 <MX_GPIO_Init+0x180>)
 80028f2:	f002 fde7 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9;
 80028f6:	f242 2318 	movw	r3, #8728	; 0x2218
 80028fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	4826      	ldr	r0, [pc, #152]	; (80029a8 <MX_GPIO_Init+0x178>)
 8002910:	f002 fc26 	bl	8005160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC0 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
 8002914:	f645 4301 	movw	r3, #23553	; 0x5c01
 8002918:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <MX_GPIO_Init+0x178>)
 800292a:	f002 fc19 	bl	8005160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800292e:	f640 4304 	movw	r3, #3076	; 0xc04
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	481a      	ldr	r0, [pc, #104]	; (80029ac <MX_GPIO_Init+0x17c>)
 8002944:	f002 fc0c 	bl	8005160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4812      	ldr	r0, [pc, #72]	; (80029ac <MX_GPIO_Init+0x17c>)
 8002962:	f002 fbfd 	bl	8005160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296c:	2301      	movs	r3, #1
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	480c      	ldr	r0, [pc, #48]	; (80029b0 <MX_GPIO_Init+0x180>)
 8002980:	f002 fbee 	bl	8005160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002984:	2304      	movs	r3, #4
 8002986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	4807      	ldr	r0, [pc, #28]	; (80029b4 <MX_GPIO_Init+0x184>)
 8002998:	f002 fbe2 	bl	8005160 <HAL_GPIO_Init>

}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020c00 	.word	0x40020c00

080029b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	// TIM6
	if (htim->Instance == TIM6)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		PeriodElapsed_005ms();
 80029ca:	f001 fa47 	bl	8003e5c <PeriodElapsed_005ms>
	}
	// TIM7
	if (htim->Instance == TIM7)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		PeriodElapsed_05ms();
 80029d8:	f001 fa46 	bl	8003e68 <PeriodElapsed_05ms>
	}
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40001000 	.word	0x40001000
 80029e8:	40001400 	.word	0x40001400

080029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <Error_Handler+0x6>
 80029f4:	0000      	movs	r0, r0
	...

080029f8 <route_calculation>:
 */

#include "memory.h"

double route_calculation(uint8_t flag)
{
 80029f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029fc:	b08b      	sub	sp, #44	; 0x2c
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
	double median, cal_speed, speed_1, speed_2;
	milage += ((-SR + SL) / 2) * TIM05; // mm
 8002a04:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <route_calculation+0x248>)
 8002a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a0a:	4b8e      	ldr	r3, [pc, #568]	; (8002c44 <route_calculation+0x24c>)
 8002a0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	f7fd fbe4 	bl	80001e0 <__aeabi_dsub>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4621      	mov	r1, r4
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a28:	f7fd febc 	bl	80007a4 <__aeabi_ddiv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	4618      	mov	r0, r3
 8002a32:	4621      	mov	r1, r4
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <route_calculation+0x250>)
 8002a3a:	f7fd fd89 	bl	8000550 <__aeabi_dmul>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	460c      	mov	r4, r1
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	4b81      	ldr	r3, [pc, #516]	; (8002c4c <route_calculation+0x254>)
 8002a48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fbc8 	bl	80001e4 <__adddf3>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <route_calculation+0x254>)
 8002a5a:	e9c2 3400 	strd	r3, r4, [r2]
	cal_speed = (-SR + SL) / 2;
 8002a5e:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <route_calculation+0x248>)
 8002a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a64:	4b77      	ldr	r3, [pc, #476]	; (8002c44 <route_calculation+0x24c>)
 8002a66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	f7fd fbb7 	bl	80001e0 <__aeabi_dsub>
 8002a72:	4603      	mov	r3, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	4618      	mov	r0, r3
 8002a78:	4621      	mov	r1, r4
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a82:	f7fd fe8f 	bl	80007a4 <__aeabi_ddiv>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	gyro = (z_gyro() / 16.4) * M_PI / 180;
 8002a8e:	f7fe fcbf 	bl	8001410 <z_gyro>
 8002a92:	ec51 0b10 	vmov	r0, r1, d0
 8002a96:	a364      	add	r3, pc, #400	; (adr r3, 8002c28 <route_calculation+0x230>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fe82 	bl	80007a4 <__aeabi_ddiv>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	a361      	add	r3, pc, #388	; (adr r3, 8002c30 <route_calculation+0x238>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fd4f 	bl	8000550 <__aeabi_dmul>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <route_calculation+0x258>)
 8002ac0:	f7fd fe70 	bl	80007a4 <__aeabi_ddiv>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4a62      	ldr	r2, [pc, #392]	; (8002c54 <route_calculation+0x25c>)
 8002aca:	e9c2 3400 	strd	r3, r4, [r2]
	scoretime += TIM05;
 8002ace:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <route_calculation+0x260>)
 8002ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <route_calculation+0x250>)
 8002ada:	f7fd fb83 	bl	80001e4 <__adddf3>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <route_calculation+0x260>)
 8002ae4:	e9c2 3400 	strd	r3, r4, [r2]

	switch(flag){
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d01d      	beq.n	8002b2a <route_calculation+0x132>
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	f000 80be 	beq.w	8002c70 <route_calculation+0x278>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 8212 	bne.w	8002f1e <route_calculation+0x526>
	 case 0:
		 milage = data_num = scoretime = 0;
 8002afa:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <route_calculation+0x260>)
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	e9c2 3400 	strd	r3, r4, [r2]
 8002b08:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <route_calculation+0x264>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <route_calculation+0x264>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fcb2 	bl	800047c <__aeabi_i2d>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	4a4b      	ldr	r2, [pc, #300]	; (8002c4c <route_calculation+0x254>)
 8002b1e:	e9c2 3400 	strd	r3, r4, [r2]
		 return MIN_SPEED;
 8002b22:	a445      	add	r4, pc, #276	; (adr r4, 8002c38 <route_calculation+0x240>)
 8002b24:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002b28:	e1fd      	b.n	8002f26 <route_calculation+0x52e>
		 break;
	 case 1:
		 if(milage / 50 >= data_num){
 8002b2a:	4b48      	ldr	r3, [pc, #288]	; (8002c4c <route_calculation+0x254>)
 8002b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <route_calculation+0x268>)
 8002b36:	f7fd fe35 	bl	80007a4 <__aeabi_ddiv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	4698      	mov	r8, r3
 8002b40:	46a1      	mov	r9, r4
 8002b42:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <route_calculation+0x264>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc98 	bl	800047c <__aeabi_i2d>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	461a      	mov	r2, r3
 8002b52:	4623      	mov	r3, r4
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd ff80 	bl	8000a5c <__aeabi_dcmpge>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d05c      	beq.n	8002c1c <route_calculation+0x224>
			 write_data_sector11.Omega[data_num] = gyro * 1000;
 8002b62:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <route_calculation+0x25c>)
 8002b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <route_calculation+0x26c>)
 8002b6e:	f7fd fcef 	bl	8000550 <__aeabi_dmul>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	4619      	mov	r1, r3
 8002b78:	4622      	mov	r2, r4
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <route_calculation+0x264>)
 8002b7c:	681c      	ldr	r4, [r3, #0]
 8002b7e:	4608      	mov	r0, r1
 8002b80:	4611      	mov	r1, r2
 8002b82:	f7fd ff95 	bl	8000ab0 <__aeabi_d2iz>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <route_calculation+0x270>)
 8002b8a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			 write_data_sector11.speed_R[data_num] = -SR * 1000;
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <route_calculation+0x24c>)
 8002b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b94:	461d      	mov	r5, r3
 8002b96:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <route_calculation+0x26c>)
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	f7fd fcd4 	bl	8000550 <__aeabi_dmul>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	4619      	mov	r1, r3
 8002bae:	4622      	mov	r2, r4
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <route_calculation+0x264>)
 8002bb2:	681c      	ldr	r4, [r3, #0]
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	f7fd ffa2 	bl	8000b00 <__aeabi_d2uiz>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <route_calculation+0x270>)
 8002bc0:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
 8002bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 write_data_sector11.speed_R[data_num] = SL * 1000;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <route_calculation+0x248>)
 8002bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <route_calculation+0x26c>)
 8002bd4:	f7fd fcbc 	bl	8000550 <__aeabi_dmul>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4622      	mov	r2, r4
 8002be0:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <route_calculation+0x264>)
 8002be2:	681c      	ldr	r4, [r3, #0]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	f7fd ff8a 	bl	8000b00 <__aeabi_d2uiz>
 8002bec:	4601      	mov	r1, r0
 8002bee:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <route_calculation+0x270>)
 8002bf0:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
 8002bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 write_data_sector10.time[data_num] = scoretime;
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <route_calculation+0x260>)
 8002bfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <route_calculation+0x264>)
 8002c00:	6815      	ldr	r5, [r2, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	4621      	mov	r1, r4
 8002c06:	f7fd ff7b 	bl	8000b00 <__aeabi_d2uiz>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <route_calculation+0x274>)
 8002c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
			 data_num++;
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <route_calculation+0x264>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <route_calculation+0x264>)
 8002c1a:	6013      	str	r3, [r2, #0]
		 }
		 return MIN_SPEED;
 8002c1c:	a406      	add	r4, pc, #24	; (adr r4, 8002c38 <route_calculation+0x240>)
 8002c1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c22:	e180      	b.n	8002f26 <route_calculation+0x52e>
 8002c24:	f3af 8000 	nop.w
 8002c28:	66666666 	.word	0x66666666
 8002c2c:	40306666 	.word	0x40306666
 8002c30:	54442d18 	.word	0x54442d18
 8002c34:	400921fb 	.word	0x400921fb
 8002c38:	cccccccd 	.word	0xcccccccd
 8002c3c:	3ffccccc 	.word	0x3ffccccc
 8002c40:	20009838 	.word	0x20009838
 8002c44:	20009858 	.word	0x20009858
 8002c48:	3fe00000 	.word	0x3fe00000
 8002c4c:	2000ba38 	.word	0x2000ba38
 8002c50:	40668000 	.word	0x40668000
 8002c54:	2000ba20 	.word	0x2000ba20
 8002c58:	2000ba08 	.word	0x2000ba08
 8002c5c:	2000ba30 	.word	0x2000ba30
 8002c60:	40490000 	.word	0x40490000
 8002c64:	408f4000 	.word	0x408f4000
 8002c68:	200001fc 	.word	0x200001fc
 8002c6c:	2000727c 	.word	0x2000727c
		 break;
	 case 2:
		 if(milage >= (double)(section_milage[data_num])) data_num++;
 8002c70:	4bbb      	ldr	r3, [pc, #748]	; (8002f60 <route_calculation+0x568>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4abb      	ldr	r2, [pc, #748]	; (8002f64 <route_calculation+0x56c>)
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fbee 	bl	800045c <__aeabi_ui2d>
 8002c80:	4bb9      	ldr	r3, [pc, #740]	; (8002f68 <route_calculation+0x570>)
 8002c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4623      	mov	r3, r4
 8002c8a:	f7fd fedd 	bl	8000a48 <__aeabi_dcmple>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <route_calculation+0x2a6>
 8002c94:	4bb2      	ldr	r3, [pc, #712]	; (8002f60 <route_calculation+0x568>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	4ab1      	ldr	r2, [pc, #708]	; (8002f60 <route_calculation+0x568>)
 8002c9c:	6013      	str	r3, [r2, #0]
		 // to curve
		 if(section_curvature[data_num] < section_curvature[data_num+1]){
 8002c9e:	4bb0      	ldr	r3, [pc, #704]	; (8002f60 <route_calculation+0x568>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4ab2      	ldr	r2, [pc, #712]	; (8002f6c <route_calculation+0x574>)
 8002ca4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ca8:	4bad      	ldr	r3, [pc, #692]	; (8002f60 <route_calculation+0x568>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	49af      	ldr	r1, [pc, #700]	; (8002f6c <route_calculation+0x574>)
 8002cb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	f080 80d5 	bcs.w	8002e64 <route_calculation+0x46c>
			 speed_1 = Max_Speed + (double)read_curvature[data_num] * ((MIN_SPEED - Max_Speed) / 10);
 8002cba:	4ba9      	ldr	r3, [pc, #676]	; (8002f60 <route_calculation+0x568>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4aac      	ldr	r2, [pc, #688]	; (8002f70 <route_calculation+0x578>)
 8002cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fbc9 	bl	800045c <__aeabi_ui2d>
 8002cca:	4605      	mov	r5, r0
 8002ccc:	460e      	mov	r6, r1
 8002cce:	4ba9      	ldr	r3, [pc, #676]	; (8002f74 <route_calculation+0x57c>)
 8002cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	a199      	add	r1, pc, #612	; (adr r1, 8002f40 <route_calculation+0x548>)
 8002cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cde:	f7fd fa7f 	bl	80001e0 <__aeabi_dsub>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4621      	mov	r1, r4
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	4ba2      	ldr	r3, [pc, #648]	; (8002f78 <route_calculation+0x580>)
 8002cf0:	f7fd fd58 	bl	80007a4 <__aeabi_ddiv>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	4631      	mov	r1, r6
 8002d00:	f7fd fc26 	bl	8000550 <__aeabi_dmul>
 8002d04:	4603      	mov	r3, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <route_calculation+0x57c>)
 8002d0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4623      	mov	r3, r4
 8002d16:	f7fd fa65 	bl	80001e4 <__adddf3>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	e9c7 3406 	strd	r3, r4, [r7, #24]
			 speed_2 = Max_Speed + (double)read_curvature[data_num+1] * ((MIN_SPEED - Max_Speed) / 10);
 8002d22:	4b8f      	ldr	r3, [pc, #572]	; (8002f60 <route_calculation+0x568>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a91      	ldr	r2, [pc, #580]	; (8002f70 <route_calculation+0x578>)
 8002d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fb94 	bl	800045c <__aeabi_ui2d>
 8002d34:	4605      	mov	r5, r0
 8002d36:	460e      	mov	r6, r1
 8002d38:	4b8e      	ldr	r3, [pc, #568]	; (8002f74 <route_calculation+0x57c>)
 8002d3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4623      	mov	r3, r4
 8002d42:	a17f      	add	r1, pc, #508	; (adr r1, 8002f40 <route_calculation+0x548>)
 8002d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d48:	f7fd fa4a 	bl	80001e0 <__aeabi_dsub>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	460c      	mov	r4, r1
 8002d50:	4618      	mov	r0, r3
 8002d52:	4621      	mov	r1, r4
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b87      	ldr	r3, [pc, #540]	; (8002f78 <route_calculation+0x580>)
 8002d5a:	f7fd fd23 	bl	80007a4 <__aeabi_ddiv>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	460c      	mov	r4, r1
 8002d62:	461a      	mov	r2, r3
 8002d64:	4623      	mov	r3, r4
 8002d66:	4628      	mov	r0, r5
 8002d68:	4631      	mov	r1, r6
 8002d6a:	f7fd fbf1 	bl	8000550 <__aeabi_dmul>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	460c      	mov	r4, r1
 8002d72:	4618      	mov	r0, r3
 8002d74:	4621      	mov	r1, r4
 8002d76:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <route_calculation+0x57c>)
 8002d78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4623      	mov	r3, r4
 8002d80:	f7fd fa30 	bl	80001e4 <__adddf3>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	e9c7 3404 	strd	r3, r4, [r7, #16]
			 median = (pow(speed_1, 2) - pow(speed_2, 2)) / (2 * ACC);
 8002d8c:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8002f48 <route_calculation+0x550>
 8002d90:	ed97 0b06 	vldr	d0, [r7, #24]
 8002d94:	f007 faa4 	bl	800a2e0 <pow>
 8002d98:	ec55 4b10 	vmov	r4, r5, d0
 8002d9c:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8002f48 <route_calculation+0x550>
 8002da0:	ed97 0b04 	vldr	d0, [r7, #16]
 8002da4:	f007 fa9c 	bl	800a2e0 <pow>
 8002da8:	ec53 2b10 	vmov	r2, r3, d0
 8002dac:	4620      	mov	r0, r4
 8002dae:	4629      	mov	r1, r5
 8002db0:	f7fd fa16 	bl	80001e0 <__aeabi_dsub>
 8002db4:	4603      	mov	r3, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	4618      	mov	r0, r3
 8002dba:	4621      	mov	r1, r4
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <route_calculation+0x584>)
 8002dc2:	f7fd fcef 	bl	80007a4 <__aeabi_ddiv>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	e9c7 3402 	strd	r3, r4, [r7, #8]
			 if(milage < median){
 8002dce:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <route_calculation+0x570>)
 8002dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ddc:	f7fd fe48 	bl	8000a70 <__aeabi_dcmpgt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d019      	beq.n	8002e1a <route_calculation+0x422>
				 cal_speed += ACC * (TIM05/1000);
 8002de6:	a35a      	add	r3, pc, #360	; (adr r3, 8002f50 <route_calculation+0x558>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002df0:	f7fd f9f8 	bl	80001e4 <__adddf3>
 8002df4:	4603      	mov	r3, r0
 8002df6:	460c      	mov	r4, r1
 8002df8:	e9c7 3408 	strd	r3, r4, [r7, #32]
				 if(cal_speed >= speed_1) cal_speed = speed_1;
 8002dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e04:	f7fd fe2a 	bl	8000a5c <__aeabi_dcmpge>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8084 	beq.w	8002f18 <route_calculation+0x520>
 8002e10:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002e14:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002e18:	e07e      	b.n	8002f18 <route_calculation+0x520>
			 }
			 else if(milage >= median){
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <route_calculation+0x570>)
 8002e1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e20:	461a      	mov	r2, r3
 8002e22:	4623      	mov	r3, r4
 8002e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e28:	f7fd fe0e 	bl	8000a48 <__aeabi_dcmple>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d072      	beq.n	8002f18 <route_calculation+0x520>
				 cal_speed -= ACC + (TIM05/1000);
 8002e32:	a349      	add	r3, pc, #292	; (adr r3, 8002f58 <route_calculation+0x560>)
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e3c:	f7fd f9d0 	bl	80001e0 <__aeabi_dsub>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	e9c7 3408 	strd	r3, r4, [r7, #32]
				 if(cal_speed <= speed_2) cal_speed = speed_2;
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e50:	f7fd fdfa 	bl	8000a48 <__aeabi_dcmple>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d05e      	beq.n	8002f18 <route_calculation+0x520>
 8002e5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e5e:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002e62:	e059      	b.n	8002f18 <route_calculation+0x520>
			 }
		 }
		 // to straight
		 else if(section_curvature[data_num] >= section_curvature[data_num+1]){
 8002e64:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <route_calculation+0x568>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a40      	ldr	r2, [pc, #256]	; (8002f6c <route_calculation+0x574>)
 8002e6a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <route_calculation+0x568>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	493d      	ldr	r1, [pc, #244]	; (8002f6c <route_calculation+0x574>)
 8002e76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d34c      	bcc.n	8002f18 <route_calculation+0x520>
			 speed_1 = Max_Speed + (double)read_curvature[data_num] * ((MIN_SPEED - Max_Speed) / 10);
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <route_calculation+0x568>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <route_calculation+0x578>)
 8002e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fae7 	bl	800045c <__aeabi_ui2d>
 8002e8e:	4605      	mov	r5, r0
 8002e90:	460e      	mov	r6, r1
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <route_calculation+0x57c>)
 8002e94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	a128      	add	r1, pc, #160	; (adr r1, 8002f40 <route_calculation+0x548>)
 8002e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ea2:	f7fd f99d 	bl	80001e0 <__aeabi_dsub>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	4621      	mov	r1, r4
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <route_calculation+0x580>)
 8002eb4:	f7fd fc76 	bl	80007a4 <__aeabi_ddiv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	f7fd fb44 	bl	8000550 <__aeabi_dmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4621      	mov	r1, r4
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <route_calculation+0x57c>)
 8002ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4623      	mov	r3, r4
 8002eda:	f7fd f983 	bl	80001e4 <__adddf3>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	e9c7 3406 	strd	r3, r4, [r7, #24]
			 if(cal_speed > speed_1) cal_speed -= ACC + (TIM05/1000);
 8002ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eee:	f7fd fdbf 	bl	8000a70 <__aeabi_dcmpgt>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <route_calculation+0x518>
 8002ef8:	a317      	add	r3, pc, #92	; (adr r3, 8002f58 <route_calculation+0x560>)
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f02:	f7fd f96d 	bl	80001e0 <__aeabi_dsub>
 8002f06:	4603      	mov	r3, r0
 8002f08:	460c      	mov	r4, r1
 8002f0a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002f0e:	e003      	b.n	8002f18 <route_calculation+0x520>
			 else cal_speed = speed_1;
 8002f10:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002f14:	e9c7 3408 	strd	r3, r4, [r7, #32]
		 }
		 return cal_speed;
 8002f18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f1c:	e003      	b.n	8002f26 <route_calculation+0x52e>
		 break;
	 default:
		 return 0;
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	ec44 3b17 	vmov	d7, r3, r4
		 break;
	}
}
 8002f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f2e:	eef0 0a67 	vmov.f32	s1, s15
 8002f32:	372c      	adds	r7, #44	; 0x2c
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f3a:	bf00      	nop
 8002f3c:	f3af 8000 	nop.w
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	3ffccccc 	.word	0x3ffccccc
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	40000000 	.word	0x40000000
 8002f50:	bc6a7efa 	.word	0xbc6a7efa
 8002f54:	3f689374 	.word	0x3f689374
 8002f58:	126e978d 	.word	0x126e978d
 8002f5c:	40180083 	.word	0x40180083
 8002f60:	2000ba30 	.word	0x2000ba30
 8002f64:	2000b0a8 	.word	0x2000b0a8
 8002f68:	2000ba38 	.word	0x2000ba38
 8002f6c:	2000abf8 	.word	0x2000abf8
 8002f70:	2000ba40 	.word	0x2000ba40
 8002f74:	20009830 	.word	0x20009830
 8002f78:	40240000 	.word	0x40240000
 8002f7c:	40280000 	.word	0x40280000

08002f80 <loadFlash>:
	HAL_FLASH_Lock();
}

// load Data from Flash
void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address, size);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	68b8      	ldr	r0, [r7, #8]
 8002f94:	f005 fc44 	bl	8008820 <memcpy>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <MotorStart>:
#include "macro.h"

#include <math.h>

void MotorStart()
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <MotorStart+0x38>)
 8002fa8:	f003 ffb0 	bl	8006f0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002fac:	2100      	movs	r1, #0
 8002fae:	480b      	ldr	r0, [pc, #44]	; (8002fdc <MotorStart+0x3c>)
 8002fb0:	f003 ffac 	bl	8006f0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	480a      	ldr	r0, [pc, #40]	; (8002fe0 <MotorStart+0x40>)
 8002fb8:	f003 ffa8 	bl	8006f0c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002fbc:	213c      	movs	r1, #60	; 0x3c
 8002fbe:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <MotorStart+0x44>)
 8002fc0:	f004 f874 	bl	80070ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002fc4:	213c      	movs	r1, #60	; 0x3c
 8002fc6:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <MotorStart+0x48>)
 8002fc8:	f004 f870 	bl	80070ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8002fcc:	213c      	movs	r1, #60	; 0x3c
 8002fce:	4807      	ldr	r0, [pc, #28]	; (8002fec <MotorStart+0x4c>)
 8002fd0:	f004 f86c 	bl	80070ac <HAL_TIM_Encoder_Start>
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	2000c6ec 	.word	0x2000c6ec
 8002fdc:	2000c3b8 	.word	0x2000c3b8
 8002fe0:	2000c4d8 	.word	0x2000c4d8
 8002fe4:	2000c7c8 	.word	0x2000c7c8
 8002fe8:	2000c518 	.word	0x2000c518
 8002fec:	2000c3f8 	.word	0x2000c3f8

08002ff0 <motor_R>:

void motor_R( double duty )
{
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800300a:	f7fd fd13 	bl	8000a34 <__aeabi_dcmplt>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <motor_R+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003014:	2201      	movs	r2, #1
 8003016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800301a:	4816      	ldr	r0, [pc, #88]	; (8003074 <motor_R+0x84>)
 800301c:	f002 fa52 	bl	80054c4 <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 8003020:	683c      	ldr	r4, [r7, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd fd40 	bl	8000ab0 <__aeabi_d2iz>
 8003030:	4603      	mov	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e016      	b.n	8003064 <motor_R+0x74>
	}
	else if( duty >= 0 ){
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003042:	f7fd fd0b 	bl	8000a5c <__aeabi_dcmpge>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <motor_R+0x74>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003052:	4808      	ldr	r0, [pc, #32]	; (8003074 <motor_R+0x84>)
 8003054:	f002 fa36 	bl	80054c4 <HAL_GPIO_WritePin>
		countorperiod = duty;
 8003058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800305c:	f7fd fd28 	bl	8000ab0 <__aeabi_d2iz>
 8003060:	4603      	mov	r3, r0
 8003062:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, countorperiod);
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <motor_R+0x88>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bdb0      	pop	{r4, r5, r7, pc}
 8003074:	40020800 	.word	0x40020800
 8003078:	2000c6ec 	.word	0x2000c6ec

0800307c <motor_L>:

void motor_L( double duty )
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003096:	f7fd fccd 	bl	8000a34 <__aeabi_dcmplt>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d010      	beq.n	80030c2 <motor_L+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
 80030a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a6:	4816      	ldr	r0, [pc, #88]	; (8003100 <motor_L+0x84>)
 80030a8:	f002 fa0c 	bl	80054c4 <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 80030ac:	683c      	ldr	r4, [r7, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80030b4:	4620      	mov	r0, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	f7fd fcfa 	bl	8000ab0 <__aeabi_d2iz>
 80030bc:	4603      	mov	r3, r0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e016      	b.n	80030f0 <motor_L+0x74>
	}
	else if( duty >= 0 ){
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030ce:	f7fd fcc5 	bl	8000a5c <__aeabi_dcmpge>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <motor_L+0x74>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030de:	4808      	ldr	r0, [pc, #32]	; (8003100 <motor_L+0x84>)
 80030e0:	f002 f9f0 	bl	80054c4 <HAL_GPIO_WritePin>
		countorperiod = duty;
 80030e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e8:	f7fd fce2 	bl	8000ab0 <__aeabi_d2iz>
 80030ec:	4603      	mov	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, countorperiod);
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <motor_L+0x88>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003100:	40020400 	.word	0x40020400
 8003104:	2000c3b8 	.word	0x2000c3b8

08003108 <motor_S>:

void motor_S( double duty )
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003122:	f7fd fc87 	bl	8000a34 <__aeabi_dcmplt>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00f      	beq.n	800314c <motor_S+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	2108      	movs	r1, #8
 8003130:	4815      	ldr	r0, [pc, #84]	; (8003188 <motor_S+0x80>)
 8003132:	f002 f9c7 	bl	80054c4 <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 8003136:	683c      	ldr	r4, [r7, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd fcb5 	bl	8000ab0 <__aeabi_d2iz>
 8003146:	4603      	mov	r3, r0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e015      	b.n	8003178 <motor_S+0x70>
	}
	else if( duty >= 0 ){
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003158:	f7fd fc80 	bl	8000a5c <__aeabi_dcmpge>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <motor_S+0x70>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	2108      	movs	r1, #8
 8003166:	4808      	ldr	r0, [pc, #32]	; (8003188 <motor_S+0x80>)
 8003168:	f002 f9ac 	bl	80054c4 <HAL_GPIO_WritePin>
		countorperiod = duty;
 800316c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003170:	f7fd fc9e 	bl	8000ab0 <__aeabi_d2iz>
 8003174:	4603      	mov	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, countorperiod);
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <motor_S+0x84>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bdb0      	pop	{r4, r5, r7, pc}
 8003188:	40020800 	.word	0x40020800
 800318c:	2000c4d8 	.word	0x2000c4d8

08003190 <Speed_R>:


// v = r * 2pi * (3/40960) * (dC/dt)
// m/s
double Speed_R()
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
	int Encoder = (TIM2 -> CNT) - 212483647;
 8003196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800319a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <Speed_R+0x68>)
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
	TIM2 -> CNT = 212483647;
 80031a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a6:	4a15      	ldr	r2, [pc, #84]	; (80031fc <Speed_R+0x6c>)
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7fd f966 	bl	800047c <__aeabi_i2d>
 80031b0:	a30f      	add	r3, pc, #60	; (adr r3, 80031f0 <Speed_R+0x60>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fd f9cb 	bl	8000550 <__aeabi_dmul>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	4618      	mov	r0, r3
 80031c0:	4621      	mov	r1, r4
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <Speed_R+0x70>)
 80031c8:	f7fd faec 	bl	80007a4 <__aeabi_ddiv>
 80031cc:	4603      	mov	r3, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 80031d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031d8:	ec44 3b17 	vmov	d7, r3, r4
}
 80031dc:	eeb0 0a47 	vmov.f32	s0, s14
 80031e0:	eef0 0a67 	vmov.f32	s1, s15
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	f3af 8000 	nop.w
 80031f0:	ef4cbd98 	.word	0xef4cbd98
 80031f4:	40707e4c 	.word	0x40707e4c
 80031f8:	f355c1c1 	.word	0xf355c1c1
 80031fc:	0caa3e3f 	.word	0x0caa3e3f
 8003200:	40d40000 	.word	0x40d40000
 8003204:	00000000 	.word	0x00000000

08003208 <Speed_L>:

double Speed_L()
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
	int Encoder = (TIM3 -> CNT) - 32767;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <Speed_L+0x68>)
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8003216:	3b7f      	subs	r3, #127	; 0x7f
 8003218:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32767;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <Speed_L+0x68>)
 800321c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7fd f92a 	bl	800047c <__aeabi_i2d>
 8003228:	a30f      	add	r3, pc, #60	; (adr r3, 8003268 <Speed_L+0x60>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fd f98f 	bl	8000550 <__aeabi_dmul>
 8003232:	4603      	mov	r3, r0
 8003234:	460c      	mov	r4, r1
 8003236:	4618      	mov	r0, r3
 8003238:	4621      	mov	r1, r4
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <Speed_L+0x6c>)
 8003240:	f7fd fab0 	bl	80007a4 <__aeabi_ddiv>
 8003244:	4603      	mov	r3, r0
 8003246:	460c      	mov	r4, r1
 8003248:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 800324c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003250:	ec44 3b17 	vmov	d7, r3, r4
}
 8003254:	eeb0 0a47 	vmov.f32	s0, s14
 8003258:	eef0 0a67 	vmov.f32	s1, s15
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	bf00      	nop
 8003264:	f3af 8000 	nop.w
 8003268:	ef4cbd98 	.word	0xef4cbd98
 800326c:	40707e4c 	.word	0x40707e4c
 8003270:	40000400 	.word	0x40000400
 8003274:	40d40000 	.word	0x40d40000

08003278 <Degree_S>:

double Degree_S()
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
	int initial_degree_value = 32767;
 800327e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8003282:	60fb      	str	r3, [r7, #12]
	//int Encoder = (TIM4 -> CNT) - initial_degree_value;
	int Encoder = TIM4 -> CNT;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <Degree_S+0x54>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	60bb      	str	r3, [r7, #8]
	double degree = 360 * (Encoder / 65535);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <Degree_S+0x58>)
 800328e:	fb82 1203 	smull	r1, r2, r2, r3
 8003292:	441a      	add	r2, r3
 8003294:	13d2      	asrs	r2, r2, #15
 8003296:	17db      	asrs	r3, r3, #31
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f8ea 	bl	800047c <__aeabi_i2d>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	e9c7 3400 	strd	r3, r4, [r7]
	//return degree;
	return (double)Encoder;
 80032b0:	68b8      	ldr	r0, [r7, #8]
 80032b2:	f7fd f8e3 	bl	800047c <__aeabi_i2d>
 80032b6:	4603      	mov	r3, r0
 80032b8:	460c      	mov	r4, r1
 80032ba:	ec44 3b17 	vmov	d7, r3, r4
}
 80032be:	eeb0 0a47 	vmov.f32	s0, s14
 80032c2:	eef0 0a67 	vmov.f32	s1, s15
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	40000800 	.word	0x40000800
 80032d0:	80008001 	.word	0x80008001

080032d4 <stop_init>:
 */

#include "side_sensor.h"

void stop_init()
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
	side_r_time = side_l_time = 0;
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <stop_init+0x38>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <stop_init+0x38>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <stop_init+0x3c>)
 80032e4:	6013      	str	r3, [r2, #0]
	side_r_flag = side_l_flag = 0;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <stop_init+0x40>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <stop_init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a09      	ldr	r2, [pc, #36]	; (8003318 <stop_init+0x44>)
 80032f2:	6013      	str	r3, [r2, #0]
	side_r_count = 0;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <stop_init+0x48>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
	Crossing_Flag = 0;
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <stop_init+0x4c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	2000c72c 	.word	0x2000c72c
 8003310:	2000c888 	.word	0x2000c888
 8003314:	2000c4d0 	.word	0x2000c4d0
 8003318:	2000c5a4 	.word	0x2000c5a4
 800331c:	2000c6a8 	.word	0x2000c6a8
 8003320:	20009818 	.word	0x20009818

08003324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_MspInit+0x4c>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <HAL_MspInit+0x4c>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	6453      	str	r3, [r2, #68]	; 0x44
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_MspInit+0x4c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_MspInit+0x4c>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a49      	ldr	r2, [pc, #292]	; (80034b8 <HAL_ADC_MspInit+0x144>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f040 808c 	bne.w	80034b0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_ADC_MspInit+0x148>)
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	4a46      	ldr	r2, [pc, #280]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6453      	str	r3, [r2, #68]	; 0x44
 80033a8:	4b44      	ldr	r3, [pc, #272]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4a3f      	ldr	r2, [pc, #252]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6313      	str	r3, [r2, #48]	; 0x30
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	4a38      	ldr	r2, [pc, #224]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6313      	str	r3, [r2, #48]	; 0x30
 80033e0:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	4b32      	ldr	r3, [pc, #200]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a31      	ldr	r2, [pc, #196]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <HAL_ADC_MspInit+0x148>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8003408:	2326      	movs	r3, #38	; 0x26
 800340a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800340c:	2303      	movs	r3, #3
 800340e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	4619      	mov	r1, r3
 800341a:	4829      	ldr	r0, [pc, #164]	; (80034c0 <HAL_ADC_MspInit+0x14c>)
 800341c:	f001 fea0 	bl	8005160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003420:	2318      	movs	r3, #24
 8003422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003424:	2303      	movs	r3, #3
 8003426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	4619      	mov	r1, r3
 8003432:	4824      	ldr	r0, [pc, #144]	; (80034c4 <HAL_ADC_MspInit+0x150>)
 8003434:	f001 fe94 	bl	8005160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003438:	2303      	movs	r3, #3
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343c:	2303      	movs	r3, #3
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 031c 	add.w	r3, r7, #28
 8003448:	4619      	mov	r1, r3
 800344a:	481f      	ldr	r0, [pc, #124]	; (80034c8 <HAL_ADC_MspInit+0x154>)
 800344c:	f001 fe88 	bl	8005160 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003452:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_ADC_MspInit+0x15c>)
 8003454:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003458:	2200      	movs	r2, #0
 800345a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_ADC_MspInit+0x158>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_ADC_MspInit+0x158>)
 800346a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800346e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003476:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <HAL_ADC_MspInit+0x158>)
 800347a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800347e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003486:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_ADC_MspInit+0x158>)
 800348a:	2200      	movs	r2, #0
 800348c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003490:	2200      	movs	r2, #0
 8003492:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003494:	480d      	ldr	r0, [pc, #52]	; (80034cc <HAL_ADC_MspInit+0x158>)
 8003496:	f001 fad3 	bl	8004a40 <HAL_DMA_Init>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80034a0:	f7ff faa4 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_ADC_MspInit+0x158>)
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_ADC_MspInit+0x158>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034b0:	bf00      	nop
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40012000 	.word	0x40012000
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40020800 	.word	0x40020800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	2000c628 	.word	0x2000c628
 80034d0:	40026410 	.word	0x40026410

080034d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <HAL_I2C_MspInit+0x84>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d12c      	bne.n	8003550 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <HAL_I2C_MspInit+0x88>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <HAL_I2C_MspInit+0x88>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_I2C_MspInit+0x88>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003512:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003518:	2312      	movs	r3, #18
 800351a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800351c:	2301      	movs	r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003520:	2303      	movs	r3, #3
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003524:	2304      	movs	r3, #4
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	480c      	ldr	r0, [pc, #48]	; (8003560 <HAL_I2C_MspInit+0x8c>)
 8003530:	f001 fe16 	bl	8005160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_I2C_MspInit+0x88>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	4a07      	ldr	r2, [pc, #28]	; (800355c <HAL_I2C_MspInit+0x88>)
 800353e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003542:	6413      	str	r3, [r2, #64]	; 0x40
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_I2C_MspInit+0x88>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40005400 	.word	0x40005400
 800355c:	40023800 	.word	0x40023800
 8003560:	40020400 	.word	0x40020400

08003564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_RTC_MspInit+0x24>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d102      	bne.n	800357c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RTC_MspInit+0x28>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	40002800 	.word	0x40002800
 800358c:	42470e3c 	.word	0x42470e3c

08003590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_SPI_MspInit+0x84>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d12b      	bne.n	800360a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_SPI_MspInit+0x88>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_SPI_MspInit+0x88>)
 80035bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_SPI_MspInit+0x88>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_SPI_MspInit+0x88>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_SPI_MspInit+0x88>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6313      	str	r3, [r2, #48]	; 0x30
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_SPI_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035ea:	23e0      	movs	r3, #224	; 0xe0
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035fa:	2305      	movs	r3, #5
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4805      	ldr	r0, [pc, #20]	; (800361c <HAL_SPI_MspInit+0x8c>)
 8003606:	f001 fdab 	bl	8005160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40013000 	.word	0x40013000
 8003618:	40023800 	.word	0x40023800
 800361c:	40020000 	.word	0x40020000

08003620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <HAL_TIM_PWM_MspInit+0xf8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d116      	bne.n	8003660 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a38      	ldr	r2, [pc, #224]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	2018      	movs	r0, #24
 8003654:	f001 f9bd 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003658:	2018      	movs	r0, #24
 800365a:	f001 f9d6 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800365e:	e056      	b.n	800370e <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM5)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2e      	ldr	r2, [pc, #184]	; (8003720 <HAL_TIM_PWM_MspInit+0x100>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a2a      	ldr	r2, [pc, #168]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	69bb      	ldr	r3, [r7, #24]
}
 8003686:	e042      	b.n	800370e <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <HAL_TIM_PWM_MspInit+0x104>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4b21      	ldr	r3, [pc, #132]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a20      	ldr	r2, [pc, #128]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
}
 80036ae:	e02e      	b.n	800370e <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM9)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_TIM_PWM_MspInit+0x108>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d116      	bne.n	80036e8 <HAL_TIM_PWM_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a16      	ldr	r2, [pc, #88]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2100      	movs	r1, #0
 80036da:	2018      	movs	r0, #24
 80036dc:	f001 f979 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80036e0:	2018      	movs	r0, #24
 80036e2:	f001 f992 	bl	8004a0a <HAL_NVIC_EnableIRQ>
}
 80036e6:	e012      	b.n	800370e <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM12)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0f      	ldr	r2, [pc, #60]	; (800372c <HAL_TIM_PWM_MspInit+0x10c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10d      	bne.n	800370e <HAL_TIM_PWM_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a08      	ldr	r2, [pc, #32]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 80036fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_TIM_PWM_MspInit+0xfc>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40010000 	.word	0x40010000
 800371c:	40023800 	.word	0x40023800
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40010400 	.word	0x40010400
 8003728:	40014000 	.word	0x40014000
 800372c:	40001800 	.word	0x40001800

08003730 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08e      	sub	sp, #56	; 0x38
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d12d      	bne.n	80037ae <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	4b49      	ldr	r3, [pc, #292]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a48      	ldr	r2, [pc, #288]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b46      	ldr	r3, [pc, #280]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800378a:	f248 0302 	movw	r3, #32770	; 0x8002
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800379c:	2301      	movs	r3, #1
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	4836      	ldr	r0, [pc, #216]	; (8003880 <HAL_TIM_Encoder_MspInit+0x150>)
 80037a8:	f001 fcda 	bl	8005160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037ac:	e062      	b.n	8003874 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM3)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a34      	ldr	r2, [pc, #208]	; (8003884 <HAL_TIM_Encoder_MspInit+0x154>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d12c      	bne.n	8003812 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	4a2e      	ldr	r2, [pc, #184]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	6413      	str	r3, [r2, #64]	; 0x40
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	6313      	str	r3, [r2, #48]	; 0x30
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037f0:	2330      	movs	r3, #48	; 0x30
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003800:	2302      	movs	r3, #2
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003808:	4619      	mov	r1, r3
 800380a:	481f      	ldr	r0, [pc, #124]	; (8003888 <HAL_TIM_Encoder_MspInit+0x158>)
 800380c:	f001 fca8 	bl	8005160 <HAL_GPIO_Init>
}
 8003810:	e030      	b.n	8003874 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_TIM_Encoder_MspInit+0x15c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d12b      	bne.n	8003874 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4a0e      	ldr	r2, [pc, #56]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	6313      	str	r3, [r2, #48]	; 0x30
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_TIM_Encoder_MspInit+0x14c>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003854:	23c0      	movs	r3, #192	; 0xc0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003860:	2300      	movs	r3, #0
 8003862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003864:	2302      	movs	r3, #2
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386c:	4619      	mov	r1, r3
 800386e:	4806      	ldr	r0, [pc, #24]	; (8003888 <HAL_TIM_Encoder_MspInit+0x158>)
 8003870:	f001 fc76 	bl	8005160 <HAL_GPIO_Init>
}
 8003874:	bf00      	nop
 8003876:	3738      	adds	r7, #56	; 0x38
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40023800 	.word	0x40023800
 8003880:	40020000 	.word	0x40020000
 8003884:	40000400 	.word	0x40000400
 8003888:	40020400 	.word	0x40020400
 800388c:	40000800 	.word	0x40000800

08003890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_TIM_Base_MspInit+0xd0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d116      	bne.n	80038d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 80038ac:	f043 0310 	orr.w	r3, r3, #16
 80038b0:	6413      	str	r3, [r2, #64]	; 0x40
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	2036      	movs	r0, #54	; 0x36
 80038c4:	f001 f885 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038c8:	2036      	movs	r0, #54	; 0x36
 80038ca:	f001 f89e 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80038ce:	e042      	b.n	8003956 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <HAL_TIM_Base_MspInit+0xd8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d116      	bne.n	8003908 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a20      	ldr	r2, [pc, #128]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2100      	movs	r1, #0
 80038fa:	2037      	movs	r0, #55	; 0x37
 80038fc:	f001 f869 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003900:	2037      	movs	r0, #55	; 0x37
 8003902:	f001 f882 	bl	8004a0a <HAL_NVIC_EnableIRQ>
}
 8003906:	e026      	b.n	8003956 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_TIM_Base_MspInit+0xdc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 800391c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003920:	6453      	str	r3, [r2, #68]	; 0x44
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	e012      	b.n	8003956 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <HAL_TIM_Base_MspInit+0xe0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10d      	bne.n	8003956 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003948:	6453      	str	r3, [r2, #68]	; 0x44
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_TIM_Base_MspInit+0xd4>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40001000 	.word	0x40001000
 8003964:	40023800 	.word	0x40023800
 8003968:	40001400 	.word	0x40001400
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800

08003974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	; 0x30
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 031c 	add.w	r3, r7, #28
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5b      	ldr	r2, [pc, #364]	; (8003b00 <HAL_TIM_MspPostInit+0x18c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d11f      	bne.n	80039d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a59      	ldr	r2, [pc, #356]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039c4:	2301      	movs	r3, #1
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	4619      	mov	r1, r3
 80039ce:	484e      	ldr	r0, [pc, #312]	; (8003b08 <HAL_TIM_MspPostInit+0x194>)
 80039d0:	f001 fbc6 	bl	8005160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80039d4:	e08f      	b.n	8003af6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a4c      	ldr	r2, [pc, #304]	; (8003b0c <HAL_TIM_MspPostInit+0x198>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d11e      	bne.n	8003a1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4a46      	ldr	r2, [pc, #280]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6313      	str	r3, [r2, #48]	; 0x30
 80039f0:	4b44      	ldr	r3, [pc, #272]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039fc:	2301      	movs	r3, #1
 80039fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4619      	mov	r1, r3
 8003a16:	483c      	ldr	r0, [pc, #240]	; (8003b08 <HAL_TIM_MspPostInit+0x194>)
 8003a18:	f001 fba2 	bl	8005160 <HAL_GPIO_Init>
}
 8003a1c:	e06b      	b.n	8003af6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3b      	ldr	r2, [pc, #236]	; (8003b10 <HAL_TIM_MspPostInit+0x19c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d11e      	bne.n	8003a66 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6313      	str	r3, [r2, #48]	; 0x30
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a54:	2303      	movs	r3, #3
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a58:	f107 031c 	add.w	r3, r7, #28
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	482d      	ldr	r0, [pc, #180]	; (8003b14 <HAL_TIM_MspPostInit+0x1a0>)
 8003a60:	f001 fb7e 	bl	8005160 <HAL_GPIO_Init>
}
 8003a64:	e047      	b.n	8003af6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM9)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	; (8003b18 <HAL_TIM_MspPostInit+0x1a4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d11e      	bne.n	8003aae <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a90:	2302      	movs	r3, #2
 8003a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4818      	ldr	r0, [pc, #96]	; (8003b08 <HAL_TIM_MspPostInit+0x194>)
 8003aa8:	f001 fb5a 	bl	8005160 <HAL_GPIO_Init>
}
 8003aac:	e023      	b.n	8003af6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <HAL_TIM_MspPostInit+0x1a8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d11e      	bne.n	8003af6 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003ac2:	f043 0302 	orr.w	r3, r3, #2
 8003ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <HAL_TIM_MspPostInit+0x190>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ada:	2302      	movs	r3, #2
 8003adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003ae6:	2309      	movs	r3, #9
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aea:	f107 031c 	add.w	r3, r7, #28
 8003aee:	4619      	mov	r1, r3
 8003af0:	480b      	ldr	r0, [pc, #44]	; (8003b20 <HAL_TIM_MspPostInit+0x1ac>)
 8003af2:	f001 fb35 	bl	8005160 <HAL_GPIO_Init>
}
 8003af6:	bf00      	nop
 8003af8:	3730      	adds	r7, #48	; 0x30
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40010400 	.word	0x40010400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40001800 	.word	0x40001800
 8003b20:	40020400 	.word	0x40020400

08003b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_UART_MspInit+0x94>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d134      	bne.n	8003bb0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_UART_MspInit+0x98>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <HAL_UART_MspInit+0x98>)
 8003b50:	f043 0310 	orr.w	r3, r3, #16
 8003b54:	6453      	str	r3, [r2, #68]	; 0x44
 8003b56:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_UART_MspInit+0x98>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_UART_MspInit+0x98>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <HAL_UART_MspInit+0x98>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_UART_MspInit+0x98>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b90:	2307      	movs	r3, #7
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4809      	ldr	r0, [pc, #36]	; (8003bc0 <HAL_UART_MspInit+0x9c>)
 8003b9c:	f001 fae0 	bl	8005160 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	2025      	movs	r0, #37	; 0x25
 8003ba6:	f000 ff14 	bl	80049d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003baa:	2025      	movs	r0, #37	; 0x25
 8003bac:	f000 ff2d 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bb0:	bf00      	nop
 8003bb2:	3728      	adds	r7, #40	; 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40011000 	.word	0x40011000
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc8:	e7fe      	b.n	8003bc8 <NMI_Handler+0x4>

08003bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bce:	e7fe      	b.n	8003bce <HardFault_Handler+0x4>

08003bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd4:	e7fe      	b.n	8003bd4 <MemManage_Handler+0x4>

08003bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bda:	e7fe      	b.n	8003bda <BusFault_Handler+0x4>

08003bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be0:	e7fe      	b.n	8003be0 <UsageFault_Handler+0x4>

08003be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c10:	f000 f9ce 	bl	8003fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c1c:	4803      	ldr	r0, [pc, #12]	; (8003c2c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003c1e:	f003 fa7c 	bl	800711a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003c22:	4803      	ldr	r0, [pc, #12]	; (8003c30 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003c24:	f003 fa79 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2000c6ec 	.word	0x2000c6ec
 8003c30:	2000c730 	.word	0x2000c730

08003c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <USART1_IRQHandler+0x10>)
 8003c3a:	f004 f80b 	bl	8007c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000c5a8 	.word	0x2000c5a8

08003c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <TIM6_DAC_IRQHandler+0x10>)
 8003c4e:	f003 fa64 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000c6ac 	.word	0x2000c6ac

08003c5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <TIM7_IRQHandler+0x10>)
 8003c62:	f003 fa5a 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	2000c848 	.word	0x2000c848

08003c70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <DMA2_Stream0_IRQHandler+0x10>)
 8003c76:	f001 f80b 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000c628 	.word	0x2000c628

08003c84 <switch_get>:
 */

#include "switch.h"

uint16_t switch_get()
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
	uint16_t value = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	80fb      	strh	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) value |= 0x01;
 8003c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c92:	4814      	ldr	r0, [pc, #80]	; (8003ce4 <switch_get+0x60>)
 8003c94:	f001 fbfe 	bl	8005494 <HAL_GPIO_ReadPin>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <switch_get+0x24>
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	80fb      	strh	r3, [r7, #6]
 8003ca6:	e017      	b.n	8003cd8 <switch_get+0x54>
	else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) value |= 0x02;
 8003ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cac:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <switch_get+0x60>)
 8003cae:	f001 fbf1 	bl	8005494 <HAL_GPIO_ReadPin>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <switch_get+0x3e>
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	80fb      	strh	r3, [r7, #6]
 8003cc0:	e00a      	b.n	8003cd8 <switch_get+0x54>
	else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) value |= 0x03;
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	4807      	ldr	r0, [pc, #28]	; (8003ce4 <switch_get+0x60>)
 8003cc6:	f001 fbe5 	bl	8005494 <HAL_GPIO_ReadPin>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <switch_get+0x54>
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	f043 0303 	orr.w	r3, r3, #3
 8003cd6:	80fb      	strh	r3, [r7, #6]
	else value |= 0x00;

	return value;
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40020400 	.word	0x40020400

08003ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <_sbrk+0x5c>)
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <_sbrk+0x60>)
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cfc:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <_sbrk+0x64>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <_sbrk+0x64>)
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <_sbrk+0x68>)
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <_sbrk+0x64>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d207      	bcs.n	8003d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d18:	f004 fd58 	bl	80087cc <__errno>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	230c      	movs	r3, #12
 8003d20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	e009      	b.n	8003d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <_sbrk+0x64>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <_sbrk+0x64>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <_sbrk+0x64>)
 8003d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20020000 	.word	0x20020000
 8003d48:	00000400 	.word	0x00000400
 8003d4c:	200097fc 	.word	0x200097fc
 8003d50:	2000c898 	.word	0x2000c898

08003d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <SystemInit+0x28>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <SystemInit+0x28>)
 8003d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <SystemInit+0x28>)
 8003d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <init>:
 */

#include "wrapper.h"

void init()
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	IMU_init();
 8003d84:	f7fd f904 	bl	8000f90 <IMU_init>
	ADCStart();
 8003d88:	f7fd fb8a 	bl	80014a0 <ADCStart>
	MotorStart();
 8003d8c:	f7ff f908 	bl	8002fa0 <MotorStart>
	Trace_Init();
 8003d90:	f7fd fdcc 	bl	800192c <Trace_Init>
	stop_init();
 8003d94:	f7ff fa9e 	bl	80032d4 <stop_init>
	LineTrace_Flag = 0;
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <init+0x30>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
	Start_Flag = 0;
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <init+0x34>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
	Mode_Flag = 0;
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <init+0x38>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2000c4cc 	.word	0x2000c4cc
 8003db4:	2000c559 	.word	0x2000c559
 8003db8:	2000c4cd 	.word	0x2000c4cd

08003dbc <main_loop>:

void main_loop()
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	///*
	// debug mode
	while(1){
		if( switch_get() == SW_1 ){
 8003dc0:	f7ff ff60 	bl	8003c84 <switch_get>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d106      	bne.n	8003dd8 <main_loop+0x1c>
			Mode_Flag--;
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <main_loop+0x9c>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <main_loop+0x9c>)
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e017      	b.n	8003e08 <main_loop+0x4c>
			if(Mode_Flag < 0) Mode_Flag = 5;
		}
		else if( switch_get() == SW_2 ){
 8003dd8:	f7ff ff54 	bl	8003c84 <switch_get>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d10d      	bne.n	8003dfe <main_loop+0x42>
			Mode_Flag++;
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <main_loop+0x9c>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <main_loop+0x9c>)
 8003dec:	701a      	strb	r2, [r3, #0]
			if(Mode_Flag > 5) Mode_Flag = 0;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <main_loop+0x9c>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d908      	bls.n	8003e08 <main_loop+0x4c>
 8003df6:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <main_loop+0x9c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e004      	b.n	8003e08 <main_loop+0x4c>
		}
		else if( switch_get() == SW_3 ) break;
 8003dfe:	f7ff ff41 	bl	8003c84 <switch_get>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d008      	beq.n	8003e1a <main_loop+0x5e>
		led_num(Mode_Flag);
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <main_loop+0x9c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd fd39 	bl	8001884 <led_num>
			default:
				break;
		}
		*/

		HAL_Delay(100);
 8003e12:	2064      	movs	r0, #100	; 0x64
 8003e14:	f000 f8ec 	bl	8003ff0 <HAL_Delay>
		if( switch_get() == SW_1 ){
 8003e18:	e7d2      	b.n	8003dc0 <main_loop+0x4>
		else if( switch_get() == SW_3 ) break;
 8003e1a:	bf00      	nop

	}

	led_num(1);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7fd fd31 	bl	8001884 <led_num>
	HAL_Delay(500);
 8003e22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e26:	f000 f8e3 	bl	8003ff0 <HAL_Delay>
	led_num(3);
 8003e2a:	2003      	movs	r0, #3
 8003e2c:	f7fd fd2a 	bl	8001884 <led_num>
	HAL_Delay(500);
 8003e30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e34:	f000 f8dc 	bl	8003ff0 <HAL_Delay>
	led_num(7);
 8003e38:	2007      	movs	r0, #7
 8003e3a:	f7fd fd23 	bl	8001884 <led_num>
	HAL_Delay(500);
 8003e3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e42:	f000 f8d5 	bl	8003ff0 <HAL_Delay>
	led_num(15);
 8003e46:	200f      	movs	r0, #15
 8003e48:	f7fd fd1c 	bl	8001884 <led_num>
	HAL_Delay(500);
 8003e4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e50:	f000 f8ce 	bl	8003ff0 <HAL_Delay>
	HAL_Delay(500);
	led_num(1);
	HAL_Delay(500);
	//*/

}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	2000c4cd 	.word	0x2000c4cd

08003e5c <PeriodElapsed_005ms>:

void PeriodElapsed_005ms()
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
	adc_getValues();
 8003e60:	f7fd fb42 	bl	80014e8 <adc_getValues>
}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <PeriodElapsed_05ms>:


void PeriodElapsed_05ms()
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
	updateValues();
 8003e6c:	f7fd fb8a 	bl	8001584 <updateValues>
	LineTrace( LineTrace_Flag , Memory_Flag);
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <PeriodElapsed_05ms+0x40>)
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <PeriodElapsed_05ms+0x44>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f7fd fd68 	bl	8001950 <LineTrace>
	SR = Speed_R();
 8003e80:	f7ff f986 	bl	8003190 <Speed_R>
 8003e84:	eeb0 7a40 	vmov.f32	s14, s0
 8003e88:	eef0 7a60 	vmov.f32	s15, s1
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <PeriodElapsed_05ms+0x48>)
 8003e8e:	ed83 7b00 	vstr	d7, [r3]
	SL = Speed_L();
 8003e92:	f7ff f9b9 	bl	8003208 <Speed_L>
 8003e96:	eeb0 7a40 	vmov.f32	s14, s0
 8003e9a:	eef0 7a60 	vmov.f32	s15, s1
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <PeriodElapsed_05ms+0x4c>)
 8003ea0:	ed83 7b00 	vstr	d7, [r3]
}
 8003ea4:	bf00      	nop
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	2000c4cc 	.word	0x2000c4cc
 8003eac:	2000c558 	.word	0x2000c558
 8003eb0:	20009858 	.word	0x20009858
 8003eb4:	20009838 	.word	0x20009838

08003eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ef0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ebc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ebe:	e003      	b.n	8003ec8 <LoopCopyDataInit>

08003ec0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ec2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ec4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ec6:	3104      	adds	r1, #4

08003ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ec8:	480b      	ldr	r0, [pc, #44]	; (8003ef8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ecc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ece:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ed0:	d3f6      	bcc.n	8003ec0 <CopyDataInit>
  ldr  r2, =_sbss
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ed4:	e002      	b.n	8003edc <LoopFillZerobss>

08003ed6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ed6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ed8:	f842 3b04 	str.w	r3, [r2], #4

08003edc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ede:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ee0:	d3f9      	bcc.n	8003ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ee2:	f7ff ff37 	bl	8003d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ee6:	f004 fc77 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eea:	f7fd fecf 	bl	8001c8c <main>
  bx  lr    
 8003eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ef0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003ef4:	0800c730 	.word	0x0800c730
  ldr  r0, =_sdata
 8003ef8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003efc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003f00:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003f04:	2000c894 	.word	0x2000c894

08003f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f08:	e7fe      	b.n	8003f08 <ADC_IRQHandler>
	...

08003f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <HAL_Init+0x40>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <HAL_Init+0x40>)
 8003f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_Init+0x40>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <HAL_Init+0x40>)
 8003f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_Init+0x40>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <HAL_Init+0x40>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f34:	2003      	movs	r0, #3
 8003f36:	f000 fd41 	bl	80049bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f000 f808 	bl	8003f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f40:	f7ff f9f0 	bl	8003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00

08003f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f58:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_InitTick+0x54>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_InitTick+0x58>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	4619      	mov	r1, r3
 8003f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fd59 	bl	8004a26 <HAL_SYSTICK_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e00e      	b.n	8003f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d80a      	bhi.n	8003f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f84:	2200      	movs	r2, #0
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	f000 fd21 	bl	80049d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f90:	4a06      	ldr	r2, [pc, #24]	; (8003fac <HAL_InitTick+0x5c>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_IncTick+0x20>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_IncTick+0x24>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <HAL_IncTick+0x24>)
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000008 	.word	0x20000008
 8003fd4:	2000c88c 	.word	0x2000c88c

08003fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return uwTick;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_GetTick+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	2000c88c 	.word	0x2000c88c

08003ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ff8:	f7ff ffee 	bl	8003fd8 <HAL_GetTick>
 8003ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d005      	beq.n	8004016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_Delay+0x40>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004016:	bf00      	nop
 8004018:	f7ff ffde 	bl	8003fd8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d8f7      	bhi.n	8004018 <HAL_Delay+0x28>
  {
  }
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000008 	.word	0x20000008

08004034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e033      	b.n	80040b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff f98e 	bl	8003374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d118      	bne.n	80040a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800407a:	f023 0302 	bic.w	r3, r3, #2
 800407e:	f043 0202 	orr.w	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fa4a 	bl	8004520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
 80040a2:	e001      	b.n	80040a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Start_DMA+0x1e>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e0cc      	b.n	8004274 <HAL_ADC_Start_DMA+0x1b8>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d018      	beq.n	8004122 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004100:	4b5e      	ldr	r3, [pc, #376]	; (800427c <HAL_ADC_Start_DMA+0x1c0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5e      	ldr	r2, [pc, #376]	; (8004280 <HAL_ADC_Start_DMA+0x1c4>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0c9a      	lsrs	r2, r3, #18
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004114:	e002      	b.n	800411c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3b01      	subs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f9      	bne.n	8004116 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80a0 	bne.w	8004272 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800415c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004170:	d106      	bne.n	8004180 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f023 0206 	bic.w	r2, r3, #6
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
 800417e:	e002      	b.n	8004186 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_ADC_Start_DMA+0x1c8>)
 8004190:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <HAL_ADC_Start_DMA+0x1cc>)
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4a3b      	ldr	r2, [pc, #236]	; (800428c <HAL_ADC_Start_DMA+0x1d0>)
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <HAL_ADC_Start_DMA+0x1d4>)
 80041a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	334c      	adds	r3, #76	; 0x4c
 80041de:	4619      	mov	r1, r3
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f000 fcda 	bl	8004b9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d12a      	bne.n	800424a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a26      	ldr	r2, [pc, #152]	; (8004294 <HAL_ADC_Start_DMA+0x1d8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d015      	beq.n	800422a <HAL_ADC_Start_DMA+0x16e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_ADC_Start_DMA+0x1dc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d105      	bne.n	8004214 <HAL_ADC_Start_DMA+0x158>
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <HAL_ADC_Start_DMA+0x1c8>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_ADC_Start_DMA+0x1e0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d129      	bne.n	8004272 <HAL_ADC_Start_DMA+0x1b6>
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_ADC_Start_DMA+0x1c8>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2b0f      	cmp	r3, #15
 8004228:	d823      	bhi.n	8004272 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11c      	bne.n	8004272 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	e013      	b.n	8004272 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_ADC_Start_DMA+0x1d8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10e      	bne.n	8004272 <HAL_ADC_Start_DMA+0x1b6>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d107      	bne.n	8004272 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004270:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000000 	.word	0x20000000
 8004280:	431bde83 	.word	0x431bde83
 8004284:	40012300 	.word	0x40012300
 8004288:	08004719 	.word	0x08004719
 800428c:	080047d3 	.word	0x080047d3
 8004290:	080047ef 	.word	0x080047ef
 8004294:	40012000 	.word	0x40012000
 8004298:	40012100 	.word	0x40012100
 800429c:	40012200 	.word	0x40012200

080042a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e105      	b.n	8004504 <HAL_ADC_ConfigChannel+0x228>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b09      	cmp	r3, #9
 8004306:	d925      	bls.n	8004354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68d9      	ldr	r1, [r3, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	3b1e      	subs	r3, #30
 800431e:	2207      	movs	r2, #7
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43da      	mvns	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	400a      	ands	r2, r1
 800432c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68d9      	ldr	r1, [r3, #12]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	4618      	mov	r0, r3
 8004340:	4603      	mov	r3, r0
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4403      	add	r3, r0
 8004346:	3b1e      	subs	r3, #30
 8004348:	409a      	lsls	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e022      	b.n	800439a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6919      	ldr	r1, [r3, #16]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	2207      	movs	r2, #7
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	400a      	ands	r2, r1
 8004376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	4618      	mov	r0, r3
 800438a:	4603      	mov	r3, r0
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4403      	add	r3, r0
 8004390:	409a      	lsls	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d824      	bhi.n	80043ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	3b05      	subs	r3, #5
 80043b4:	221f      	movs	r2, #31
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43da      	mvns	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	400a      	ands	r2, r1
 80043c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4618      	mov	r0, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	3b05      	subs	r3, #5
 80043de:	fa00 f203 	lsl.w	r2, r0, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ea:	e04c      	b.n	8004486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d824      	bhi.n	800443e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b23      	subs	r3, #35	; 0x23
 8004406:	221f      	movs	r2, #31
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43da      	mvns	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	400a      	ands	r2, r1
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b23      	subs	r3, #35	; 0x23
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
 800443c:	e023      	b.n	8004486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	3b41      	subs	r3, #65	; 0x41
 8004450:	221f      	movs	r2, #31
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	400a      	ands	r2, r1
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	4618      	mov	r0, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	3b41      	subs	r3, #65	; 0x41
 800447a:	fa00 f203 	lsl.w	r2, r0, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_ADC_ConfigChannel+0x234>)
 8004488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a21      	ldr	r2, [pc, #132]	; (8004514 <HAL_ADC_ConfigChannel+0x238>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d109      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1cc>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b12      	cmp	r3, #18
 800449a:	d105      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <HAL_ADC_ConfigChannel+0x238>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d123      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x21e>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d003      	beq.n	80044c2 <HAL_ADC_ConfigChannel+0x1e6>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b11      	cmp	r3, #17
 80044c0:	d11b      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d111      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_ADC_ConfigChannel+0x23c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <HAL_ADC_ConfigChannel+0x240>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	0c9a      	lsrs	r2, r3, #18
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044ec:	e002      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f9      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40012300 	.word	0x40012300
 8004514:	40012000 	.word	0x40012000
 8004518:	20000000 	.word	0x20000000
 800451c:	431bde83 	.word	0x431bde83

08004520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004528:	4b79      	ldr	r3, [pc, #484]	; (8004710 <ADC_Init+0x1f0>)
 800452a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6899      	ldr	r1, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	4a58      	ldr	r2, [pc, #352]	; (8004714 <ADC_Init+0x1f4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6899      	ldr	r1, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6899      	ldr	r1, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	e00f      	b.n	800461e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800460c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800461c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0202 	bic.w	r2, r2, #2
 800462c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6899      	ldr	r1, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	7e1b      	ldrb	r3, [r3, #24]
 8004638:	005a      	lsls	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800466a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	3b01      	subs	r3, #1
 8004678:	035a      	lsls	r2, r3, #13
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e007      	b.n	8004694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004692:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	051a      	lsls	r2, r3, #20
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6899      	ldr	r1, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046d6:	025a      	lsls	r2, r3, #9
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6899      	ldr	r1, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	029a      	lsls	r2, r3, #10
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40012300 	.word	0x40012300
 8004714:	0f000001 	.word	0x0f000001

08004718 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13c      	bne.n	80047ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d12b      	bne.n	80047a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004750:	2b00      	cmp	r3, #0
 8004752:	d127      	bne.n	80047a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800476c:	2b00      	cmp	r3, #0
 800476e:	d119      	bne.n	80047a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0220 	bic.w	r2, r2, #32
 800477e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff fd7b 	bl	80042a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047aa:	e00e      	b.n	80047ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fd85 	bl	80042c8 <HAL_ADC_ErrorCallback>
}
 80047be:	e004      	b.n	80047ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fd67 	bl	80042b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f043 0204 	orr.w	r2, r3, #4
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f7ff fd5a 	bl	80042c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <__NVIC_SetPriorityGrouping+0x44>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004838:	4013      	ands	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800484e:	4a04      	ldr	r2, [pc, #16]	; (8004860 <__NVIC_SetPriorityGrouping+0x44>)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	60d3      	str	r3, [r2, #12]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <__NVIC_GetPriorityGrouping+0x18>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	0a1b      	lsrs	r3, r3, #8
 800486e:	f003 0307 	and.w	r3, r3, #7
}
 8004872:	4618      	mov	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	e000ed00 	.word	0xe000ed00

08004880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	db0b      	blt.n	80048aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	f003 021f 	and.w	r2, r3, #31
 8004898:	4907      	ldr	r1, [pc, #28]	; (80048b8 <__NVIC_EnableIRQ+0x38>)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2001      	movs	r0, #1
 80048a2:	fa00 f202 	lsl.w	r2, r0, r2
 80048a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000e100 	.word	0xe000e100

080048bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	db0a      	blt.n	80048e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	490c      	ldr	r1, [pc, #48]	; (8004908 <__NVIC_SetPriority+0x4c>)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	0112      	lsls	r2, r2, #4
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	440b      	add	r3, r1
 80048e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048e4:	e00a      	b.n	80048fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	4908      	ldr	r1, [pc, #32]	; (800490c <__NVIC_SetPriority+0x50>)
 80048ec:	79fb      	ldrb	r3, [r7, #7]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	3b04      	subs	r3, #4
 80048f4:	0112      	lsls	r2, r2, #4
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	440b      	add	r3, r1
 80048fa:	761a      	strb	r2, [r3, #24]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000e100 	.word	0xe000e100
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	f1c3 0307 	rsb	r3, r3, #7
 800492a:	2b04      	cmp	r3, #4
 800492c:	bf28      	it	cs
 800492e:	2304      	movcs	r3, #4
 8004930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3304      	adds	r3, #4
 8004936:	2b06      	cmp	r3, #6
 8004938:	d902      	bls.n	8004940 <NVIC_EncodePriority+0x30>
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3b03      	subs	r3, #3
 800493e:	e000      	b.n	8004942 <NVIC_EncodePriority+0x32>
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004944:	f04f 32ff 	mov.w	r2, #4294967295
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	401a      	ands	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004958:	f04f 31ff 	mov.w	r1, #4294967295
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	43d9      	mvns	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	4313      	orrs	r3, r2
         );
}
 800496a:	4618      	mov	r0, r3
 800496c:	3724      	adds	r7, #36	; 0x24
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004988:	d301      	bcc.n	800498e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800498a:	2301      	movs	r3, #1
 800498c:	e00f      	b.n	80049ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800498e:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <SysTick_Config+0x40>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3b01      	subs	r3, #1
 8004994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004996:	210f      	movs	r1, #15
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	f7ff ff8e 	bl	80048bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <SysTick_Config+0x40>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049a6:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <SysTick_Config+0x40>)
 80049a8:	2207      	movs	r2, #7
 80049aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	e000e010 	.word	0xe000e010

080049bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff ff29 	bl	800481c <__NVIC_SetPriorityGrouping>
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049e4:	f7ff ff3e 	bl	8004864 <__NVIC_GetPriorityGrouping>
 80049e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7ff ff8e 	bl	8004910 <NVIC_EncodePriority>
 80049f4:	4602      	mov	r2, r0
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff5d 	bl	80048bc <__NVIC_SetPriority>
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	4603      	mov	r3, r0
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff31 	bl	8004880 <__NVIC_EnableIRQ>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ffa2 	bl	8004978 <SysTick_Config>
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a4c:	f7ff fac4 	bl	8003fd8 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e099      	b.n	8004b90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a7c:	e00f      	b.n	8004a9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a7e:	f7ff faab 	bl	8003fd8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b05      	cmp	r3, #5
 8004a8a:	d908      	bls.n	8004a9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2203      	movs	r2, #3
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e078      	b.n	8004b90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e8      	bne.n	8004a7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <HAL_DMA_Init+0x158>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d107      	bne.n	8004b08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	4313      	orrs	r3, r2
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0307 	bic.w	r3, r3, #7
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d117      	bne.n	8004b62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa91 	bl	800506c <DMA_CheckFifoParam>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e016      	b.n	8004b90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa48 	bl	8005000 <DMA_CalcBaseAndBitshift>
 8004b70:	4603      	mov	r3, r0
 8004b72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b78:	223f      	movs	r2, #63	; 0x3f
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	f010803f 	.word	0xf010803f

08004b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_DMA_Start_IT+0x26>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e040      	b.n	8004c44 <HAL_DMA_Start_IT+0xa8>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d12f      	bne.n	8004c36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f9da 	bl	8004fa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	223f      	movs	r2, #63	; 0x3f
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0216 	orr.w	r2, r2, #22
 8004c0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0208 	orr.w	r2, r2, #8
 8004c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e005      	b.n	8004c42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d004      	beq.n	8004c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00c      	b.n	8004c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c9c:	4b92      	ldr	r3, [pc, #584]	; (8004ee8 <HAL_DMA_IRQHandler+0x258>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a92      	ldr	r2, [pc, #584]	; (8004eec <HAL_DMA_IRQHandler+0x25c>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	2208      	movs	r2, #8
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	2208      	movs	r2, #8
 8004cea:	409a      	lsls	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	2201      	movs	r2, #1
 8004d02:	409a      	lsls	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	2201      	movs	r2, #1
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	2204      	movs	r2, #4
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d54:	2204      	movs	r2, #4
 8004d56:	409a      	lsls	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d043      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03c      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d018      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d108      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d024      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
 8004dbe:	e01f      	b.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	e016      	b.n	8004e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0208 	bic.w	r2, r2, #8
 8004dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e04:	2220      	movs	r2, #32
 8004e06:	409a      	lsls	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 808e 	beq.w	8004f2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e26:	2220      	movs	r2, #32
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d136      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0216 	bic.w	r2, r2, #22
 8004e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x1da>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0208 	bic.w	r2, r2, #8
 8004e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	223f      	movs	r2, #63	; 0x3f
 8004e80:	409a      	lsls	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d07d      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
        }
        return;
 8004ea6:	e078      	b.n	8004f9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01c      	beq.n	8004ef0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d108      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d030      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
 8004ed4:	e02b      	b.n	8004f2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d027      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
 8004ee6:	e022      	b.n	8004f2e <HAL_DMA_IRQHandler+0x29e>
 8004ee8:	20000000 	.word	0x20000000
 8004eec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10f      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0210 	bic.w	r2, r2, #16
 8004f0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d032      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2205      	movs	r2, #5
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d307      	bcc.n	8004f76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f2      	bne.n	8004f5a <HAL_DMA_IRQHandler+0x2ca>
 8004f74:	e000      	b.n	8004f78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e000      	b.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f9a:	bf00      	nop
    }
  }
}
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop

08004fa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d108      	bne.n	8004fe4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fe2:	e007      	b.n	8004ff4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	3b10      	subs	r3, #16
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <DMA_CalcBaseAndBitshift+0x64>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <DMA_CalcBaseAndBitshift+0x68>)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d909      	bls.n	8005042 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	659a      	str	r2, [r3, #88]	; 0x58
 8005040:	e007      	b.n	8005052 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	aaaaaaab 	.word	0xaaaaaaab
 8005068:	0800c2d0 	.word	0x0800c2d0

0800506c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d11f      	bne.n	80050c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d855      	bhi.n	8005138 <DMA_CheckFifoParam+0xcc>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <DMA_CheckFifoParam+0x28>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b7 	.word	0x080050b7
 800509c:	080050a5 	.word	0x080050a5
 80050a0:	08005139 	.word	0x08005139
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d045      	beq.n	800513c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b4:	e042      	b.n	800513c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050be:	d13f      	bne.n	8005140 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c4:	e03c      	b.n	8005140 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ce:	d121      	bne.n	8005114 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d836      	bhi.n	8005144 <DMA_CheckFifoParam+0xd8>
 80050d6:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <DMA_CheckFifoParam+0x70>)
 80050d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050f3 	.word	0x080050f3
 80050e4:	080050ed 	.word	0x080050ed
 80050e8:	08005105 	.word	0x08005105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
      break;
 80050f0:	e02f      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d024      	beq.n	8005148 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005102:	e021      	b.n	8005148 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800510c:	d11e      	bne.n	800514c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005112:	e01b      	b.n	800514c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d902      	bls.n	8005120 <DMA_CheckFifoParam+0xb4>
 800511a:	2b03      	cmp	r3, #3
 800511c:	d003      	beq.n	8005126 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800511e:	e018      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
      break;
 8005124:	e015      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00e      	beq.n	8005150 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
      break;
 8005136:	e00b      	b.n	8005150 <DMA_CheckFifoParam+0xe4>
      break;
 8005138:	bf00      	nop
 800513a:	e00a      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      break;
 800513c:	bf00      	nop
 800513e:	e008      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      break;
 8005140:	bf00      	nop
 8005142:	e006      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      break;
 8005144:	bf00      	nop
 8005146:	e004      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      break;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      break;   
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <DMA_CheckFifoParam+0xe6>
      break;
 8005150:	bf00      	nop
    }
  } 
  
  return status; 
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	e16b      	b.n	8005454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800517c:	2201      	movs	r2, #1
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4013      	ands	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	f040 815a 	bne.w	800544e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d00b      	beq.n	80051ba <HAL_GPIO_Init+0x5a>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d007      	beq.n	80051ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ae:	2b11      	cmp	r3, #17
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b12      	cmp	r3, #18
 80051b8:	d130      	bne.n	800521c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 0201 	and.w	r2, r3, #1
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	2203      	movs	r2, #3
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d003      	beq.n	800525c <HAL_GPIO_Init+0xfc>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b12      	cmp	r3, #18
 800525a:	d123      	bne.n	80052a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	08da      	lsrs	r2, r3, #3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3208      	adds	r2, #8
 8005264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	220f      	movs	r2, #15
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	08da      	lsrs	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3208      	adds	r2, #8
 800529e:	69b9      	ldr	r1, [r7, #24]
 80052a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2203      	movs	r2, #3
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0203 	and.w	r2, r3, #3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80b4 	beq.w	800544e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <HAL_GPIO_Init+0x308>)
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	4a5e      	ldr	r2, [pc, #376]	; (8005468 <HAL_GPIO_Init+0x308>)
 80052f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052f4:	6453      	str	r3, [r2, #68]	; 0x44
 80052f6:	4b5c      	ldr	r3, [pc, #368]	; (8005468 <HAL_GPIO_Init+0x308>)
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005302:	4a5a      	ldr	r2, [pc, #360]	; (800546c <HAL_GPIO_Init+0x30c>)
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	3302      	adds	r3, #2
 800530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	220f      	movs	r2, #15
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a51      	ldr	r2, [pc, #324]	; (8005470 <HAL_GPIO_Init+0x310>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02b      	beq.n	8005386 <HAL_GPIO_Init+0x226>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a50      	ldr	r2, [pc, #320]	; (8005474 <HAL_GPIO_Init+0x314>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d025      	beq.n	8005382 <HAL_GPIO_Init+0x222>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a4f      	ldr	r2, [pc, #316]	; (8005478 <HAL_GPIO_Init+0x318>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01f      	beq.n	800537e <HAL_GPIO_Init+0x21e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4e      	ldr	r2, [pc, #312]	; (800547c <HAL_GPIO_Init+0x31c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d019      	beq.n	800537a <HAL_GPIO_Init+0x21a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4d      	ldr	r2, [pc, #308]	; (8005480 <HAL_GPIO_Init+0x320>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_GPIO_Init+0x216>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4c      	ldr	r2, [pc, #304]	; (8005484 <HAL_GPIO_Init+0x324>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00d      	beq.n	8005372 <HAL_GPIO_Init+0x212>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <HAL_GPIO_Init+0x328>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <HAL_GPIO_Init+0x20e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4a      	ldr	r2, [pc, #296]	; (800548c <HAL_GPIO_Init+0x32c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_GPIO_Init+0x20a>
 8005366:	2307      	movs	r3, #7
 8005368:	e00e      	b.n	8005388 <HAL_GPIO_Init+0x228>
 800536a:	2308      	movs	r3, #8
 800536c:	e00c      	b.n	8005388 <HAL_GPIO_Init+0x228>
 800536e:	2306      	movs	r3, #6
 8005370:	e00a      	b.n	8005388 <HAL_GPIO_Init+0x228>
 8005372:	2305      	movs	r3, #5
 8005374:	e008      	b.n	8005388 <HAL_GPIO_Init+0x228>
 8005376:	2304      	movs	r3, #4
 8005378:	e006      	b.n	8005388 <HAL_GPIO_Init+0x228>
 800537a:	2303      	movs	r3, #3
 800537c:	e004      	b.n	8005388 <HAL_GPIO_Init+0x228>
 800537e:	2302      	movs	r3, #2
 8005380:	e002      	b.n	8005388 <HAL_GPIO_Init+0x228>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_GPIO_Init+0x228>
 8005386:	2300      	movs	r3, #0
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	f002 0203 	and.w	r2, r2, #3
 800538e:	0092      	lsls	r2, r2, #2
 8005390:	4093      	lsls	r3, r2
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005398:	4934      	ldr	r1, [pc, #208]	; (800546c <HAL_GPIO_Init+0x30c>)
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	089b      	lsrs	r3, r3, #2
 800539e:	3302      	adds	r3, #2
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a6:	4b3a      	ldr	r3, [pc, #232]	; (8005490 <HAL_GPIO_Init+0x330>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ca:	4a31      	ldr	r2, [pc, #196]	; (8005490 <HAL_GPIO_Init+0x330>)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053d0:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <HAL_GPIO_Init+0x330>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053f4:	4a26      	ldr	r2, [pc, #152]	; (8005490 <HAL_GPIO_Init+0x330>)
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053fa:	4b25      	ldr	r3, [pc, #148]	; (8005490 <HAL_GPIO_Init+0x330>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800541e:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_GPIO_Init+0x330>)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005424:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <HAL_GPIO_Init+0x330>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	43db      	mvns	r3, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005448:	4a11      	ldr	r2, [pc, #68]	; (8005490 <HAL_GPIO_Init+0x330>)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3301      	adds	r3, #1
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	f67f ae90 	bls.w	800517c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800545c:	bf00      	nop
 800545e:	3724      	adds	r7, #36	; 0x24
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40023800 	.word	0x40023800
 800546c:	40013800 	.word	0x40013800
 8005470:	40020000 	.word	0x40020000
 8005474:	40020400 	.word	0x40020400
 8005478:	40020800 	.word	0x40020800
 800547c:	40020c00 	.word	0x40020c00
 8005480:	40021000 	.word	0x40021000
 8005484:	40021400 	.word	0x40021400
 8005488:	40021800 	.word	0x40021800
 800548c:	40021c00 	.word	0x40021c00
 8005490:	40013c00 	.word	0x40013c00

08005494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	887b      	ldrh	r3, [r7, #2]
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	e001      	b.n	80054b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
 80054d0:	4613      	mov	r3, r2
 80054d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d4:	787b      	ldrb	r3, [r7, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054e0:	e003      	b.n	80054ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054e2:	887b      	ldrh	r3, [r7, #2]
 80054e4:	041a      	lsls	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	619a      	str	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e11f      	b.n	800574a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fd ffd8 	bl	80034d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	; 0x24
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800554a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800555a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800555c:	f000 fd18 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 8005560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4a7b      	ldr	r2, [pc, #492]	; (8005754 <HAL_I2C_Init+0x25c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d807      	bhi.n	800557c <HAL_I2C_Init+0x84>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a7a      	ldr	r2, [pc, #488]	; (8005758 <HAL_I2C_Init+0x260>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e006      	b.n	800558a <HAL_I2C_Init+0x92>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a77      	ldr	r2, [pc, #476]	; (800575c <HAL_I2C_Init+0x264>)
 8005580:	4293      	cmp	r3, r2
 8005582:	bf94      	ite	ls
 8005584:	2301      	movls	r3, #1
 8005586:	2300      	movhi	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0db      	b.n	800574a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a72      	ldr	r2, [pc, #456]	; (8005760 <HAL_I2C_Init+0x268>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a64      	ldr	r2, [pc, #400]	; (8005754 <HAL_I2C_Init+0x25c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <HAL_I2C_Init+0xd4>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	e009      	b.n	80055e0 <HAL_I2C_Init+0xe8>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	4a63      	ldr	r2, [pc, #396]	; (8005764 <HAL_I2C_Init+0x26c>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	3301      	adds	r3, #1
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4956      	ldr	r1, [pc, #344]	; (8005754 <HAL_I2C_Init+0x25c>)
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d80d      	bhi.n	800561c <HAL_I2C_Init+0x124>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e59      	subs	r1, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fbb1 f3f3 	udiv	r3, r1, r3
 800560e:	3301      	adds	r3, #1
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	2b04      	cmp	r3, #4
 8005616:	bf38      	it	cc
 8005618:	2304      	movcc	r3, #4
 800561a:	e04f      	b.n	80056bc <HAL_I2C_Init+0x1c4>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <HAL_I2C_Init+0x150>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1e58      	subs	r0, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	440b      	add	r3, r1
 8005632:	fbb0 f3f3 	udiv	r3, r0, r3
 8005636:	3301      	adds	r3, #1
 8005638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e012      	b.n	800566e <HAL_I2C_Init+0x176>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e58      	subs	r0, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	0099      	lsls	r1, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	fbb0 f3f3 	udiv	r3, r0, r3
 800565e:	3301      	adds	r3, #1
 8005660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Init+0x17e>
 8005672:	2301      	movs	r3, #1
 8005674:	e022      	b.n	80056bc <HAL_I2C_Init+0x1c4>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10e      	bne.n	800569c <HAL_I2C_Init+0x1a4>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1e58      	subs	r0, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	440b      	add	r3, r1
 800568c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005690:	3301      	adds	r3, #1
 8005692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569a:	e00f      	b.n	80056bc <HAL_I2C_Init+0x1c4>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1e58      	subs	r0, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	0099      	lsls	r1, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b2:	3301      	adds	r3, #1
 80056b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	6809      	ldr	r1, [r1, #0]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6911      	ldr	r1, [r2, #16]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	4311      	orrs	r1, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	000186a0 	.word	0x000186a0
 8005758:	001e847f 	.word	0x001e847f
 800575c:	003d08ff 	.word	0x003d08ff
 8005760:	431bde83 	.word	0x431bde83
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e25b      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d075      	beq.n	8005872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005786:	4ba3      	ldr	r3, [pc, #652]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b04      	cmp	r3, #4
 8005790:	d00c      	beq.n	80057ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005792:	4ba0      	ldr	r3, [pc, #640]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800579a:	2b08      	cmp	r3, #8
 800579c:	d112      	bne.n	80057c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800579e:	4b9d      	ldr	r3, [pc, #628]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057aa:	d10b      	bne.n	80057c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ac:	4b99      	ldr	r3, [pc, #612]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d05b      	beq.n	8005870 <HAL_RCC_OscConfig+0x108>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d157      	bne.n	8005870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e236      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	d106      	bne.n	80057dc <HAL_RCC_OscConfig+0x74>
 80057ce:	4b91      	ldr	r3, [pc, #580]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a90      	ldr	r2, [pc, #576]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e01d      	b.n	8005818 <HAL_RCC_OscConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x98>
 80057e6:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a8a      	ldr	r2, [pc, #552]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a87      	ldr	r2, [pc, #540]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0xb0>
 8005800:	4b84      	ldr	r3, [pc, #528]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a83      	ldr	r2, [pc, #524]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b81      	ldr	r3, [pc, #516]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a80      	ldr	r2, [pc, #512]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005820:	f7fe fbda 	bl	8003fd8 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005828:	f7fe fbd6 	bl	8003fd8 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	; 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e1fb      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0xc0>
 8005846:	e014      	b.n	8005872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005848:	f7fe fbc6 	bl	8003fd8 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005850:	f7fe fbc2 	bl	8003fd8 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e1e7      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005862:	4b6c      	ldr	r3, [pc, #432]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0xe8>
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d063      	beq.n	8005946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800587e:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005892:	2b08      	cmp	r3, #8
 8005894:	d11c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005896:	4b5f      	ldr	r3, [pc, #380]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d116      	bne.n	80058d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a2:	4b5c      	ldr	r3, [pc, #368]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <HAL_RCC_OscConfig+0x152>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e1bb      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ba:	4b56      	ldr	r3, [pc, #344]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4952      	ldr	r1, [pc, #328]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ce:	e03a      	b.n	8005946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d020      	beq.n	800591a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d8:	4b4f      	ldr	r3, [pc, #316]	; (8005a18 <HAL_RCC_OscConfig+0x2b0>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fe fb7b 	bl	8003fd8 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e6:	f7fe fb77 	bl	8003fd8 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e19c      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f8:	4b46      	ldr	r3, [pc, #280]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005904:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4940      	ldr	r1, [pc, #256]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]
 8005918:	e015      	b.n	8005946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591a:	4b3f      	ldr	r3, [pc, #252]	; (8005a18 <HAL_RCC_OscConfig+0x2b0>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fe fb5a 	bl	8003fd8 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005928:	f7fe fb56 	bl	8003fd8 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e17b      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d030      	beq.n	80059b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d016      	beq.n	8005988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800595a:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_RCC_OscConfig+0x2b4>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005960:	f7fe fb3a 	bl	8003fd8 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005968:	f7fe fb36 	bl	8003fd8 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e15b      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597a:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 800597c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x200>
 8005986:	e015      	b.n	80059b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005988:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCC_OscConfig+0x2b4>)
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598e:	f7fe fb23 	bl	8003fd8 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005996:	f7fe fb1f 	bl	8003fd8 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e144      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a8:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80059aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1f0      	bne.n	8005996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80a0 	beq.w	8005b02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c6:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	4a0e      	ldr	r2, [pc, #56]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e0:	6413      	str	r3, [r2, #64]	; 0x40
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ee:	2301      	movs	r3, #1
 80059f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_RCC_OscConfig+0x2b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d121      	bne.n	8005a42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fe:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <HAL_RCC_OscConfig+0x2b8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <HAL_RCC_OscConfig+0x2b8>)
 8005a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a0a:	f7fe fae5 	bl	8003fd8 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a10:	e011      	b.n	8005a36 <HAL_RCC_OscConfig+0x2ce>
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
 8005a18:	42470000 	.word	0x42470000
 8005a1c:	42470e80 	.word	0x42470e80
 8005a20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a24:	f7fe fad8 	bl	8003fd8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0fd      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	4b81      	ldr	r3, [pc, #516]	; (8005c3c <HAL_RCC_OscConfig+0x4d4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d106      	bne.n	8005a58 <HAL_RCC_OscConfig+0x2f0>
 8005a4a:	4b7d      	ldr	r3, [pc, #500]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a7c      	ldr	r2, [pc, #496]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	e01c      	b.n	8005a92 <HAL_RCC_OscConfig+0x32a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d10c      	bne.n	8005a7a <HAL_RCC_OscConfig+0x312>
 8005a60:	4b77      	ldr	r3, [pc, #476]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a76      	ldr	r2, [pc, #472]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	4b74      	ldr	r3, [pc, #464]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	4a73      	ldr	r2, [pc, #460]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70
 8005a78:	e00b      	b.n	8005a92 <HAL_RCC_OscConfig+0x32a>
 8005a7a:	4b71      	ldr	r3, [pc, #452]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a70      	ldr	r2, [pc, #448]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	4b6e      	ldr	r3, [pc, #440]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a6d      	ldr	r2, [pc, #436]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fe fa9d 	bl	8003fd8 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fe fa99 	bl	8003fd8 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0bc      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab8:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ee      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x33a>
 8005ac4:	e014      	b.n	8005af0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac6:	f7fe fa87 	bl	8003fd8 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fe fa83 	bl	8003fd8 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e0a6      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae4:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ee      	bne.n	8005ace <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d105      	bne.n	8005b02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af6:	4b52      	ldr	r3, [pc, #328]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	4a51      	ldr	r2, [pc, #324]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8092 	beq.w	8005c30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d05c      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d141      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b20:	4b48      	ldr	r3, [pc, #288]	; (8005c44 <HAL_RCC_OscConfig+0x4dc>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b26:	f7fe fa57 	bl	8003fd8 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fe fa53 	bl	8003fd8 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e078      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b40:	4b3f      	ldr	r3, [pc, #252]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f0      	bne.n	8005b2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	019b      	lsls	r3, r3, #6
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	3b01      	subs	r3, #1
 8005b66:	041b      	lsls	r3, r3, #16
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	4933      	ldr	r1, [pc, #204]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b76:	4b33      	ldr	r3, [pc, #204]	; (8005c44 <HAL_RCC_OscConfig+0x4dc>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fe fa2c 	bl	8003fd8 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b84:	f7fe fa28 	bl	8003fd8 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e04d      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b96:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x41c>
 8005ba2:	e045      	b.n	8005c30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <HAL_RCC_OscConfig+0x4dc>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fe fa15 	bl	8003fd8 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb2:	f7fe fa11 	bl	8003fd8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e036      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc4:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f0      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x44a>
 8005bd0:	e02e      	b.n	8005c30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e029      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <HAL_RCC_OscConfig+0x4d8>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d11c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d115      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c06:	4013      	ands	r3, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10d      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40007000 	.word	0x40007000
 8005c40:	40023800 	.word	0x40023800
 8005c44:	42470060 	.word	0x42470060

08005c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0cc      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c5c:	4b68      	ldr	r3, [pc, #416]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d90c      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6a:	4b65      	ldr	r3, [pc, #404]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b63      	ldr	r3, [pc, #396]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0b8      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d020      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c9c:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4a58      	ldr	r2, [pc, #352]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cb4:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4a52      	ldr	r2, [pc, #328]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4b50      	ldr	r3, [pc, #320]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	494d      	ldr	r1, [pc, #308]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d044      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	4b47      	ldr	r3, [pc, #284]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d119      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e07f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d06:	4b3f      	ldr	r3, [pc, #252]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e06f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d16:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e067      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 0203 	bic.w	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4934      	ldr	r1, [pc, #208]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d38:	f7fe f94e 	bl	8003fd8 <HAL_GetTick>
 8005d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fe f94a 	bl	8003fd8 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e04f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 020c 	and.w	r2, r3, #12
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1eb      	bne.n	8005d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d68:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d20c      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e032      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4916      	ldr	r1, [pc, #88]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	490e      	ldr	r1, [pc, #56]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dce:	f000 f821 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <HAL_RCC_ClockConfig+0x1c0>)
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	fa21 f303 	lsr.w	r3, r1, r3
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe f8ae 	bl	8003f50 <HAL_InitTick>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023c00 	.word	0x40023c00
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800c2b8 	.word	0x0800c2b8
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	20000004 	.word	0x20000004

08005e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	2300      	movs	r3, #0
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2a:	4b50      	ldr	r3, [pc, #320]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d007      	beq.n	8005e46 <HAL_RCC_GetSysClockFreq+0x32>
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d008      	beq.n	8005e4c <HAL_RCC_GetSysClockFreq+0x38>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 808d 	bne.w	8005f5a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e40:	4b4b      	ldr	r3, [pc, #300]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005e42:	60bb      	str	r3, [r7, #8]
       break;
 8005e44:	e08c      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e46:	4b4b      	ldr	r3, [pc, #300]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e48:	60bb      	str	r3, [r7, #8]
      break;
 8005e4a:	e089      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e4c:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e56:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d023      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e62:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	ea03 0501 	and.w	r5, r3, r1
 8005e78:	ea04 0602 	and.w	r6, r4, r2
 8005e7c:	4a3d      	ldr	r2, [pc, #244]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e7e:	fb02 f106 	mul.w	r1, r2, r6
 8005e82:	2200      	movs	r2, #0
 8005e84:	fb02 f205 	mul.w	r2, r2, r5
 8005e88:	440a      	add	r2, r1
 8005e8a:	493a      	ldr	r1, [pc, #232]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e8c:	fba5 0101 	umull	r0, r1, r5, r1
 8005e90:	1853      	adds	r3, r2, r1
 8005e92:	4619      	mov	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f04f 0400 	mov.w	r4, #0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4623      	mov	r3, r4
 8005e9e:	f7fa fe9f 	bl	8000be0 <__aeabi_uldivmod>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e049      	b.n	8005f3e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eaa:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	f04f 0400 	mov.w	r4, #0
 8005eb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	ea03 0501 	and.w	r5, r3, r1
 8005ec0:	ea04 0602 	and.w	r6, r4, r2
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	f04f 0400 	mov.w	r4, #0
 8005ed0:	0154      	lsls	r4, r2, #5
 8005ed2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ed6:	014b      	lsls	r3, r1, #5
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4622      	mov	r2, r4
 8005edc:	1b49      	subs	r1, r1, r5
 8005ede:	eb62 0206 	sbc.w	r2, r2, r6
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	0194      	lsls	r4, r2, #6
 8005eec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ef0:	018b      	lsls	r3, r1, #6
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	eb64 0402 	sbc.w	r4, r4, r2
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	00e2      	lsls	r2, r4, #3
 8005f02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f06:	00d9      	lsls	r1, r3, #3
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	195b      	adds	r3, r3, r5
 8005f0e:	eb44 0406 	adc.w	r4, r4, r6
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	02a2      	lsls	r2, r4, #10
 8005f1c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f20:	0299      	lsls	r1, r3, #10
 8005f22:	460b      	mov	r3, r1
 8005f24:	4614      	mov	r4, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	4621      	mov	r1, r4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f04f 0400 	mov.w	r4, #0
 8005f30:	461a      	mov	r2, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	f7fa fe54 	bl	8000be0 <__aeabi_uldivmod>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x158>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	0c1b      	lsrs	r3, r3, #16
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	3301      	adds	r3, #1
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	60bb      	str	r3, [r7, #8]
      break;
 8005f58:	e002      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f5c:	60bb      	str	r3, [r7, #8]
      break;
 8005f5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f60:	68bb      	ldr	r3, [r7, #8]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	00f42400 	.word	0x00f42400
 8005f74:	017d7840 	.word	0x017d7840

08005f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000000 	.word	0x20000000

08005f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f94:	f7ff fff0 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005f98:	4601      	mov	r1, r0
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	0a9b      	lsrs	r3, r3, #10
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	4a03      	ldr	r2, [pc, #12]	; (8005fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa6:	5cd3      	ldrb	r3, [r2, r3]
 8005fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	0800c2c8 	.word	0x0800c2c8

08005fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fbc:	f7ff ffdc 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	0b5b      	lsrs	r3, r3, #13
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	4a03      	ldr	r2, [pc, #12]	; (8005fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fce:	5cd3      	ldrb	r3, [r2, r3]
 8005fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	0800c2c8 	.word	0x0800c2c8

08005fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006004:	2b00      	cmp	r3, #0
 8006006:	d035      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006008:	4b62      	ldr	r3, [pc, #392]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800600e:	f7fd ffe3 	bl	8003fd8 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006014:	e008      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006016:	f7fd ffdf 	bl	8003fd8 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0b0      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006028:	4b5b      	ldr	r3, [pc, #364]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	019a      	lsls	r2, r3, #6
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	4955      	ldr	r1, [pc, #340]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006048:	4b52      	ldr	r3, [pc, #328]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800604e:	f7fd ffc3 	bl	8003fd8 <HAL_GetTick>
 8006052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006056:	f7fd ffbf 	bl	8003fd8 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e090      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006068:	4b4b      	ldr	r3, [pc, #300]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8083 	beq.w	8006188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	4b44      	ldr	r3, [pc, #272]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	4a43      	ldr	r2, [pc, #268]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800609e:	4b3f      	ldr	r3, [pc, #252]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3e      	ldr	r2, [pc, #248]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060aa:	f7fd ff95 	bl	8003fd8 <HAL_GetTick>
 80060ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060b0:	e008      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060b2:	f7fd ff91 	bl	8003fd8 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e062      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060d0:	4b31      	ldr	r3, [pc, #196]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02f      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d028      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060ee:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060fe:	4b28      	ldr	r3, [pc, #160]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006104:	4a24      	ldr	r2, [pc, #144]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800610a:	4b23      	ldr	r3, [pc, #140]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d114      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006116:	f7fd ff5f 	bl	8003fd8 <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	e00a      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fd ff5b 	bl	8003fd8 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	; 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e02a      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006134:	4b18      	ldr	r3, [pc, #96]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ee      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614c:	d10d      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	490d      	ldr	r1, [pc, #52]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]
 8006168:	e005      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006170:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006174:	6093      	str	r3, [r2, #8]
 8006176:	4b08      	ldr	r3, [pc, #32]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006182:	4905      	ldr	r1, [pc, #20]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	42470068 	.word	0x42470068
 8006198:	40023800 	.word	0x40023800
 800619c:	40007000 	.word	0x40007000
 80061a0:	42470e40 	.word	0x42470e40

080061a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e083      	b.n	80062be <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7f5b      	ldrb	r3, [r3, #29]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fd f9cc 	bl	8003564 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	22ca      	movs	r2, #202	; 0xca
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2253      	movs	r2, #83	; 0x53
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f897 	bl	8006316 <RTC_EnterInitMode>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2204      	movs	r2, #4
 80061fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e05e      	b.n	80062be <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68d2      	ldr	r2, [r2, #12]
 800623a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6919      	ldr	r1, [r3, #16]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	041a      	lsls	r2, r3, #16
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800625e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10e      	bne.n	800628c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f829 	bl	80062c6 <HAL_RTC_WaitForSynchro>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2204      	movs	r2, #4
 8006286:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e018      	b.n	80062be <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	22ff      	movs	r2, #255	; 0xff
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062e2:	f7fd fe79 	bl	8003fd8 <HAL_GetTick>
 80062e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062e8:	e009      	b.n	80062fe <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062ea:	f7fd fe75 	bl	8003fd8 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f8:	d901      	bls.n	80062fe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e007      	b.n	800630e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ee      	beq.n	80062ea <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d119      	bne.n	8006364 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800633a:	f7fd fe4d 	bl	8003fd8 <HAL_GetTick>
 800633e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006340:	e009      	b.n	8006356 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006342:	f7fd fe49 	bl	8003fd8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006350:	d901      	bls.n	8006356 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e007      	b.n	8006366 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ee      	beq.n	8006342 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e056      	b.n	800642e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fd f8f8 	bl	8003590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	ea42 0103 	orr.w	r1, r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	f003 0104 	and.w	r1, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800641c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b088      	sub	sp, #32
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_SPI_Transmit+0x22>
 8006454:	2302      	movs	r3, #2
 8006456:	e11e      	b.n	8006696 <HAL_SPI_Transmit+0x260>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006460:	f7fd fdba 	bl	8003fd8 <HAL_GetTick>
 8006464:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006476:	2302      	movs	r3, #2
 8006478:	77fb      	strb	r3, [r7, #31]
    goto error;
 800647a:	e103      	b.n	8006684 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Transmit+0x52>
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800648c:	e0fa      	b.n	8006684 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2203      	movs	r2, #3
 8006492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d4:	d107      	bne.n	80064e6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d007      	beq.n	8006504 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650c:	d14b      	bne.n	80065a6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <HAL_SPI_Transmit+0xe6>
 8006516:	8afb      	ldrh	r3, [r7, #22]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d13e      	bne.n	800659a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006540:	e02b      	b.n	800659a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b02      	cmp	r3, #2
 800654e:	d112      	bne.n	8006576 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	86da      	strh	r2, [r3, #54]	; 0x36
 8006574:	e011      	b.n	800659a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006576:	f7fd fd2f 	bl	8003fd8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d803      	bhi.n	800658e <HAL_SPI_Transmit+0x158>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d102      	bne.n	8006594 <HAL_SPI_Transmit+0x15e>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006598:	e074      	b.n	8006684 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1ce      	bne.n	8006542 <HAL_SPI_Transmit+0x10c>
 80065a4:	e04c      	b.n	8006640 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_SPI_Transmit+0x17e>
 80065ae:	8afb      	ldrh	r3, [r7, #22]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d140      	bne.n	8006636 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	7812      	ldrb	r2, [r2, #0]
 80065c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065da:	e02c      	b.n	8006636 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d113      	bne.n	8006612 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006610:	e011      	b.n	8006636 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006612:	f7fd fce1 	bl	8003fd8 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d803      	bhi.n	800662a <HAL_SPI_Transmit+0x1f4>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d102      	bne.n	8006630 <HAL_SPI_Transmit+0x1fa>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006634:	e026      	b.n	8006684 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1cd      	bne.n	80065dc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fba5 	bl	8006d94 <SPI_EndRxTxTransaction>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2220      	movs	r2, #32
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800665e:	2300      	movs	r3, #0
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e000      	b.n	8006684 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006694:	7ffb      	ldrb	r3, [r7, #31]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b088      	sub	sp, #32
 80066a2:	af02      	add	r7, sp, #8
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ba:	d112      	bne.n	80066e2 <HAL_SPI_Receive+0x44>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10e      	bne.n	80066e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2204      	movs	r2, #4
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8e9 	bl	80068b0 <HAL_SPI_TransmitReceive>
 80066de:	4603      	mov	r3, r0
 80066e0:	e0e2      	b.n	80068a8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_SPI_Receive+0x52>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e0db      	b.n	80068a8 <HAL_SPI_Receive+0x20a>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f8:	f7fd fc6e 	bl	8003fd8 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d002      	beq.n	8006710 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800670a:	2302      	movs	r3, #2
 800670c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800670e:	e0c2      	b.n	8006896 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_SPI_Receive+0x7e>
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006720:	e0b9      	b.n	8006896 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2204      	movs	r2, #4
 8006726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006768:	d107      	bne.n	800677a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006778:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d007      	beq.n	8006798 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006796:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d162      	bne.n	8006866 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067a0:	e02e      	b.n	8006800 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d115      	bne.n	80067dc <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f103 020c 	add.w	r2, r3, #12
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067da:	e011      	b.n	8006800 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067dc:	f7fd fbfc 	bl	8003fd8 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d803      	bhi.n	80067f4 <HAL_SPI_Receive+0x156>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d102      	bne.n	80067fa <HAL_SPI_Receive+0x15c>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067fe:	e04a      	b.n	8006896 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1cb      	bne.n	80067a2 <HAL_SPI_Receive+0x104>
 800680a:	e031      	b.n	8006870 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b01      	cmp	r3, #1
 8006818:	d113      	bne.n	8006842 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	b292      	uxth	r2, r2
 8006826:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	1c9a      	adds	r2, r3, #2
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006840:	e011      	b.n	8006866 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006842:	f7fd fbc9 	bl	8003fd8 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d803      	bhi.n	800685a <HAL_SPI_Receive+0x1bc>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d102      	bne.n	8006860 <HAL_SPI_Receive+0x1c2>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006864:	e017      	b.n	8006896 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1cd      	bne.n	800680c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fa27 	bl	8006cc8 <SPI_EndRxTransaction>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
 8006892:	e000      	b.n	8006896 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006894:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	; 0x30
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068be:	2301      	movs	r3, #1
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_SPI_TransmitReceive+0x26>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e18a      	b.n	8006bec <HAL_SPI_TransmitReceive+0x33c>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068de:	f7fd fb7b 	bl	8003fd8 <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80068f4:	887b      	ldrh	r3, [r7, #2]
 80068f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d00f      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x70>
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006906:	d107      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <HAL_SPI_TransmitReceive+0x68>
 8006910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006914:	2b04      	cmp	r3, #4
 8006916:	d003      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006918:	2302      	movs	r3, #2
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800691e:	e15b      	b.n	8006bd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x82>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x82>
 800692c:	887b      	ldrh	r3, [r7, #2]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006938:	e14e      	b.n	8006bd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b04      	cmp	r3, #4
 8006944:	d003      	beq.n	800694e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2205      	movs	r2, #5
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	887a      	ldrh	r2, [r7, #2]
 800695e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	887a      	ldrh	r2, [r7, #2]
 8006964:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	887a      	ldrh	r2, [r7, #2]
 8006976:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d007      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069aa:	d178      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_SPI_TransmitReceive+0x10a>
 80069b4:	8b7b      	ldrh	r3, [r7, #26]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d166      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	881a      	ldrh	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069de:	e053      	b.n	8006a88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d11b      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x176>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d016      	beq.n	8006a26 <HAL_SPI_TransmitReceive+0x176>
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d113      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	1c9a      	adds	r2, r3, #2
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d119      	bne.n	8006a68 <HAL_SPI_TransmitReceive+0x1b8>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d014      	beq.n	8006a68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a64:	2301      	movs	r3, #1
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a68:	f7fd fab6 	bl	8003fd8 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d807      	bhi.n	8006a88 <HAL_SPI_TransmitReceive+0x1d8>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d003      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a86:	e0a7      	b.n	8006bd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1a6      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x130>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1a1      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x130>
 8006a9c:	e07c      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_SPI_TransmitReceive+0x1fc>
 8006aa6:	8b7b      	ldrh	r3, [r7, #26]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d16b      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad2:	e057      	b.n	8006b84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d11c      	bne.n	8006b1c <HAL_SPI_TransmitReceive+0x26c>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d017      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x26c>
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d114      	bne.n	8006b1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	7812      	ldrb	r2, [r2, #0]
 8006afe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d119      	bne.n	8006b5e <HAL_SPI_TransmitReceive+0x2ae>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d014      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b5e:	f7fd fa3b 	bl	8003fd8 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d803      	bhi.n	8006b76 <HAL_SPI_TransmitReceive+0x2c6>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d102      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x2cc>
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b82:	e029      	b.n	8006bd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1a2      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x224>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d19d      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f8f9 	bl	8006d94 <SPI_EndRxTxTransaction>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006bb4:	e010      	b.n	8006bd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10b      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	e000      	b.n	8006bd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006be8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3730      	adds	r7, #48	; 0x30
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c04:	e04c      	b.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d048      	beq.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c0e:	f7fd f9e3 	bl	8003fd8 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d902      	bls.n	8006c24 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d13d      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3c:	d111      	bne.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c46:	d004      	beq.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d107      	bne.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6a:	d10f      	bne.n	8006c8c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e00f      	b.n	8006cc0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	bf0c      	ite	eq
 8006cb0:	2301      	moveq	r3, #1
 8006cb2:	2300      	movne	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d1a3      	bne.n	8006c06 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cdc:	d111      	bne.n	8006d02 <SPI_EndRxTransaction+0x3a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce6:	d004      	beq.n	8006cf2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf0:	d107      	bne.n	8006d02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d0a:	d12a      	bne.n	8006d62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d14:	d012      	beq.n	8006d3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff ff67 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d02d      	beq.n	8006d88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e026      	b.n	8006d8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2101      	movs	r1, #1
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff ff54 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01a      	beq.n	8006d88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	f043 0220 	orr.w	r2, r3, #32
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e013      	b.n	8006d8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff ff41 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e000      	b.n	8006d8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006da0:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <SPI_EndRxTxTransaction+0x7c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <SPI_EndRxTxTransaction+0x80>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	0d5b      	lsrs	r3, r3, #21
 8006dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbe:	d112      	bne.n	8006de6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff ff12 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d016      	beq.n	8006e04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	f043 0220 	orr.w	r2, r3, #32
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e00f      	b.n	8006e06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b80      	cmp	r3, #128	; 0x80
 8006dfe:	d0f2      	beq.n	8006de6 <SPI_EndRxTxTransaction+0x52>
 8006e00:	e000      	b.n	8006e04 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e02:	bf00      	nop
  }

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000000 	.word	0x20000000
 8006e14:	165e9f81 	.word	0x165e9f81

08006e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e01d      	b.n	8006e66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fc fd26 	bl	8003890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f000 fb56 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b06      	cmp	r3, #6
 8006e96:	d007      	beq.n	8006ea8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e01d      	b.n	8006f04 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fc fb9f 	bl	8003620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f000 fb07 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fd42 	bl	80079a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <HAL_TIM_PWM_Start+0x74>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_TIM_PWM_Start+0x2c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a14      	ldr	r2, [pc, #80]	; (8006f84 <HAL_TIM_PWM_Start+0x78>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d101      	bne.n	8006f3c <HAL_TIM_PWM_Start+0x30>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <HAL_TIM_PWM_Start+0x32>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b06      	cmp	r3, #6
 8006f62:	d007      	beq.n	8006f74 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40010400 	.word	0x40010400

08006f88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e083      	b.n	80070a4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d106      	bne.n	8006fb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fc fbbd 	bl	8003730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fcc:	f023 0307 	bic.w	r3, r3, #7
 8006fd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f000 fa93 	bl	8007508 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4313      	orrs	r3, r2
 8007002:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	f023 0303 	bic.w	r3, r3, #3
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	4313      	orrs	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007028:	f023 030c 	bic.w	r3, r3, #12
 800702c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	4313      	orrs	r3, r2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	011a      	lsls	r2, r3, #4
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	031b      	lsls	r3, r3, #12
 8007058:	4313      	orrs	r3, r2
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007066:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	4313      	orrs	r3, r2
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_TIM_Encoder_Start+0x16>
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d008      	beq.n	80070d2 <HAL_TIM_Encoder_Start+0x26>
 80070c0:	e00f      	b.n	80070e2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2201      	movs	r2, #1
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fc6c 	bl	80079a8 <TIM_CCxChannelCmd>
      break;
 80070d0:	e016      	b.n	8007100 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2201      	movs	r2, #1
 80070d8:	2104      	movs	r1, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fc64 	bl	80079a8 <TIM_CCxChannelCmd>
      break;
 80070e0:	e00e      	b.n	8007100 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2201      	movs	r2, #1
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fc5c 	bl	80079a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2201      	movs	r2, #1
 80070f6:	2104      	movs	r1, #4
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fc55 	bl	80079a8 <TIM_CCxChannelCmd>
      break;
 80070fe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d122      	bne.n	8007176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d11b      	bne.n	8007176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0202 	mvn.w	r2, #2
 8007146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9b5 	bl	80074cc <HAL_TIM_IC_CaptureCallback>
 8007162:	e005      	b.n	8007170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f9a7 	bl	80074b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9b8 	bl	80074e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d122      	bne.n	80071ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d11b      	bne.n	80071ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0204 	mvn.w	r2, #4
 800719a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f98b 	bl	80074cc <HAL_TIM_IC_CaptureCallback>
 80071b6:	e005      	b.n	80071c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f97d 	bl	80074b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f98e 	bl	80074e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d122      	bne.n	800721e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d11b      	bne.n	800721e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f06f 0208 	mvn.w	r2, #8
 80071ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2204      	movs	r2, #4
 80071f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f961 	bl	80074cc <HAL_TIM_IC_CaptureCallback>
 800720a:	e005      	b.n	8007218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f953 	bl	80074b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f964 	bl	80074e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d122      	bne.n	8007272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d11b      	bne.n	8007272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f06f 0210 	mvn.w	r2, #16
 8007242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2208      	movs	r2, #8
 8007248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f937 	bl	80074cc <HAL_TIM_IC_CaptureCallback>
 800725e:	e005      	b.n	800726c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f929 	bl	80074b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f93a 	bl	80074e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10e      	bne.n	800729e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f06f 0201 	mvn.w	r2, #1
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fb fb8d 	bl	80029b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d10e      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc6d 	bl	8007ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d10e      	bne.n	80072f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d107      	bne.n	80072f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8ff 	bl	80074f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b20      	cmp	r3, #32
 8007302:	d10e      	bne.n	8007322 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b20      	cmp	r3, #32
 8007310:	d107      	bne.n	8007322 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f06f 0220 	mvn.w	r2, #32
 800731a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fc37 	bl	8007b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007342:	2302      	movs	r3, #2
 8007344:	e0b4      	b.n	80074b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b0c      	cmp	r3, #12
 800735a:	f200 809f 	bhi.w	800749c <HAL_TIM_PWM_ConfigChannel+0x170>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007399 	.word	0x08007399
 8007368:	0800749d 	.word	0x0800749d
 800736c:	0800749d 	.word	0x0800749d
 8007370:	0800749d 	.word	0x0800749d
 8007374:	080073d9 	.word	0x080073d9
 8007378:	0800749d 	.word	0x0800749d
 800737c:	0800749d 	.word	0x0800749d
 8007380:	0800749d 	.word	0x0800749d
 8007384:	0800741b 	.word	0x0800741b
 8007388:	0800749d 	.word	0x0800749d
 800738c:	0800749d 	.word	0x0800749d
 8007390:	0800749d 	.word	0x0800749d
 8007394:	0800745b 	.word	0x0800745b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 f952 	bl	8007648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0208 	orr.w	r2, r2, #8
 80073b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0204 	bic.w	r2, r2, #4
 80073c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6999      	ldr	r1, [r3, #24]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	619a      	str	r2, [r3, #24]
      break;
 80073d6:	e062      	b.n	800749e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f9a2 	bl	8007728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6999      	ldr	r1, [r3, #24]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	021a      	lsls	r2, r3, #8
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	619a      	str	r2, [r3, #24]
      break;
 8007418:	e041      	b.n	800749e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f9f7 	bl	8007814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0208 	orr.w	r2, r2, #8
 8007434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0204 	bic.w	r2, r2, #4
 8007444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69d9      	ldr	r1, [r3, #28]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	61da      	str	r2, [r3, #28]
      break;
 8007458:	e021      	b.n	800749e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fa4b 	bl	80078fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69d9      	ldr	r1, [r3, #28]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	021a      	lsls	r2, r3, #8
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	61da      	str	r2, [r3, #28]
      break;
 800749a:	e000      	b.n	800749e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800749c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a40      	ldr	r2, [pc, #256]	; (800761c <TIM_Base_SetConfig+0x114>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d013      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d00f      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a3d      	ldr	r2, [pc, #244]	; (8007620 <TIM_Base_SetConfig+0x118>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00b      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a3c      	ldr	r2, [pc, #240]	; (8007624 <TIM_Base_SetConfig+0x11c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d007      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a3b      	ldr	r2, [pc, #236]	; (8007628 <TIM_Base_SetConfig+0x120>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a3a      	ldr	r2, [pc, #232]	; (800762c <TIM_Base_SetConfig+0x124>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2f      	ldr	r2, [pc, #188]	; (800761c <TIM_Base_SetConfig+0x114>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d02b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007568:	d027      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a2c      	ldr	r2, [pc, #176]	; (8007620 <TIM_Base_SetConfig+0x118>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d023      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a2b      	ldr	r2, [pc, #172]	; (8007624 <TIM_Base_SetConfig+0x11c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01f      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <TIM_Base_SetConfig+0x120>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a29      	ldr	r2, [pc, #164]	; (800762c <TIM_Base_SetConfig+0x124>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d017      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a28      	ldr	r2, [pc, #160]	; (8007630 <TIM_Base_SetConfig+0x128>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a27      	ldr	r2, [pc, #156]	; (8007634 <TIM_Base_SetConfig+0x12c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00f      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a26      	ldr	r2, [pc, #152]	; (8007638 <TIM_Base_SetConfig+0x130>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a25      	ldr	r2, [pc, #148]	; (800763c <TIM_Base_SetConfig+0x134>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a24      	ldr	r2, [pc, #144]	; (8007640 <TIM_Base_SetConfig+0x138>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a23      	ldr	r2, [pc, #140]	; (8007644 <TIM_Base_SetConfig+0x13c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a0a      	ldr	r2, [pc, #40]	; (800761c <TIM_Base_SetConfig+0x114>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_Base_SetConfig+0xf8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a0c      	ldr	r2, [pc, #48]	; (800762c <TIM_Base_SetConfig+0x124>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	615a      	str	r2, [r3, #20]
}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40010000 	.word	0x40010000
 8007620:	40000400 	.word	0x40000400
 8007624:	40000800 	.word	0x40000800
 8007628:	40000c00 	.word	0x40000c00
 800762c:	40010400 	.word	0x40010400
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800
 800763c:	40001800 	.word	0x40001800
 8007640:	40001c00 	.word	0x40001c00
 8007644:	40002000 	.word	0x40002000

08007648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0201 	bic.w	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 0302 	bic.w	r3, r3, #2
 8007690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a20      	ldr	r2, [pc, #128]	; (8007720 <TIM_OC1_SetConfig+0xd8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d003      	beq.n	80076ac <TIM_OC1_SetConfig+0x64>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a1f      	ldr	r2, [pc, #124]	; (8007724 <TIM_OC1_SetConfig+0xdc>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d10c      	bne.n	80076c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0308 	bic.w	r3, r3, #8
 80076b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f023 0304 	bic.w	r3, r3, #4
 80076c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a15      	ldr	r2, [pc, #84]	; (8007720 <TIM_OC1_SetConfig+0xd8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <TIM_OC1_SetConfig+0x8e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a14      	ldr	r2, [pc, #80]	; (8007724 <TIM_OC1_SetConfig+0xdc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d111      	bne.n	80076fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	621a      	str	r2, [r3, #32]
}
 8007714:	bf00      	nop
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	40010000 	.word	0x40010000
 8007724:	40010400 	.word	0x40010400

08007728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0210 	bic.w	r2, r3, #16
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0320 	bic.w	r3, r3, #32
 8007772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a22      	ldr	r2, [pc, #136]	; (800780c <TIM_OC2_SetConfig+0xe4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_OC2_SetConfig+0x68>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a21      	ldr	r2, [pc, #132]	; (8007810 <TIM_OC2_SetConfig+0xe8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10d      	bne.n	80077ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <TIM_OC2_SetConfig+0xe4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d003      	beq.n	80077bc <TIM_OC2_SetConfig+0x94>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <TIM_OC2_SetConfig+0xe8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d113      	bne.n	80077e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40010000 	.word	0x40010000
 8007810:	40010400 	.word	0x40010400

08007814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800785c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a21      	ldr	r2, [pc, #132]	; (80078f4 <TIM_OC3_SetConfig+0xe0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d003      	beq.n	800787a <TIM_OC3_SetConfig+0x66>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <TIM_OC3_SetConfig+0xe4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d10d      	bne.n	8007896 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <TIM_OC3_SetConfig+0xe0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d003      	beq.n	80078a6 <TIM_OC3_SetConfig+0x92>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <TIM_OC3_SetConfig+0xe4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d113      	bne.n	80078ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010400 	.word	0x40010400

080078fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	031b      	lsls	r3, r3, #12
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a12      	ldr	r2, [pc, #72]	; (80079a0 <TIM_OC4_SetConfig+0xa4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_OC4_SetConfig+0x68>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a11      	ldr	r2, [pc, #68]	; (80079a4 <TIM_OC4_SetConfig+0xa8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d109      	bne.n	8007978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800796a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40010000 	.word	0x40010000
 80079a4:	40010400 	.word	0x40010400

080079a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 031f 	and.w	r3, r3, #31
 80079ba:	2201      	movs	r2, #1
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	43db      	mvns	r3, r3
 80079ca:	401a      	ands	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
	...

080079f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e05a      	b.n	8007ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a21      	ldr	r2, [pc, #132]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d022      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a58:	d01d      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d018      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1b      	ldr	r2, [pc, #108]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1a      	ldr	r2, [pc, #104]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00e      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d004      	beq.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d10c      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40010000 	.word	0x40010000
 8007ad4:	40000400 	.word	0x40000400
 8007ad8:	40000800 	.word	0x40000800
 8007adc:	40000c00 	.word	0x40000c00
 8007ae0:	40010400 	.word	0x40010400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40001800 	.word	0x40001800

08007aec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e03d      	b.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e03f      	b.n	8007c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fb ffa0 	bl	8003b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fa69 	bl	80080d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x52>
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f996 	bl	8007fd0 <UART_Receive_IT>
      return;
 8007ca4:	e0d1      	b.n	8007e4a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80b0 	beq.w	8007e0e <HAL_UART_IRQHandler+0x1ba>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d105      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x70>
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80a5 	beq.w	8007e0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x90>
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	f043 0201 	orr.w	r2, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_UART_IRQHandler+0xb0>
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	f043 0202 	orr.w	r2, r3, #2
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_UART_IRQHandler+0xd0>
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1c:	f043 0204 	orr.w	r2, r3, #4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f003 0308 	and.w	r3, r3, #8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00f      	beq.n	8007d4e <HAL_UART_IRQHandler+0xfa>
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <HAL_UART_IRQHandler+0xee>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	f043 0208 	orr.w	r2, r3, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d078      	beq.n	8007e48 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_UART_IRQHandler+0x11c>
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f930 	bl	8007fd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7a:	2b40      	cmp	r3, #64	; 0x40
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <HAL_UART_IRQHandler+0x144>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d031      	beq.n	8007dfc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f879 	bl	8007e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d123      	bne.n	8007df4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695a      	ldr	r2, [r3, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d013      	beq.n	8007dec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	4a21      	ldr	r2, [pc, #132]	; (8007e50 <HAL_UART_IRQHandler+0x1fc>)
 8007dca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fc ff3b 	bl	8004c4c <HAL_DMA_Abort_IT>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d016      	beq.n	8007e0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007de6:	4610      	mov	r0, r2
 8007de8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dea:	e00e      	b.n	8007e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f845 	bl	8007e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df2:	e00a      	b.n	8007e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f841 	bl	8007e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfa:	e006      	b.n	8007e0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f83d 	bl	8007e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007e08:	e01e      	b.n	8007e48 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0a:	bf00      	nop
    return;
 8007e0c:	e01c      	b.n	8007e48 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1d6>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f866 	bl	8007ef4 <UART_Transmit_IT>
    return;
 8007e28:	e00f      	b.n	8007e4a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <HAL_UART_IRQHandler+0x1f6>
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f8ae 	bl	8007fa0 <UART_EndTransmit_IT>
    return;
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007e48:	bf00      	nop
  }
}
 8007e4a:	3720      	adds	r7, #32
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	08007ecd 	.word	0x08007ecd

08007e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ea6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695a      	ldr	r2, [r3, #20]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0201 	bic.w	r2, r2, #1
 8007eb6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff ffc8 	bl	8007e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b21      	cmp	r3, #33	; 0x21
 8007f06:	d144      	bne.n	8007f92 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f10:	d11a      	bne.n	8007f48 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f26:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d105      	bne.n	8007f3c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	1c9a      	adds	r2, r3, #2
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]
 8007f3a:	e00e      	b.n	8007f5a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]
 8007f46:	e008      	b.n	8007f5a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	1c59      	adds	r1, r3, #1
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6211      	str	r1, [r2, #32]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4619      	mov	r1, r3
 8007f68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10f      	bne.n	8007f8e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e000      	b.n	8007f94 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f92:	2302      	movs	r3, #2
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff47 	bl	8007e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b22      	cmp	r3, #34	; 0x22
 8007fe2:	d171      	bne.n	80080c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fec:	d123      	bne.n	8008036 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10e      	bne.n	800801a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	1c9a      	adds	r2, r3, #2
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
 8008018:	e029      	b.n	800806e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b29b      	uxth	r3, r3
 8008022:	b2db      	uxtb	r3, r3
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
 8008034:	e01b      	b.n	800806e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6858      	ldr	r0, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008048:	1c59      	adds	r1, r3, #1
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6291      	str	r1, [r2, #40]	; 0x28
 800804e:	b2c2      	uxtb	r2, r0
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	e00c      	b.n	800806e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	b2da      	uxtb	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	1c58      	adds	r0, r3, #1
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	6288      	str	r0, [r1, #40]	; 0x28
 8008066:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29b      	uxth	r3, r3
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	4619      	mov	r1, r3
 800807c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800807e:	2b00      	cmp	r3, #0
 8008080:	d120      	bne.n	80080c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0220 	bic.w	r2, r2, #32
 8008090:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695a      	ldr	r2, [r3, #20]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0201 	bic.w	r2, r2, #1
 80080b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fed4 	bl	8007e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e002      	b.n	80080ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008116:	f023 030c 	bic.w	r3, r3, #12
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6812      	ldr	r2, [r2, #0]
 800811e:	68f9      	ldr	r1, [r7, #12]
 8008120:	430b      	orrs	r3, r1
 8008122:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008142:	f040 818b 	bne.w	800845c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4ac1      	ldr	r2, [pc, #772]	; (8008450 <UART_SetConfig+0x37c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d005      	beq.n	800815c <UART_SetConfig+0x88>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4abf      	ldr	r2, [pc, #764]	; (8008454 <UART_SetConfig+0x380>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f040 80bd 	bne.w	80082d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800815c:	f7fd ff2c 	bl	8005fb8 <HAL_RCC_GetPCLK2Freq>
 8008160:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	461d      	mov	r5, r3
 8008166:	f04f 0600 	mov.w	r6, #0
 800816a:	46a8      	mov	r8, r5
 800816c:	46b1      	mov	r9, r6
 800816e:	eb18 0308 	adds.w	r3, r8, r8
 8008172:	eb49 0409 	adc.w	r4, r9, r9
 8008176:	4698      	mov	r8, r3
 8008178:	46a1      	mov	r9, r4
 800817a:	eb18 0805 	adds.w	r8, r8, r5
 800817e:	eb49 0906 	adc.w	r9, r9, r6
 8008182:	f04f 0100 	mov.w	r1, #0
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800818e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008192:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008196:	4688      	mov	r8, r1
 8008198:	4691      	mov	r9, r2
 800819a:	eb18 0005 	adds.w	r0, r8, r5
 800819e:	eb49 0106 	adc.w	r1, r9, r6
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	461d      	mov	r5, r3
 80081a8:	f04f 0600 	mov.w	r6, #0
 80081ac:	196b      	adds	r3, r5, r5
 80081ae:	eb46 0406 	adc.w	r4, r6, r6
 80081b2:	461a      	mov	r2, r3
 80081b4:	4623      	mov	r3, r4
 80081b6:	f7f8 fd13 	bl	8000be0 <__aeabi_uldivmod>
 80081ba:	4603      	mov	r3, r0
 80081bc:	460c      	mov	r4, r1
 80081be:	461a      	mov	r2, r3
 80081c0:	4ba5      	ldr	r3, [pc, #660]	; (8008458 <UART_SetConfig+0x384>)
 80081c2:	fba3 2302 	umull	r2, r3, r3, r2
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	461d      	mov	r5, r3
 80081d0:	f04f 0600 	mov.w	r6, #0
 80081d4:	46a9      	mov	r9, r5
 80081d6:	46b2      	mov	sl, r6
 80081d8:	eb19 0309 	adds.w	r3, r9, r9
 80081dc:	eb4a 040a 	adc.w	r4, sl, sl
 80081e0:	4699      	mov	r9, r3
 80081e2:	46a2      	mov	sl, r4
 80081e4:	eb19 0905 	adds.w	r9, r9, r5
 80081e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008200:	4689      	mov	r9, r1
 8008202:	4692      	mov	sl, r2
 8008204:	eb19 0005 	adds.w	r0, r9, r5
 8008208:	eb4a 0106 	adc.w	r1, sl, r6
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	461d      	mov	r5, r3
 8008212:	f04f 0600 	mov.w	r6, #0
 8008216:	196b      	adds	r3, r5, r5
 8008218:	eb46 0406 	adc.w	r4, r6, r6
 800821c:	461a      	mov	r2, r3
 800821e:	4623      	mov	r3, r4
 8008220:	f7f8 fcde 	bl	8000be0 <__aeabi_uldivmod>
 8008224:	4603      	mov	r3, r0
 8008226:	460c      	mov	r4, r1
 8008228:	461a      	mov	r2, r3
 800822a:	4b8b      	ldr	r3, [pc, #556]	; (8008458 <UART_SetConfig+0x384>)
 800822c:	fba3 1302 	umull	r1, r3, r3, r2
 8008230:	095b      	lsrs	r3, r3, #5
 8008232:	2164      	movs	r1, #100	; 0x64
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	3332      	adds	r3, #50	; 0x32
 800823e:	4a86      	ldr	r2, [pc, #536]	; (8008458 <UART_SetConfig+0x384>)
 8008240:	fba2 2303 	umull	r2, r3, r2, r3
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800824c:	4498      	add	r8, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	461d      	mov	r5, r3
 8008252:	f04f 0600 	mov.w	r6, #0
 8008256:	46a9      	mov	r9, r5
 8008258:	46b2      	mov	sl, r6
 800825a:	eb19 0309 	adds.w	r3, r9, r9
 800825e:	eb4a 040a 	adc.w	r4, sl, sl
 8008262:	4699      	mov	r9, r3
 8008264:	46a2      	mov	sl, r4
 8008266:	eb19 0905 	adds.w	r9, r9, r5
 800826a:	eb4a 0a06 	adc.w	sl, sl, r6
 800826e:	f04f 0100 	mov.w	r1, #0
 8008272:	f04f 0200 	mov.w	r2, #0
 8008276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800827a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800827e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008282:	4689      	mov	r9, r1
 8008284:	4692      	mov	sl, r2
 8008286:	eb19 0005 	adds.w	r0, r9, r5
 800828a:	eb4a 0106 	adc.w	r1, sl, r6
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	461d      	mov	r5, r3
 8008294:	f04f 0600 	mov.w	r6, #0
 8008298:	196b      	adds	r3, r5, r5
 800829a:	eb46 0406 	adc.w	r4, r6, r6
 800829e:	461a      	mov	r2, r3
 80082a0:	4623      	mov	r3, r4
 80082a2:	f7f8 fc9d 	bl	8000be0 <__aeabi_uldivmod>
 80082a6:	4603      	mov	r3, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	461a      	mov	r2, r3
 80082ac:	4b6a      	ldr	r3, [pc, #424]	; (8008458 <UART_SetConfig+0x384>)
 80082ae:	fba3 1302 	umull	r1, r3, r3, r2
 80082b2:	095b      	lsrs	r3, r3, #5
 80082b4:	2164      	movs	r1, #100	; 0x64
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	3332      	adds	r3, #50	; 0x32
 80082c0:	4a65      	ldr	r2, [pc, #404]	; (8008458 <UART_SetConfig+0x384>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	f003 0207 	and.w	r2, r3, #7
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4442      	add	r2, r8
 80082d2:	609a      	str	r2, [r3, #8]
 80082d4:	e26f      	b.n	80087b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082d6:	f7fd fe5b 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 80082da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	461d      	mov	r5, r3
 80082e0:	f04f 0600 	mov.w	r6, #0
 80082e4:	46a8      	mov	r8, r5
 80082e6:	46b1      	mov	r9, r6
 80082e8:	eb18 0308 	adds.w	r3, r8, r8
 80082ec:	eb49 0409 	adc.w	r4, r9, r9
 80082f0:	4698      	mov	r8, r3
 80082f2:	46a1      	mov	r9, r4
 80082f4:	eb18 0805 	adds.w	r8, r8, r5
 80082f8:	eb49 0906 	adc.w	r9, r9, r6
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008308:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800830c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008310:	4688      	mov	r8, r1
 8008312:	4691      	mov	r9, r2
 8008314:	eb18 0005 	adds.w	r0, r8, r5
 8008318:	eb49 0106 	adc.w	r1, r9, r6
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	461d      	mov	r5, r3
 8008322:	f04f 0600 	mov.w	r6, #0
 8008326:	196b      	adds	r3, r5, r5
 8008328:	eb46 0406 	adc.w	r4, r6, r6
 800832c:	461a      	mov	r2, r3
 800832e:	4623      	mov	r3, r4
 8008330:	f7f8 fc56 	bl	8000be0 <__aeabi_uldivmod>
 8008334:	4603      	mov	r3, r0
 8008336:	460c      	mov	r4, r1
 8008338:	461a      	mov	r2, r3
 800833a:	4b47      	ldr	r3, [pc, #284]	; (8008458 <UART_SetConfig+0x384>)
 800833c:	fba3 2302 	umull	r2, r3, r3, r2
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	461d      	mov	r5, r3
 800834a:	f04f 0600 	mov.w	r6, #0
 800834e:	46a9      	mov	r9, r5
 8008350:	46b2      	mov	sl, r6
 8008352:	eb19 0309 	adds.w	r3, r9, r9
 8008356:	eb4a 040a 	adc.w	r4, sl, sl
 800835a:	4699      	mov	r9, r3
 800835c:	46a2      	mov	sl, r4
 800835e:	eb19 0905 	adds.w	r9, r9, r5
 8008362:	eb4a 0a06 	adc.w	sl, sl, r6
 8008366:	f04f 0100 	mov.w	r1, #0
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800837a:	4689      	mov	r9, r1
 800837c:	4692      	mov	sl, r2
 800837e:	eb19 0005 	adds.w	r0, r9, r5
 8008382:	eb4a 0106 	adc.w	r1, sl, r6
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	461d      	mov	r5, r3
 800838c:	f04f 0600 	mov.w	r6, #0
 8008390:	196b      	adds	r3, r5, r5
 8008392:	eb46 0406 	adc.w	r4, r6, r6
 8008396:	461a      	mov	r2, r3
 8008398:	4623      	mov	r3, r4
 800839a:	f7f8 fc21 	bl	8000be0 <__aeabi_uldivmod>
 800839e:	4603      	mov	r3, r0
 80083a0:	460c      	mov	r4, r1
 80083a2:	461a      	mov	r2, r3
 80083a4:	4b2c      	ldr	r3, [pc, #176]	; (8008458 <UART_SetConfig+0x384>)
 80083a6:	fba3 1302 	umull	r1, r3, r3, r2
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2164      	movs	r1, #100	; 0x64
 80083ae:	fb01 f303 	mul.w	r3, r1, r3
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	3332      	adds	r3, #50	; 0x32
 80083b8:	4a27      	ldr	r2, [pc, #156]	; (8008458 <UART_SetConfig+0x384>)
 80083ba:	fba2 2303 	umull	r2, r3, r2, r3
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c6:	4498      	add	r8, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	461d      	mov	r5, r3
 80083cc:	f04f 0600 	mov.w	r6, #0
 80083d0:	46a9      	mov	r9, r5
 80083d2:	46b2      	mov	sl, r6
 80083d4:	eb19 0309 	adds.w	r3, r9, r9
 80083d8:	eb4a 040a 	adc.w	r4, sl, sl
 80083dc:	4699      	mov	r9, r3
 80083de:	46a2      	mov	sl, r4
 80083e0:	eb19 0905 	adds.w	r9, r9, r5
 80083e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083fc:	4689      	mov	r9, r1
 80083fe:	4692      	mov	sl, r2
 8008400:	eb19 0005 	adds.w	r0, r9, r5
 8008404:	eb4a 0106 	adc.w	r1, sl, r6
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	461d      	mov	r5, r3
 800840e:	f04f 0600 	mov.w	r6, #0
 8008412:	196b      	adds	r3, r5, r5
 8008414:	eb46 0406 	adc.w	r4, r6, r6
 8008418:	461a      	mov	r2, r3
 800841a:	4623      	mov	r3, r4
 800841c:	f7f8 fbe0 	bl	8000be0 <__aeabi_uldivmod>
 8008420:	4603      	mov	r3, r0
 8008422:	460c      	mov	r4, r1
 8008424:	461a      	mov	r2, r3
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <UART_SetConfig+0x384>)
 8008428:	fba3 1302 	umull	r1, r3, r3, r2
 800842c:	095b      	lsrs	r3, r3, #5
 800842e:	2164      	movs	r1, #100	; 0x64
 8008430:	fb01 f303 	mul.w	r3, r1, r3
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	3332      	adds	r3, #50	; 0x32
 800843a:	4a07      	ldr	r2, [pc, #28]	; (8008458 <UART_SetConfig+0x384>)
 800843c:	fba2 2303 	umull	r2, r3, r2, r3
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	f003 0207 	and.w	r2, r3, #7
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4442      	add	r2, r8
 800844c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800844e:	e1b2      	b.n	80087b6 <UART_SetConfig+0x6e2>
 8008450:	40011000 	.word	0x40011000
 8008454:	40011400 	.word	0x40011400
 8008458:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4ad7      	ldr	r2, [pc, #860]	; (80087c0 <UART_SetConfig+0x6ec>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d005      	beq.n	8008472 <UART_SetConfig+0x39e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4ad6      	ldr	r2, [pc, #856]	; (80087c4 <UART_SetConfig+0x6f0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	f040 80d1 	bne.w	8008614 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008472:	f7fd fda1 	bl	8005fb8 <HAL_RCC_GetPCLK2Freq>
 8008476:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	469a      	mov	sl, r3
 800847c:	f04f 0b00 	mov.w	fp, #0
 8008480:	46d0      	mov	r8, sl
 8008482:	46d9      	mov	r9, fp
 8008484:	eb18 0308 	adds.w	r3, r8, r8
 8008488:	eb49 0409 	adc.w	r4, r9, r9
 800848c:	4698      	mov	r8, r3
 800848e:	46a1      	mov	r9, r4
 8008490:	eb18 080a 	adds.w	r8, r8, sl
 8008494:	eb49 090b 	adc.w	r9, r9, fp
 8008498:	f04f 0100 	mov.w	r1, #0
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80084a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80084ac:	4688      	mov	r8, r1
 80084ae:	4691      	mov	r9, r2
 80084b0:	eb1a 0508 	adds.w	r5, sl, r8
 80084b4:	eb4b 0609 	adc.w	r6, fp, r9
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4619      	mov	r1, r3
 80084be:	f04f 0200 	mov.w	r2, #0
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	f04f 0400 	mov.w	r4, #0
 80084ca:	0094      	lsls	r4, r2, #2
 80084cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084d0:	008b      	lsls	r3, r1, #2
 80084d2:	461a      	mov	r2, r3
 80084d4:	4623      	mov	r3, r4
 80084d6:	4628      	mov	r0, r5
 80084d8:	4631      	mov	r1, r6
 80084da:	f7f8 fb81 	bl	8000be0 <__aeabi_uldivmod>
 80084de:	4603      	mov	r3, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	461a      	mov	r2, r3
 80084e4:	4bb8      	ldr	r3, [pc, #736]	; (80087c8 <UART_SetConfig+0x6f4>)
 80084e6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	469b      	mov	fp, r3
 80084f4:	f04f 0c00 	mov.w	ip, #0
 80084f8:	46d9      	mov	r9, fp
 80084fa:	46e2      	mov	sl, ip
 80084fc:	eb19 0309 	adds.w	r3, r9, r9
 8008500:	eb4a 040a 	adc.w	r4, sl, sl
 8008504:	4699      	mov	r9, r3
 8008506:	46a2      	mov	sl, r4
 8008508:	eb19 090b 	adds.w	r9, r9, fp
 800850c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008510:	f04f 0100 	mov.w	r1, #0
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800851c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008520:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008524:	4689      	mov	r9, r1
 8008526:	4692      	mov	sl, r2
 8008528:	eb1b 0509 	adds.w	r5, fp, r9
 800852c:	eb4c 060a 	adc.w	r6, ip, sl
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4619      	mov	r1, r3
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	f04f 0400 	mov.w	r4, #0
 8008542:	0094      	lsls	r4, r2, #2
 8008544:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008548:	008b      	lsls	r3, r1, #2
 800854a:	461a      	mov	r2, r3
 800854c:	4623      	mov	r3, r4
 800854e:	4628      	mov	r0, r5
 8008550:	4631      	mov	r1, r6
 8008552:	f7f8 fb45 	bl	8000be0 <__aeabi_uldivmod>
 8008556:	4603      	mov	r3, r0
 8008558:	460c      	mov	r4, r1
 800855a:	461a      	mov	r2, r3
 800855c:	4b9a      	ldr	r3, [pc, #616]	; (80087c8 <UART_SetConfig+0x6f4>)
 800855e:	fba3 1302 	umull	r1, r3, r3, r2
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	2164      	movs	r1, #100	; 0x64
 8008566:	fb01 f303 	mul.w	r3, r1, r3
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	3332      	adds	r3, #50	; 0x32
 8008570:	4a95      	ldr	r2, [pc, #596]	; (80087c8 <UART_SetConfig+0x6f4>)
 8008572:	fba2 2303 	umull	r2, r3, r2, r3
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800857c:	4498      	add	r8, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	469b      	mov	fp, r3
 8008582:	f04f 0c00 	mov.w	ip, #0
 8008586:	46d9      	mov	r9, fp
 8008588:	46e2      	mov	sl, ip
 800858a:	eb19 0309 	adds.w	r3, r9, r9
 800858e:	eb4a 040a 	adc.w	r4, sl, sl
 8008592:	4699      	mov	r9, r3
 8008594:	46a2      	mov	sl, r4
 8008596:	eb19 090b 	adds.w	r9, r9, fp
 800859a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800859e:	f04f 0100 	mov.w	r1, #0
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80085ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80085b2:	4689      	mov	r9, r1
 80085b4:	4692      	mov	sl, r2
 80085b6:	eb1b 0509 	adds.w	r5, fp, r9
 80085ba:	eb4c 060a 	adc.w	r6, ip, sl
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	f04f 0400 	mov.w	r4, #0
 80085d0:	0094      	lsls	r4, r2, #2
 80085d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085d6:	008b      	lsls	r3, r1, #2
 80085d8:	461a      	mov	r2, r3
 80085da:	4623      	mov	r3, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	4631      	mov	r1, r6
 80085e0:	f7f8 fafe 	bl	8000be0 <__aeabi_uldivmod>
 80085e4:	4603      	mov	r3, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b77      	ldr	r3, [pc, #476]	; (80087c8 <UART_SetConfig+0x6f4>)
 80085ec:	fba3 1302 	umull	r1, r3, r3, r2
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	2164      	movs	r1, #100	; 0x64
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	3332      	adds	r3, #50	; 0x32
 80085fe:	4a72      	ldr	r2, [pc, #456]	; (80087c8 <UART_SetConfig+0x6f4>)
 8008600:	fba2 2303 	umull	r2, r3, r2, r3
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	f003 020f 	and.w	r2, r3, #15
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4442      	add	r2, r8
 8008610:	609a      	str	r2, [r3, #8]
 8008612:	e0d0      	b.n	80087b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008614:	f7fd fcbc 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 8008618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	469a      	mov	sl, r3
 800861e:	f04f 0b00 	mov.w	fp, #0
 8008622:	46d0      	mov	r8, sl
 8008624:	46d9      	mov	r9, fp
 8008626:	eb18 0308 	adds.w	r3, r8, r8
 800862a:	eb49 0409 	adc.w	r4, r9, r9
 800862e:	4698      	mov	r8, r3
 8008630:	46a1      	mov	r9, r4
 8008632:	eb18 080a 	adds.w	r8, r8, sl
 8008636:	eb49 090b 	adc.w	r9, r9, fp
 800863a:	f04f 0100 	mov.w	r1, #0
 800863e:	f04f 0200 	mov.w	r2, #0
 8008642:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008646:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800864a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800864e:	4688      	mov	r8, r1
 8008650:	4691      	mov	r9, r2
 8008652:	eb1a 0508 	adds.w	r5, sl, r8
 8008656:	eb4b 0609 	adc.w	r6, fp, r9
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	4619      	mov	r1, r3
 8008660:	f04f 0200 	mov.w	r2, #0
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	f04f 0400 	mov.w	r4, #0
 800866c:	0094      	lsls	r4, r2, #2
 800866e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008672:	008b      	lsls	r3, r1, #2
 8008674:	461a      	mov	r2, r3
 8008676:	4623      	mov	r3, r4
 8008678:	4628      	mov	r0, r5
 800867a:	4631      	mov	r1, r6
 800867c:	f7f8 fab0 	bl	8000be0 <__aeabi_uldivmod>
 8008680:	4603      	mov	r3, r0
 8008682:	460c      	mov	r4, r1
 8008684:	461a      	mov	r2, r3
 8008686:	4b50      	ldr	r3, [pc, #320]	; (80087c8 <UART_SetConfig+0x6f4>)
 8008688:	fba3 2302 	umull	r2, r3, r3, r2
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	469b      	mov	fp, r3
 8008696:	f04f 0c00 	mov.w	ip, #0
 800869a:	46d9      	mov	r9, fp
 800869c:	46e2      	mov	sl, ip
 800869e:	eb19 0309 	adds.w	r3, r9, r9
 80086a2:	eb4a 040a 	adc.w	r4, sl, sl
 80086a6:	4699      	mov	r9, r3
 80086a8:	46a2      	mov	sl, r4
 80086aa:	eb19 090b 	adds.w	r9, r9, fp
 80086ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086b2:	f04f 0100 	mov.w	r1, #0
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086c6:	4689      	mov	r9, r1
 80086c8:	4692      	mov	sl, r2
 80086ca:	eb1b 0509 	adds.w	r5, fp, r9
 80086ce:	eb4c 060a 	adc.w	r6, ip, sl
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4619      	mov	r1, r3
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	0094      	lsls	r4, r2, #2
 80086e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086ea:	008b      	lsls	r3, r1, #2
 80086ec:	461a      	mov	r2, r3
 80086ee:	4623      	mov	r3, r4
 80086f0:	4628      	mov	r0, r5
 80086f2:	4631      	mov	r1, r6
 80086f4:	f7f8 fa74 	bl	8000be0 <__aeabi_uldivmod>
 80086f8:	4603      	mov	r3, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	461a      	mov	r2, r3
 80086fe:	4b32      	ldr	r3, [pc, #200]	; (80087c8 <UART_SetConfig+0x6f4>)
 8008700:	fba3 1302 	umull	r1, r3, r3, r2
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	2164      	movs	r1, #100	; 0x64
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	3332      	adds	r3, #50	; 0x32
 8008712:	4a2d      	ldr	r2, [pc, #180]	; (80087c8 <UART_SetConfig+0x6f4>)
 8008714:	fba2 2303 	umull	r2, r3, r2, r3
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800871e:	4498      	add	r8, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	469b      	mov	fp, r3
 8008724:	f04f 0c00 	mov.w	ip, #0
 8008728:	46d9      	mov	r9, fp
 800872a:	46e2      	mov	sl, ip
 800872c:	eb19 0309 	adds.w	r3, r9, r9
 8008730:	eb4a 040a 	adc.w	r4, sl, sl
 8008734:	4699      	mov	r9, r3
 8008736:	46a2      	mov	sl, r4
 8008738:	eb19 090b 	adds.w	r9, r9, fp
 800873c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008740:	f04f 0100 	mov.w	r1, #0
 8008744:	f04f 0200 	mov.w	r2, #0
 8008748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800874c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008754:	4689      	mov	r9, r1
 8008756:	4692      	mov	sl, r2
 8008758:	eb1b 0509 	adds.w	r5, fp, r9
 800875c:	eb4c 060a 	adc.w	r6, ip, sl
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4619      	mov	r1, r3
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	f04f 0400 	mov.w	r4, #0
 8008772:	0094      	lsls	r4, r2, #2
 8008774:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008778:	008b      	lsls	r3, r1, #2
 800877a:	461a      	mov	r2, r3
 800877c:	4623      	mov	r3, r4
 800877e:	4628      	mov	r0, r5
 8008780:	4631      	mov	r1, r6
 8008782:	f7f8 fa2d 	bl	8000be0 <__aeabi_uldivmod>
 8008786:	4603      	mov	r3, r0
 8008788:	460c      	mov	r4, r1
 800878a:	461a      	mov	r2, r3
 800878c:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <UART_SetConfig+0x6f4>)
 800878e:	fba3 1302 	umull	r1, r3, r3, r2
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	2164      	movs	r1, #100	; 0x64
 8008796:	fb01 f303 	mul.w	r3, r1, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	3332      	adds	r3, #50	; 0x32
 80087a0:	4a09      	ldr	r2, [pc, #36]	; (80087c8 <UART_SetConfig+0x6f4>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4442      	add	r2, r8
 80087b2:	609a      	str	r2, [r3, #8]
}
 80087b4:	e7ff      	b.n	80087b6 <UART_SetConfig+0x6e2>
 80087b6:	bf00      	nop
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c0:	40011000 	.word	0x40011000
 80087c4:	40011400 	.word	0x40011400
 80087c8:	51eb851f 	.word	0x51eb851f

080087cc <__errno>:
 80087cc:	4b01      	ldr	r3, [pc, #4]	; (80087d4 <__errno+0x8>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	2000000c 	.word	0x2000000c

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4e0d      	ldr	r6, [pc, #52]	; (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	; (8008814 <__libc_init_array+0x3c>)
 80087de:	1ba4      	subs	r4, r4, r6
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2500      	movs	r5, #0
 80087e4:	42a5      	cmp	r5, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4e0b      	ldr	r6, [pc, #44]	; (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	; (800881c <__libc_init_array+0x44>)
 80087ec:	f003 fd56 	bl	800c29c <_init>
 80087f0:	1ba4      	subs	r4, r4, r6
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2500      	movs	r5, #0
 80087f6:	42a5      	cmp	r5, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008800:	4798      	blx	r3
 8008802:	3501      	adds	r5, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800880a:	4798      	blx	r3
 800880c:	3501      	adds	r5, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	0800c728 	.word	0x0800c728
 8008814:	0800c728 	.word	0x0800c728
 8008818:	0800c728 	.word	0x0800c728
 800881c:	0800c72c 	.word	0x0800c72c

08008820 <memcpy>:
 8008820:	b510      	push	{r4, lr}
 8008822:	1e43      	subs	r3, r0, #1
 8008824:	440a      	add	r2, r1
 8008826:	4291      	cmp	r1, r2
 8008828:	d100      	bne.n	800882c <memcpy+0xc>
 800882a:	bd10      	pop	{r4, pc}
 800882c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008834:	e7f7      	b.n	8008826 <memcpy+0x6>

08008836 <memset>:
 8008836:	4402      	add	r2, r0
 8008838:	4603      	mov	r3, r0
 800883a:	4293      	cmp	r3, r2
 800883c:	d100      	bne.n	8008840 <memset+0xa>
 800883e:	4770      	bx	lr
 8008840:	f803 1b01 	strb.w	r1, [r3], #1
 8008844:	e7f9      	b.n	800883a <memset+0x4>

08008846 <__cvt>:
 8008846:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800884a:	ec55 4b10 	vmov	r4, r5, d0
 800884e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008850:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008854:	2d00      	cmp	r5, #0
 8008856:	460e      	mov	r6, r1
 8008858:	4691      	mov	r9, r2
 800885a:	4619      	mov	r1, r3
 800885c:	bfb8      	it	lt
 800885e:	4622      	movlt	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	f027 0720 	bic.w	r7, r7, #32
 8008866:	bfbb      	ittet	lt
 8008868:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800886c:	461d      	movlt	r5, r3
 800886e:	2300      	movge	r3, #0
 8008870:	232d      	movlt	r3, #45	; 0x2d
 8008872:	bfb8      	it	lt
 8008874:	4614      	movlt	r4, r2
 8008876:	2f46      	cmp	r7, #70	; 0x46
 8008878:	700b      	strb	r3, [r1, #0]
 800887a:	d004      	beq.n	8008886 <__cvt+0x40>
 800887c:	2f45      	cmp	r7, #69	; 0x45
 800887e:	d100      	bne.n	8008882 <__cvt+0x3c>
 8008880:	3601      	adds	r6, #1
 8008882:	2102      	movs	r1, #2
 8008884:	e000      	b.n	8008888 <__cvt+0x42>
 8008886:	2103      	movs	r1, #3
 8008888:	ab03      	add	r3, sp, #12
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	ab02      	add	r3, sp, #8
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	4632      	mov	r2, r6
 8008892:	4653      	mov	r3, sl
 8008894:	ec45 4b10 	vmov	d0, r4, r5
 8008898:	f000 fbae 	bl	8008ff8 <_dtoa_r>
 800889c:	2f47      	cmp	r7, #71	; 0x47
 800889e:	4680      	mov	r8, r0
 80088a0:	d102      	bne.n	80088a8 <__cvt+0x62>
 80088a2:	f019 0f01 	tst.w	r9, #1
 80088a6:	d026      	beq.n	80088f6 <__cvt+0xb0>
 80088a8:	2f46      	cmp	r7, #70	; 0x46
 80088aa:	eb08 0906 	add.w	r9, r8, r6
 80088ae:	d111      	bne.n	80088d4 <__cvt+0x8e>
 80088b0:	f898 3000 	ldrb.w	r3, [r8]
 80088b4:	2b30      	cmp	r3, #48	; 0x30
 80088b6:	d10a      	bne.n	80088ce <__cvt+0x88>
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f8 f8ae 	bl	8000a20 <__aeabi_dcmpeq>
 80088c4:	b918      	cbnz	r0, 80088ce <__cvt+0x88>
 80088c6:	f1c6 0601 	rsb	r6, r6, #1
 80088ca:	f8ca 6000 	str.w	r6, [sl]
 80088ce:	f8da 3000 	ldr.w	r3, [sl]
 80088d2:	4499      	add	r9, r3
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	4620      	mov	r0, r4
 80088da:	4629      	mov	r1, r5
 80088dc:	f7f8 f8a0 	bl	8000a20 <__aeabi_dcmpeq>
 80088e0:	b938      	cbnz	r0, 80088f2 <__cvt+0xac>
 80088e2:	2230      	movs	r2, #48	; 0x30
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	454b      	cmp	r3, r9
 80088e8:	d205      	bcs.n	80088f6 <__cvt+0xb0>
 80088ea:	1c59      	adds	r1, r3, #1
 80088ec:	9103      	str	r1, [sp, #12]
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e7f8      	b.n	80088e4 <__cvt+0x9e>
 80088f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088fa:	eba3 0308 	sub.w	r3, r3, r8
 80088fe:	4640      	mov	r0, r8
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	b004      	add	sp, #16
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008908 <__exponent>:
 8008908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800890a:	2900      	cmp	r1, #0
 800890c:	4604      	mov	r4, r0
 800890e:	bfba      	itte	lt
 8008910:	4249      	neglt	r1, r1
 8008912:	232d      	movlt	r3, #45	; 0x2d
 8008914:	232b      	movge	r3, #43	; 0x2b
 8008916:	2909      	cmp	r1, #9
 8008918:	f804 2b02 	strb.w	r2, [r4], #2
 800891c:	7043      	strb	r3, [r0, #1]
 800891e:	dd20      	ble.n	8008962 <__exponent+0x5a>
 8008920:	f10d 0307 	add.w	r3, sp, #7
 8008924:	461f      	mov	r7, r3
 8008926:	260a      	movs	r6, #10
 8008928:	fb91 f5f6 	sdiv	r5, r1, r6
 800892c:	fb06 1115 	mls	r1, r6, r5, r1
 8008930:	3130      	adds	r1, #48	; 0x30
 8008932:	2d09      	cmp	r5, #9
 8008934:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008938:	f103 32ff 	add.w	r2, r3, #4294967295
 800893c:	4629      	mov	r1, r5
 800893e:	dc09      	bgt.n	8008954 <__exponent+0x4c>
 8008940:	3130      	adds	r1, #48	; 0x30
 8008942:	3b02      	subs	r3, #2
 8008944:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008948:	42bb      	cmp	r3, r7
 800894a:	4622      	mov	r2, r4
 800894c:	d304      	bcc.n	8008958 <__exponent+0x50>
 800894e:	1a10      	subs	r0, r2, r0
 8008950:	b003      	add	sp, #12
 8008952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008954:	4613      	mov	r3, r2
 8008956:	e7e7      	b.n	8008928 <__exponent+0x20>
 8008958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800895c:	f804 2b01 	strb.w	r2, [r4], #1
 8008960:	e7f2      	b.n	8008948 <__exponent+0x40>
 8008962:	2330      	movs	r3, #48	; 0x30
 8008964:	4419      	add	r1, r3
 8008966:	7083      	strb	r3, [r0, #2]
 8008968:	1d02      	adds	r2, r0, #4
 800896a:	70c1      	strb	r1, [r0, #3]
 800896c:	e7ef      	b.n	800894e <__exponent+0x46>
	...

08008970 <_printf_float>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	b08d      	sub	sp, #52	; 0x34
 8008976:	460c      	mov	r4, r1
 8008978:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800897c:	4616      	mov	r6, r2
 800897e:	461f      	mov	r7, r3
 8008980:	4605      	mov	r5, r0
 8008982:	f001 f8f1 	bl	8009b68 <_localeconv_r>
 8008986:	6803      	ldr	r3, [r0, #0]
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	4618      	mov	r0, r3
 800898c:	f7f7 fc1c 	bl	80001c8 <strlen>
 8008990:	2300      	movs	r3, #0
 8008992:	930a      	str	r3, [sp, #40]	; 0x28
 8008994:	f8d8 3000 	ldr.w	r3, [r8]
 8008998:	9005      	str	r0, [sp, #20]
 800899a:	3307      	adds	r3, #7
 800899c:	f023 0307 	bic.w	r3, r3, #7
 80089a0:	f103 0208 	add.w	r2, r3, #8
 80089a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089a8:	f8d4 b000 	ldr.w	fp, [r4]
 80089ac:	f8c8 2000 	str.w	r2, [r8]
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80089bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089c0:	9307      	str	r3, [sp, #28]
 80089c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80089c6:	f04f 32ff 	mov.w	r2, #4294967295
 80089ca:	4ba7      	ldr	r3, [pc, #668]	; (8008c68 <_printf_float+0x2f8>)
 80089cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d0:	f7f8 f858 	bl	8000a84 <__aeabi_dcmpun>
 80089d4:	bb70      	cbnz	r0, 8008a34 <_printf_float+0xc4>
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295
 80089da:	4ba3      	ldr	r3, [pc, #652]	; (8008c68 <_printf_float+0x2f8>)
 80089dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e0:	f7f8 f832 	bl	8000a48 <__aeabi_dcmple>
 80089e4:	bb30      	cbnz	r0, 8008a34 <_printf_float+0xc4>
 80089e6:	2200      	movs	r2, #0
 80089e8:	2300      	movs	r3, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f8 f821 	bl	8000a34 <__aeabi_dcmplt>
 80089f2:	b110      	cbz	r0, 80089fa <_printf_float+0x8a>
 80089f4:	232d      	movs	r3, #45	; 0x2d
 80089f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fa:	4a9c      	ldr	r2, [pc, #624]	; (8008c6c <_printf_float+0x2fc>)
 80089fc:	4b9c      	ldr	r3, [pc, #624]	; (8008c70 <_printf_float+0x300>)
 80089fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a02:	bf8c      	ite	hi
 8008a04:	4690      	movhi	r8, r2
 8008a06:	4698      	movls	r8, r3
 8008a08:	2303      	movs	r3, #3
 8008a0a:	f02b 0204 	bic.w	r2, fp, #4
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	9700      	str	r7, [sp, #0]
 8008a18:	4633      	mov	r3, r6
 8008a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 f9e6 	bl	8008df0 <_printf_common>
 8008a24:	3001      	adds	r0, #1
 8008a26:	f040 808d 	bne.w	8008b44 <_printf_float+0x1d4>
 8008a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2e:	b00d      	add	sp, #52	; 0x34
 8008a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a34:	4642      	mov	r2, r8
 8008a36:	464b      	mov	r3, r9
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f8 f822 	bl	8000a84 <__aeabi_dcmpun>
 8008a40:	b110      	cbz	r0, 8008a48 <_printf_float+0xd8>
 8008a42:	4a8c      	ldr	r2, [pc, #560]	; (8008c74 <_printf_float+0x304>)
 8008a44:	4b8c      	ldr	r3, [pc, #560]	; (8008c78 <_printf_float+0x308>)
 8008a46:	e7da      	b.n	80089fe <_printf_float+0x8e>
 8008a48:	6861      	ldr	r1, [r4, #4]
 8008a4a:	1c4b      	adds	r3, r1, #1
 8008a4c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008a50:	a80a      	add	r0, sp, #40	; 0x28
 8008a52:	d13e      	bne.n	8008ad2 <_printf_float+0x162>
 8008a54:	2306      	movs	r3, #6
 8008a56:	6063      	str	r3, [r4, #4]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008a5e:	ab09      	add	r3, sp, #36	; 0x24
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	ec49 8b10 	vmov	d0, r8, r9
 8008a66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a6a:	6022      	str	r2, [r4, #0]
 8008a6c:	f8cd a004 	str.w	sl, [sp, #4]
 8008a70:	6861      	ldr	r1, [r4, #4]
 8008a72:	4628      	mov	r0, r5
 8008a74:	f7ff fee7 	bl	8008846 <__cvt>
 8008a78:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008a7c:	2b47      	cmp	r3, #71	; 0x47
 8008a7e:	4680      	mov	r8, r0
 8008a80:	d109      	bne.n	8008a96 <_printf_float+0x126>
 8008a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a84:	1cd8      	adds	r0, r3, #3
 8008a86:	db02      	blt.n	8008a8e <_printf_float+0x11e>
 8008a88:	6862      	ldr	r2, [r4, #4]
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	dd47      	ble.n	8008b1e <_printf_float+0x1ae>
 8008a8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a92:	fa5f fa8a 	uxtb.w	sl, sl
 8008a96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9c:	d824      	bhi.n	8008ae8 <_printf_float+0x178>
 8008a9e:	3901      	subs	r1, #1
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8008aa8:	f7ff ff2e 	bl	8008908 <__exponent>
 8008aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aae:	1813      	adds	r3, r2, r0
 8008ab0:	2a01      	cmp	r2, #1
 8008ab2:	4681      	mov	r9, r0
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	dc02      	bgt.n	8008abe <_printf_float+0x14e>
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	07d1      	lsls	r1, r2, #31
 8008abc:	d501      	bpl.n	8008ac2 <_printf_float+0x152>
 8008abe:	3301      	adds	r3, #1
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0a5      	beq.n	8008a16 <_printf_float+0xa6>
 8008aca:	232d      	movs	r3, #45	; 0x2d
 8008acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad0:	e7a1      	b.n	8008a16 <_printf_float+0xa6>
 8008ad2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008ad6:	f000 8177 	beq.w	8008dc8 <_printf_float+0x458>
 8008ada:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008ade:	d1bb      	bne.n	8008a58 <_printf_float+0xe8>
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	d1b9      	bne.n	8008a58 <_printf_float+0xe8>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e7b6      	b.n	8008a56 <_printf_float+0xe6>
 8008ae8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008aec:	d119      	bne.n	8008b22 <_printf_float+0x1b2>
 8008aee:	2900      	cmp	r1, #0
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	dd0c      	ble.n	8008b0e <_printf_float+0x19e>
 8008af4:	6121      	str	r1, [r4, #16]
 8008af6:	b913      	cbnz	r3, 8008afe <_printf_float+0x18e>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	07d2      	lsls	r2, r2, #31
 8008afc:	d502      	bpl.n	8008b04 <_printf_float+0x194>
 8008afe:	3301      	adds	r3, #1
 8008b00:	440b      	add	r3, r1
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b06:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b08:	f04f 0900 	mov.w	r9, #0
 8008b0c:	e7d9      	b.n	8008ac2 <_printf_float+0x152>
 8008b0e:	b913      	cbnz	r3, 8008b16 <_printf_float+0x1a6>
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	07d0      	lsls	r0, r2, #31
 8008b14:	d501      	bpl.n	8008b1a <_printf_float+0x1aa>
 8008b16:	3302      	adds	r3, #2
 8008b18:	e7f3      	b.n	8008b02 <_printf_float+0x192>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e7f1      	b.n	8008b02 <_printf_float+0x192>
 8008b1e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008b22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b26:	4293      	cmp	r3, r2
 8008b28:	db05      	blt.n	8008b36 <_printf_float+0x1c6>
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	6123      	str	r3, [r4, #16]
 8008b2e:	07d1      	lsls	r1, r2, #31
 8008b30:	d5e8      	bpl.n	8008b04 <_printf_float+0x194>
 8008b32:	3301      	adds	r3, #1
 8008b34:	e7e5      	b.n	8008b02 <_printf_float+0x192>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bfd4      	ite	le
 8008b3a:	f1c3 0302 	rsble	r3, r3, #2
 8008b3e:	2301      	movgt	r3, #1
 8008b40:	4413      	add	r3, r2
 8008b42:	e7de      	b.n	8008b02 <_printf_float+0x192>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	055a      	lsls	r2, r3, #21
 8008b48:	d407      	bmi.n	8008b5a <_printf_float+0x1ea>
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	d12b      	bne.n	8008bb0 <_printf_float+0x240>
 8008b58:	e767      	b.n	8008a2a <_printf_float+0xba>
 8008b5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008b5e:	f240 80dc 	bls.w	8008d1a <_printf_float+0x3aa>
 8008b62:	2200      	movs	r2, #0
 8008b64:	2300      	movs	r3, #0
 8008b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b6a:	f7f7 ff59 	bl	8000a20 <__aeabi_dcmpeq>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d033      	beq.n	8008bda <_printf_float+0x26a>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4a41      	ldr	r2, [pc, #260]	; (8008c7c <_printf_float+0x30c>)
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f af54 	beq.w	8008a2a <_printf_float+0xba>
 8008b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b86:	429a      	cmp	r2, r3
 8008b88:	db02      	blt.n	8008b90 <_printf_float+0x220>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	07d8      	lsls	r0, r3, #31
 8008b8e:	d50f      	bpl.n	8008bb0 <_printf_float+0x240>
 8008b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af45 	beq.w	8008a2a <_printf_float+0xba>
 8008ba0:	f04f 0800 	mov.w	r8, #0
 8008ba4:	f104 091a 	add.w	r9, r4, #26
 8008ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4543      	cmp	r3, r8
 8008bae:	dc09      	bgt.n	8008bc4 <_printf_float+0x254>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	079b      	lsls	r3, r3, #30
 8008bb4:	f100 8103 	bmi.w	8008dbe <_printf_float+0x44e>
 8008bb8:	68e0      	ldr	r0, [r4, #12]
 8008bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbc:	4298      	cmp	r0, r3
 8008bbe:	bfb8      	it	lt
 8008bc0:	4618      	movlt	r0, r3
 8008bc2:	e734      	b.n	8008a2e <_printf_float+0xbe>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	464a      	mov	r2, r9
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f af2b 	beq.w	8008a2a <_printf_float+0xba>
 8008bd4:	f108 0801 	add.w	r8, r8, #1
 8008bd8:	e7e6      	b.n	8008ba8 <_printf_float+0x238>
 8008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dc2b      	bgt.n	8008c38 <_printf_float+0x2c8>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4a26      	ldr	r2, [pc, #152]	; (8008c7c <_printf_float+0x30c>)
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b8      	blx	r7
 8008bea:	3001      	adds	r0, #1
 8008bec:	f43f af1d 	beq.w	8008a2a <_printf_float+0xba>
 8008bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf2:	b923      	cbnz	r3, 8008bfe <_printf_float+0x28e>
 8008bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf6:	b913      	cbnz	r3, 8008bfe <_printf_float+0x28e>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	d5d8      	bpl.n	8008bb0 <_printf_float+0x240>
 8008bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f43f af0e 	beq.w	8008a2a <_printf_float+0xba>
 8008c0e:	f04f 0900 	mov.w	r9, #0
 8008c12:	f104 0a1a 	add.w	sl, r4, #26
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	425b      	negs	r3, r3
 8008c1a:	454b      	cmp	r3, r9
 8008c1c:	dc01      	bgt.n	8008c22 <_printf_float+0x2b2>
 8008c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c20:	e794      	b.n	8008b4c <_printf_float+0x1dc>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4652      	mov	r2, sl
 8008c26:	4631      	mov	r1, r6
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b8      	blx	r7
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f43f aefc 	beq.w	8008a2a <_printf_float+0xba>
 8008c32:	f109 0901 	add.w	r9, r9, #1
 8008c36:	e7ee      	b.n	8008c16 <_printf_float+0x2a6>
 8008c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	bfa8      	it	ge
 8008c40:	461a      	movge	r2, r3
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	4691      	mov	r9, r2
 8008c46:	dd07      	ble.n	8008c58 <_printf_float+0x2e8>
 8008c48:	4613      	mov	r3, r2
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	f43f aee9 	beq.w	8008a2a <_printf_float+0xba>
 8008c58:	f104 031a 	add.w	r3, r4, #26
 8008c5c:	f04f 0b00 	mov.w	fp, #0
 8008c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c64:	9306      	str	r3, [sp, #24]
 8008c66:	e015      	b.n	8008c94 <_printf_float+0x324>
 8008c68:	7fefffff 	.word	0x7fefffff
 8008c6c:	0800c2dc 	.word	0x0800c2dc
 8008c70:	0800c2d8 	.word	0x0800c2d8
 8008c74:	0800c2e4 	.word	0x0800c2e4
 8008c78:	0800c2e0 	.word	0x0800c2e0
 8008c7c:	0800c2e8 	.word	0x0800c2e8
 8008c80:	2301      	movs	r3, #1
 8008c82:	9a06      	ldr	r2, [sp, #24]
 8008c84:	4631      	mov	r1, r6
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b8      	blx	r7
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	f43f aecd 	beq.w	8008a2a <_printf_float+0xba>
 8008c90:	f10b 0b01 	add.w	fp, fp, #1
 8008c94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c98:	ebaa 0309 	sub.w	r3, sl, r9
 8008c9c:	455b      	cmp	r3, fp
 8008c9e:	dcef      	bgt.n	8008c80 <_printf_float+0x310>
 8008ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	44d0      	add	r8, sl
 8008ca8:	db15      	blt.n	8008cd6 <_printf_float+0x366>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	07da      	lsls	r2, r3, #31
 8008cae:	d412      	bmi.n	8008cd6 <_printf_float+0x366>
 8008cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cb4:	eba3 020a 	sub.w	r2, r3, sl
 8008cb8:	eba3 0a01 	sub.w	sl, r3, r1
 8008cbc:	4592      	cmp	sl, r2
 8008cbe:	bfa8      	it	ge
 8008cc0:	4692      	movge	sl, r2
 8008cc2:	f1ba 0f00 	cmp.w	sl, #0
 8008cc6:	dc0e      	bgt.n	8008ce6 <_printf_float+0x376>
 8008cc8:	f04f 0800 	mov.w	r8, #0
 8008ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd0:	f104 091a 	add.w	r9, r4, #26
 8008cd4:	e019      	b.n	8008d0a <_printf_float+0x39a>
 8008cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d1e5      	bne.n	8008cb0 <_printf_float+0x340>
 8008ce4:	e6a1      	b.n	8008a2a <_printf_float+0xba>
 8008ce6:	4653      	mov	r3, sl
 8008ce8:	4642      	mov	r2, r8
 8008cea:	4631      	mov	r1, r6
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d1e9      	bne.n	8008cc8 <_printf_float+0x358>
 8008cf4:	e699      	b.n	8008a2a <_printf_float+0xba>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	464a      	mov	r2, r9
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	f43f ae92 	beq.w	8008a2a <_printf_float+0xba>
 8008d06:	f108 0801 	add.w	r8, r8, #1
 8008d0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	eba3 030a 	sub.w	r3, r3, sl
 8008d14:	4543      	cmp	r3, r8
 8008d16:	dcee      	bgt.n	8008cf6 <_printf_float+0x386>
 8008d18:	e74a      	b.n	8008bb0 <_printf_float+0x240>
 8008d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d1c:	2a01      	cmp	r2, #1
 8008d1e:	dc01      	bgt.n	8008d24 <_printf_float+0x3b4>
 8008d20:	07db      	lsls	r3, r3, #31
 8008d22:	d53a      	bpl.n	8008d9a <_printf_float+0x42a>
 8008d24:	2301      	movs	r3, #1
 8008d26:	4642      	mov	r2, r8
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f43f ae7b 	beq.w	8008a2a <_printf_float+0xba>
 8008d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f108 0801 	add.w	r8, r8, #1
 8008d44:	f43f ae71 	beq.w	8008a2a <_printf_float+0xba>
 8008d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d54:	2300      	movs	r3, #0
 8008d56:	f7f7 fe63 	bl	8000a20 <__aeabi_dcmpeq>
 8008d5a:	b9c8      	cbnz	r0, 8008d90 <_printf_float+0x420>
 8008d5c:	4653      	mov	r3, sl
 8008d5e:	4642      	mov	r2, r8
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	d10e      	bne.n	8008d88 <_printf_float+0x418>
 8008d6a:	e65e      	b.n	8008a2a <_printf_float+0xba>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4652      	mov	r2, sl
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f ae57 	beq.w	8008a2a <_printf_float+0xba>
 8008d7c:	f108 0801 	add.w	r8, r8, #1
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	3b01      	subs	r3, #1
 8008d84:	4543      	cmp	r3, r8
 8008d86:	dcf1      	bgt.n	8008d6c <_printf_float+0x3fc>
 8008d88:	464b      	mov	r3, r9
 8008d8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d8e:	e6de      	b.n	8008b4e <_printf_float+0x1de>
 8008d90:	f04f 0800 	mov.w	r8, #0
 8008d94:	f104 0a1a 	add.w	sl, r4, #26
 8008d98:	e7f2      	b.n	8008d80 <_printf_float+0x410>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e7df      	b.n	8008d5e <_printf_float+0x3ee>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	464a      	mov	r2, r9
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b8      	blx	r7
 8008da8:	3001      	adds	r0, #1
 8008daa:	f43f ae3e 	beq.w	8008a2a <_printf_float+0xba>
 8008dae:	f108 0801 	add.w	r8, r8, #1
 8008db2:	68e3      	ldr	r3, [r4, #12]
 8008db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	4543      	cmp	r3, r8
 8008dba:	dcf0      	bgt.n	8008d9e <_printf_float+0x42e>
 8008dbc:	e6fc      	b.n	8008bb8 <_printf_float+0x248>
 8008dbe:	f04f 0800 	mov.w	r8, #0
 8008dc2:	f104 0919 	add.w	r9, r4, #25
 8008dc6:	e7f4      	b.n	8008db2 <_printf_float+0x442>
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	f43f ae8b 	beq.w	8008ae4 <_printf_float+0x174>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008dd4:	ab09      	add	r3, sp, #36	; 0x24
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	ec49 8b10 	vmov	d0, r8, r9
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	f8cd a004 	str.w	sl, [sp, #4]
 8008de2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008de6:	4628      	mov	r0, r5
 8008de8:	f7ff fd2d 	bl	8008846 <__cvt>
 8008dec:	4680      	mov	r8, r0
 8008dee:	e648      	b.n	8008a82 <_printf_float+0x112>

08008df0 <_printf_common>:
 8008df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	4691      	mov	r9, r2
 8008df6:	461f      	mov	r7, r3
 8008df8:	688a      	ldr	r2, [r1, #8]
 8008dfa:	690b      	ldr	r3, [r1, #16]
 8008dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e00:	4293      	cmp	r3, r2
 8008e02:	bfb8      	it	lt
 8008e04:	4613      	movlt	r3, r2
 8008e06:	f8c9 3000 	str.w	r3, [r9]
 8008e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460c      	mov	r4, r1
 8008e12:	b112      	cbz	r2, 8008e1a <_printf_common+0x2a>
 8008e14:	3301      	adds	r3, #1
 8008e16:	f8c9 3000 	str.w	r3, [r9]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	0699      	lsls	r1, r3, #26
 8008e1e:	bf42      	ittt	mi
 8008e20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e24:	3302      	addmi	r3, #2
 8008e26:	f8c9 3000 	strmi.w	r3, [r9]
 8008e2a:	6825      	ldr	r5, [r4, #0]
 8008e2c:	f015 0506 	ands.w	r5, r5, #6
 8008e30:	d107      	bne.n	8008e42 <_printf_common+0x52>
 8008e32:	f104 0a19 	add.w	sl, r4, #25
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	f8d9 2000 	ldr.w	r2, [r9]
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	dc28      	bgt.n	8008e94 <_printf_common+0xa4>
 8008e42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	3300      	adds	r3, #0
 8008e4a:	bf18      	it	ne
 8008e4c:	2301      	movne	r3, #1
 8008e4e:	0692      	lsls	r2, r2, #26
 8008e50:	d42d      	bmi.n	8008eae <_printf_common+0xbe>
 8008e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e56:	4639      	mov	r1, r7
 8008e58:	4630      	mov	r0, r6
 8008e5a:	47c0      	blx	r8
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d020      	beq.n	8008ea2 <_printf_common+0xb2>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	68e5      	ldr	r5, [r4, #12]
 8008e64:	f8d9 2000 	ldr.w	r2, [r9]
 8008e68:	f003 0306 	and.w	r3, r3, #6
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	bf08      	it	eq
 8008e70:	1aad      	subeq	r5, r5, r2
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	6922      	ldr	r2, [r4, #16]
 8008e76:	bf0c      	ite	eq
 8008e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e7c:	2500      	movne	r5, #0
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	bfc4      	itt	gt
 8008e82:	1a9b      	subgt	r3, r3, r2
 8008e84:	18ed      	addgt	r5, r5, r3
 8008e86:	f04f 0900 	mov.w	r9, #0
 8008e8a:	341a      	adds	r4, #26
 8008e8c:	454d      	cmp	r5, r9
 8008e8e:	d11a      	bne.n	8008ec6 <_printf_common+0xd6>
 8008e90:	2000      	movs	r0, #0
 8008e92:	e008      	b.n	8008ea6 <_printf_common+0xb6>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4652      	mov	r2, sl
 8008e98:	4639      	mov	r1, r7
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d103      	bne.n	8008eaa <_printf_common+0xba>
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eaa:	3501      	adds	r5, #1
 8008eac:	e7c3      	b.n	8008e36 <_printf_common+0x46>
 8008eae:	18e1      	adds	r1, r4, r3
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	2030      	movs	r0, #48	; 0x30
 8008eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eb8:	4422      	add	r2, r4
 8008eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	e7c5      	b.n	8008e52 <_printf_common+0x62>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4639      	mov	r1, r7
 8008ecc:	4630      	mov	r0, r6
 8008ece:	47c0      	blx	r8
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d0e6      	beq.n	8008ea2 <_printf_common+0xb2>
 8008ed4:	f109 0901 	add.w	r9, r9, #1
 8008ed8:	e7d8      	b.n	8008e8c <_printf_common+0x9c>

08008eda <quorem>:
 8008eda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ede:	6903      	ldr	r3, [r0, #16]
 8008ee0:	690c      	ldr	r4, [r1, #16]
 8008ee2:	42a3      	cmp	r3, r4
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	f2c0 8082 	blt.w	8008fee <quorem+0x114>
 8008eea:	3c01      	subs	r4, #1
 8008eec:	f101 0714 	add.w	r7, r1, #20
 8008ef0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008ef4:	f100 0614 	add.w	r6, r0, #20
 8008ef8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008efc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008f00:	eb06 030c 	add.w	r3, r6, ip
 8008f04:	3501      	adds	r5, #1
 8008f06:	eb07 090c 	add.w	r9, r7, ip
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	fbb0 f5f5 	udiv	r5, r0, r5
 8008f10:	b395      	cbz	r5, 8008f78 <quorem+0x9e>
 8008f12:	f04f 0a00 	mov.w	sl, #0
 8008f16:	4638      	mov	r0, r7
 8008f18:	46b6      	mov	lr, r6
 8008f1a:	46d3      	mov	fp, sl
 8008f1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f20:	b293      	uxth	r3, r2
 8008f22:	fb05 a303 	mla	r3, r5, r3, sl
 8008f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	ebab 0303 	sub.w	r3, fp, r3
 8008f30:	0c12      	lsrs	r2, r2, #16
 8008f32:	f8de b000 	ldr.w	fp, [lr]
 8008f36:	fb05 a202 	mla	r2, r5, r2, sl
 8008f3a:	fa13 f38b 	uxtah	r3, r3, fp
 8008f3e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008f42:	fa1f fb82 	uxth.w	fp, r2
 8008f46:	f8de 2000 	ldr.w	r2, [lr]
 8008f4a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008f4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f58:	4581      	cmp	r9, r0
 8008f5a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008f5e:	f84e 3b04 	str.w	r3, [lr], #4
 8008f62:	d2db      	bcs.n	8008f1c <quorem+0x42>
 8008f64:	f856 300c 	ldr.w	r3, [r6, ip]
 8008f68:	b933      	cbnz	r3, 8008f78 <quorem+0x9e>
 8008f6a:	9b01      	ldr	r3, [sp, #4]
 8008f6c:	3b04      	subs	r3, #4
 8008f6e:	429e      	cmp	r6, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	d330      	bcc.n	8008fd6 <quorem+0xfc>
 8008f74:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f78:	4640      	mov	r0, r8
 8008f7a:	f001 f821 	bl	8009fc0 <__mcmp>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	db25      	blt.n	8008fce <quorem+0xf4>
 8008f82:	3501      	adds	r5, #1
 8008f84:	4630      	mov	r0, r6
 8008f86:	f04f 0c00 	mov.w	ip, #0
 8008f8a:	f857 2b04 	ldr.w	r2, [r7], #4
 8008f8e:	f8d0 e000 	ldr.w	lr, [r0]
 8008f92:	b293      	uxth	r3, r2
 8008f94:	ebac 0303 	sub.w	r3, ip, r3
 8008f98:	0c12      	lsrs	r2, r2, #16
 8008f9a:	fa13 f38e 	uxtah	r3, r3, lr
 8008f9e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fac:	45b9      	cmp	r9, r7
 8008fae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fb2:	f840 3b04 	str.w	r3, [r0], #4
 8008fb6:	d2e8      	bcs.n	8008f8a <quorem+0xb0>
 8008fb8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008fbc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008fc0:	b92a      	cbnz	r2, 8008fce <quorem+0xf4>
 8008fc2:	3b04      	subs	r3, #4
 8008fc4:	429e      	cmp	r6, r3
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	d30b      	bcc.n	8008fe2 <quorem+0x108>
 8008fca:	f8c8 4010 	str.w	r4, [r8, #16]
 8008fce:	4628      	mov	r0, r5
 8008fd0:	b003      	add	sp, #12
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	6812      	ldr	r2, [r2, #0]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	d1ca      	bne.n	8008f74 <quorem+0x9a>
 8008fde:	3c01      	subs	r4, #1
 8008fe0:	e7c5      	b.n	8008f6e <quorem+0x94>
 8008fe2:	6812      	ldr	r2, [r2, #0]
 8008fe4:	3b04      	subs	r3, #4
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	d1ef      	bne.n	8008fca <quorem+0xf0>
 8008fea:	3c01      	subs	r4, #1
 8008fec:	e7ea      	b.n	8008fc4 <quorem+0xea>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e7ee      	b.n	8008fd0 <quorem+0xf6>
 8008ff2:	0000      	movs	r0, r0
 8008ff4:	0000      	movs	r0, r0
	...

08008ff8 <_dtoa_r>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	ec57 6b10 	vmov	r6, r7, d0
 8009000:	b097      	sub	sp, #92	; 0x5c
 8009002:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009004:	9106      	str	r1, [sp, #24]
 8009006:	4604      	mov	r4, r0
 8009008:	920b      	str	r2, [sp, #44]	; 0x2c
 800900a:	9312      	str	r3, [sp, #72]	; 0x48
 800900c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009010:	e9cd 6700 	strd	r6, r7, [sp]
 8009014:	b93d      	cbnz	r5, 8009026 <_dtoa_r+0x2e>
 8009016:	2010      	movs	r0, #16
 8009018:	f000 fdb4 	bl	8009b84 <malloc>
 800901c:	6260      	str	r0, [r4, #36]	; 0x24
 800901e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009022:	6005      	str	r5, [r0, #0]
 8009024:	60c5      	str	r5, [r0, #12]
 8009026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009028:	6819      	ldr	r1, [r3, #0]
 800902a:	b151      	cbz	r1, 8009042 <_dtoa_r+0x4a>
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	604a      	str	r2, [r1, #4]
 8009030:	2301      	movs	r3, #1
 8009032:	4093      	lsls	r3, r2
 8009034:	608b      	str	r3, [r1, #8]
 8009036:	4620      	mov	r0, r4
 8009038:	f000 fde0 	bl	8009bfc <_Bfree>
 800903c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	1e3b      	subs	r3, r7, #0
 8009044:	bfbb      	ittet	lt
 8009046:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800904a:	9301      	strlt	r3, [sp, #4]
 800904c:	2300      	movge	r3, #0
 800904e:	2201      	movlt	r2, #1
 8009050:	bfac      	ite	ge
 8009052:	f8c8 3000 	strge.w	r3, [r8]
 8009056:	f8c8 2000 	strlt.w	r2, [r8]
 800905a:	4baf      	ldr	r3, [pc, #700]	; (8009318 <_dtoa_r+0x320>)
 800905c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009060:	ea33 0308 	bics.w	r3, r3, r8
 8009064:	d114      	bne.n	8009090 <_dtoa_r+0x98>
 8009066:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009068:	f242 730f 	movw	r3, #9999	; 0x270f
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	9b00      	ldr	r3, [sp, #0]
 8009070:	b923      	cbnz	r3, 800907c <_dtoa_r+0x84>
 8009072:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009076:	2800      	cmp	r0, #0
 8009078:	f000 8542 	beq.w	8009b00 <_dtoa_r+0xb08>
 800907c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800907e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800932c <_dtoa_r+0x334>
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 8544 	beq.w	8009b10 <_dtoa_r+0xb18>
 8009088:	f10b 0303 	add.w	r3, fp, #3
 800908c:	f000 bd3e 	b.w	8009b0c <_dtoa_r+0xb14>
 8009090:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fcc0 	bl	8000a20 <__aeabi_dcmpeq>
 80090a0:	4681      	mov	r9, r0
 80090a2:	b168      	cbz	r0, 80090c0 <_dtoa_r+0xc8>
 80090a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090a6:	2301      	movs	r3, #1
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8524 	beq.w	8009afa <_dtoa_r+0xb02>
 80090b2:	4b9a      	ldr	r3, [pc, #616]	; (800931c <_dtoa_r+0x324>)
 80090b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	f000 bd28 	b.w	8009b10 <_dtoa_r+0xb18>
 80090c0:	aa14      	add	r2, sp, #80	; 0x50
 80090c2:	a915      	add	r1, sp, #84	; 0x54
 80090c4:	ec47 6b10 	vmov	d0, r6, r7
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fff0 	bl	800a0ae <__d2b>
 80090ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80090d2:	9004      	str	r0, [sp, #16]
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	d07c      	beq.n	80091d2 <_dtoa_r+0x1da>
 80090d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80090e0:	46b2      	mov	sl, r6
 80090e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80090e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80090ee:	2200      	movs	r2, #0
 80090f0:	4b8b      	ldr	r3, [pc, #556]	; (8009320 <_dtoa_r+0x328>)
 80090f2:	4650      	mov	r0, sl
 80090f4:	4659      	mov	r1, fp
 80090f6:	f7f7 f873 	bl	80001e0 <__aeabi_dsub>
 80090fa:	a381      	add	r3, pc, #516	; (adr r3, 8009300 <_dtoa_r+0x308>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fa26 	bl	8000550 <__aeabi_dmul>
 8009104:	a380      	add	r3, pc, #512	; (adr r3, 8009308 <_dtoa_r+0x310>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f86b 	bl	80001e4 <__adddf3>
 800910e:	4606      	mov	r6, r0
 8009110:	4628      	mov	r0, r5
 8009112:	460f      	mov	r7, r1
 8009114:	f7f7 f9b2 	bl	800047c <__aeabi_i2d>
 8009118:	a37d      	add	r3, pc, #500	; (adr r3, 8009310 <_dtoa_r+0x318>)
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fa17 	bl	8000550 <__aeabi_dmul>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4630      	mov	r0, r6
 8009128:	4639      	mov	r1, r7
 800912a:	f7f7 f85b 	bl	80001e4 <__adddf3>
 800912e:	4606      	mov	r6, r0
 8009130:	460f      	mov	r7, r1
 8009132:	f7f7 fcbd 	bl	8000ab0 <__aeabi_d2iz>
 8009136:	2200      	movs	r2, #0
 8009138:	4682      	mov	sl, r0
 800913a:	2300      	movs	r3, #0
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fc78 	bl	8000a34 <__aeabi_dcmplt>
 8009144:	b148      	cbz	r0, 800915a <_dtoa_r+0x162>
 8009146:	4650      	mov	r0, sl
 8009148:	f7f7 f998 	bl	800047c <__aeabi_i2d>
 800914c:	4632      	mov	r2, r6
 800914e:	463b      	mov	r3, r7
 8009150:	f7f7 fc66 	bl	8000a20 <__aeabi_dcmpeq>
 8009154:	b908      	cbnz	r0, 800915a <_dtoa_r+0x162>
 8009156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800915a:	f1ba 0f16 	cmp.w	sl, #22
 800915e:	d859      	bhi.n	8009214 <_dtoa_r+0x21c>
 8009160:	4970      	ldr	r1, [pc, #448]	; (8009324 <_dtoa_r+0x32c>)
 8009162:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800916a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800916e:	f7f7 fc7f 	bl	8000a70 <__aeabi_dcmpgt>
 8009172:	2800      	cmp	r0, #0
 8009174:	d050      	beq.n	8009218 <_dtoa_r+0x220>
 8009176:	f10a 3aff 	add.w	sl, sl, #4294967295
 800917a:	2300      	movs	r3, #0
 800917c:	930f      	str	r3, [sp, #60]	; 0x3c
 800917e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009180:	1b5d      	subs	r5, r3, r5
 8009182:	f1b5 0801 	subs.w	r8, r5, #1
 8009186:	bf49      	itett	mi
 8009188:	f1c5 0301 	rsbmi	r3, r5, #1
 800918c:	2300      	movpl	r3, #0
 800918e:	9305      	strmi	r3, [sp, #20]
 8009190:	f04f 0800 	movmi.w	r8, #0
 8009194:	bf58      	it	pl
 8009196:	9305      	strpl	r3, [sp, #20]
 8009198:	f1ba 0f00 	cmp.w	sl, #0
 800919c:	db3e      	blt.n	800921c <_dtoa_r+0x224>
 800919e:	2300      	movs	r3, #0
 80091a0:	44d0      	add	r8, sl
 80091a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80091a6:	9307      	str	r3, [sp, #28]
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	2b09      	cmp	r3, #9
 80091ac:	f200 8090 	bhi.w	80092d0 <_dtoa_r+0x2d8>
 80091b0:	2b05      	cmp	r3, #5
 80091b2:	bfc4      	itt	gt
 80091b4:	3b04      	subgt	r3, #4
 80091b6:	9306      	strgt	r3, [sp, #24]
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	f1a3 0302 	sub.w	r3, r3, #2
 80091be:	bfcc      	ite	gt
 80091c0:	2500      	movgt	r5, #0
 80091c2:	2501      	movle	r5, #1
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	f200 808f 	bhi.w	80092e8 <_dtoa_r+0x2f0>
 80091ca:	e8df f003 	tbb	[pc, r3]
 80091ce:	7f7d      	.short	0x7f7d
 80091d0:	7131      	.short	0x7131
 80091d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80091d6:	441d      	add	r5, r3
 80091d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80091dc:	2820      	cmp	r0, #32
 80091de:	dd13      	ble.n	8009208 <_dtoa_r+0x210>
 80091e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	fa08 f800 	lsl.w	r8, r8, r0
 80091ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80091ee:	fa23 f000 	lsr.w	r0, r3, r0
 80091f2:	ea48 0000 	orr.w	r0, r8, r0
 80091f6:	f7f7 f931 	bl	800045c <__aeabi_ui2d>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4682      	mov	sl, r0
 80091fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009202:	3d01      	subs	r5, #1
 8009204:	9313      	str	r3, [sp, #76]	; 0x4c
 8009206:	e772      	b.n	80090ee <_dtoa_r+0xf6>
 8009208:	9b00      	ldr	r3, [sp, #0]
 800920a:	f1c0 0020 	rsb	r0, r0, #32
 800920e:	fa03 f000 	lsl.w	r0, r3, r0
 8009212:	e7f0      	b.n	80091f6 <_dtoa_r+0x1fe>
 8009214:	2301      	movs	r3, #1
 8009216:	e7b1      	b.n	800917c <_dtoa_r+0x184>
 8009218:	900f      	str	r0, [sp, #60]	; 0x3c
 800921a:	e7b0      	b.n	800917e <_dtoa_r+0x186>
 800921c:	9b05      	ldr	r3, [sp, #20]
 800921e:	eba3 030a 	sub.w	r3, r3, sl
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	f1ca 0300 	rsb	r3, sl, #0
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	2300      	movs	r3, #0
 800922c:	930e      	str	r3, [sp, #56]	; 0x38
 800922e:	e7bb      	b.n	80091a8 <_dtoa_r+0x1b0>
 8009230:	2301      	movs	r3, #1
 8009232:	930a      	str	r3, [sp, #40]	; 0x28
 8009234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009236:	2b00      	cmp	r3, #0
 8009238:	dd59      	ble.n	80092ee <_dtoa_r+0x2f6>
 800923a:	9302      	str	r3, [sp, #8]
 800923c:	4699      	mov	r9, r3
 800923e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009240:	2200      	movs	r2, #0
 8009242:	6072      	str	r2, [r6, #4]
 8009244:	2204      	movs	r2, #4
 8009246:	f102 0014 	add.w	r0, r2, #20
 800924a:	4298      	cmp	r0, r3
 800924c:	6871      	ldr	r1, [r6, #4]
 800924e:	d953      	bls.n	80092f8 <_dtoa_r+0x300>
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fc9f 	bl	8009b94 <_Balloc>
 8009256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009258:	6030      	str	r0, [r6, #0]
 800925a:	f1b9 0f0e 	cmp.w	r9, #14
 800925e:	f8d3 b000 	ldr.w	fp, [r3]
 8009262:	f200 80e6 	bhi.w	8009432 <_dtoa_r+0x43a>
 8009266:	2d00      	cmp	r5, #0
 8009268:	f000 80e3 	beq.w	8009432 <_dtoa_r+0x43a>
 800926c:	ed9d 7b00 	vldr	d7, [sp]
 8009270:	f1ba 0f00 	cmp.w	sl, #0
 8009274:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009278:	dd74      	ble.n	8009364 <_dtoa_r+0x36c>
 800927a:	4a2a      	ldr	r2, [pc, #168]	; (8009324 <_dtoa_r+0x32c>)
 800927c:	f00a 030f 	and.w	r3, sl, #15
 8009280:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009284:	ed93 7b00 	vldr	d7, [r3]
 8009288:	ea4f 162a 	mov.w	r6, sl, asr #4
 800928c:	06f0      	lsls	r0, r6, #27
 800928e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009292:	d565      	bpl.n	8009360 <_dtoa_r+0x368>
 8009294:	4b24      	ldr	r3, [pc, #144]	; (8009328 <_dtoa_r+0x330>)
 8009296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800929a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800929e:	f7f7 fa81 	bl	80007a4 <__aeabi_ddiv>
 80092a2:	e9cd 0100 	strd	r0, r1, [sp]
 80092a6:	f006 060f 	and.w	r6, r6, #15
 80092aa:	2503      	movs	r5, #3
 80092ac:	4f1e      	ldr	r7, [pc, #120]	; (8009328 <_dtoa_r+0x330>)
 80092ae:	e04c      	b.n	800934a <_dtoa_r+0x352>
 80092b0:	2301      	movs	r3, #1
 80092b2:	930a      	str	r3, [sp, #40]	; 0x28
 80092b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b6:	4453      	add	r3, sl
 80092b8:	f103 0901 	add.w	r9, r3, #1
 80092bc:	9302      	str	r3, [sp, #8]
 80092be:	464b      	mov	r3, r9
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	bfb8      	it	lt
 80092c4:	2301      	movlt	r3, #1
 80092c6:	e7ba      	b.n	800923e <_dtoa_r+0x246>
 80092c8:	2300      	movs	r3, #0
 80092ca:	e7b2      	b.n	8009232 <_dtoa_r+0x23a>
 80092cc:	2300      	movs	r3, #0
 80092ce:	e7f0      	b.n	80092b2 <_dtoa_r+0x2ba>
 80092d0:	2501      	movs	r5, #1
 80092d2:	2300      	movs	r3, #0
 80092d4:	9306      	str	r3, [sp, #24]
 80092d6:	950a      	str	r5, [sp, #40]	; 0x28
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	4699      	mov	r9, r3
 80092e0:	2200      	movs	r2, #0
 80092e2:	2312      	movs	r3, #18
 80092e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80092e6:	e7aa      	b.n	800923e <_dtoa_r+0x246>
 80092e8:	2301      	movs	r3, #1
 80092ea:	930a      	str	r3, [sp, #40]	; 0x28
 80092ec:	e7f4      	b.n	80092d8 <_dtoa_r+0x2e0>
 80092ee:	2301      	movs	r3, #1
 80092f0:	9302      	str	r3, [sp, #8]
 80092f2:	4699      	mov	r9, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	e7f5      	b.n	80092e4 <_dtoa_r+0x2ec>
 80092f8:	3101      	adds	r1, #1
 80092fa:	6071      	str	r1, [r6, #4]
 80092fc:	0052      	lsls	r2, r2, #1
 80092fe:	e7a2      	b.n	8009246 <_dtoa_r+0x24e>
 8009300:	636f4361 	.word	0x636f4361
 8009304:	3fd287a7 	.word	0x3fd287a7
 8009308:	8b60c8b3 	.word	0x8b60c8b3
 800930c:	3fc68a28 	.word	0x3fc68a28
 8009310:	509f79fb 	.word	0x509f79fb
 8009314:	3fd34413 	.word	0x3fd34413
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	0800c2e9 	.word	0x0800c2e9
 8009320:	3ff80000 	.word	0x3ff80000
 8009324:	0800c320 	.word	0x0800c320
 8009328:	0800c2f8 	.word	0x0800c2f8
 800932c:	0800c2f3 	.word	0x0800c2f3
 8009330:	07f1      	lsls	r1, r6, #31
 8009332:	d508      	bpl.n	8009346 <_dtoa_r+0x34e>
 8009334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933c:	f7f7 f908 	bl	8000550 <__aeabi_dmul>
 8009340:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009344:	3501      	adds	r5, #1
 8009346:	1076      	asrs	r6, r6, #1
 8009348:	3708      	adds	r7, #8
 800934a:	2e00      	cmp	r6, #0
 800934c:	d1f0      	bne.n	8009330 <_dtoa_r+0x338>
 800934e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009352:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009356:	f7f7 fa25 	bl	80007a4 <__aeabi_ddiv>
 800935a:	e9cd 0100 	strd	r0, r1, [sp]
 800935e:	e01a      	b.n	8009396 <_dtoa_r+0x39e>
 8009360:	2502      	movs	r5, #2
 8009362:	e7a3      	b.n	80092ac <_dtoa_r+0x2b4>
 8009364:	f000 80a0 	beq.w	80094a8 <_dtoa_r+0x4b0>
 8009368:	f1ca 0600 	rsb	r6, sl, #0
 800936c:	4b9f      	ldr	r3, [pc, #636]	; (80095ec <_dtoa_r+0x5f4>)
 800936e:	4fa0      	ldr	r7, [pc, #640]	; (80095f0 <_dtoa_r+0x5f8>)
 8009370:	f006 020f 	and.w	r2, r6, #15
 8009374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009380:	f7f7 f8e6 	bl	8000550 <__aeabi_dmul>
 8009384:	e9cd 0100 	strd	r0, r1, [sp]
 8009388:	1136      	asrs	r6, r6, #4
 800938a:	2300      	movs	r3, #0
 800938c:	2502      	movs	r5, #2
 800938e:	2e00      	cmp	r6, #0
 8009390:	d17f      	bne.n	8009492 <_dtoa_r+0x49a>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e1      	bne.n	800935a <_dtoa_r+0x362>
 8009396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8087 	beq.w	80094ac <_dtoa_r+0x4b4>
 800939e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b93      	ldr	r3, [pc, #588]	; (80095f4 <_dtoa_r+0x5fc>)
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f7 fb43 	bl	8000a34 <__aeabi_dcmplt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d07c      	beq.n	80094ac <_dtoa_r+0x4b4>
 80093b2:	f1b9 0f00 	cmp.w	r9, #0
 80093b6:	d079      	beq.n	80094ac <_dtoa_r+0x4b4>
 80093b8:	9b02      	ldr	r3, [sp, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dd35      	ble.n	800942a <_dtoa_r+0x432>
 80093be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	4639      	mov	r1, r7
 80093c6:	2200      	movs	r2, #0
 80093c8:	4b8b      	ldr	r3, [pc, #556]	; (80095f8 <_dtoa_r+0x600>)
 80093ca:	4630      	mov	r0, r6
 80093cc:	f7f7 f8c0 	bl	8000550 <__aeabi_dmul>
 80093d0:	e9cd 0100 	strd	r0, r1, [sp]
 80093d4:	9f02      	ldr	r7, [sp, #8]
 80093d6:	3501      	adds	r5, #1
 80093d8:	4628      	mov	r0, r5
 80093da:	f7f7 f84f 	bl	800047c <__aeabi_i2d>
 80093de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e2:	f7f7 f8b5 	bl	8000550 <__aeabi_dmul>
 80093e6:	2200      	movs	r2, #0
 80093e8:	4b84      	ldr	r3, [pc, #528]	; (80095fc <_dtoa_r+0x604>)
 80093ea:	f7f6 fefb 	bl	80001e4 <__adddf3>
 80093ee:	4605      	mov	r5, r0
 80093f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	d15d      	bne.n	80094b4 <_dtoa_r+0x4bc>
 80093f8:	2200      	movs	r2, #0
 80093fa:	4b81      	ldr	r3, [pc, #516]	; (8009600 <_dtoa_r+0x608>)
 80093fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009400:	f7f6 feee 	bl	80001e0 <__aeabi_dsub>
 8009404:	462a      	mov	r2, r5
 8009406:	4633      	mov	r3, r6
 8009408:	e9cd 0100 	strd	r0, r1, [sp]
 800940c:	f7f7 fb30 	bl	8000a70 <__aeabi_dcmpgt>
 8009410:	2800      	cmp	r0, #0
 8009412:	f040 8288 	bne.w	8009926 <_dtoa_r+0x92e>
 8009416:	462a      	mov	r2, r5
 8009418:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800941c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009420:	f7f7 fb08 	bl	8000a34 <__aeabi_dcmplt>
 8009424:	2800      	cmp	r0, #0
 8009426:	f040 827c 	bne.w	8009922 <_dtoa_r+0x92a>
 800942a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800942e:	e9cd 2300 	strd	r2, r3, [sp]
 8009432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009434:	2b00      	cmp	r3, #0
 8009436:	f2c0 8150 	blt.w	80096da <_dtoa_r+0x6e2>
 800943a:	f1ba 0f0e 	cmp.w	sl, #14
 800943e:	f300 814c 	bgt.w	80096da <_dtoa_r+0x6e2>
 8009442:	4b6a      	ldr	r3, [pc, #424]	; (80095ec <_dtoa_r+0x5f4>)
 8009444:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009448:	ed93 7b00 	vldr	d7, [r3]
 800944c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944e:	2b00      	cmp	r3, #0
 8009450:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009454:	f280 80d8 	bge.w	8009608 <_dtoa_r+0x610>
 8009458:	f1b9 0f00 	cmp.w	r9, #0
 800945c:	f300 80d4 	bgt.w	8009608 <_dtoa_r+0x610>
 8009460:	f040 825e 	bne.w	8009920 <_dtoa_r+0x928>
 8009464:	2200      	movs	r2, #0
 8009466:	4b66      	ldr	r3, [pc, #408]	; (8009600 <_dtoa_r+0x608>)
 8009468:	ec51 0b17 	vmov	r0, r1, d7
 800946c:	f7f7 f870 	bl	8000550 <__aeabi_dmul>
 8009470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009474:	f7f7 faf2 	bl	8000a5c <__aeabi_dcmpge>
 8009478:	464f      	mov	r7, r9
 800947a:	464e      	mov	r6, r9
 800947c:	2800      	cmp	r0, #0
 800947e:	f040 8234 	bne.w	80098ea <_dtoa_r+0x8f2>
 8009482:	2331      	movs	r3, #49	; 0x31
 8009484:	f10b 0501 	add.w	r5, fp, #1
 8009488:	f88b 3000 	strb.w	r3, [fp]
 800948c:	f10a 0a01 	add.w	sl, sl, #1
 8009490:	e22f      	b.n	80098f2 <_dtoa_r+0x8fa>
 8009492:	07f2      	lsls	r2, r6, #31
 8009494:	d505      	bpl.n	80094a2 <_dtoa_r+0x4aa>
 8009496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949a:	f7f7 f859 	bl	8000550 <__aeabi_dmul>
 800949e:	3501      	adds	r5, #1
 80094a0:	2301      	movs	r3, #1
 80094a2:	1076      	asrs	r6, r6, #1
 80094a4:	3708      	adds	r7, #8
 80094a6:	e772      	b.n	800938e <_dtoa_r+0x396>
 80094a8:	2502      	movs	r5, #2
 80094aa:	e774      	b.n	8009396 <_dtoa_r+0x39e>
 80094ac:	f8cd a020 	str.w	sl, [sp, #32]
 80094b0:	464f      	mov	r7, r9
 80094b2:	e791      	b.n	80093d8 <_dtoa_r+0x3e0>
 80094b4:	4b4d      	ldr	r3, [pc, #308]	; (80095ec <_dtoa_r+0x5f4>)
 80094b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d047      	beq.n	8009554 <_dtoa_r+0x55c>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	2000      	movs	r0, #0
 80094ca:	494e      	ldr	r1, [pc, #312]	; (8009604 <_dtoa_r+0x60c>)
 80094cc:	f7f7 f96a 	bl	80007a4 <__aeabi_ddiv>
 80094d0:	462a      	mov	r2, r5
 80094d2:	4633      	mov	r3, r6
 80094d4:	f7f6 fe84 	bl	80001e0 <__aeabi_dsub>
 80094d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094dc:	465d      	mov	r5, fp
 80094de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094e2:	f7f7 fae5 	bl	8000ab0 <__aeabi_d2iz>
 80094e6:	4606      	mov	r6, r0
 80094e8:	f7f6 ffc8 	bl	800047c <__aeabi_i2d>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f4:	f7f6 fe74 	bl	80001e0 <__aeabi_dsub>
 80094f8:	3630      	adds	r6, #48	; 0x30
 80094fa:	f805 6b01 	strb.w	r6, [r5], #1
 80094fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009502:	e9cd 0100 	strd	r0, r1, [sp]
 8009506:	f7f7 fa95 	bl	8000a34 <__aeabi_dcmplt>
 800950a:	2800      	cmp	r0, #0
 800950c:	d163      	bne.n	80095d6 <_dtoa_r+0x5de>
 800950e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009512:	2000      	movs	r0, #0
 8009514:	4937      	ldr	r1, [pc, #220]	; (80095f4 <_dtoa_r+0x5fc>)
 8009516:	f7f6 fe63 	bl	80001e0 <__aeabi_dsub>
 800951a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800951e:	f7f7 fa89 	bl	8000a34 <__aeabi_dcmplt>
 8009522:	2800      	cmp	r0, #0
 8009524:	f040 80b7 	bne.w	8009696 <_dtoa_r+0x69e>
 8009528:	eba5 030b 	sub.w	r3, r5, fp
 800952c:	429f      	cmp	r7, r3
 800952e:	f77f af7c 	ble.w	800942a <_dtoa_r+0x432>
 8009532:	2200      	movs	r2, #0
 8009534:	4b30      	ldr	r3, [pc, #192]	; (80095f8 <_dtoa_r+0x600>)
 8009536:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800953a:	f7f7 f809 	bl	8000550 <__aeabi_dmul>
 800953e:	2200      	movs	r2, #0
 8009540:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009544:	4b2c      	ldr	r3, [pc, #176]	; (80095f8 <_dtoa_r+0x600>)
 8009546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800954a:	f7f7 f801 	bl	8000550 <__aeabi_dmul>
 800954e:	e9cd 0100 	strd	r0, r1, [sp]
 8009552:	e7c4      	b.n	80094de <_dtoa_r+0x4e6>
 8009554:	462a      	mov	r2, r5
 8009556:	4633      	mov	r3, r6
 8009558:	f7f6 fffa 	bl	8000550 <__aeabi_dmul>
 800955c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009560:	eb0b 0507 	add.w	r5, fp, r7
 8009564:	465e      	mov	r6, fp
 8009566:	e9dd 0100 	ldrd	r0, r1, [sp]
 800956a:	f7f7 faa1 	bl	8000ab0 <__aeabi_d2iz>
 800956e:	4607      	mov	r7, r0
 8009570:	f7f6 ff84 	bl	800047c <__aeabi_i2d>
 8009574:	3730      	adds	r7, #48	; 0x30
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800957e:	f7f6 fe2f 	bl	80001e0 <__aeabi_dsub>
 8009582:	f806 7b01 	strb.w	r7, [r6], #1
 8009586:	42ae      	cmp	r6, r5
 8009588:	e9cd 0100 	strd	r0, r1, [sp]
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	d126      	bne.n	80095e0 <_dtoa_r+0x5e8>
 8009592:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <_dtoa_r+0x60c>)
 8009594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009598:	f7f6 fe24 	bl	80001e4 <__adddf3>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095a4:	f7f7 fa64 	bl	8000a70 <__aeabi_dcmpgt>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d174      	bne.n	8009696 <_dtoa_r+0x69e>
 80095ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80095b0:	2000      	movs	r0, #0
 80095b2:	4914      	ldr	r1, [pc, #80]	; (8009604 <_dtoa_r+0x60c>)
 80095b4:	f7f6 fe14 	bl	80001e0 <__aeabi_dsub>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095c0:	f7f7 fa38 	bl	8000a34 <__aeabi_dcmplt>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	f43f af30 	beq.w	800942a <_dtoa_r+0x432>
 80095ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095ce:	2b30      	cmp	r3, #48	; 0x30
 80095d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80095d4:	d002      	beq.n	80095dc <_dtoa_r+0x5e4>
 80095d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80095da:	e04a      	b.n	8009672 <_dtoa_r+0x67a>
 80095dc:	4615      	mov	r5, r2
 80095de:	e7f4      	b.n	80095ca <_dtoa_r+0x5d2>
 80095e0:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <_dtoa_r+0x600>)
 80095e2:	f7f6 ffb5 	bl	8000550 <__aeabi_dmul>
 80095e6:	e9cd 0100 	strd	r0, r1, [sp]
 80095ea:	e7bc      	b.n	8009566 <_dtoa_r+0x56e>
 80095ec:	0800c320 	.word	0x0800c320
 80095f0:	0800c2f8 	.word	0x0800c2f8
 80095f4:	3ff00000 	.word	0x3ff00000
 80095f8:	40240000 	.word	0x40240000
 80095fc:	401c0000 	.word	0x401c0000
 8009600:	40140000 	.word	0x40140000
 8009604:	3fe00000 	.word	0x3fe00000
 8009608:	e9dd 6700 	ldrd	r6, r7, [sp]
 800960c:	465d      	mov	r5, fp
 800960e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009612:	4630      	mov	r0, r6
 8009614:	4639      	mov	r1, r7
 8009616:	f7f7 f8c5 	bl	80007a4 <__aeabi_ddiv>
 800961a:	f7f7 fa49 	bl	8000ab0 <__aeabi_d2iz>
 800961e:	4680      	mov	r8, r0
 8009620:	f7f6 ff2c 	bl	800047c <__aeabi_i2d>
 8009624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009628:	f7f6 ff92 	bl	8000550 <__aeabi_dmul>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009638:	f7f6 fdd2 	bl	80001e0 <__aeabi_dsub>
 800963c:	f805 6b01 	strb.w	r6, [r5], #1
 8009640:	eba5 060b 	sub.w	r6, r5, fp
 8009644:	45b1      	cmp	r9, r6
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	d139      	bne.n	80096c0 <_dtoa_r+0x6c8>
 800964c:	f7f6 fdca 	bl	80001e4 <__adddf3>
 8009650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009654:	4606      	mov	r6, r0
 8009656:	460f      	mov	r7, r1
 8009658:	f7f7 fa0a 	bl	8000a70 <__aeabi_dcmpgt>
 800965c:	b9c8      	cbnz	r0, 8009692 <_dtoa_r+0x69a>
 800965e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	f7f7 f9db 	bl	8000a20 <__aeabi_dcmpeq>
 800966a:	b110      	cbz	r0, 8009672 <_dtoa_r+0x67a>
 800966c:	f018 0f01 	tst.w	r8, #1
 8009670:	d10f      	bne.n	8009692 <_dtoa_r+0x69a>
 8009672:	9904      	ldr	r1, [sp, #16]
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fac1 	bl	8009bfc <_Bfree>
 800967a:	2300      	movs	r3, #0
 800967c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800967e:	702b      	strb	r3, [r5, #0]
 8009680:	f10a 0301 	add.w	r3, sl, #1
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8241 	beq.w	8009b10 <_dtoa_r+0xb18>
 800968e:	601d      	str	r5, [r3, #0]
 8009690:	e23e      	b.n	8009b10 <_dtoa_r+0xb18>
 8009692:	f8cd a020 	str.w	sl, [sp, #32]
 8009696:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800969a:	2a39      	cmp	r2, #57	; 0x39
 800969c:	f105 33ff 	add.w	r3, r5, #4294967295
 80096a0:	d108      	bne.n	80096b4 <_dtoa_r+0x6bc>
 80096a2:	459b      	cmp	fp, r3
 80096a4:	d10a      	bne.n	80096bc <_dtoa_r+0x6c4>
 80096a6:	9b08      	ldr	r3, [sp, #32]
 80096a8:	3301      	adds	r3, #1
 80096aa:	9308      	str	r3, [sp, #32]
 80096ac:	2330      	movs	r3, #48	; 0x30
 80096ae:	f88b 3000 	strb.w	r3, [fp]
 80096b2:	465b      	mov	r3, fp
 80096b4:	781a      	ldrb	r2, [r3, #0]
 80096b6:	3201      	adds	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e78c      	b.n	80095d6 <_dtoa_r+0x5de>
 80096bc:	461d      	mov	r5, r3
 80096be:	e7ea      	b.n	8009696 <_dtoa_r+0x69e>
 80096c0:	2200      	movs	r2, #0
 80096c2:	4b9b      	ldr	r3, [pc, #620]	; (8009930 <_dtoa_r+0x938>)
 80096c4:	f7f6 ff44 	bl	8000550 <__aeabi_dmul>
 80096c8:	2200      	movs	r2, #0
 80096ca:	2300      	movs	r3, #0
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	f7f7 f9a6 	bl	8000a20 <__aeabi_dcmpeq>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d09a      	beq.n	800960e <_dtoa_r+0x616>
 80096d8:	e7cb      	b.n	8009672 <_dtoa_r+0x67a>
 80096da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096dc:	2a00      	cmp	r2, #0
 80096de:	f000 808b 	beq.w	80097f8 <_dtoa_r+0x800>
 80096e2:	9a06      	ldr	r2, [sp, #24]
 80096e4:	2a01      	cmp	r2, #1
 80096e6:	dc6e      	bgt.n	80097c6 <_dtoa_r+0x7ce>
 80096e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	d067      	beq.n	80097be <_dtoa_r+0x7c6>
 80096ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096f2:	9f07      	ldr	r7, [sp, #28]
 80096f4:	9d05      	ldr	r5, [sp, #20]
 80096f6:	9a05      	ldr	r2, [sp, #20]
 80096f8:	2101      	movs	r1, #1
 80096fa:	441a      	add	r2, r3
 80096fc:	4620      	mov	r0, r4
 80096fe:	9205      	str	r2, [sp, #20]
 8009700:	4498      	add	r8, r3
 8009702:	f000 fb1b 	bl	8009d3c <__i2b>
 8009706:	4606      	mov	r6, r0
 8009708:	2d00      	cmp	r5, #0
 800970a:	dd0c      	ble.n	8009726 <_dtoa_r+0x72e>
 800970c:	f1b8 0f00 	cmp.w	r8, #0
 8009710:	dd09      	ble.n	8009726 <_dtoa_r+0x72e>
 8009712:	4545      	cmp	r5, r8
 8009714:	9a05      	ldr	r2, [sp, #20]
 8009716:	462b      	mov	r3, r5
 8009718:	bfa8      	it	ge
 800971a:	4643      	movge	r3, r8
 800971c:	1ad2      	subs	r2, r2, r3
 800971e:	9205      	str	r2, [sp, #20]
 8009720:	1aed      	subs	r5, r5, r3
 8009722:	eba8 0803 	sub.w	r8, r8, r3
 8009726:	9b07      	ldr	r3, [sp, #28]
 8009728:	b1eb      	cbz	r3, 8009766 <_dtoa_r+0x76e>
 800972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	d067      	beq.n	8009800 <_dtoa_r+0x808>
 8009730:	b18f      	cbz	r7, 8009756 <_dtoa_r+0x75e>
 8009732:	4631      	mov	r1, r6
 8009734:	463a      	mov	r2, r7
 8009736:	4620      	mov	r0, r4
 8009738:	f000 fba0 	bl	8009e7c <__pow5mult>
 800973c:	9a04      	ldr	r2, [sp, #16]
 800973e:	4601      	mov	r1, r0
 8009740:	4606      	mov	r6, r0
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fb03 	bl	8009d4e <__multiply>
 8009748:	9904      	ldr	r1, [sp, #16]
 800974a:	9008      	str	r0, [sp, #32]
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fa55 	bl	8009bfc <_Bfree>
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	9b07      	ldr	r3, [sp, #28]
 8009758:	1bda      	subs	r2, r3, r7
 800975a:	d004      	beq.n	8009766 <_dtoa_r+0x76e>
 800975c:	9904      	ldr	r1, [sp, #16]
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fb8c 	bl	8009e7c <__pow5mult>
 8009764:	9004      	str	r0, [sp, #16]
 8009766:	2101      	movs	r1, #1
 8009768:	4620      	mov	r0, r4
 800976a:	f000 fae7 	bl	8009d3c <__i2b>
 800976e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009770:	4607      	mov	r7, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 81d0 	beq.w	8009b18 <_dtoa_r+0xb20>
 8009778:	461a      	mov	r2, r3
 800977a:	4601      	mov	r1, r0
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fb7d 	bl	8009e7c <__pow5mult>
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	2b01      	cmp	r3, #1
 8009786:	4607      	mov	r7, r0
 8009788:	dc40      	bgt.n	800980c <_dtoa_r+0x814>
 800978a:	9b00      	ldr	r3, [sp, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d139      	bne.n	8009804 <_dtoa_r+0x80c>
 8009790:	9b01      	ldr	r3, [sp, #4]
 8009792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009796:	2b00      	cmp	r3, #0
 8009798:	d136      	bne.n	8009808 <_dtoa_r+0x810>
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097a0:	0d1b      	lsrs	r3, r3, #20
 80097a2:	051b      	lsls	r3, r3, #20
 80097a4:	b12b      	cbz	r3, 80097b2 <_dtoa_r+0x7ba>
 80097a6:	9b05      	ldr	r3, [sp, #20]
 80097a8:	3301      	adds	r3, #1
 80097aa:	9305      	str	r3, [sp, #20]
 80097ac:	f108 0801 	add.w	r8, r8, #1
 80097b0:	2301      	movs	r3, #1
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d12a      	bne.n	8009810 <_dtoa_r+0x818>
 80097ba:	2001      	movs	r0, #1
 80097bc:	e030      	b.n	8009820 <_dtoa_r+0x828>
 80097be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097c4:	e795      	b.n	80096f2 <_dtoa_r+0x6fa>
 80097c6:	9b07      	ldr	r3, [sp, #28]
 80097c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80097cc:	42bb      	cmp	r3, r7
 80097ce:	bfbf      	itttt	lt
 80097d0:	9b07      	ldrlt	r3, [sp, #28]
 80097d2:	9707      	strlt	r7, [sp, #28]
 80097d4:	1afa      	sublt	r2, r7, r3
 80097d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80097d8:	bfbb      	ittet	lt
 80097da:	189b      	addlt	r3, r3, r2
 80097dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80097de:	1bdf      	subge	r7, r3, r7
 80097e0:	2700      	movlt	r7, #0
 80097e2:	f1b9 0f00 	cmp.w	r9, #0
 80097e6:	bfb5      	itete	lt
 80097e8:	9b05      	ldrlt	r3, [sp, #20]
 80097ea:	9d05      	ldrge	r5, [sp, #20]
 80097ec:	eba3 0509 	sublt.w	r5, r3, r9
 80097f0:	464b      	movge	r3, r9
 80097f2:	bfb8      	it	lt
 80097f4:	2300      	movlt	r3, #0
 80097f6:	e77e      	b.n	80096f6 <_dtoa_r+0x6fe>
 80097f8:	9f07      	ldr	r7, [sp, #28]
 80097fa:	9d05      	ldr	r5, [sp, #20]
 80097fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80097fe:	e783      	b.n	8009708 <_dtoa_r+0x710>
 8009800:	9a07      	ldr	r2, [sp, #28]
 8009802:	e7ab      	b.n	800975c <_dtoa_r+0x764>
 8009804:	2300      	movs	r3, #0
 8009806:	e7d4      	b.n	80097b2 <_dtoa_r+0x7ba>
 8009808:	9b00      	ldr	r3, [sp, #0]
 800980a:	e7d2      	b.n	80097b2 <_dtoa_r+0x7ba>
 800980c:	2300      	movs	r3, #0
 800980e:	9307      	str	r3, [sp, #28]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009816:	6918      	ldr	r0, [r3, #16]
 8009818:	f000 fa42 	bl	8009ca0 <__hi0bits>
 800981c:	f1c0 0020 	rsb	r0, r0, #32
 8009820:	4440      	add	r0, r8
 8009822:	f010 001f 	ands.w	r0, r0, #31
 8009826:	d047      	beq.n	80098b8 <_dtoa_r+0x8c0>
 8009828:	f1c0 0320 	rsb	r3, r0, #32
 800982c:	2b04      	cmp	r3, #4
 800982e:	dd3b      	ble.n	80098a8 <_dtoa_r+0x8b0>
 8009830:	9b05      	ldr	r3, [sp, #20]
 8009832:	f1c0 001c 	rsb	r0, r0, #28
 8009836:	4403      	add	r3, r0
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	4405      	add	r5, r0
 800983c:	4480      	add	r8, r0
 800983e:	9b05      	ldr	r3, [sp, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dd05      	ble.n	8009850 <_dtoa_r+0x858>
 8009844:	461a      	mov	r2, r3
 8009846:	9904      	ldr	r1, [sp, #16]
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fb65 	bl	8009f18 <__lshift>
 800984e:	9004      	str	r0, [sp, #16]
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	dd05      	ble.n	8009862 <_dtoa_r+0x86a>
 8009856:	4639      	mov	r1, r7
 8009858:	4642      	mov	r2, r8
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fb5c 	bl	8009f18 <__lshift>
 8009860:	4607      	mov	r7, r0
 8009862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009864:	b353      	cbz	r3, 80098bc <_dtoa_r+0x8c4>
 8009866:	4639      	mov	r1, r7
 8009868:	9804      	ldr	r0, [sp, #16]
 800986a:	f000 fba9 	bl	8009fc0 <__mcmp>
 800986e:	2800      	cmp	r0, #0
 8009870:	da24      	bge.n	80098bc <_dtoa_r+0x8c4>
 8009872:	2300      	movs	r3, #0
 8009874:	220a      	movs	r2, #10
 8009876:	9904      	ldr	r1, [sp, #16]
 8009878:	4620      	mov	r0, r4
 800987a:	f000 f9d6 	bl	8009c2a <__multadd>
 800987e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009880:	9004      	str	r0, [sp, #16]
 8009882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 814d 	beq.w	8009b26 <_dtoa_r+0xb2e>
 800988c:	2300      	movs	r3, #0
 800988e:	4631      	mov	r1, r6
 8009890:	220a      	movs	r2, #10
 8009892:	4620      	mov	r0, r4
 8009894:	f000 f9c9 	bl	8009c2a <__multadd>
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	4606      	mov	r6, r0
 800989e:	dc4f      	bgt.n	8009940 <_dtoa_r+0x948>
 80098a0:	9b06      	ldr	r3, [sp, #24]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	dd4c      	ble.n	8009940 <_dtoa_r+0x948>
 80098a6:	e011      	b.n	80098cc <_dtoa_r+0x8d4>
 80098a8:	d0c9      	beq.n	800983e <_dtoa_r+0x846>
 80098aa:	9a05      	ldr	r2, [sp, #20]
 80098ac:	331c      	adds	r3, #28
 80098ae:	441a      	add	r2, r3
 80098b0:	9205      	str	r2, [sp, #20]
 80098b2:	441d      	add	r5, r3
 80098b4:	4498      	add	r8, r3
 80098b6:	e7c2      	b.n	800983e <_dtoa_r+0x846>
 80098b8:	4603      	mov	r3, r0
 80098ba:	e7f6      	b.n	80098aa <_dtoa_r+0x8b2>
 80098bc:	f1b9 0f00 	cmp.w	r9, #0
 80098c0:	dc38      	bgt.n	8009934 <_dtoa_r+0x93c>
 80098c2:	9b06      	ldr	r3, [sp, #24]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	dd35      	ble.n	8009934 <_dtoa_r+0x93c>
 80098c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	b963      	cbnz	r3, 80098ea <_dtoa_r+0x8f2>
 80098d0:	4639      	mov	r1, r7
 80098d2:	2205      	movs	r2, #5
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 f9a8 	bl	8009c2a <__multadd>
 80098da:	4601      	mov	r1, r0
 80098dc:	4607      	mov	r7, r0
 80098de:	9804      	ldr	r0, [sp, #16]
 80098e0:	f000 fb6e 	bl	8009fc0 <__mcmp>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f73f adcc 	bgt.w	8009482 <_dtoa_r+0x48a>
 80098ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ec:	465d      	mov	r5, fp
 80098ee:	ea6f 0a03 	mvn.w	sl, r3
 80098f2:	f04f 0900 	mov.w	r9, #0
 80098f6:	4639      	mov	r1, r7
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 f97f 	bl	8009bfc <_Bfree>
 80098fe:	2e00      	cmp	r6, #0
 8009900:	f43f aeb7 	beq.w	8009672 <_dtoa_r+0x67a>
 8009904:	f1b9 0f00 	cmp.w	r9, #0
 8009908:	d005      	beq.n	8009916 <_dtoa_r+0x91e>
 800990a:	45b1      	cmp	r9, r6
 800990c:	d003      	beq.n	8009916 <_dtoa_r+0x91e>
 800990e:	4649      	mov	r1, r9
 8009910:	4620      	mov	r0, r4
 8009912:	f000 f973 	bl	8009bfc <_Bfree>
 8009916:	4631      	mov	r1, r6
 8009918:	4620      	mov	r0, r4
 800991a:	f000 f96f 	bl	8009bfc <_Bfree>
 800991e:	e6a8      	b.n	8009672 <_dtoa_r+0x67a>
 8009920:	2700      	movs	r7, #0
 8009922:	463e      	mov	r6, r7
 8009924:	e7e1      	b.n	80098ea <_dtoa_r+0x8f2>
 8009926:	f8dd a020 	ldr.w	sl, [sp, #32]
 800992a:	463e      	mov	r6, r7
 800992c:	e5a9      	b.n	8009482 <_dtoa_r+0x48a>
 800992e:	bf00      	nop
 8009930:	40240000 	.word	0x40240000
 8009934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009936:	f8cd 9008 	str.w	r9, [sp, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80fa 	beq.w	8009b34 <_dtoa_r+0xb3c>
 8009940:	2d00      	cmp	r5, #0
 8009942:	dd05      	ble.n	8009950 <_dtoa_r+0x958>
 8009944:	4631      	mov	r1, r6
 8009946:	462a      	mov	r2, r5
 8009948:	4620      	mov	r0, r4
 800994a:	f000 fae5 	bl	8009f18 <__lshift>
 800994e:	4606      	mov	r6, r0
 8009950:	9b07      	ldr	r3, [sp, #28]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d04c      	beq.n	80099f0 <_dtoa_r+0x9f8>
 8009956:	6871      	ldr	r1, [r6, #4]
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f91b 	bl	8009b94 <_Balloc>
 800995e:	6932      	ldr	r2, [r6, #16]
 8009960:	3202      	adds	r2, #2
 8009962:	4605      	mov	r5, r0
 8009964:	0092      	lsls	r2, r2, #2
 8009966:	f106 010c 	add.w	r1, r6, #12
 800996a:	300c      	adds	r0, #12
 800996c:	f7fe ff58 	bl	8008820 <memcpy>
 8009970:	2201      	movs	r2, #1
 8009972:	4629      	mov	r1, r5
 8009974:	4620      	mov	r0, r4
 8009976:	f000 facf 	bl	8009f18 <__lshift>
 800997a:	9b00      	ldr	r3, [sp, #0]
 800997c:	f8cd b014 	str.w	fp, [sp, #20]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	46b1      	mov	r9, r6
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	4606      	mov	r6, r0
 800998a:	4639      	mov	r1, r7
 800998c:	9804      	ldr	r0, [sp, #16]
 800998e:	f7ff faa4 	bl	8008eda <quorem>
 8009992:	4649      	mov	r1, r9
 8009994:	4605      	mov	r5, r0
 8009996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800999a:	9804      	ldr	r0, [sp, #16]
 800999c:	f000 fb10 	bl	8009fc0 <__mcmp>
 80099a0:	4632      	mov	r2, r6
 80099a2:	9000      	str	r0, [sp, #0]
 80099a4:	4639      	mov	r1, r7
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 fb24 	bl	8009ff4 <__mdiff>
 80099ac:	68c3      	ldr	r3, [r0, #12]
 80099ae:	4602      	mov	r2, r0
 80099b0:	bb03      	cbnz	r3, 80099f4 <_dtoa_r+0x9fc>
 80099b2:	4601      	mov	r1, r0
 80099b4:	9008      	str	r0, [sp, #32]
 80099b6:	9804      	ldr	r0, [sp, #16]
 80099b8:	f000 fb02 	bl	8009fc0 <__mcmp>
 80099bc:	9a08      	ldr	r2, [sp, #32]
 80099be:	4603      	mov	r3, r0
 80099c0:	4611      	mov	r1, r2
 80099c2:	4620      	mov	r0, r4
 80099c4:	9308      	str	r3, [sp, #32]
 80099c6:	f000 f919 	bl	8009bfc <_Bfree>
 80099ca:	9b08      	ldr	r3, [sp, #32]
 80099cc:	b9a3      	cbnz	r3, 80099f8 <_dtoa_r+0xa00>
 80099ce:	9a06      	ldr	r2, [sp, #24]
 80099d0:	b992      	cbnz	r2, 80099f8 <_dtoa_r+0xa00>
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	b982      	cbnz	r2, 80099f8 <_dtoa_r+0xa00>
 80099d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099da:	d029      	beq.n	8009a30 <_dtoa_r+0xa38>
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dd01      	ble.n	80099e6 <_dtoa_r+0x9ee>
 80099e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80099e6:	9b05      	ldr	r3, [sp, #20]
 80099e8:	1c5d      	adds	r5, r3, #1
 80099ea:	f883 8000 	strb.w	r8, [r3]
 80099ee:	e782      	b.n	80098f6 <_dtoa_r+0x8fe>
 80099f0:	4630      	mov	r0, r6
 80099f2:	e7c2      	b.n	800997a <_dtoa_r+0x982>
 80099f4:	2301      	movs	r3, #1
 80099f6:	e7e3      	b.n	80099c0 <_dtoa_r+0x9c8>
 80099f8:	9a00      	ldr	r2, [sp, #0]
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	db04      	blt.n	8009a08 <_dtoa_r+0xa10>
 80099fe:	d125      	bne.n	8009a4c <_dtoa_r+0xa54>
 8009a00:	9a06      	ldr	r2, [sp, #24]
 8009a02:	bb1a      	cbnz	r2, 8009a4c <_dtoa_r+0xa54>
 8009a04:	9a07      	ldr	r2, [sp, #28]
 8009a06:	bb0a      	cbnz	r2, 8009a4c <_dtoa_r+0xa54>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	ddec      	ble.n	80099e6 <_dtoa_r+0x9ee>
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	9904      	ldr	r1, [sp, #16]
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fa81 	bl	8009f18 <__lshift>
 8009a16:	4639      	mov	r1, r7
 8009a18:	9004      	str	r0, [sp, #16]
 8009a1a:	f000 fad1 	bl	8009fc0 <__mcmp>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	dc03      	bgt.n	8009a2a <_dtoa_r+0xa32>
 8009a22:	d1e0      	bne.n	80099e6 <_dtoa_r+0x9ee>
 8009a24:	f018 0f01 	tst.w	r8, #1
 8009a28:	d0dd      	beq.n	80099e6 <_dtoa_r+0x9ee>
 8009a2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a2e:	d1d8      	bne.n	80099e2 <_dtoa_r+0x9ea>
 8009a30:	9b05      	ldr	r3, [sp, #20]
 8009a32:	9a05      	ldr	r2, [sp, #20]
 8009a34:	1c5d      	adds	r5, r3, #1
 8009a36:	2339      	movs	r3, #57	; 0x39
 8009a38:	7013      	strb	r3, [r2, #0]
 8009a3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a3e:	2b39      	cmp	r3, #57	; 0x39
 8009a40:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a44:	d04f      	beq.n	8009ae6 <_dtoa_r+0xaee>
 8009a46:	3301      	adds	r3, #1
 8009a48:	7013      	strb	r3, [r2, #0]
 8009a4a:	e754      	b.n	80098f6 <_dtoa_r+0x8fe>
 8009a4c:	9a05      	ldr	r2, [sp, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f102 0501 	add.w	r5, r2, #1
 8009a54:	dd06      	ble.n	8009a64 <_dtoa_r+0xa6c>
 8009a56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a5a:	d0e9      	beq.n	8009a30 <_dtoa_r+0xa38>
 8009a5c:	f108 0801 	add.w	r8, r8, #1
 8009a60:	9b05      	ldr	r3, [sp, #20]
 8009a62:	e7c2      	b.n	80099ea <_dtoa_r+0x9f2>
 8009a64:	9a02      	ldr	r2, [sp, #8]
 8009a66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009a6a:	eba5 030b 	sub.w	r3, r5, fp
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d021      	beq.n	8009ab6 <_dtoa_r+0xabe>
 8009a72:	2300      	movs	r3, #0
 8009a74:	220a      	movs	r2, #10
 8009a76:	9904      	ldr	r1, [sp, #16]
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 f8d6 	bl	8009c2a <__multadd>
 8009a7e:	45b1      	cmp	r9, r6
 8009a80:	9004      	str	r0, [sp, #16]
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	f04f 020a 	mov.w	r2, #10
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	d105      	bne.n	8009a9c <_dtoa_r+0xaa4>
 8009a90:	f000 f8cb 	bl	8009c2a <__multadd>
 8009a94:	4681      	mov	r9, r0
 8009a96:	4606      	mov	r6, r0
 8009a98:	9505      	str	r5, [sp, #20]
 8009a9a:	e776      	b.n	800998a <_dtoa_r+0x992>
 8009a9c:	f000 f8c5 	bl	8009c2a <__multadd>
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4681      	mov	r9, r0
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 f8be 	bl	8009c2a <__multadd>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	e7f2      	b.n	8009a98 <_dtoa_r+0xaa0>
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	9904      	ldr	r1, [sp, #16]
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 fa2c 	bl	8009f18 <__lshift>
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	9004      	str	r0, [sp, #16]
 8009ac4:	f000 fa7c 	bl	8009fc0 <__mcmp>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	dcb6      	bgt.n	8009a3a <_dtoa_r+0xa42>
 8009acc:	d102      	bne.n	8009ad4 <_dtoa_r+0xadc>
 8009ace:	f018 0f01 	tst.w	r8, #1
 8009ad2:	d1b2      	bne.n	8009a3a <_dtoa_r+0xa42>
 8009ad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ad8:	2b30      	cmp	r3, #48	; 0x30
 8009ada:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ade:	f47f af0a 	bne.w	80098f6 <_dtoa_r+0x8fe>
 8009ae2:	4615      	mov	r5, r2
 8009ae4:	e7f6      	b.n	8009ad4 <_dtoa_r+0xadc>
 8009ae6:	4593      	cmp	fp, r2
 8009ae8:	d105      	bne.n	8009af6 <_dtoa_r+0xafe>
 8009aea:	2331      	movs	r3, #49	; 0x31
 8009aec:	f10a 0a01 	add.w	sl, sl, #1
 8009af0:	f88b 3000 	strb.w	r3, [fp]
 8009af4:	e6ff      	b.n	80098f6 <_dtoa_r+0x8fe>
 8009af6:	4615      	mov	r5, r2
 8009af8:	e79f      	b.n	8009a3a <_dtoa_r+0xa42>
 8009afa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009b60 <_dtoa_r+0xb68>
 8009afe:	e007      	b.n	8009b10 <_dtoa_r+0xb18>
 8009b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009b64 <_dtoa_r+0xb6c>
 8009b06:	b11b      	cbz	r3, 8009b10 <_dtoa_r+0xb18>
 8009b08:	f10b 0308 	add.w	r3, fp, #8
 8009b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	4658      	mov	r0, fp
 8009b12:	b017      	add	sp, #92	; 0x5c
 8009b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b18:	9b06      	ldr	r3, [sp, #24]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	f77f ae35 	ble.w	800978a <_dtoa_r+0x792>
 8009b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	e649      	b.n	80097ba <_dtoa_r+0x7c2>
 8009b26:	9b02      	ldr	r3, [sp, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dc03      	bgt.n	8009b34 <_dtoa_r+0xb3c>
 8009b2c:	9b06      	ldr	r3, [sp, #24]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	f73f aecc 	bgt.w	80098cc <_dtoa_r+0x8d4>
 8009b34:	465d      	mov	r5, fp
 8009b36:	4639      	mov	r1, r7
 8009b38:	9804      	ldr	r0, [sp, #16]
 8009b3a:	f7ff f9ce 	bl	8008eda <quorem>
 8009b3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b42:	f805 8b01 	strb.w	r8, [r5], #1
 8009b46:	9a02      	ldr	r2, [sp, #8]
 8009b48:	eba5 030b 	sub.w	r3, r5, fp
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	ddb0      	ble.n	8009ab2 <_dtoa_r+0xaba>
 8009b50:	2300      	movs	r3, #0
 8009b52:	220a      	movs	r2, #10
 8009b54:	9904      	ldr	r1, [sp, #16]
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 f867 	bl	8009c2a <__multadd>
 8009b5c:	9004      	str	r0, [sp, #16]
 8009b5e:	e7ea      	b.n	8009b36 <_dtoa_r+0xb3e>
 8009b60:	0800c2e8 	.word	0x0800c2e8
 8009b64:	0800c2ea 	.word	0x0800c2ea

08009b68 <_localeconv_r>:
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <_localeconv_r+0x14>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6a18      	ldr	r0, [r3, #32]
 8009b6e:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <_localeconv_r+0x18>)
 8009b70:	2800      	cmp	r0, #0
 8009b72:	bf08      	it	eq
 8009b74:	4618      	moveq	r0, r3
 8009b76:	30f0      	adds	r0, #240	; 0xf0
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	2000000c 	.word	0x2000000c
 8009b80:	20000070 	.word	0x20000070

08009b84 <malloc>:
 8009b84:	4b02      	ldr	r3, [pc, #8]	; (8009b90 <malloc+0xc>)
 8009b86:	4601      	mov	r1, r0
 8009b88:	6818      	ldr	r0, [r3, #0]
 8009b8a:	f000 baed 	b.w	800a168 <_malloc_r>
 8009b8e:	bf00      	nop
 8009b90:	2000000c 	.word	0x2000000c

08009b94 <_Balloc>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b98:	4604      	mov	r4, r0
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	b93d      	cbnz	r5, 8009bae <_Balloc+0x1a>
 8009b9e:	2010      	movs	r0, #16
 8009ba0:	f7ff fff0 	bl	8009b84 <malloc>
 8009ba4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ba6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009baa:	6005      	str	r5, [r0, #0]
 8009bac:	60c5      	str	r5, [r0, #12]
 8009bae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bb0:	68eb      	ldr	r3, [r5, #12]
 8009bb2:	b183      	cbz	r3, 8009bd6 <_Balloc+0x42>
 8009bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bbc:	b9b8      	cbnz	r0, 8009bee <_Balloc+0x5a>
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	fa01 f506 	lsl.w	r5, r1, r6
 8009bc4:	1d6a      	adds	r2, r5, #5
 8009bc6:	0092      	lsls	r2, r2, #2
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fabf 	bl	800a14c <_calloc_r>
 8009bce:	b160      	cbz	r0, 8009bea <_Balloc+0x56>
 8009bd0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009bd4:	e00e      	b.n	8009bf4 <_Balloc+0x60>
 8009bd6:	2221      	movs	r2, #33	; 0x21
 8009bd8:	2104      	movs	r1, #4
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fab6 	bl	800a14c <_calloc_r>
 8009be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009be2:	60e8      	str	r0, [r5, #12]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e4      	bne.n	8009bb4 <_Balloc+0x20>
 8009bea:	2000      	movs	r0, #0
 8009bec:	bd70      	pop	{r4, r5, r6, pc}
 8009bee:	6802      	ldr	r2, [r0, #0]
 8009bf0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bfa:	e7f7      	b.n	8009bec <_Balloc+0x58>

08009bfc <_Bfree>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c00:	4606      	mov	r6, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	b93c      	cbnz	r4, 8009c16 <_Bfree+0x1a>
 8009c06:	2010      	movs	r0, #16
 8009c08:	f7ff ffbc 	bl	8009b84 <malloc>
 8009c0c:	6270      	str	r0, [r6, #36]	; 0x24
 8009c0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c12:	6004      	str	r4, [r0, #0]
 8009c14:	60c4      	str	r4, [r0, #12]
 8009c16:	b13d      	cbz	r5, 8009c28 <_Bfree+0x2c>
 8009c18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c1a:	686a      	ldr	r2, [r5, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c22:	6029      	str	r1, [r5, #0]
 8009c24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c28:	bd70      	pop	{r4, r5, r6, pc}

08009c2a <__multadd>:
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	690d      	ldr	r5, [r1, #16]
 8009c30:	461f      	mov	r7, r3
 8009c32:	4606      	mov	r6, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	f101 0c14 	add.w	ip, r1, #20
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f8dc 0000 	ldr.w	r0, [ip]
 8009c40:	b281      	uxth	r1, r0
 8009c42:	fb02 7101 	mla	r1, r2, r1, r7
 8009c46:	0c0f      	lsrs	r7, r1, #16
 8009c48:	0c00      	lsrs	r0, r0, #16
 8009c4a:	fb02 7000 	mla	r0, r2, r0, r7
 8009c4e:	b289      	uxth	r1, r1
 8009c50:	3301      	adds	r3, #1
 8009c52:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009c56:	429d      	cmp	r5, r3
 8009c58:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009c5c:	f84c 1b04 	str.w	r1, [ip], #4
 8009c60:	dcec      	bgt.n	8009c3c <__multadd+0x12>
 8009c62:	b1d7      	cbz	r7, 8009c9a <__multadd+0x70>
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	42ab      	cmp	r3, r5
 8009c68:	dc12      	bgt.n	8009c90 <__multadd+0x66>
 8009c6a:	6861      	ldr	r1, [r4, #4]
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	3101      	adds	r1, #1
 8009c70:	f7ff ff90 	bl	8009b94 <_Balloc>
 8009c74:	6922      	ldr	r2, [r4, #16]
 8009c76:	3202      	adds	r2, #2
 8009c78:	f104 010c 	add.w	r1, r4, #12
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	0092      	lsls	r2, r2, #2
 8009c80:	300c      	adds	r0, #12
 8009c82:	f7fe fdcd 	bl	8008820 <memcpy>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ffb7 	bl	8009bfc <_Bfree>
 8009c8e:	4644      	mov	r4, r8
 8009c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c94:	3501      	adds	r5, #1
 8009c96:	615f      	str	r7, [r3, #20]
 8009c98:	6125      	str	r5, [r4, #16]
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ca0 <__hi0bits>:
 8009ca0:	0c02      	lsrs	r2, r0, #16
 8009ca2:	0412      	lsls	r2, r2, #16
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	b9b2      	cbnz	r2, 8009cd6 <__hi0bits+0x36>
 8009ca8:	0403      	lsls	r3, r0, #16
 8009caa:	2010      	movs	r0, #16
 8009cac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009cb0:	bf04      	itt	eq
 8009cb2:	021b      	lsleq	r3, r3, #8
 8009cb4:	3008      	addeq	r0, #8
 8009cb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cba:	bf04      	itt	eq
 8009cbc:	011b      	lsleq	r3, r3, #4
 8009cbe:	3004      	addeq	r0, #4
 8009cc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009cc4:	bf04      	itt	eq
 8009cc6:	009b      	lsleq	r3, r3, #2
 8009cc8:	3002      	addeq	r0, #2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	db06      	blt.n	8009cdc <__hi0bits+0x3c>
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	d503      	bpl.n	8009cda <__hi0bits+0x3a>
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	4770      	bx	lr
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	e7e8      	b.n	8009cac <__hi0bits+0xc>
 8009cda:	2020      	movs	r0, #32
 8009cdc:	4770      	bx	lr

08009cde <__lo0bits>:
 8009cde:	6803      	ldr	r3, [r0, #0]
 8009ce0:	f013 0207 	ands.w	r2, r3, #7
 8009ce4:	4601      	mov	r1, r0
 8009ce6:	d00b      	beq.n	8009d00 <__lo0bits+0x22>
 8009ce8:	07da      	lsls	r2, r3, #31
 8009cea:	d423      	bmi.n	8009d34 <__lo0bits+0x56>
 8009cec:	0798      	lsls	r0, r3, #30
 8009cee:	bf49      	itett	mi
 8009cf0:	085b      	lsrmi	r3, r3, #1
 8009cf2:	089b      	lsrpl	r3, r3, #2
 8009cf4:	2001      	movmi	r0, #1
 8009cf6:	600b      	strmi	r3, [r1, #0]
 8009cf8:	bf5c      	itt	pl
 8009cfa:	600b      	strpl	r3, [r1, #0]
 8009cfc:	2002      	movpl	r0, #2
 8009cfe:	4770      	bx	lr
 8009d00:	b298      	uxth	r0, r3
 8009d02:	b9a8      	cbnz	r0, 8009d30 <__lo0bits+0x52>
 8009d04:	0c1b      	lsrs	r3, r3, #16
 8009d06:	2010      	movs	r0, #16
 8009d08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d0c:	bf04      	itt	eq
 8009d0e:	0a1b      	lsreq	r3, r3, #8
 8009d10:	3008      	addeq	r0, #8
 8009d12:	071a      	lsls	r2, r3, #28
 8009d14:	bf04      	itt	eq
 8009d16:	091b      	lsreq	r3, r3, #4
 8009d18:	3004      	addeq	r0, #4
 8009d1a:	079a      	lsls	r2, r3, #30
 8009d1c:	bf04      	itt	eq
 8009d1e:	089b      	lsreq	r3, r3, #2
 8009d20:	3002      	addeq	r0, #2
 8009d22:	07da      	lsls	r2, r3, #31
 8009d24:	d402      	bmi.n	8009d2c <__lo0bits+0x4e>
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	d006      	beq.n	8009d38 <__lo0bits+0x5a>
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	600b      	str	r3, [r1, #0]
 8009d2e:	4770      	bx	lr
 8009d30:	4610      	mov	r0, r2
 8009d32:	e7e9      	b.n	8009d08 <__lo0bits+0x2a>
 8009d34:	2000      	movs	r0, #0
 8009d36:	4770      	bx	lr
 8009d38:	2020      	movs	r0, #32
 8009d3a:	4770      	bx	lr

08009d3c <__i2b>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	460c      	mov	r4, r1
 8009d40:	2101      	movs	r1, #1
 8009d42:	f7ff ff27 	bl	8009b94 <_Balloc>
 8009d46:	2201      	movs	r2, #1
 8009d48:	6144      	str	r4, [r0, #20]
 8009d4a:	6102      	str	r2, [r0, #16]
 8009d4c:	bd10      	pop	{r4, pc}

08009d4e <__multiply>:
 8009d4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d52:	4614      	mov	r4, r2
 8009d54:	690a      	ldr	r2, [r1, #16]
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bfb8      	it	lt
 8009d5c:	460b      	movlt	r3, r1
 8009d5e:	4688      	mov	r8, r1
 8009d60:	bfbc      	itt	lt
 8009d62:	46a0      	movlt	r8, r4
 8009d64:	461c      	movlt	r4, r3
 8009d66:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d6a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d72:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d76:	eb07 0609 	add.w	r6, r7, r9
 8009d7a:	42b3      	cmp	r3, r6
 8009d7c:	bfb8      	it	lt
 8009d7e:	3101      	addlt	r1, #1
 8009d80:	f7ff ff08 	bl	8009b94 <_Balloc>
 8009d84:	f100 0514 	add.w	r5, r0, #20
 8009d88:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	2200      	movs	r2, #0
 8009d90:	4573      	cmp	r3, lr
 8009d92:	d316      	bcc.n	8009dc2 <__multiply+0x74>
 8009d94:	f104 0214 	add.w	r2, r4, #20
 8009d98:	f108 0114 	add.w	r1, r8, #20
 8009d9c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009da0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	9b00      	ldr	r3, [sp, #0]
 8009da8:	9201      	str	r2, [sp, #4]
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d80c      	bhi.n	8009dc8 <__multiply+0x7a>
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	dd03      	ble.n	8009dba <__multiply+0x6c>
 8009db2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d05d      	beq.n	8009e76 <__multiply+0x128>
 8009dba:	6106      	str	r6, [r0, #16]
 8009dbc:	b003      	add	sp, #12
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	f843 2b04 	str.w	r2, [r3], #4
 8009dc6:	e7e3      	b.n	8009d90 <__multiply+0x42>
 8009dc8:	f8b2 b000 	ldrh.w	fp, [r2]
 8009dcc:	f1bb 0f00 	cmp.w	fp, #0
 8009dd0:	d023      	beq.n	8009e1a <__multiply+0xcc>
 8009dd2:	4689      	mov	r9, r1
 8009dd4:	46ac      	mov	ip, r5
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	f859 4b04 	ldr.w	r4, [r9], #4
 8009dde:	f8dc a000 	ldr.w	sl, [ip]
 8009de2:	b2a3      	uxth	r3, r4
 8009de4:	fa1f fa8a 	uxth.w	sl, sl
 8009de8:	fb0b a303 	mla	r3, fp, r3, sl
 8009dec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009df0:	f8dc 4000 	ldr.w	r4, [ip]
 8009df4:	4443      	add	r3, r8
 8009df6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009dfa:	fb0b 840a 	mla	r4, fp, sl, r8
 8009dfe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009e02:	46e2      	mov	sl, ip
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e0a:	454f      	cmp	r7, r9
 8009e0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009e10:	f84a 3b04 	str.w	r3, [sl], #4
 8009e14:	d82b      	bhi.n	8009e6e <__multiply+0x120>
 8009e16:	f8cc 8004 	str.w	r8, [ip, #4]
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009e20:	3204      	adds	r2, #4
 8009e22:	f1ba 0f00 	cmp.w	sl, #0
 8009e26:	d020      	beq.n	8009e6a <__multiply+0x11c>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	4689      	mov	r9, r1
 8009e2c:	46a8      	mov	r8, r5
 8009e2e:	f04f 0b00 	mov.w	fp, #0
 8009e32:	f8b9 c000 	ldrh.w	ip, [r9]
 8009e36:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009e3a:	fb0a 440c 	mla	r4, sl, ip, r4
 8009e3e:	445c      	add	r4, fp
 8009e40:	46c4      	mov	ip, r8
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009e48:	f84c 3b04 	str.w	r3, [ip], #4
 8009e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e50:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009e54:	0c1b      	lsrs	r3, r3, #16
 8009e56:	fb0a b303 	mla	r3, sl, r3, fp
 8009e5a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e5e:	454f      	cmp	r7, r9
 8009e60:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009e64:	d805      	bhi.n	8009e72 <__multiply+0x124>
 8009e66:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e6a:	3504      	adds	r5, #4
 8009e6c:	e79b      	b.n	8009da6 <__multiply+0x58>
 8009e6e:	46d4      	mov	ip, sl
 8009e70:	e7b3      	b.n	8009dda <__multiply+0x8c>
 8009e72:	46e0      	mov	r8, ip
 8009e74:	e7dd      	b.n	8009e32 <__multiply+0xe4>
 8009e76:	3e01      	subs	r6, #1
 8009e78:	e799      	b.n	8009dae <__multiply+0x60>
	...

08009e7c <__pow5mult>:
 8009e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e80:	4615      	mov	r5, r2
 8009e82:	f012 0203 	ands.w	r2, r2, #3
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	d007      	beq.n	8009e9c <__pow5mult+0x20>
 8009e8c:	3a01      	subs	r2, #1
 8009e8e:	4c21      	ldr	r4, [pc, #132]	; (8009f14 <__pow5mult+0x98>)
 8009e90:	2300      	movs	r3, #0
 8009e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e96:	f7ff fec8 	bl	8009c2a <__multadd>
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	10ad      	asrs	r5, r5, #2
 8009e9e:	d035      	beq.n	8009f0c <__pow5mult+0x90>
 8009ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ea2:	b93c      	cbnz	r4, 8009eb4 <__pow5mult+0x38>
 8009ea4:	2010      	movs	r0, #16
 8009ea6:	f7ff fe6d 	bl	8009b84 <malloc>
 8009eaa:	6270      	str	r0, [r6, #36]	; 0x24
 8009eac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009eb0:	6004      	str	r4, [r0, #0]
 8009eb2:	60c4      	str	r4, [r0, #12]
 8009eb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ebc:	b94c      	cbnz	r4, 8009ed2 <__pow5mult+0x56>
 8009ebe:	f240 2171 	movw	r1, #625	; 0x271
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ff3a 	bl	8009d3c <__i2b>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ece:	4604      	mov	r4, r0
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	07eb      	lsls	r3, r5, #31
 8009ed8:	d50a      	bpl.n	8009ef0 <__pow5mult+0x74>
 8009eda:	4639      	mov	r1, r7
 8009edc:	4622      	mov	r2, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ff35 	bl	8009d4e <__multiply>
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4681      	mov	r9, r0
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff fe87 	bl	8009bfc <_Bfree>
 8009eee:	464f      	mov	r7, r9
 8009ef0:	106d      	asrs	r5, r5, #1
 8009ef2:	d00b      	beq.n	8009f0c <__pow5mult+0x90>
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	b938      	cbnz	r0, 8009f08 <__pow5mult+0x8c>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4621      	mov	r1, r4
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff ff26 	bl	8009d4e <__multiply>
 8009f02:	6020      	str	r0, [r4, #0]
 8009f04:	f8c0 8000 	str.w	r8, [r0]
 8009f08:	4604      	mov	r4, r0
 8009f0a:	e7e4      	b.n	8009ed6 <__pow5mult+0x5a>
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f12:	bf00      	nop
 8009f14:	0800c3e8 	.word	0x0800c3e8

08009f18 <__lshift>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	6849      	ldr	r1, [r1, #4]
 8009f26:	eb0a 0903 	add.w	r9, sl, r3
 8009f2a:	68a3      	ldr	r3, [r4, #8]
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	4616      	mov	r6, r2
 8009f30:	f109 0501 	add.w	r5, r9, #1
 8009f34:	42ab      	cmp	r3, r5
 8009f36:	db32      	blt.n	8009f9e <__lshift+0x86>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7ff fe2b 	bl	8009b94 <_Balloc>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4680      	mov	r8, r0
 8009f42:	f100 0114 	add.w	r1, r0, #20
 8009f46:	461a      	mov	r2, r3
 8009f48:	4553      	cmp	r3, sl
 8009f4a:	db2b      	blt.n	8009fa4 <__lshift+0x8c>
 8009f4c:	6920      	ldr	r0, [r4, #16]
 8009f4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f52:	f104 0314 	add.w	r3, r4, #20
 8009f56:	f016 021f 	ands.w	r2, r6, #31
 8009f5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f62:	d025      	beq.n	8009fb0 <__lshift+0x98>
 8009f64:	f1c2 0e20 	rsb	lr, r2, #32
 8009f68:	2000      	movs	r0, #0
 8009f6a:	681e      	ldr	r6, [r3, #0]
 8009f6c:	468a      	mov	sl, r1
 8009f6e:	4096      	lsls	r6, r2
 8009f70:	4330      	orrs	r0, r6
 8009f72:	f84a 0b04 	str.w	r0, [sl], #4
 8009f76:	f853 0b04 	ldr.w	r0, [r3], #4
 8009f7a:	459c      	cmp	ip, r3
 8009f7c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009f80:	d814      	bhi.n	8009fac <__lshift+0x94>
 8009f82:	6048      	str	r0, [r1, #4]
 8009f84:	b108      	cbz	r0, 8009f8a <__lshift+0x72>
 8009f86:	f109 0502 	add.w	r5, r9, #2
 8009f8a:	3d01      	subs	r5, #1
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7ff fe32 	bl	8009bfc <_Bfree>
 8009f98:	4640      	mov	r0, r8
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	3101      	adds	r1, #1
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	e7c7      	b.n	8009f34 <__lshift+0x1c>
 8009fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	e7cd      	b.n	8009f48 <__lshift+0x30>
 8009fac:	4651      	mov	r1, sl
 8009fae:	e7dc      	b.n	8009f6a <__lshift+0x52>
 8009fb0:	3904      	subs	r1, #4
 8009fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fba:	459c      	cmp	ip, r3
 8009fbc:	d8f9      	bhi.n	8009fb2 <__lshift+0x9a>
 8009fbe:	e7e4      	b.n	8009f8a <__lshift+0x72>

08009fc0 <__mcmp>:
 8009fc0:	6903      	ldr	r3, [r0, #16]
 8009fc2:	690a      	ldr	r2, [r1, #16]
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	b530      	push	{r4, r5, lr}
 8009fc8:	d10c      	bne.n	8009fe4 <__mcmp+0x24>
 8009fca:	0092      	lsls	r2, r2, #2
 8009fcc:	3014      	adds	r0, #20
 8009fce:	3114      	adds	r1, #20
 8009fd0:	1884      	adds	r4, r0, r2
 8009fd2:	4411      	add	r1, r2
 8009fd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fdc:	4295      	cmp	r5, r2
 8009fde:	d003      	beq.n	8009fe8 <__mcmp+0x28>
 8009fe0:	d305      	bcc.n	8009fee <__mcmp+0x2e>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	bd30      	pop	{r4, r5, pc}
 8009fe8:	42a0      	cmp	r0, r4
 8009fea:	d3f3      	bcc.n	8009fd4 <__mcmp+0x14>
 8009fec:	e7fa      	b.n	8009fe4 <__mcmp+0x24>
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	e7f7      	b.n	8009fe4 <__mcmp+0x24>

08009ff4 <__mdiff>:
 8009ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	4607      	mov	r7, r0
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4628      	mov	r0, r5
 800a000:	4614      	mov	r4, r2
 800a002:	f7ff ffdd 	bl	8009fc0 <__mcmp>
 800a006:	1e06      	subs	r6, r0, #0
 800a008:	d108      	bne.n	800a01c <__mdiff+0x28>
 800a00a:	4631      	mov	r1, r6
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff fdc1 	bl	8009b94 <_Balloc>
 800a012:	2301      	movs	r3, #1
 800a014:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	bfa4      	itt	ge
 800a01e:	4623      	movge	r3, r4
 800a020:	462c      	movge	r4, r5
 800a022:	4638      	mov	r0, r7
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	bfa6      	itte	ge
 800a028:	461d      	movge	r5, r3
 800a02a:	2600      	movge	r6, #0
 800a02c:	2601      	movlt	r6, #1
 800a02e:	f7ff fdb1 	bl	8009b94 <_Balloc>
 800a032:	692b      	ldr	r3, [r5, #16]
 800a034:	60c6      	str	r6, [r0, #12]
 800a036:	6926      	ldr	r6, [r4, #16]
 800a038:	f105 0914 	add.w	r9, r5, #20
 800a03c:	f104 0214 	add.w	r2, r4, #20
 800a040:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a044:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a048:	f100 0514 	add.w	r5, r0, #20
 800a04c:	f04f 0e00 	mov.w	lr, #0
 800a050:	f852 ab04 	ldr.w	sl, [r2], #4
 800a054:	f859 4b04 	ldr.w	r4, [r9], #4
 800a058:	fa1e f18a 	uxtah	r1, lr, sl
 800a05c:	b2a3      	uxth	r3, r4
 800a05e:	1ac9      	subs	r1, r1, r3
 800a060:	0c23      	lsrs	r3, r4, #16
 800a062:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a066:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a06a:	b289      	uxth	r1, r1
 800a06c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a070:	45c8      	cmp	r8, r9
 800a072:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a076:	4694      	mov	ip, r2
 800a078:	f845 3b04 	str.w	r3, [r5], #4
 800a07c:	d8e8      	bhi.n	800a050 <__mdiff+0x5c>
 800a07e:	45bc      	cmp	ip, r7
 800a080:	d304      	bcc.n	800a08c <__mdiff+0x98>
 800a082:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a086:	b183      	cbz	r3, 800a0aa <__mdiff+0xb6>
 800a088:	6106      	str	r6, [r0, #16]
 800a08a:	e7c5      	b.n	800a018 <__mdiff+0x24>
 800a08c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a090:	fa1e f381 	uxtah	r3, lr, r1
 800a094:	141a      	asrs	r2, r3, #16
 800a096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a0a4:	f845 3b04 	str.w	r3, [r5], #4
 800a0a8:	e7e9      	b.n	800a07e <__mdiff+0x8a>
 800a0aa:	3e01      	subs	r6, #1
 800a0ac:	e7e9      	b.n	800a082 <__mdiff+0x8e>

0800a0ae <__d2b>:
 800a0ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0b2:	460e      	mov	r6, r1
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	ec59 8b10 	vmov	r8, r9, d0
 800a0ba:	4615      	mov	r5, r2
 800a0bc:	f7ff fd6a 	bl	8009b94 <_Balloc>
 800a0c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ca:	bb34      	cbnz	r4, 800a11a <__d2b+0x6c>
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f1b8 0300 	subs.w	r3, r8, #0
 800a0d2:	d027      	beq.n	800a124 <__d2b+0x76>
 800a0d4:	a802      	add	r0, sp, #8
 800a0d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a0da:	f7ff fe00 	bl	8009cde <__lo0bits>
 800a0de:	9900      	ldr	r1, [sp, #0]
 800a0e0:	b1f0      	cbz	r0, 800a120 <__d2b+0x72>
 800a0e2:	9a01      	ldr	r2, [sp, #4]
 800a0e4:	f1c0 0320 	rsb	r3, r0, #32
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	40c2      	lsrs	r2, r0
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	9201      	str	r2, [sp, #4]
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bf14      	ite	ne
 800a0fc:	2102      	movne	r1, #2
 800a0fe:	2101      	moveq	r1, #1
 800a100:	6139      	str	r1, [r7, #16]
 800a102:	b1c4      	cbz	r4, 800a136 <__d2b+0x88>
 800a104:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a108:	4404      	add	r4, r0
 800a10a:	6034      	str	r4, [r6, #0]
 800a10c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a110:	6028      	str	r0, [r5, #0]
 800a112:	4638      	mov	r0, r7
 800a114:	b003      	add	sp, #12
 800a116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a11e:	e7d5      	b.n	800a0cc <__d2b+0x1e>
 800a120:	6179      	str	r1, [r7, #20]
 800a122:	e7e7      	b.n	800a0f4 <__d2b+0x46>
 800a124:	a801      	add	r0, sp, #4
 800a126:	f7ff fdda 	bl	8009cde <__lo0bits>
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	2101      	movs	r1, #1
 800a130:	6139      	str	r1, [r7, #16]
 800a132:	3020      	adds	r0, #32
 800a134:	e7e5      	b.n	800a102 <__d2b+0x54>
 800a136:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a13a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a13e:	6030      	str	r0, [r6, #0]
 800a140:	6918      	ldr	r0, [r3, #16]
 800a142:	f7ff fdad 	bl	8009ca0 <__hi0bits>
 800a146:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a14a:	e7e1      	b.n	800a110 <__d2b+0x62>

0800a14c <_calloc_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	fb02 f401 	mul.w	r4, r2, r1
 800a152:	4621      	mov	r1, r4
 800a154:	f000 f808 	bl	800a168 <_malloc_r>
 800a158:	4605      	mov	r5, r0
 800a15a:	b118      	cbz	r0, 800a164 <_calloc_r+0x18>
 800a15c:	4622      	mov	r2, r4
 800a15e:	2100      	movs	r1, #0
 800a160:	f7fe fb69 	bl	8008836 <memset>
 800a164:	4628      	mov	r0, r5
 800a166:	bd38      	pop	{r3, r4, r5, pc}

0800a168 <_malloc_r>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	1ccd      	adds	r5, r1, #3
 800a16c:	f025 0503 	bic.w	r5, r5, #3
 800a170:	3508      	adds	r5, #8
 800a172:	2d0c      	cmp	r5, #12
 800a174:	bf38      	it	cc
 800a176:	250c      	movcc	r5, #12
 800a178:	2d00      	cmp	r5, #0
 800a17a:	4606      	mov	r6, r0
 800a17c:	db01      	blt.n	800a182 <_malloc_r+0x1a>
 800a17e:	42a9      	cmp	r1, r5
 800a180:	d903      	bls.n	800a18a <_malloc_r+0x22>
 800a182:	230c      	movs	r3, #12
 800a184:	6033      	str	r3, [r6, #0]
 800a186:	2000      	movs	r0, #0
 800a188:	bd70      	pop	{r4, r5, r6, pc}
 800a18a:	f000 f869 	bl	800a260 <__malloc_lock>
 800a18e:	4a21      	ldr	r2, [pc, #132]	; (800a214 <_malloc_r+0xac>)
 800a190:	6814      	ldr	r4, [r2, #0]
 800a192:	4621      	mov	r1, r4
 800a194:	b991      	cbnz	r1, 800a1bc <_malloc_r+0x54>
 800a196:	4c20      	ldr	r4, [pc, #128]	; (800a218 <_malloc_r+0xb0>)
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	b91b      	cbnz	r3, 800a1a4 <_malloc_r+0x3c>
 800a19c:	4630      	mov	r0, r6
 800a19e:	f000 f83d 	bl	800a21c <_sbrk_r>
 800a1a2:	6020      	str	r0, [r4, #0]
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f838 	bl	800a21c <_sbrk_r>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d124      	bne.n	800a1fa <_malloc_r+0x92>
 800a1b0:	230c      	movs	r3, #12
 800a1b2:	6033      	str	r3, [r6, #0]
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f000 f854 	bl	800a262 <__malloc_unlock>
 800a1ba:	e7e4      	b.n	800a186 <_malloc_r+0x1e>
 800a1bc:	680b      	ldr	r3, [r1, #0]
 800a1be:	1b5b      	subs	r3, r3, r5
 800a1c0:	d418      	bmi.n	800a1f4 <_malloc_r+0x8c>
 800a1c2:	2b0b      	cmp	r3, #11
 800a1c4:	d90f      	bls.n	800a1e6 <_malloc_r+0x7e>
 800a1c6:	600b      	str	r3, [r1, #0]
 800a1c8:	50cd      	str	r5, [r1, r3]
 800a1ca:	18cc      	adds	r4, r1, r3
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f000 f848 	bl	800a262 <__malloc_unlock>
 800a1d2:	f104 000b 	add.w	r0, r4, #11
 800a1d6:	1d23      	adds	r3, r4, #4
 800a1d8:	f020 0007 	bic.w	r0, r0, #7
 800a1dc:	1ac3      	subs	r3, r0, r3
 800a1de:	d0d3      	beq.n	800a188 <_malloc_r+0x20>
 800a1e0:	425a      	negs	r2, r3
 800a1e2:	50e2      	str	r2, [r4, r3]
 800a1e4:	e7d0      	b.n	800a188 <_malloc_r+0x20>
 800a1e6:	428c      	cmp	r4, r1
 800a1e8:	684b      	ldr	r3, [r1, #4]
 800a1ea:	bf16      	itet	ne
 800a1ec:	6063      	strne	r3, [r4, #4]
 800a1ee:	6013      	streq	r3, [r2, #0]
 800a1f0:	460c      	movne	r4, r1
 800a1f2:	e7eb      	b.n	800a1cc <_malloc_r+0x64>
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	6849      	ldr	r1, [r1, #4]
 800a1f8:	e7cc      	b.n	800a194 <_malloc_r+0x2c>
 800a1fa:	1cc4      	adds	r4, r0, #3
 800a1fc:	f024 0403 	bic.w	r4, r4, #3
 800a200:	42a0      	cmp	r0, r4
 800a202:	d005      	beq.n	800a210 <_malloc_r+0xa8>
 800a204:	1a21      	subs	r1, r4, r0
 800a206:	4630      	mov	r0, r6
 800a208:	f000 f808 	bl	800a21c <_sbrk_r>
 800a20c:	3001      	adds	r0, #1
 800a20e:	d0cf      	beq.n	800a1b0 <_malloc_r+0x48>
 800a210:	6025      	str	r5, [r4, #0]
 800a212:	e7db      	b.n	800a1cc <_malloc_r+0x64>
 800a214:	20009800 	.word	0x20009800
 800a218:	20009804 	.word	0x20009804

0800a21c <_sbrk_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4c06      	ldr	r4, [pc, #24]	; (800a238 <_sbrk_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4605      	mov	r5, r0
 800a224:	4608      	mov	r0, r1
 800a226:	6023      	str	r3, [r4, #0]
 800a228:	f7f9 fd5e 	bl	8003ce8 <_sbrk>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_sbrk_r+0x1a>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	b103      	cbz	r3, 800a236 <_sbrk_r+0x1a>
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	2000c890 	.word	0x2000c890

0800a23c <__ascii_mbtowc>:
 800a23c:	b082      	sub	sp, #8
 800a23e:	b901      	cbnz	r1, 800a242 <__ascii_mbtowc+0x6>
 800a240:	a901      	add	r1, sp, #4
 800a242:	b142      	cbz	r2, 800a256 <__ascii_mbtowc+0x1a>
 800a244:	b14b      	cbz	r3, 800a25a <__ascii_mbtowc+0x1e>
 800a246:	7813      	ldrb	r3, [r2, #0]
 800a248:	600b      	str	r3, [r1, #0]
 800a24a:	7812      	ldrb	r2, [r2, #0]
 800a24c:	1c10      	adds	r0, r2, #0
 800a24e:	bf18      	it	ne
 800a250:	2001      	movne	r0, #1
 800a252:	b002      	add	sp, #8
 800a254:	4770      	bx	lr
 800a256:	4610      	mov	r0, r2
 800a258:	e7fb      	b.n	800a252 <__ascii_mbtowc+0x16>
 800a25a:	f06f 0001 	mvn.w	r0, #1
 800a25e:	e7f8      	b.n	800a252 <__ascii_mbtowc+0x16>

0800a260 <__malloc_lock>:
 800a260:	4770      	bx	lr

0800a262 <__malloc_unlock>:
 800a262:	4770      	bx	lr

0800a264 <__ascii_wctomb>:
 800a264:	b149      	cbz	r1, 800a27a <__ascii_wctomb+0x16>
 800a266:	2aff      	cmp	r2, #255	; 0xff
 800a268:	bf85      	ittet	hi
 800a26a:	238a      	movhi	r3, #138	; 0x8a
 800a26c:	6003      	strhi	r3, [r0, #0]
 800a26e:	700a      	strbls	r2, [r1, #0]
 800a270:	f04f 30ff 	movhi.w	r0, #4294967295
 800a274:	bf98      	it	ls
 800a276:	2001      	movls	r0, #1
 800a278:	4770      	bx	lr
 800a27a:	4608      	mov	r0, r1
 800a27c:	4770      	bx	lr
	...

0800a280 <tan>:
 800a280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a282:	ec51 0b10 	vmov	r0, r1, d0
 800a286:	4a14      	ldr	r2, [pc, #80]	; (800a2d8 <tan+0x58>)
 800a288:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a28c:	4293      	cmp	r3, r2
 800a28e:	dc05      	bgt.n	800a29c <tan+0x1c>
 800a290:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800a2d0 <tan+0x50>
 800a294:	2001      	movs	r0, #1
 800a296:	f001 fc87 	bl	800bba8 <__kernel_tan>
 800a29a:	e009      	b.n	800a2b0 <tan+0x30>
 800a29c:	4a0f      	ldr	r2, [pc, #60]	; (800a2dc <tan+0x5c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	dd09      	ble.n	800a2b6 <tan+0x36>
 800a2a2:	ee10 2a10 	vmov	r2, s0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	f7f5 ff9a 	bl	80001e0 <__aeabi_dsub>
 800a2ac:	ec41 0b10 	vmov	d0, r0, r1
 800a2b0:	b005      	add	sp, #20
 800a2b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b6:	4668      	mov	r0, sp
 800a2b8:	f000 fe92 	bl	800afe0 <__ieee754_rem_pio2>
 800a2bc:	0040      	lsls	r0, r0, #1
 800a2be:	f000 0002 	and.w	r0, r0, #2
 800a2c2:	f1c0 0001 	rsb	r0, r0, #1
 800a2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2ca:	ed9d 0b00 	vldr	d0, [sp]
 800a2ce:	e7e2      	b.n	800a296 <tan+0x16>
	...
 800a2d8:	3fe921fb 	.word	0x3fe921fb
 800a2dc:	7fefffff 	.word	0x7fefffff

0800a2e0 <pow>:
 800a2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	ed2d 8b04 	vpush	{d8-d9}
 800a2e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a5bc <pow+0x2dc>
 800a2ec:	b08d      	sub	sp, #52	; 0x34
 800a2ee:	ec57 6b10 	vmov	r6, r7, d0
 800a2f2:	ec55 4b11 	vmov	r4, r5, d1
 800a2f6:	f000 f963 	bl	800a5c0 <__ieee754_pow>
 800a2fa:	f999 3000 	ldrsb.w	r3, [r9]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	eeb0 8a40 	vmov.f32	s16, s0
 800a306:	eef0 8a60 	vmov.f32	s17, s1
 800a30a:	46c8      	mov	r8, r9
 800a30c:	d05f      	beq.n	800a3ce <pow+0xee>
 800a30e:	4622      	mov	r2, r4
 800a310:	462b      	mov	r3, r5
 800a312:	4620      	mov	r0, r4
 800a314:	4629      	mov	r1, r5
 800a316:	f7f6 fbb5 	bl	8000a84 <__aeabi_dcmpun>
 800a31a:	4683      	mov	fp, r0
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d156      	bne.n	800a3ce <pow+0xee>
 800a320:	4632      	mov	r2, r6
 800a322:	463b      	mov	r3, r7
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f7f6 fbac 	bl	8000a84 <__aeabi_dcmpun>
 800a32c:	9001      	str	r0, [sp, #4]
 800a32e:	b1e8      	cbz	r0, 800a36c <pow+0x8c>
 800a330:	2200      	movs	r2, #0
 800a332:	2300      	movs	r3, #0
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f6 fb72 	bl	8000a20 <__aeabi_dcmpeq>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d046      	beq.n	800a3ce <pow+0xee>
 800a340:	2301      	movs	r3, #1
 800a342:	9302      	str	r3, [sp, #8]
 800a344:	4b96      	ldr	r3, [pc, #600]	; (800a5a0 <pow+0x2c0>)
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	4b96      	ldr	r3, [pc, #600]	; (800a5a4 <pow+0x2c4>)
 800a34a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a34e:	2200      	movs	r2, #0
 800a350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a354:	9b00      	ldr	r3, [sp, #0]
 800a356:	2b02      	cmp	r3, #2
 800a358:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a35c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a360:	d033      	beq.n	800a3ca <pow+0xea>
 800a362:	a802      	add	r0, sp, #8
 800a364:	f001 fe84 	bl	800c070 <matherr>
 800a368:	bb48      	cbnz	r0, 800a3be <pow+0xde>
 800a36a:	e05d      	b.n	800a428 <pow+0x148>
 800a36c:	f04f 0a00 	mov.w	sl, #0
 800a370:	f04f 0b00 	mov.w	fp, #0
 800a374:	4652      	mov	r2, sl
 800a376:	465b      	mov	r3, fp
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f6 fb50 	bl	8000a20 <__aeabi_dcmpeq>
 800a380:	ec4b ab19 	vmov	d9, sl, fp
 800a384:	2800      	cmp	r0, #0
 800a386:	d054      	beq.n	800a432 <pow+0x152>
 800a388:	4652      	mov	r2, sl
 800a38a:	465b      	mov	r3, fp
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	f7f6 fb46 	bl	8000a20 <__aeabi_dcmpeq>
 800a394:	4680      	mov	r8, r0
 800a396:	b318      	cbz	r0, 800a3e0 <pow+0x100>
 800a398:	2301      	movs	r3, #1
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	4b80      	ldr	r3, [pc, #512]	; (800a5a0 <pow+0x2c0>)
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a3aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a3ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0d5      	beq.n	800a362 <pow+0x82>
 800a3b6:	4b7b      	ldr	r3, [pc, #492]	; (800a5a4 <pow+0x2c4>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c0:	b11b      	cbz	r3, 800a3ca <pow+0xea>
 800a3c2:	f7fe fa03 	bl	80087cc <__errno>
 800a3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 800a3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800a3d2:	eef0 0a68 	vmov.f32	s1, s17
 800a3d6:	b00d      	add	sp, #52	; 0x34
 800a3d8:	ecbd 8b04 	vpop	{d8-d9}
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	ec45 4b10 	vmov	d0, r4, r5
 800a3e4:	f001 fdb5 	bl	800bf52 <finite>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d0f0      	beq.n	800a3ce <pow+0xee>
 800a3ec:	4652      	mov	r2, sl
 800a3ee:	465b      	mov	r3, fp
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f7f6 fb1e 	bl	8000a34 <__aeabi_dcmplt>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d0e8      	beq.n	800a3ce <pow+0xee>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	9302      	str	r3, [sp, #8]
 800a400:	4b67      	ldr	r3, [pc, #412]	; (800a5a0 <pow+0x2c0>)
 800a402:	9303      	str	r3, [sp, #12]
 800a404:	f999 3000 	ldrsb.w	r3, [r9]
 800a408:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a40c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a410:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a414:	b913      	cbnz	r3, 800a41c <pow+0x13c>
 800a416:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a41a:	e7a2      	b.n	800a362 <pow+0x82>
 800a41c:	4962      	ldr	r1, [pc, #392]	; (800a5a8 <pow+0x2c8>)
 800a41e:	2000      	movs	r0, #0
 800a420:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d19c      	bne.n	800a362 <pow+0x82>
 800a428:	f7fe f9d0 	bl	80087cc <__errno>
 800a42c:	2321      	movs	r3, #33	; 0x21
 800a42e:	6003      	str	r3, [r0, #0]
 800a430:	e7c5      	b.n	800a3be <pow+0xde>
 800a432:	eeb0 0a48 	vmov.f32	s0, s16
 800a436:	eef0 0a68 	vmov.f32	s1, s17
 800a43a:	f001 fd8a 	bl	800bf52 <finite>
 800a43e:	9000      	str	r0, [sp, #0]
 800a440:	2800      	cmp	r0, #0
 800a442:	f040 8081 	bne.w	800a548 <pow+0x268>
 800a446:	ec47 6b10 	vmov	d0, r6, r7
 800a44a:	f001 fd82 	bl	800bf52 <finite>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d07a      	beq.n	800a548 <pow+0x268>
 800a452:	ec45 4b10 	vmov	d0, r4, r5
 800a456:	f001 fd7c 	bl	800bf52 <finite>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d074      	beq.n	800a548 <pow+0x268>
 800a45e:	ec53 2b18 	vmov	r2, r3, d8
 800a462:	ee18 0a10 	vmov	r0, s16
 800a466:	4619      	mov	r1, r3
 800a468:	f7f6 fb0c 	bl	8000a84 <__aeabi_dcmpun>
 800a46c:	f999 9000 	ldrsb.w	r9, [r9]
 800a470:	4b4b      	ldr	r3, [pc, #300]	; (800a5a0 <pow+0x2c0>)
 800a472:	b1b0      	cbz	r0, 800a4a2 <pow+0x1c2>
 800a474:	2201      	movs	r2, #1
 800a476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a47a:	9b00      	ldr	r3, [sp, #0]
 800a47c:	930a      	str	r3, [sp, #40]	; 0x28
 800a47e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a482:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a486:	f1b9 0f00 	cmp.w	r9, #0
 800a48a:	d0c4      	beq.n	800a416 <pow+0x136>
 800a48c:	4652      	mov	r2, sl
 800a48e:	465b      	mov	r3, fp
 800a490:	4650      	mov	r0, sl
 800a492:	4659      	mov	r1, fp
 800a494:	f7f6 f986 	bl	80007a4 <__aeabi_ddiv>
 800a498:	f1b9 0f02 	cmp.w	r9, #2
 800a49c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4a0:	e7c1      	b.n	800a426 <pow+0x146>
 800a4a2:	2203      	movs	r2, #3
 800a4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4a8:	900a      	str	r0, [sp, #40]	; 0x28
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4b3e      	ldr	r3, [pc, #248]	; (800a5ac <pow+0x2cc>)
 800a4b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a4b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a4ba:	f7f6 f849 	bl	8000550 <__aeabi_dmul>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	f1b9 0f00 	cmp.w	r9, #0
 800a4c6:	d124      	bne.n	800a512 <pow+0x232>
 800a4c8:	4b39      	ldr	r3, [pc, #228]	; (800a5b0 <pow+0x2d0>)
 800a4ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a4ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	465b      	mov	r3, fp
 800a4d8:	4639      	mov	r1, r7
 800a4da:	f7f6 faab 	bl	8000a34 <__aeabi_dcmplt>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d056      	beq.n	800a590 <pow+0x2b0>
 800a4e2:	ec45 4b10 	vmov	d0, r4, r5
 800a4e6:	f001 fdcf 	bl	800c088 <rint>
 800a4ea:	4622      	mov	r2, r4
 800a4ec:	462b      	mov	r3, r5
 800a4ee:	ec51 0b10 	vmov	r0, r1, d0
 800a4f2:	f7f6 fa95 	bl	8000a20 <__aeabi_dcmpeq>
 800a4f6:	b920      	cbnz	r0, 800a502 <pow+0x222>
 800a4f8:	4b2e      	ldr	r3, [pc, #184]	; (800a5b4 <pow+0x2d4>)
 800a4fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a4fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a502:	f998 3000 	ldrsb.w	r3, [r8]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d142      	bne.n	800a590 <pow+0x2b0>
 800a50a:	f7fe f95f 	bl	80087cc <__errno>
 800a50e:	2322      	movs	r3, #34	; 0x22
 800a510:	e78d      	b.n	800a42e <pow+0x14e>
 800a512:	4b29      	ldr	r3, [pc, #164]	; (800a5b8 <pow+0x2d8>)
 800a514:	2200      	movs	r2, #0
 800a516:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a51a:	4630      	mov	r0, r6
 800a51c:	4652      	mov	r2, sl
 800a51e:	465b      	mov	r3, fp
 800a520:	4639      	mov	r1, r7
 800a522:	f7f6 fa87 	bl	8000a34 <__aeabi_dcmplt>
 800a526:	2800      	cmp	r0, #0
 800a528:	d0eb      	beq.n	800a502 <pow+0x222>
 800a52a:	ec45 4b10 	vmov	d0, r4, r5
 800a52e:	f001 fdab 	bl	800c088 <rint>
 800a532:	4622      	mov	r2, r4
 800a534:	462b      	mov	r3, r5
 800a536:	ec51 0b10 	vmov	r0, r1, d0
 800a53a:	f7f6 fa71 	bl	8000a20 <__aeabi_dcmpeq>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d1df      	bne.n	800a502 <pow+0x222>
 800a542:	2200      	movs	r2, #0
 800a544:	4b18      	ldr	r3, [pc, #96]	; (800a5a8 <pow+0x2c8>)
 800a546:	e7da      	b.n	800a4fe <pow+0x21e>
 800a548:	2200      	movs	r2, #0
 800a54a:	2300      	movs	r3, #0
 800a54c:	ec51 0b18 	vmov	r0, r1, d8
 800a550:	f7f6 fa66 	bl	8000a20 <__aeabi_dcmpeq>
 800a554:	2800      	cmp	r0, #0
 800a556:	f43f af3a 	beq.w	800a3ce <pow+0xee>
 800a55a:	ec47 6b10 	vmov	d0, r6, r7
 800a55e:	f001 fcf8 	bl	800bf52 <finite>
 800a562:	2800      	cmp	r0, #0
 800a564:	f43f af33 	beq.w	800a3ce <pow+0xee>
 800a568:	ec45 4b10 	vmov	d0, r4, r5
 800a56c:	f001 fcf1 	bl	800bf52 <finite>
 800a570:	2800      	cmp	r0, #0
 800a572:	f43f af2c 	beq.w	800a3ce <pow+0xee>
 800a576:	2304      	movs	r3, #4
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <pow+0x2c0>)
 800a57c:	9303      	str	r3, [sp, #12]
 800a57e:	2300      	movs	r3, #0
 800a580:	930a      	str	r3, [sp, #40]	; 0x28
 800a582:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a586:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a58a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800a58e:	e7b8      	b.n	800a502 <pow+0x222>
 800a590:	a802      	add	r0, sp, #8
 800a592:	f001 fd6d 	bl	800c070 <matherr>
 800a596:	2800      	cmp	r0, #0
 800a598:	f47f af11 	bne.w	800a3be <pow+0xde>
 800a59c:	e7b5      	b.n	800a50a <pow+0x22a>
 800a59e:	bf00      	nop
 800a5a0:	0800c4ff 	.word	0x0800c4ff
 800a5a4:	3ff00000 	.word	0x3ff00000
 800a5a8:	fff00000 	.word	0xfff00000
 800a5ac:	3fe00000 	.word	0x3fe00000
 800a5b0:	47efffff 	.word	0x47efffff
 800a5b4:	c7efffff 	.word	0xc7efffff
 800a5b8:	7ff00000 	.word	0x7ff00000
 800a5bc:	200001dc 	.word	0x200001dc

0800a5c0 <__ieee754_pow>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b091      	sub	sp, #68	; 0x44
 800a5c6:	ed8d 1b00 	vstr	d1, [sp]
 800a5ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a5ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a5d2:	ea58 0302 	orrs.w	r3, r8, r2
 800a5d6:	ec57 6b10 	vmov	r6, r7, d0
 800a5da:	f000 84be 	beq.w	800af5a <__ieee754_pow+0x99a>
 800a5de:	4b7a      	ldr	r3, [pc, #488]	; (800a7c8 <__ieee754_pow+0x208>)
 800a5e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	463d      	mov	r5, r7
 800a5e8:	ee10 aa10 	vmov	sl, s0
 800a5ec:	dc09      	bgt.n	800a602 <__ieee754_pow+0x42>
 800a5ee:	d103      	bne.n	800a5f8 <__ieee754_pow+0x38>
 800a5f0:	b93e      	cbnz	r6, 800a602 <__ieee754_pow+0x42>
 800a5f2:	45a0      	cmp	r8, r4
 800a5f4:	dc0d      	bgt.n	800a612 <__ieee754_pow+0x52>
 800a5f6:	e001      	b.n	800a5fc <__ieee754_pow+0x3c>
 800a5f8:	4598      	cmp	r8, r3
 800a5fa:	dc02      	bgt.n	800a602 <__ieee754_pow+0x42>
 800a5fc:	4598      	cmp	r8, r3
 800a5fe:	d10e      	bne.n	800a61e <__ieee754_pow+0x5e>
 800a600:	b16a      	cbz	r2, 800a61e <__ieee754_pow+0x5e>
 800a602:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a606:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a60a:	ea54 030a 	orrs.w	r3, r4, sl
 800a60e:	f000 84a4 	beq.w	800af5a <__ieee754_pow+0x99a>
 800a612:	486e      	ldr	r0, [pc, #440]	; (800a7cc <__ieee754_pow+0x20c>)
 800a614:	b011      	add	sp, #68	; 0x44
 800a616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61a:	f001 bd2d 	b.w	800c078 <nan>
 800a61e:	2d00      	cmp	r5, #0
 800a620:	da53      	bge.n	800a6ca <__ieee754_pow+0x10a>
 800a622:	4b6b      	ldr	r3, [pc, #428]	; (800a7d0 <__ieee754_pow+0x210>)
 800a624:	4598      	cmp	r8, r3
 800a626:	dc4d      	bgt.n	800a6c4 <__ieee754_pow+0x104>
 800a628:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a62c:	4598      	cmp	r8, r3
 800a62e:	dd4c      	ble.n	800a6ca <__ieee754_pow+0x10a>
 800a630:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a634:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a638:	2b14      	cmp	r3, #20
 800a63a:	dd26      	ble.n	800a68a <__ieee754_pow+0xca>
 800a63c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a640:	fa22 f103 	lsr.w	r1, r2, r3
 800a644:	fa01 f303 	lsl.w	r3, r1, r3
 800a648:	4293      	cmp	r3, r2
 800a64a:	d13e      	bne.n	800a6ca <__ieee754_pow+0x10a>
 800a64c:	f001 0101 	and.w	r1, r1, #1
 800a650:	f1c1 0b02 	rsb	fp, r1, #2
 800a654:	2a00      	cmp	r2, #0
 800a656:	d15b      	bne.n	800a710 <__ieee754_pow+0x150>
 800a658:	4b5b      	ldr	r3, [pc, #364]	; (800a7c8 <__ieee754_pow+0x208>)
 800a65a:	4598      	cmp	r8, r3
 800a65c:	d124      	bne.n	800a6a8 <__ieee754_pow+0xe8>
 800a65e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a662:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a666:	ea53 030a 	orrs.w	r3, r3, sl
 800a66a:	f000 8476 	beq.w	800af5a <__ieee754_pow+0x99a>
 800a66e:	4b59      	ldr	r3, [pc, #356]	; (800a7d4 <__ieee754_pow+0x214>)
 800a670:	429c      	cmp	r4, r3
 800a672:	dd2d      	ble.n	800a6d0 <__ieee754_pow+0x110>
 800a674:	f1b9 0f00 	cmp.w	r9, #0
 800a678:	f280 8473 	bge.w	800af62 <__ieee754_pow+0x9a2>
 800a67c:	2000      	movs	r0, #0
 800a67e:	2100      	movs	r1, #0
 800a680:	ec41 0b10 	vmov	d0, r0, r1
 800a684:	b011      	add	sp, #68	; 0x44
 800a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68a:	2a00      	cmp	r2, #0
 800a68c:	d13e      	bne.n	800a70c <__ieee754_pow+0x14c>
 800a68e:	f1c3 0314 	rsb	r3, r3, #20
 800a692:	fa48 f103 	asr.w	r1, r8, r3
 800a696:	fa01 f303 	lsl.w	r3, r1, r3
 800a69a:	4543      	cmp	r3, r8
 800a69c:	f040 8469 	bne.w	800af72 <__ieee754_pow+0x9b2>
 800a6a0:	f001 0101 	and.w	r1, r1, #1
 800a6a4:	f1c1 0b02 	rsb	fp, r1, #2
 800a6a8:	4b4b      	ldr	r3, [pc, #300]	; (800a7d8 <__ieee754_pow+0x218>)
 800a6aa:	4598      	cmp	r8, r3
 800a6ac:	d118      	bne.n	800a6e0 <__ieee754_pow+0x120>
 800a6ae:	f1b9 0f00 	cmp.w	r9, #0
 800a6b2:	f280 845a 	bge.w	800af6a <__ieee754_pow+0x9aa>
 800a6b6:	4948      	ldr	r1, [pc, #288]	; (800a7d8 <__ieee754_pow+0x218>)
 800a6b8:	4632      	mov	r2, r6
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f7f6 f871 	bl	80007a4 <__aeabi_ddiv>
 800a6c2:	e7dd      	b.n	800a680 <__ieee754_pow+0xc0>
 800a6c4:	f04f 0b02 	mov.w	fp, #2
 800a6c8:	e7c4      	b.n	800a654 <__ieee754_pow+0x94>
 800a6ca:	f04f 0b00 	mov.w	fp, #0
 800a6ce:	e7c1      	b.n	800a654 <__ieee754_pow+0x94>
 800a6d0:	f1b9 0f00 	cmp.w	r9, #0
 800a6d4:	dad2      	bge.n	800a67c <__ieee754_pow+0xbc>
 800a6d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a6da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6de:	e7cf      	b.n	800a680 <__ieee754_pow+0xc0>
 800a6e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a6e4:	d106      	bne.n	800a6f4 <__ieee754_pow+0x134>
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	463b      	mov	r3, r7
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	f7f5 ff2f 	bl	8000550 <__aeabi_dmul>
 800a6f2:	e7c5      	b.n	800a680 <__ieee754_pow+0xc0>
 800a6f4:	4b39      	ldr	r3, [pc, #228]	; (800a7dc <__ieee754_pow+0x21c>)
 800a6f6:	4599      	cmp	r9, r3
 800a6f8:	d10a      	bne.n	800a710 <__ieee754_pow+0x150>
 800a6fa:	2d00      	cmp	r5, #0
 800a6fc:	db08      	blt.n	800a710 <__ieee754_pow+0x150>
 800a6fe:	ec47 6b10 	vmov	d0, r6, r7
 800a702:	b011      	add	sp, #68	; 0x44
 800a704:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	f000 be5c 	b.w	800b3c4 <__ieee754_sqrt>
 800a70c:	f04f 0b00 	mov.w	fp, #0
 800a710:	ec47 6b10 	vmov	d0, r6, r7
 800a714:	f001 fc14 	bl	800bf40 <fabs>
 800a718:	ec51 0b10 	vmov	r0, r1, d0
 800a71c:	f1ba 0f00 	cmp.w	sl, #0
 800a720:	d127      	bne.n	800a772 <__ieee754_pow+0x1b2>
 800a722:	b124      	cbz	r4, 800a72e <__ieee754_pow+0x16e>
 800a724:	4b2c      	ldr	r3, [pc, #176]	; (800a7d8 <__ieee754_pow+0x218>)
 800a726:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d121      	bne.n	800a772 <__ieee754_pow+0x1b2>
 800a72e:	f1b9 0f00 	cmp.w	r9, #0
 800a732:	da05      	bge.n	800a740 <__ieee754_pow+0x180>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	2000      	movs	r0, #0
 800a73a:	4927      	ldr	r1, [pc, #156]	; (800a7d8 <__ieee754_pow+0x218>)
 800a73c:	f7f6 f832 	bl	80007a4 <__aeabi_ddiv>
 800a740:	2d00      	cmp	r5, #0
 800a742:	da9d      	bge.n	800a680 <__ieee754_pow+0xc0>
 800a744:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a748:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a74c:	ea54 030b 	orrs.w	r3, r4, fp
 800a750:	d108      	bne.n	800a764 <__ieee754_pow+0x1a4>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4610      	mov	r0, r2
 800a758:	4619      	mov	r1, r3
 800a75a:	f7f5 fd41 	bl	80001e0 <__aeabi_dsub>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	e7ac      	b.n	800a6be <__ieee754_pow+0xfe>
 800a764:	f1bb 0f01 	cmp.w	fp, #1
 800a768:	d18a      	bne.n	800a680 <__ieee754_pow+0xc0>
 800a76a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a76e:	4619      	mov	r1, r3
 800a770:	e786      	b.n	800a680 <__ieee754_pow+0xc0>
 800a772:	0fed      	lsrs	r5, r5, #31
 800a774:	1e6b      	subs	r3, r5, #1
 800a776:	930d      	str	r3, [sp, #52]	; 0x34
 800a778:	ea5b 0303 	orrs.w	r3, fp, r3
 800a77c:	d102      	bne.n	800a784 <__ieee754_pow+0x1c4>
 800a77e:	4632      	mov	r2, r6
 800a780:	463b      	mov	r3, r7
 800a782:	e7e8      	b.n	800a756 <__ieee754_pow+0x196>
 800a784:	4b16      	ldr	r3, [pc, #88]	; (800a7e0 <__ieee754_pow+0x220>)
 800a786:	4598      	cmp	r8, r3
 800a788:	f340 80fe 	ble.w	800a988 <__ieee754_pow+0x3c8>
 800a78c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a790:	4598      	cmp	r8, r3
 800a792:	dd0a      	ble.n	800a7aa <__ieee754_pow+0x1ea>
 800a794:	4b0f      	ldr	r3, [pc, #60]	; (800a7d4 <__ieee754_pow+0x214>)
 800a796:	429c      	cmp	r4, r3
 800a798:	dc0d      	bgt.n	800a7b6 <__ieee754_pow+0x1f6>
 800a79a:	f1b9 0f00 	cmp.w	r9, #0
 800a79e:	f6bf af6d 	bge.w	800a67c <__ieee754_pow+0xbc>
 800a7a2:	a307      	add	r3, pc, #28	; (adr r3, 800a7c0 <__ieee754_pow+0x200>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	e79f      	b.n	800a6ea <__ieee754_pow+0x12a>
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	; (800a7e4 <__ieee754_pow+0x224>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	ddf4      	ble.n	800a79a <__ieee754_pow+0x1da>
 800a7b0:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <__ieee754_pow+0x218>)
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	dd18      	ble.n	800a7e8 <__ieee754_pow+0x228>
 800a7b6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ba:	dcf2      	bgt.n	800a7a2 <__ieee754_pow+0x1e2>
 800a7bc:	e75e      	b.n	800a67c <__ieee754_pow+0xbc>
 800a7be:	bf00      	nop
 800a7c0:	8800759c 	.word	0x8800759c
 800a7c4:	7e37e43c 	.word	0x7e37e43c
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	0800c3fd 	.word	0x0800c3fd
 800a7d0:	433fffff 	.word	0x433fffff
 800a7d4:	3fefffff 	.word	0x3fefffff
 800a7d8:	3ff00000 	.word	0x3ff00000
 800a7dc:	3fe00000 	.word	0x3fe00000
 800a7e0:	41e00000 	.word	0x41e00000
 800a7e4:	3feffffe 	.word	0x3feffffe
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4b63      	ldr	r3, [pc, #396]	; (800a978 <__ieee754_pow+0x3b8>)
 800a7ec:	f7f5 fcf8 	bl	80001e0 <__aeabi_dsub>
 800a7f0:	a355      	add	r3, pc, #340	; (adr r3, 800a948 <__ieee754_pow+0x388>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	f7f5 fea9 	bl	8000550 <__aeabi_dmul>
 800a7fe:	a354      	add	r3, pc, #336	; (adr r3, 800a950 <__ieee754_pow+0x390>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	4620      	mov	r0, r4
 800a80a:	4629      	mov	r1, r5
 800a80c:	f7f5 fea0 	bl	8000550 <__aeabi_dmul>
 800a810:	2200      	movs	r2, #0
 800a812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a816:	4b59      	ldr	r3, [pc, #356]	; (800a97c <__ieee754_pow+0x3bc>)
 800a818:	4620      	mov	r0, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7f5 fe98 	bl	8000550 <__aeabi_dmul>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	a14c      	add	r1, pc, #304	; (adr r1, 800a958 <__ieee754_pow+0x398>)
 800a826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a82a:	f7f5 fcd9 	bl	80001e0 <__aeabi_dsub>
 800a82e:	4622      	mov	r2, r4
 800a830:	462b      	mov	r3, r5
 800a832:	f7f5 fe8d 	bl	8000550 <__aeabi_dmul>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	2000      	movs	r0, #0
 800a83c:	4950      	ldr	r1, [pc, #320]	; (800a980 <__ieee754_pow+0x3c0>)
 800a83e:	f7f5 fccf 	bl	80001e0 <__aeabi_dsub>
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	4680      	mov	r8, r0
 800a848:	4689      	mov	r9, r1
 800a84a:	4620      	mov	r0, r4
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f5 fe7f 	bl	8000550 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f5 fe79 	bl	8000550 <__aeabi_dmul>
 800a85e:	a340      	add	r3, pc, #256	; (adr r3, 800a960 <__ieee754_pow+0x3a0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fe74 	bl	8000550 <__aeabi_dmul>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a870:	f7f5 fcb6 	bl	80001e0 <__aeabi_dsub>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4604      	mov	r4, r0
 800a87a:	460d      	mov	r5, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f5 fcb0 	bl	80001e4 <__adddf3>
 800a884:	2000      	movs	r0, #0
 800a886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a88a:	4632      	mov	r2, r6
 800a88c:	463b      	mov	r3, r7
 800a88e:	f7f5 fca7 	bl	80001e0 <__aeabi_dsub>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f5 fca1 	bl	80001e0 <__aeabi_dsub>
 800a89e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	460f      	mov	r7, r1
 800a8aa:	f040 81eb 	bne.w	800ac84 <__ieee754_pow+0x6c4>
 800a8ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a968 <__ieee754_pow+0x3a8>
 800a8b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	4622      	mov	r2, r4
 800a8ba:	462b      	mov	r3, r5
 800a8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8c4:	f7f5 fc8c 	bl	80001e0 <__aeabi_dsub>
 800a8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8cc:	f7f5 fe40 	bl	8000550 <__aeabi_dmul>
 800a8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f5 fe38 	bl	8000550 <__aeabi_dmul>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	f7f5 fc7c 	bl	80001e4 <__adddf3>
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	4689      	mov	r9, r1
 800a8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8f8:	f7f5 fe2a 	bl	8000550 <__aeabi_dmul>
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	4602      	mov	r2, r0
 800a904:	4649      	mov	r1, r9
 800a906:	4640      	mov	r0, r8
 800a908:	e9cd 4500 	strd	r4, r5, [sp]
 800a90c:	f7f5 fc6a 	bl	80001e4 <__adddf3>
 800a910:	4b1c      	ldr	r3, [pc, #112]	; (800a984 <__ieee754_pow+0x3c4>)
 800a912:	4299      	cmp	r1, r3
 800a914:	4606      	mov	r6, r0
 800a916:	460f      	mov	r7, r1
 800a918:	468b      	mov	fp, r1
 800a91a:	f340 82f7 	ble.w	800af0c <__ieee754_pow+0x94c>
 800a91e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a922:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a926:	4303      	orrs	r3, r0
 800a928:	f000 81ea 	beq.w	800ad00 <__ieee754_pow+0x740>
 800a92c:	a310      	add	r3, pc, #64	; (adr r3, 800a970 <__ieee754_pow+0x3b0>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a936:	f7f5 fe0b 	bl	8000550 <__aeabi_dmul>
 800a93a:	a30d      	add	r3, pc, #52	; (adr r3, 800a970 <__ieee754_pow+0x3b0>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	e6d5      	b.n	800a6ee <__ieee754_pow+0x12e>
 800a942:	bf00      	nop
 800a944:	f3af 8000 	nop.w
 800a948:	60000000 	.word	0x60000000
 800a94c:	3ff71547 	.word	0x3ff71547
 800a950:	f85ddf44 	.word	0xf85ddf44
 800a954:	3e54ae0b 	.word	0x3e54ae0b
 800a958:	55555555 	.word	0x55555555
 800a95c:	3fd55555 	.word	0x3fd55555
 800a960:	652b82fe 	.word	0x652b82fe
 800a964:	3ff71547 	.word	0x3ff71547
 800a968:	00000000 	.word	0x00000000
 800a96c:	bff00000 	.word	0xbff00000
 800a970:	8800759c 	.word	0x8800759c
 800a974:	7e37e43c 	.word	0x7e37e43c
 800a978:	3ff00000 	.word	0x3ff00000
 800a97c:	3fd00000 	.word	0x3fd00000
 800a980:	3fe00000 	.word	0x3fe00000
 800a984:	408fffff 	.word	0x408fffff
 800a988:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a98c:	f04f 0200 	mov.w	r2, #0
 800a990:	da05      	bge.n	800a99e <__ieee754_pow+0x3de>
 800a992:	4bd3      	ldr	r3, [pc, #844]	; (800ace0 <__ieee754_pow+0x720>)
 800a994:	f7f5 fddc 	bl	8000550 <__aeabi_dmul>
 800a998:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a99c:	460c      	mov	r4, r1
 800a99e:	1523      	asrs	r3, r4, #20
 800a9a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9a4:	4413      	add	r3, r2
 800a9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a8:	4bce      	ldr	r3, [pc, #824]	; (800ace4 <__ieee754_pow+0x724>)
 800a9aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a9ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9b8:	dd08      	ble.n	800a9cc <__ieee754_pow+0x40c>
 800a9ba:	4bcb      	ldr	r3, [pc, #812]	; (800ace8 <__ieee754_pow+0x728>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	f340 815e 	ble.w	800ac7e <__ieee754_pow+0x6be>
 800a9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a9cc:	f04f 0a00 	mov.w	sl, #0
 800a9d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a9d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9d8:	4bc4      	ldr	r3, [pc, #784]	; (800acec <__ieee754_pow+0x72c>)
 800a9da:	4413      	add	r3, r2
 800a9dc:	ed93 7b00 	vldr	d7, [r3]
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	ec53 2b17 	vmov	r2, r3, d7
 800a9e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9ee:	f7f5 fbf7 	bl	80001e0 <__aeabi_dsub>
 800a9f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460f      	mov	r7, r1
 800a9fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9fe:	f7f5 fbf1 	bl	80001e4 <__adddf3>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	2000      	movs	r0, #0
 800aa08:	49b9      	ldr	r1, [pc, #740]	; (800acf0 <__ieee754_pow+0x730>)
 800aa0a:	f7f5 fecb 	bl	80007a4 <__aeabi_ddiv>
 800aa0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4630      	mov	r0, r6
 800aa18:	4639      	mov	r1, r7
 800aa1a:	f7f5 fd99 	bl	8000550 <__aeabi_dmul>
 800aa1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa22:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9302      	str	r3, [sp, #8]
 800aa2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa32:	106d      	asrs	r5, r5, #1
 800aa34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	4614      	mov	r4, r2
 800aa48:	461d      	mov	r5, r3
 800aa4a:	f7f5 fd81 	bl	8000550 <__aeabi_dmul>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f5 fbc3 	bl	80001e0 <__aeabi_dsub>
 800aa5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460f      	mov	r7, r1
 800aa62:	4620      	mov	r0, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	f7f5 fbbb 	bl	80001e0 <__aeabi_dsub>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa72:	f7f5 fbb5 	bl	80001e0 <__aeabi_dsub>
 800aa76:	4642      	mov	r2, r8
 800aa78:	464b      	mov	r3, r9
 800aa7a:	f7f5 fd69 	bl	8000550 <__aeabi_dmul>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fbab 	bl	80001e0 <__aeabi_dsub>
 800aa8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa8e:	f7f5 fd5f 	bl	8000550 <__aeabi_dmul>
 800aa92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f7f5 fd57 	bl	8000550 <__aeabi_dmul>
 800aaa2:	a37b      	add	r3, pc, #492	; (adr r3, 800ac90 <__ieee754_pow+0x6d0>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	460d      	mov	r5, r1
 800aaac:	f7f5 fd50 	bl	8000550 <__aeabi_dmul>
 800aab0:	a379      	add	r3, pc, #484	; (adr r3, 800ac98 <__ieee754_pow+0x6d8>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f7f5 fb95 	bl	80001e4 <__adddf3>
 800aaba:	4622      	mov	r2, r4
 800aabc:	462b      	mov	r3, r5
 800aabe:	f7f5 fd47 	bl	8000550 <__aeabi_dmul>
 800aac2:	a377      	add	r3, pc, #476	; (adr r3, 800aca0 <__ieee754_pow+0x6e0>)
 800aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac8:	f7f5 fb8c 	bl	80001e4 <__adddf3>
 800aacc:	4622      	mov	r2, r4
 800aace:	462b      	mov	r3, r5
 800aad0:	f7f5 fd3e 	bl	8000550 <__aeabi_dmul>
 800aad4:	a374      	add	r3, pc, #464	; (adr r3, 800aca8 <__ieee754_pow+0x6e8>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f7f5 fb83 	bl	80001e4 <__adddf3>
 800aade:	4622      	mov	r2, r4
 800aae0:	462b      	mov	r3, r5
 800aae2:	f7f5 fd35 	bl	8000550 <__aeabi_dmul>
 800aae6:	a372      	add	r3, pc, #456	; (adr r3, 800acb0 <__ieee754_pow+0x6f0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fb7a 	bl	80001e4 <__adddf3>
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	462b      	mov	r3, r5
 800aaf4:	f7f5 fd2c 	bl	8000550 <__aeabi_dmul>
 800aaf8:	a36f      	add	r3, pc, #444	; (adr r3, 800acb8 <__ieee754_pow+0x6f8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fb71 	bl	80001e4 <__adddf3>
 800ab02:	4622      	mov	r2, r4
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	462b      	mov	r3, r5
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	f7f5 fd1f 	bl	8000550 <__aeabi_dmul>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	4630      	mov	r0, r6
 800ab18:	4639      	mov	r1, r7
 800ab1a:	f7f5 fd19 	bl	8000550 <__aeabi_dmul>
 800ab1e:	4642      	mov	r2, r8
 800ab20:	4604      	mov	r4, r0
 800ab22:	460d      	mov	r5, r1
 800ab24:	464b      	mov	r3, r9
 800ab26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab2a:	f7f5 fb5b 	bl	80001e4 <__adddf3>
 800ab2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab32:	f7f5 fd0d 	bl	8000550 <__aeabi_dmul>
 800ab36:	4622      	mov	r2, r4
 800ab38:	462b      	mov	r3, r5
 800ab3a:	f7f5 fb53 	bl	80001e4 <__adddf3>
 800ab3e:	4642      	mov	r2, r8
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	464b      	mov	r3, r9
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	f7f5 fd01 	bl	8000550 <__aeabi_dmul>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4b68      	ldr	r3, [pc, #416]	; (800acf4 <__ieee754_pow+0x734>)
 800ab52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab56:	f7f5 fb45 	bl	80001e4 <__adddf3>
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	f7f5 fb41 	bl	80001e4 <__adddf3>
 800ab62:	9802      	ldr	r0, [sp, #8]
 800ab64:	460d      	mov	r5, r1
 800ab66:	4604      	mov	r4, r0
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	4649      	mov	r1, r9
 800ab70:	f7f5 fcee 	bl	8000550 <__aeabi_dmul>
 800ab74:	2200      	movs	r2, #0
 800ab76:	4680      	mov	r8, r0
 800ab78:	4689      	mov	r9, r1
 800ab7a:	4b5e      	ldr	r3, [pc, #376]	; (800acf4 <__ieee754_pow+0x734>)
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	4629      	mov	r1, r5
 800ab80:	f7f5 fb2e 	bl	80001e0 <__aeabi_dsub>
 800ab84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab88:	f7f5 fb2a 	bl	80001e0 <__aeabi_dsub>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 fb24 	bl	80001e0 <__aeabi_dsub>
 800ab98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9c:	f7f5 fcd8 	bl	8000550 <__aeabi_dmul>
 800aba0:	4622      	mov	r2, r4
 800aba2:	4606      	mov	r6, r0
 800aba4:	460f      	mov	r7, r1
 800aba6:	462b      	mov	r3, r5
 800aba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abac:	f7f5 fcd0 	bl	8000550 <__aeabi_dmul>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4630      	mov	r0, r6
 800abb6:	4639      	mov	r1, r7
 800abb8:	f7f5 fb14 	bl	80001e4 <__adddf3>
 800abbc:	4606      	mov	r6, r0
 800abbe:	460f      	mov	r7, r1
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4640      	mov	r0, r8
 800abc6:	4649      	mov	r1, r9
 800abc8:	f7f5 fb0c 	bl	80001e4 <__adddf3>
 800abcc:	9802      	ldr	r0, [sp, #8]
 800abce:	a33c      	add	r3, pc, #240	; (adr r3, 800acc0 <__ieee754_pow+0x700>)
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	f7f5 fcba 	bl	8000550 <__aeabi_dmul>
 800abdc:	4642      	mov	r2, r8
 800abde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abe2:	464b      	mov	r3, r9
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fafa 	bl	80001e0 <__aeabi_dsub>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 faf4 	bl	80001e0 <__aeabi_dsub>
 800abf8:	a333      	add	r3, pc, #204	; (adr r3, 800acc8 <__ieee754_pow+0x708>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f7f5 fca7 	bl	8000550 <__aeabi_dmul>
 800ac02:	a333      	add	r3, pc, #204	; (adr r3, 800acd0 <__ieee754_pow+0x710>)
 800ac04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac08:	4606      	mov	r6, r0
 800ac0a:	460f      	mov	r7, r1
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 fc9e 	bl	8000550 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 fae2 	bl	80001e4 <__adddf3>
 800ac20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac22:	4b35      	ldr	r3, [pc, #212]	; (800acf8 <__ieee754_pow+0x738>)
 800ac24:	4413      	add	r3, r2
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 fadb 	bl	80001e4 <__adddf3>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac32:	460d      	mov	r5, r1
 800ac34:	f7f5 fc22 	bl	800047c <__aeabi_i2d>
 800ac38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac3a:	4b30      	ldr	r3, [pc, #192]	; (800acfc <__ieee754_pow+0x73c>)
 800ac3c:	4413      	add	r3, r2
 800ac3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	4622      	mov	r2, r4
 800ac48:	462b      	mov	r3, r5
 800ac4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac4e:	f7f5 fac9 	bl	80001e4 <__adddf3>
 800ac52:	4642      	mov	r2, r8
 800ac54:	464b      	mov	r3, r9
 800ac56:	f7f5 fac5 	bl	80001e4 <__adddf3>
 800ac5a:	4632      	mov	r2, r6
 800ac5c:	463b      	mov	r3, r7
 800ac5e:	f7f5 fac1 	bl	80001e4 <__adddf3>
 800ac62:	9802      	ldr	r0, [sp, #8]
 800ac64:	4632      	mov	r2, r6
 800ac66:	463b      	mov	r3, r7
 800ac68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac6c:	f7f5 fab8 	bl	80001e0 <__aeabi_dsub>
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	f7f5 fab4 	bl	80001e0 <__aeabi_dsub>
 800ac78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac7c:	e607      	b.n	800a88e <__ieee754_pow+0x2ce>
 800ac7e:	f04f 0a01 	mov.w	sl, #1
 800ac82:	e6a5      	b.n	800a9d0 <__ieee754_pow+0x410>
 800ac84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800acd8 <__ieee754_pow+0x718>
 800ac88:	e613      	b.n	800a8b2 <__ieee754_pow+0x2f2>
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w
 800ac90:	4a454eef 	.word	0x4a454eef
 800ac94:	3fca7e28 	.word	0x3fca7e28
 800ac98:	93c9db65 	.word	0x93c9db65
 800ac9c:	3fcd864a 	.word	0x3fcd864a
 800aca0:	a91d4101 	.word	0xa91d4101
 800aca4:	3fd17460 	.word	0x3fd17460
 800aca8:	518f264d 	.word	0x518f264d
 800acac:	3fd55555 	.word	0x3fd55555
 800acb0:	db6fabff 	.word	0xdb6fabff
 800acb4:	3fdb6db6 	.word	0x3fdb6db6
 800acb8:	33333303 	.word	0x33333303
 800acbc:	3fe33333 	.word	0x3fe33333
 800acc0:	e0000000 	.word	0xe0000000
 800acc4:	3feec709 	.word	0x3feec709
 800acc8:	dc3a03fd 	.word	0xdc3a03fd
 800accc:	3feec709 	.word	0x3feec709
 800acd0:	145b01f5 	.word	0x145b01f5
 800acd4:	be3e2fe0 	.word	0xbe3e2fe0
 800acd8:	00000000 	.word	0x00000000
 800acdc:	3ff00000 	.word	0x3ff00000
 800ace0:	43400000 	.word	0x43400000
 800ace4:	0003988e 	.word	0x0003988e
 800ace8:	000bb679 	.word	0x000bb679
 800acec:	0800c508 	.word	0x0800c508
 800acf0:	3ff00000 	.word	0x3ff00000
 800acf4:	40080000 	.word	0x40080000
 800acf8:	0800c528 	.word	0x0800c528
 800acfc:	0800c518 	.word	0x0800c518
 800ad00:	a3b4      	add	r3, pc, #720	; (adr r3, 800afd4 <__ieee754_pow+0xa14>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fa6b 	bl	80001e4 <__adddf3>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad14:	462b      	mov	r3, r5
 800ad16:	4630      	mov	r0, r6
 800ad18:	4639      	mov	r1, r7
 800ad1a:	f7f5 fa61 	bl	80001e0 <__aeabi_dsub>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad26:	f7f5 fea3 	bl	8000a70 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f47f adfe 	bne.w	800a92c <__ieee754_pow+0x36c>
 800ad30:	4aa3      	ldr	r2, [pc, #652]	; (800afc0 <__ieee754_pow+0xa00>)
 800ad32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad36:	4293      	cmp	r3, r2
 800ad38:	f340 810a 	ble.w	800af50 <__ieee754_pow+0x990>
 800ad3c:	151b      	asrs	r3, r3, #20
 800ad3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ad42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ad46:	fa4a f303 	asr.w	r3, sl, r3
 800ad4a:	445b      	add	r3, fp
 800ad4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad50:	4e9c      	ldr	r6, [pc, #624]	; (800afc4 <__ieee754_pow+0xa04>)
 800ad52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ad56:	4116      	asrs	r6, r2
 800ad58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	ea23 0106 	bic.w	r1, r3, r6
 800ad62:	f1c2 0214 	rsb	r2, r2, #20
 800ad66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ad6a:	fa4a fa02 	asr.w	sl, sl, r2
 800ad6e:	f1bb 0f00 	cmp.w	fp, #0
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4620      	mov	r0, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	bfb8      	it	lt
 800ad7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ad80:	f7f5 fa2e 	bl	80001e0 <__aeabi_dsub>
 800ad84:	e9cd 0100 	strd	r0, r1, [sp]
 800ad88:	4642      	mov	r2, r8
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad90:	f7f5 fa28 	bl	80001e4 <__adddf3>
 800ad94:	2000      	movs	r0, #0
 800ad96:	a378      	add	r3, pc, #480	; (adr r3, 800af78 <__ieee754_pow+0x9b8>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	f7f5 fbd6 	bl	8000550 <__aeabi_dmul>
 800ada4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada8:	4606      	mov	r6, r0
 800adaa:	460f      	mov	r7, r1
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f7f5 fa16 	bl	80001e0 <__aeabi_dsub>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4640      	mov	r0, r8
 800adba:	4649      	mov	r1, r9
 800adbc:	f7f5 fa10 	bl	80001e0 <__aeabi_dsub>
 800adc0:	a36f      	add	r3, pc, #444	; (adr r3, 800af80 <__ieee754_pow+0x9c0>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fbc3 	bl	8000550 <__aeabi_dmul>
 800adca:	a36f      	add	r3, pc, #444	; (adr r3, 800af88 <__ieee754_pow+0x9c8>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	4680      	mov	r8, r0
 800add2:	4689      	mov	r9, r1
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fbba 	bl	8000550 <__aeabi_dmul>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4640      	mov	r0, r8
 800ade2:	4649      	mov	r1, r9
 800ade4:	f7f5 f9fe 	bl	80001e4 <__adddf3>
 800ade8:	4604      	mov	r4, r0
 800adea:	460d      	mov	r5, r1
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 f9f6 	bl	80001e4 <__adddf3>
 800adf8:	4632      	mov	r2, r6
 800adfa:	463b      	mov	r3, r7
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	f7f5 f9ee 	bl	80001e0 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4620      	mov	r0, r4
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	f7f5 f9e8 	bl	80001e0 <__aeabi_dsub>
 800ae10:	4642      	mov	r2, r8
 800ae12:	4606      	mov	r6, r0
 800ae14:	460f      	mov	r7, r1
 800ae16:	464b      	mov	r3, r9
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	f7f5 fb98 	bl	8000550 <__aeabi_dmul>
 800ae20:	a35b      	add	r3, pc, #364	; (adr r3, 800af90 <__ieee754_pow+0x9d0>)
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	4604      	mov	r4, r0
 800ae28:	460d      	mov	r5, r1
 800ae2a:	f7f5 fb91 	bl	8000550 <__aeabi_dmul>
 800ae2e:	a35a      	add	r3, pc, #360	; (adr r3, 800af98 <__ieee754_pow+0x9d8>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f7f5 f9d4 	bl	80001e0 <__aeabi_dsub>
 800ae38:	4622      	mov	r2, r4
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	f7f5 fb88 	bl	8000550 <__aeabi_dmul>
 800ae40:	a357      	add	r3, pc, #348	; (adr r3, 800afa0 <__ieee754_pow+0x9e0>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 f9cd 	bl	80001e4 <__adddf3>
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	f7f5 fb7f 	bl	8000550 <__aeabi_dmul>
 800ae52:	a355      	add	r3, pc, #340	; (adr r3, 800afa8 <__ieee754_pow+0x9e8>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 f9c2 	bl	80001e0 <__aeabi_dsub>
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	462b      	mov	r3, r5
 800ae60:	f7f5 fb76 	bl	8000550 <__aeabi_dmul>
 800ae64:	a352      	add	r3, pc, #328	; (adr r3, 800afb0 <__ieee754_pow+0x9f0>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 f9bb 	bl	80001e4 <__adddf3>
 800ae6e:	4622      	mov	r2, r4
 800ae70:	462b      	mov	r3, r5
 800ae72:	f7f5 fb6d 	bl	8000550 <__aeabi_dmul>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	f7f5 f9af 	bl	80001e0 <__aeabi_dsub>
 800ae82:	4604      	mov	r4, r0
 800ae84:	460d      	mov	r5, r1
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	f7f5 fb5f 	bl	8000550 <__aeabi_dmul>
 800ae92:	2200      	movs	r2, #0
 800ae94:	e9cd 0100 	strd	r0, r1, [sp]
 800ae98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 f99e 	bl	80001e0 <__aeabi_dsub>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeac:	f7f5 fc7a 	bl	80007a4 <__aeabi_ddiv>
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4649      	mov	r1, r9
 800aebc:	f7f5 fb48 	bl	8000550 <__aeabi_dmul>
 800aec0:	4632      	mov	r2, r6
 800aec2:	463b      	mov	r3, r7
 800aec4:	f7f5 f98e 	bl	80001e4 <__adddf3>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 f986 	bl	80001e0 <__aeabi_dsub>
 800aed4:	4642      	mov	r2, r8
 800aed6:	464b      	mov	r3, r9
 800aed8:	f7f5 f982 	bl	80001e0 <__aeabi_dsub>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	2000      	movs	r0, #0
 800aee2:	4939      	ldr	r1, [pc, #228]	; (800afc8 <__ieee754_pow+0xa08>)
 800aee4:	f7f5 f97c 	bl	80001e0 <__aeabi_dsub>
 800aee8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aeec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	da2f      	bge.n	800af56 <__ieee754_pow+0x996>
 800aef6:	4650      	mov	r0, sl
 800aef8:	ec43 2b10 	vmov	d0, r2, r3
 800aefc:	f001 f948 	bl	800c190 <scalbn>
 800af00:	ec51 0b10 	vmov	r0, r1, d0
 800af04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af08:	f7ff bbf1 	b.w	800a6ee <__ieee754_pow+0x12e>
 800af0c:	4b2f      	ldr	r3, [pc, #188]	; (800afcc <__ieee754_pow+0xa0c>)
 800af0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af12:	429e      	cmp	r6, r3
 800af14:	f77f af0c 	ble.w	800ad30 <__ieee754_pow+0x770>
 800af18:	4b2d      	ldr	r3, [pc, #180]	; (800afd0 <__ieee754_pow+0xa10>)
 800af1a:	440b      	add	r3, r1
 800af1c:	4303      	orrs	r3, r0
 800af1e:	d00b      	beq.n	800af38 <__ieee754_pow+0x978>
 800af20:	a325      	add	r3, pc, #148	; (adr r3, 800afb8 <__ieee754_pow+0x9f8>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2a:	f7f5 fb11 	bl	8000550 <__aeabi_dmul>
 800af2e:	a322      	add	r3, pc, #136	; (adr r3, 800afb8 <__ieee754_pow+0x9f8>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7ff bbdb 	b.w	800a6ee <__ieee754_pow+0x12e>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	f7f5 f950 	bl	80001e0 <__aeabi_dsub>
 800af40:	4642      	mov	r2, r8
 800af42:	464b      	mov	r3, r9
 800af44:	f7f5 fd8a 	bl	8000a5c <__aeabi_dcmpge>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f43f aef1 	beq.w	800ad30 <__ieee754_pow+0x770>
 800af4e:	e7e7      	b.n	800af20 <__ieee754_pow+0x960>
 800af50:	f04f 0a00 	mov.w	sl, #0
 800af54:	e718      	b.n	800ad88 <__ieee754_pow+0x7c8>
 800af56:	4621      	mov	r1, r4
 800af58:	e7d4      	b.n	800af04 <__ieee754_pow+0x944>
 800af5a:	2000      	movs	r0, #0
 800af5c:	491a      	ldr	r1, [pc, #104]	; (800afc8 <__ieee754_pow+0xa08>)
 800af5e:	f7ff bb8f 	b.w	800a680 <__ieee754_pow+0xc0>
 800af62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af66:	f7ff bb8b 	b.w	800a680 <__ieee754_pow+0xc0>
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7ff bb87 	b.w	800a680 <__ieee754_pow+0xc0>
 800af72:	4693      	mov	fp, r2
 800af74:	f7ff bb98 	b.w	800a6a8 <__ieee754_pow+0xe8>
 800af78:	00000000 	.word	0x00000000
 800af7c:	3fe62e43 	.word	0x3fe62e43
 800af80:	fefa39ef 	.word	0xfefa39ef
 800af84:	3fe62e42 	.word	0x3fe62e42
 800af88:	0ca86c39 	.word	0x0ca86c39
 800af8c:	be205c61 	.word	0xbe205c61
 800af90:	72bea4d0 	.word	0x72bea4d0
 800af94:	3e663769 	.word	0x3e663769
 800af98:	c5d26bf1 	.word	0xc5d26bf1
 800af9c:	3ebbbd41 	.word	0x3ebbbd41
 800afa0:	af25de2c 	.word	0xaf25de2c
 800afa4:	3f11566a 	.word	0x3f11566a
 800afa8:	16bebd93 	.word	0x16bebd93
 800afac:	3f66c16c 	.word	0x3f66c16c
 800afb0:	5555553e 	.word	0x5555553e
 800afb4:	3fc55555 	.word	0x3fc55555
 800afb8:	c2f8f359 	.word	0xc2f8f359
 800afbc:	01a56e1f 	.word	0x01a56e1f
 800afc0:	3fe00000 	.word	0x3fe00000
 800afc4:	000fffff 	.word	0x000fffff
 800afc8:	3ff00000 	.word	0x3ff00000
 800afcc:	4090cbff 	.word	0x4090cbff
 800afd0:	3f6f3400 	.word	0x3f6f3400
 800afd4:	652b82fe 	.word	0x652b82fe
 800afd8:	3c971547 	.word	0x3c971547
 800afdc:	00000000 	.word	0x00000000

0800afe0 <__ieee754_rem_pio2>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	ec57 6b10 	vmov	r6, r7, d0
 800afe8:	4bc3      	ldr	r3, [pc, #780]	; (800b2f8 <__ieee754_rem_pio2+0x318>)
 800afea:	b08d      	sub	sp, #52	; 0x34
 800afec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aff0:	4598      	cmp	r8, r3
 800aff2:	4604      	mov	r4, r0
 800aff4:	9704      	str	r7, [sp, #16]
 800aff6:	dc07      	bgt.n	800b008 <__ieee754_rem_pio2+0x28>
 800aff8:	2200      	movs	r2, #0
 800affa:	2300      	movs	r3, #0
 800affc:	ed84 0b00 	vstr	d0, [r4]
 800b000:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b004:	2500      	movs	r5, #0
 800b006:	e027      	b.n	800b058 <__ieee754_rem_pio2+0x78>
 800b008:	4bbc      	ldr	r3, [pc, #752]	; (800b2fc <__ieee754_rem_pio2+0x31c>)
 800b00a:	4598      	cmp	r8, r3
 800b00c:	dc75      	bgt.n	800b0fa <__ieee754_rem_pio2+0x11a>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	4dbb      	ldr	r5, [pc, #748]	; (800b300 <__ieee754_rem_pio2+0x320>)
 800b012:	2b00      	cmp	r3, #0
 800b014:	ee10 0a10 	vmov	r0, s0
 800b018:	a3a9      	add	r3, pc, #676	; (adr r3, 800b2c0 <__ieee754_rem_pio2+0x2e0>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	4639      	mov	r1, r7
 800b020:	dd36      	ble.n	800b090 <__ieee754_rem_pio2+0xb0>
 800b022:	f7f5 f8dd 	bl	80001e0 <__aeabi_dsub>
 800b026:	45a8      	cmp	r8, r5
 800b028:	4606      	mov	r6, r0
 800b02a:	460f      	mov	r7, r1
 800b02c:	d018      	beq.n	800b060 <__ieee754_rem_pio2+0x80>
 800b02e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2e8>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 f8d4 	bl	80001e0 <__aeabi_dsub>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	e9c4 2300 	strd	r2, r3, [r4]
 800b040:	4630      	mov	r0, r6
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 f8cc 	bl	80001e0 <__aeabi_dsub>
 800b048:	a39f      	add	r3, pc, #636	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2e8>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 f8c7 	bl	80001e0 <__aeabi_dsub>
 800b052:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b056:	2501      	movs	r5, #1
 800b058:	4628      	mov	r0, r5
 800b05a:	b00d      	add	sp, #52	; 0x34
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b060:	a39b      	add	r3, pc, #620	; (adr r3, 800b2d0 <__ieee754_rem_pio2+0x2f0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f8bb 	bl	80001e0 <__aeabi_dsub>
 800b06a:	a39b      	add	r3, pc, #620	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2f8>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	4606      	mov	r6, r0
 800b072:	460f      	mov	r7, r1
 800b074:	f7f5 f8b4 	bl	80001e0 <__aeabi_dsub>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	e9c4 2300 	strd	r2, r3, [r4]
 800b080:	4630      	mov	r0, r6
 800b082:	4639      	mov	r1, r7
 800b084:	f7f5 f8ac 	bl	80001e0 <__aeabi_dsub>
 800b088:	a393      	add	r3, pc, #588	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2f8>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	e7de      	b.n	800b04e <__ieee754_rem_pio2+0x6e>
 800b090:	f7f5 f8a8 	bl	80001e4 <__adddf3>
 800b094:	45a8      	cmp	r8, r5
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	d016      	beq.n	800b0ca <__ieee754_rem_pio2+0xea>
 800b09c:	a38a      	add	r3, pc, #552	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2e8>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 f89f 	bl	80001e4 <__adddf3>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	e9c4 2300 	strd	r2, r3, [r4]
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 f895 	bl	80001e0 <__aeabi_dsub>
 800b0b6:	a384      	add	r3, pc, #528	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2e8>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f7f5 f892 	bl	80001e4 <__adddf3>
 800b0c0:	f04f 35ff 	mov.w	r5, #4294967295
 800b0c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0c8:	e7c6      	b.n	800b058 <__ieee754_rem_pio2+0x78>
 800b0ca:	a381      	add	r3, pc, #516	; (adr r3, 800b2d0 <__ieee754_rem_pio2+0x2f0>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 f888 	bl	80001e4 <__adddf3>
 800b0d4:	a380      	add	r3, pc, #512	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2f8>)
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	4606      	mov	r6, r0
 800b0dc:	460f      	mov	r7, r1
 800b0de:	f7f5 f881 	bl	80001e4 <__adddf3>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f7f5 f877 	bl	80001e0 <__aeabi_dsub>
 800b0f2:	a379      	add	r3, pc, #484	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2f8>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	e7e0      	b.n	800b0bc <__ieee754_rem_pio2+0xdc>
 800b0fa:	4b82      	ldr	r3, [pc, #520]	; (800b304 <__ieee754_rem_pio2+0x324>)
 800b0fc:	4598      	cmp	r8, r3
 800b0fe:	f300 80d0 	bgt.w	800b2a2 <__ieee754_rem_pio2+0x2c2>
 800b102:	f000 ff1d 	bl	800bf40 <fabs>
 800b106:	ec57 6b10 	vmov	r6, r7, d0
 800b10a:	ee10 0a10 	vmov	r0, s0
 800b10e:	a374      	add	r3, pc, #464	; (adr r3, 800b2e0 <__ieee754_rem_pio2+0x300>)
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	4639      	mov	r1, r7
 800b116:	f7f5 fa1b 	bl	8000550 <__aeabi_dmul>
 800b11a:	2200      	movs	r2, #0
 800b11c:	4b7a      	ldr	r3, [pc, #488]	; (800b308 <__ieee754_rem_pio2+0x328>)
 800b11e:	f7f5 f861 	bl	80001e4 <__adddf3>
 800b122:	f7f5 fcc5 	bl	8000ab0 <__aeabi_d2iz>
 800b126:	4605      	mov	r5, r0
 800b128:	f7f5 f9a8 	bl	800047c <__aeabi_i2d>
 800b12c:	a364      	add	r3, pc, #400	; (adr r3, 800b2c0 <__ieee754_rem_pio2+0x2e0>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b136:	f7f5 fa0b 	bl	8000550 <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	4630      	mov	r0, r6
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 f84d 	bl	80001e0 <__aeabi_dsub>
 800b146:	a360      	add	r3, pc, #384	; (adr r3, 800b2c8 <__ieee754_rem_pio2+0x2e8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	4682      	mov	sl, r0
 800b14e:	468b      	mov	fp, r1
 800b150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b154:	f7f5 f9fc 	bl	8000550 <__aeabi_dmul>
 800b158:	2d1f      	cmp	r5, #31
 800b15a:	4606      	mov	r6, r0
 800b15c:	460f      	mov	r7, r1
 800b15e:	dc0c      	bgt.n	800b17a <__ieee754_rem_pio2+0x19a>
 800b160:	1e6a      	subs	r2, r5, #1
 800b162:	4b6a      	ldr	r3, [pc, #424]	; (800b30c <__ieee754_rem_pio2+0x32c>)
 800b164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b168:	4543      	cmp	r3, r8
 800b16a:	d006      	beq.n	800b17a <__ieee754_rem_pio2+0x19a>
 800b16c:	4632      	mov	r2, r6
 800b16e:	463b      	mov	r3, r7
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	f7f5 f834 	bl	80001e0 <__aeabi_dsub>
 800b178:	e00e      	b.n	800b198 <__ieee754_rem_pio2+0x1b8>
 800b17a:	4632      	mov	r2, r6
 800b17c:	463b      	mov	r3, r7
 800b17e:	4650      	mov	r0, sl
 800b180:	4659      	mov	r1, fp
 800b182:	f7f5 f82d 	bl	80001e0 <__aeabi_dsub>
 800b186:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b18a:	9305      	str	r3, [sp, #20]
 800b18c:	9a05      	ldr	r2, [sp, #20]
 800b18e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	2b10      	cmp	r3, #16
 800b196:	dc02      	bgt.n	800b19e <__ieee754_rem_pio2+0x1be>
 800b198:	e9c4 0100 	strd	r0, r1, [r4]
 800b19c:	e039      	b.n	800b212 <__ieee754_rem_pio2+0x232>
 800b19e:	a34c      	add	r3, pc, #304	; (adr r3, 800b2d0 <__ieee754_rem_pio2+0x2f0>)
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a8:	f7f5 f9d2 	bl	8000550 <__aeabi_dmul>
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4650      	mov	r0, sl
 800b1b6:	4659      	mov	r1, fp
 800b1b8:	f7f5 f812 	bl	80001e0 <__aeabi_dsub>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4680      	mov	r8, r0
 800b1c2:	4689      	mov	r9, r1
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	4659      	mov	r1, fp
 800b1c8:	f7f5 f80a 	bl	80001e0 <__aeabi_dsub>
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	f7f5 f806 	bl	80001e0 <__aeabi_dsub>
 800b1d4:	a340      	add	r3, pc, #256	; (adr r3, 800b2d8 <__ieee754_rem_pio2+0x2f8>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	4606      	mov	r6, r0
 800b1dc:	460f      	mov	r7, r1
 800b1de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1e2:	f7f5 f9b5 	bl	8000550 <__aeabi_dmul>
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	463b      	mov	r3, r7
 800b1ea:	f7f4 fff9 	bl	80001e0 <__aeabi_dsub>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	f7f4 fff1 	bl	80001e0 <__aeabi_dsub>
 800b1fe:	9a05      	ldr	r2, [sp, #20]
 800b200:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b31      	cmp	r3, #49	; 0x31
 800b208:	dc20      	bgt.n	800b24c <__ieee754_rem_pio2+0x26c>
 800b20a:	e9c4 0100 	strd	r0, r1, [r4]
 800b20e:	46c2      	mov	sl, r8
 800b210:	46cb      	mov	fp, r9
 800b212:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b216:	4650      	mov	r0, sl
 800b218:	4642      	mov	r2, r8
 800b21a:	464b      	mov	r3, r9
 800b21c:	4659      	mov	r1, fp
 800b21e:	f7f4 ffdf 	bl	80001e0 <__aeabi_dsub>
 800b222:	463b      	mov	r3, r7
 800b224:	4632      	mov	r2, r6
 800b226:	f7f4 ffdb 	bl	80001e0 <__aeabi_dsub>
 800b22a:	9b04      	ldr	r3, [sp, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b232:	f6bf af11 	bge.w	800b058 <__ieee754_rem_pio2+0x78>
 800b236:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b23a:	6063      	str	r3, [r4, #4]
 800b23c:	f8c4 8000 	str.w	r8, [r4]
 800b240:	60a0      	str	r0, [r4, #8]
 800b242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b246:	60e3      	str	r3, [r4, #12]
 800b248:	426d      	negs	r5, r5
 800b24a:	e705      	b.n	800b058 <__ieee754_rem_pio2+0x78>
 800b24c:	a326      	add	r3, pc, #152	; (adr r3, 800b2e8 <__ieee754_rem_pio2+0x308>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b256:	f7f5 f97b 	bl	8000550 <__aeabi_dmul>
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4640      	mov	r0, r8
 800b264:	4649      	mov	r1, r9
 800b266:	f7f4 ffbb 	bl	80001e0 <__aeabi_dsub>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4682      	mov	sl, r0
 800b270:	468b      	mov	fp, r1
 800b272:	4640      	mov	r0, r8
 800b274:	4649      	mov	r1, r9
 800b276:	f7f4 ffb3 	bl	80001e0 <__aeabi_dsub>
 800b27a:	4632      	mov	r2, r6
 800b27c:	463b      	mov	r3, r7
 800b27e:	f7f4 ffaf 	bl	80001e0 <__aeabi_dsub>
 800b282:	a31b      	add	r3, pc, #108	; (adr r3, 800b2f0 <__ieee754_rem_pio2+0x310>)
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	4606      	mov	r6, r0
 800b28a:	460f      	mov	r7, r1
 800b28c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b290:	f7f5 f95e 	bl	8000550 <__aeabi_dmul>
 800b294:	4632      	mov	r2, r6
 800b296:	463b      	mov	r3, r7
 800b298:	f7f4 ffa2 	bl	80001e0 <__aeabi_dsub>
 800b29c:	4606      	mov	r6, r0
 800b29e:	460f      	mov	r7, r1
 800b2a0:	e764      	b.n	800b16c <__ieee754_rem_pio2+0x18c>
 800b2a2:	4b1b      	ldr	r3, [pc, #108]	; (800b310 <__ieee754_rem_pio2+0x330>)
 800b2a4:	4598      	cmp	r8, r3
 800b2a6:	dd35      	ble.n	800b314 <__ieee754_rem_pio2+0x334>
 800b2a8:	ee10 2a10 	vmov	r2, s0
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f4 ff95 	bl	80001e0 <__aeabi_dsub>
 800b2b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2ba:	e9c4 0100 	strd	r0, r1, [r4]
 800b2be:	e6a1      	b.n	800b004 <__ieee754_rem_pio2+0x24>
 800b2c0:	54400000 	.word	0x54400000
 800b2c4:	3ff921fb 	.word	0x3ff921fb
 800b2c8:	1a626331 	.word	0x1a626331
 800b2cc:	3dd0b461 	.word	0x3dd0b461
 800b2d0:	1a600000 	.word	0x1a600000
 800b2d4:	3dd0b461 	.word	0x3dd0b461
 800b2d8:	2e037073 	.word	0x2e037073
 800b2dc:	3ba3198a 	.word	0x3ba3198a
 800b2e0:	6dc9c883 	.word	0x6dc9c883
 800b2e4:	3fe45f30 	.word	0x3fe45f30
 800b2e8:	2e000000 	.word	0x2e000000
 800b2ec:	3ba3198a 	.word	0x3ba3198a
 800b2f0:	252049c1 	.word	0x252049c1
 800b2f4:	397b839a 	.word	0x397b839a
 800b2f8:	3fe921fb 	.word	0x3fe921fb
 800b2fc:	4002d97b 	.word	0x4002d97b
 800b300:	3ff921fb 	.word	0x3ff921fb
 800b304:	413921fb 	.word	0x413921fb
 800b308:	3fe00000 	.word	0x3fe00000
 800b30c:	0800c538 	.word	0x0800c538
 800b310:	7fefffff 	.word	0x7fefffff
 800b314:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b318:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b31c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b320:	4630      	mov	r0, r6
 800b322:	460f      	mov	r7, r1
 800b324:	f7f5 fbc4 	bl	8000ab0 <__aeabi_d2iz>
 800b328:	f7f5 f8a8 	bl	800047c <__aeabi_i2d>
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	4630      	mov	r0, r6
 800b332:	4639      	mov	r1, r7
 800b334:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b338:	f7f4 ff52 	bl	80001e0 <__aeabi_dsub>
 800b33c:	2200      	movs	r2, #0
 800b33e:	4b1f      	ldr	r3, [pc, #124]	; (800b3bc <__ieee754_rem_pio2+0x3dc>)
 800b340:	f7f5 f906 	bl	8000550 <__aeabi_dmul>
 800b344:	460f      	mov	r7, r1
 800b346:	4606      	mov	r6, r0
 800b348:	f7f5 fbb2 	bl	8000ab0 <__aeabi_d2iz>
 800b34c:	f7f5 f896 	bl	800047c <__aeabi_i2d>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4630      	mov	r0, r6
 800b356:	4639      	mov	r1, r7
 800b358:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b35c:	f7f4 ff40 	bl	80001e0 <__aeabi_dsub>
 800b360:	2200      	movs	r2, #0
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <__ieee754_rem_pio2+0x3dc>)
 800b364:	f7f5 f8f4 	bl	8000550 <__aeabi_dmul>
 800b368:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b36c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b370:	f04f 0803 	mov.w	r8, #3
 800b374:	2600      	movs	r6, #0
 800b376:	2700      	movs	r7, #0
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b380:	f108 3aff 	add.w	sl, r8, #4294967295
 800b384:	f7f5 fb4c 	bl	8000a20 <__aeabi_dcmpeq>
 800b388:	b9b0      	cbnz	r0, 800b3b8 <__ieee754_rem_pio2+0x3d8>
 800b38a:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <__ieee754_rem_pio2+0x3e0>)
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	2302      	movs	r3, #2
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	462a      	mov	r2, r5
 800b394:	4643      	mov	r3, r8
 800b396:	4621      	mov	r1, r4
 800b398:	a806      	add	r0, sp, #24
 800b39a:	f000 f8c5 	bl	800b528 <__kernel_rem_pio2>
 800b39e:	9b04      	ldr	r3, [sp, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	f6bf ae58 	bge.w	800b058 <__ieee754_rem_pio2+0x78>
 800b3a8:	6863      	ldr	r3, [r4, #4]
 800b3aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3ae:	6063      	str	r3, [r4, #4]
 800b3b0:	68e3      	ldr	r3, [r4, #12]
 800b3b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3b6:	e746      	b.n	800b246 <__ieee754_rem_pio2+0x266>
 800b3b8:	46d0      	mov	r8, sl
 800b3ba:	e7dd      	b.n	800b378 <__ieee754_rem_pio2+0x398>
 800b3bc:	41700000 	.word	0x41700000
 800b3c0:	0800c5b8 	.word	0x0800c5b8

0800b3c4 <__ieee754_sqrt>:
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	4955      	ldr	r1, [pc, #340]	; (800b520 <__ieee754_sqrt+0x15c>)
 800b3ca:	ec55 4b10 	vmov	r4, r5, d0
 800b3ce:	43a9      	bics	r1, r5
 800b3d0:	462b      	mov	r3, r5
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	d112      	bne.n	800b3fc <__ieee754_sqrt+0x38>
 800b3d6:	ee10 2a10 	vmov	r2, s0
 800b3da:	ee10 0a10 	vmov	r0, s0
 800b3de:	4629      	mov	r1, r5
 800b3e0:	f7f5 f8b6 	bl	8000550 <__aeabi_dmul>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	f7f4 fefa 	bl	80001e4 <__adddf3>
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	ec45 4b10 	vmov	d0, r4, r5
 800b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	ee10 0a10 	vmov	r0, s0
 800b402:	4621      	mov	r1, r4
 800b404:	dc0f      	bgt.n	800b426 <__ieee754_sqrt+0x62>
 800b406:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b40a:	4330      	orrs	r0, r6
 800b40c:	d0f2      	beq.n	800b3f4 <__ieee754_sqrt+0x30>
 800b40e:	b155      	cbz	r5, 800b426 <__ieee754_sqrt+0x62>
 800b410:	ee10 2a10 	vmov	r2, s0
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f4 fee2 	bl	80001e0 <__aeabi_dsub>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	f7f5 f9c0 	bl	80007a4 <__aeabi_ddiv>
 800b424:	e7e4      	b.n	800b3f0 <__ieee754_sqrt+0x2c>
 800b426:	151b      	asrs	r3, r3, #20
 800b428:	d073      	beq.n	800b512 <__ieee754_sqrt+0x14e>
 800b42a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b42e:	07dd      	lsls	r5, r3, #31
 800b430:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b434:	bf48      	it	mi
 800b436:	0fc8      	lsrmi	r0, r1, #31
 800b438:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b43c:	bf44      	itt	mi
 800b43e:	0049      	lslmi	r1, r1, #1
 800b440:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b444:	2500      	movs	r5, #0
 800b446:	1058      	asrs	r0, r3, #1
 800b448:	0fcb      	lsrs	r3, r1, #31
 800b44a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b44e:	0049      	lsls	r1, r1, #1
 800b450:	2316      	movs	r3, #22
 800b452:	462c      	mov	r4, r5
 800b454:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b458:	19a7      	adds	r7, r4, r6
 800b45a:	4297      	cmp	r7, r2
 800b45c:	bfde      	ittt	le
 800b45e:	19bc      	addle	r4, r7, r6
 800b460:	1bd2      	suble	r2, r2, r7
 800b462:	19ad      	addle	r5, r5, r6
 800b464:	0fcf      	lsrs	r7, r1, #31
 800b466:	3b01      	subs	r3, #1
 800b468:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b46c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b470:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b474:	d1f0      	bne.n	800b458 <__ieee754_sqrt+0x94>
 800b476:	f04f 0c20 	mov.w	ip, #32
 800b47a:	469e      	mov	lr, r3
 800b47c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b480:	42a2      	cmp	r2, r4
 800b482:	eb06 070e 	add.w	r7, r6, lr
 800b486:	dc02      	bgt.n	800b48e <__ieee754_sqrt+0xca>
 800b488:	d112      	bne.n	800b4b0 <__ieee754_sqrt+0xec>
 800b48a:	428f      	cmp	r7, r1
 800b48c:	d810      	bhi.n	800b4b0 <__ieee754_sqrt+0xec>
 800b48e:	2f00      	cmp	r7, #0
 800b490:	eb07 0e06 	add.w	lr, r7, r6
 800b494:	da42      	bge.n	800b51c <__ieee754_sqrt+0x158>
 800b496:	f1be 0f00 	cmp.w	lr, #0
 800b49a:	db3f      	blt.n	800b51c <__ieee754_sqrt+0x158>
 800b49c:	f104 0801 	add.w	r8, r4, #1
 800b4a0:	1b12      	subs	r2, r2, r4
 800b4a2:	428f      	cmp	r7, r1
 800b4a4:	bf88      	it	hi
 800b4a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b4aa:	1bc9      	subs	r1, r1, r7
 800b4ac:	4433      	add	r3, r6
 800b4ae:	4644      	mov	r4, r8
 800b4b0:	0052      	lsls	r2, r2, #1
 800b4b2:	f1bc 0c01 	subs.w	ip, ip, #1
 800b4b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b4ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b4be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b4c2:	d1dd      	bne.n	800b480 <__ieee754_sqrt+0xbc>
 800b4c4:	430a      	orrs	r2, r1
 800b4c6:	d006      	beq.n	800b4d6 <__ieee754_sqrt+0x112>
 800b4c8:	1c5c      	adds	r4, r3, #1
 800b4ca:	bf13      	iteet	ne
 800b4cc:	3301      	addne	r3, #1
 800b4ce:	3501      	addeq	r5, #1
 800b4d0:	4663      	moveq	r3, ip
 800b4d2:	f023 0301 	bicne.w	r3, r3, #1
 800b4d6:	106a      	asrs	r2, r5, #1
 800b4d8:	085b      	lsrs	r3, r3, #1
 800b4da:	07e9      	lsls	r1, r5, #31
 800b4dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b4e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b4e4:	bf48      	it	mi
 800b4e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b4ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	e780      	b.n	800b3f4 <__ieee754_sqrt+0x30>
 800b4f2:	0aca      	lsrs	r2, r1, #11
 800b4f4:	3815      	subs	r0, #21
 800b4f6:	0549      	lsls	r1, r1, #21
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	d0fa      	beq.n	800b4f2 <__ieee754_sqrt+0x12e>
 800b4fc:	02d6      	lsls	r6, r2, #11
 800b4fe:	d50a      	bpl.n	800b516 <__ieee754_sqrt+0x152>
 800b500:	f1c3 0420 	rsb	r4, r3, #32
 800b504:	fa21 f404 	lsr.w	r4, r1, r4
 800b508:	1e5d      	subs	r5, r3, #1
 800b50a:	4099      	lsls	r1, r3
 800b50c:	4322      	orrs	r2, r4
 800b50e:	1b43      	subs	r3, r0, r5
 800b510:	e78b      	b.n	800b42a <__ieee754_sqrt+0x66>
 800b512:	4618      	mov	r0, r3
 800b514:	e7f0      	b.n	800b4f8 <__ieee754_sqrt+0x134>
 800b516:	0052      	lsls	r2, r2, #1
 800b518:	3301      	adds	r3, #1
 800b51a:	e7ef      	b.n	800b4fc <__ieee754_sqrt+0x138>
 800b51c:	46a0      	mov	r8, r4
 800b51e:	e7bf      	b.n	800b4a0 <__ieee754_sqrt+0xdc>
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	00000000 	.word	0x00000000

0800b528 <__kernel_rem_pio2>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	ed2d 8b02 	vpush	{d8}
 800b530:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b534:	1ed4      	subs	r4, r2, #3
 800b536:	9308      	str	r3, [sp, #32]
 800b538:	9101      	str	r1, [sp, #4]
 800b53a:	4bc5      	ldr	r3, [pc, #788]	; (800b850 <__kernel_rem_pio2+0x328>)
 800b53c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b53e:	9009      	str	r0, [sp, #36]	; 0x24
 800b540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	9b08      	ldr	r3, [sp, #32]
 800b548:	3b01      	subs	r3, #1
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	2318      	movs	r3, #24
 800b54e:	fb94 f4f3 	sdiv	r4, r4, r3
 800b552:	f06f 0317 	mvn.w	r3, #23
 800b556:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b55a:	fb04 3303 	mla	r3, r4, r3, r3
 800b55e:	eb03 0a02 	add.w	sl, r3, r2
 800b562:	9b04      	ldr	r3, [sp, #16]
 800b564:	9a07      	ldr	r2, [sp, #28]
 800b566:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b840 <__kernel_rem_pio2+0x318>
 800b56a:	eb03 0802 	add.w	r8, r3, r2
 800b56e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b570:	1aa7      	subs	r7, r4, r2
 800b572:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b576:	ae22      	add	r6, sp, #136	; 0x88
 800b578:	2500      	movs	r5, #0
 800b57a:	4545      	cmp	r5, r8
 800b57c:	dd13      	ble.n	800b5a6 <__kernel_rem_pio2+0x7e>
 800b57e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b840 <__kernel_rem_pio2+0x318>
 800b582:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b586:	2600      	movs	r6, #0
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	429e      	cmp	r6, r3
 800b58c:	dc32      	bgt.n	800b5f4 <__kernel_rem_pio2+0xcc>
 800b58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	9b08      	ldr	r3, [sp, #32]
 800b594:	199d      	adds	r5, r3, r6
 800b596:	ab22      	add	r3, sp, #136	; 0x88
 800b598:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b59c:	9306      	str	r3, [sp, #24]
 800b59e:	ec59 8b18 	vmov	r8, r9, d8
 800b5a2:	2700      	movs	r7, #0
 800b5a4:	e01f      	b.n	800b5e6 <__kernel_rem_pio2+0xbe>
 800b5a6:	42ef      	cmn	r7, r5
 800b5a8:	d407      	bmi.n	800b5ba <__kernel_rem_pio2+0x92>
 800b5aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b5ae:	f7f4 ff65 	bl	800047c <__aeabi_i2d>
 800b5b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b5b6:	3501      	adds	r5, #1
 800b5b8:	e7df      	b.n	800b57a <__kernel_rem_pio2+0x52>
 800b5ba:	ec51 0b18 	vmov	r0, r1, d8
 800b5be:	e7f8      	b.n	800b5b2 <__kernel_rem_pio2+0x8a>
 800b5c0:	9906      	ldr	r1, [sp, #24]
 800b5c2:	9d02      	ldr	r5, [sp, #8]
 800b5c4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b5c8:	9106      	str	r1, [sp, #24]
 800b5ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b5ce:	9502      	str	r5, [sp, #8]
 800b5d0:	f7f4 ffbe 	bl	8000550 <__aeabi_dmul>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4649      	mov	r1, r9
 800b5dc:	f7f4 fe02 	bl	80001e4 <__adddf3>
 800b5e0:	3701      	adds	r7, #1
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	4689      	mov	r9, r1
 800b5e6:	9b07      	ldr	r3, [sp, #28]
 800b5e8:	429f      	cmp	r7, r3
 800b5ea:	dde9      	ble.n	800b5c0 <__kernel_rem_pio2+0x98>
 800b5ec:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b5f0:	3601      	adds	r6, #1
 800b5f2:	e7c9      	b.n	800b588 <__kernel_rem_pio2+0x60>
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	aa0e      	add	r2, sp, #56	; 0x38
 800b5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5fc:	930c      	str	r3, [sp, #48]	; 0x30
 800b5fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b600:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b604:	9c04      	ldr	r4, [sp, #16]
 800b606:	930b      	str	r3, [sp, #44]	; 0x2c
 800b608:	ab9a      	add	r3, sp, #616	; 0x268
 800b60a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b60e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b612:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b616:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b61a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b61e:	ab9a      	add	r3, sp, #616	; 0x268
 800b620:	445b      	add	r3, fp
 800b622:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b626:	2500      	movs	r5, #0
 800b628:	1b63      	subs	r3, r4, r5
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	dc78      	bgt.n	800b720 <__kernel_rem_pio2+0x1f8>
 800b62e:	4650      	mov	r0, sl
 800b630:	ec49 8b10 	vmov	d0, r8, r9
 800b634:	f000 fdac 	bl	800c190 <scalbn>
 800b638:	ec57 6b10 	vmov	r6, r7, d0
 800b63c:	2200      	movs	r2, #0
 800b63e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b642:	ee10 0a10 	vmov	r0, s0
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ff82 	bl	8000550 <__aeabi_dmul>
 800b64c:	ec41 0b10 	vmov	d0, r0, r1
 800b650:	f000 fc8a 	bl	800bf68 <floor>
 800b654:	2200      	movs	r2, #0
 800b656:	ec51 0b10 	vmov	r0, r1, d0
 800b65a:	4b7e      	ldr	r3, [pc, #504]	; (800b854 <__kernel_rem_pio2+0x32c>)
 800b65c:	f7f4 ff78 	bl	8000550 <__aeabi_dmul>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4630      	mov	r0, r6
 800b666:	4639      	mov	r1, r7
 800b668:	f7f4 fdba 	bl	80001e0 <__aeabi_dsub>
 800b66c:	460f      	mov	r7, r1
 800b66e:	4606      	mov	r6, r0
 800b670:	f7f5 fa1e 	bl	8000ab0 <__aeabi_d2iz>
 800b674:	9006      	str	r0, [sp, #24]
 800b676:	f7f4 ff01 	bl	800047c <__aeabi_i2d>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f4 fdad 	bl	80001e0 <__aeabi_dsub>
 800b686:	f1ba 0f00 	cmp.w	sl, #0
 800b68a:	4606      	mov	r6, r0
 800b68c:	460f      	mov	r7, r1
 800b68e:	dd6c      	ble.n	800b76a <__kernel_rem_pio2+0x242>
 800b690:	1e62      	subs	r2, r4, #1
 800b692:	ab0e      	add	r3, sp, #56	; 0x38
 800b694:	f1ca 0118 	rsb	r1, sl, #24
 800b698:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b69c:	9d06      	ldr	r5, [sp, #24]
 800b69e:	fa40 f301 	asr.w	r3, r0, r1
 800b6a2:	441d      	add	r5, r3
 800b6a4:	408b      	lsls	r3, r1
 800b6a6:	1ac0      	subs	r0, r0, r3
 800b6a8:	ab0e      	add	r3, sp, #56	; 0x38
 800b6aa:	9506      	str	r5, [sp, #24]
 800b6ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b6b0:	f1ca 0317 	rsb	r3, sl, #23
 800b6b4:	fa40 f303 	asr.w	r3, r0, r3
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	9b02      	ldr	r3, [sp, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	dd62      	ble.n	800b786 <__kernel_rem_pio2+0x25e>
 800b6c0:	9b06      	ldr	r3, [sp, #24]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	9306      	str	r3, [sp, #24]
 800b6c8:	4615      	mov	r5, r2
 800b6ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b6ce:	4294      	cmp	r4, r2
 800b6d0:	f300 8095 	bgt.w	800b7fe <__kernel_rem_pio2+0x2d6>
 800b6d4:	f1ba 0f00 	cmp.w	sl, #0
 800b6d8:	dd07      	ble.n	800b6ea <__kernel_rem_pio2+0x1c2>
 800b6da:	f1ba 0f01 	cmp.w	sl, #1
 800b6de:	f000 80a2 	beq.w	800b826 <__kernel_rem_pio2+0x2fe>
 800b6e2:	f1ba 0f02 	cmp.w	sl, #2
 800b6e6:	f000 80c1 	beq.w	800b86c <__kernel_rem_pio2+0x344>
 800b6ea:	9b02      	ldr	r3, [sp, #8]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d14a      	bne.n	800b786 <__kernel_rem_pio2+0x25e>
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	4958      	ldr	r1, [pc, #352]	; (800b858 <__kernel_rem_pio2+0x330>)
 800b6f8:	f7f4 fd72 	bl	80001e0 <__aeabi_dsub>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	2d00      	cmp	r5, #0
 800b702:	d040      	beq.n	800b786 <__kernel_rem_pio2+0x25e>
 800b704:	4650      	mov	r0, sl
 800b706:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b848 <__kernel_rem_pio2+0x320>
 800b70a:	f000 fd41 	bl	800c190 <scalbn>
 800b70e:	4630      	mov	r0, r6
 800b710:	4639      	mov	r1, r7
 800b712:	ec53 2b10 	vmov	r2, r3, d0
 800b716:	f7f4 fd63 	bl	80001e0 <__aeabi_dsub>
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	e032      	b.n	800b786 <__kernel_rem_pio2+0x25e>
 800b720:	2200      	movs	r2, #0
 800b722:	4b4e      	ldr	r3, [pc, #312]	; (800b85c <__kernel_rem_pio2+0x334>)
 800b724:	4640      	mov	r0, r8
 800b726:	4649      	mov	r1, r9
 800b728:	f7f4 ff12 	bl	8000550 <__aeabi_dmul>
 800b72c:	f7f5 f9c0 	bl	8000ab0 <__aeabi_d2iz>
 800b730:	f7f4 fea4 	bl	800047c <__aeabi_i2d>
 800b734:	2200      	movs	r2, #0
 800b736:	4b4a      	ldr	r3, [pc, #296]	; (800b860 <__kernel_rem_pio2+0x338>)
 800b738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b73c:	f7f4 ff08 	bl	8000550 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4640      	mov	r0, r8
 800b746:	4649      	mov	r1, r9
 800b748:	f7f4 fd4a 	bl	80001e0 <__aeabi_dsub>
 800b74c:	f7f5 f9b0 	bl	8000ab0 <__aeabi_d2iz>
 800b750:	ab0e      	add	r3, sp, #56	; 0x38
 800b752:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b756:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75e:	f7f4 fd41 	bl	80001e4 <__adddf3>
 800b762:	3501      	adds	r5, #1
 800b764:	4680      	mov	r8, r0
 800b766:	4689      	mov	r9, r1
 800b768:	e75e      	b.n	800b628 <__kernel_rem_pio2+0x100>
 800b76a:	d105      	bne.n	800b778 <__kernel_rem_pio2+0x250>
 800b76c:	1e63      	subs	r3, r4, #1
 800b76e:	aa0e      	add	r2, sp, #56	; 0x38
 800b770:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b774:	15c3      	asrs	r3, r0, #23
 800b776:	e79f      	b.n	800b6b8 <__kernel_rem_pio2+0x190>
 800b778:	2200      	movs	r2, #0
 800b77a:	4b3a      	ldr	r3, [pc, #232]	; (800b864 <__kernel_rem_pio2+0x33c>)
 800b77c:	f7f5 f96e 	bl	8000a5c <__aeabi_dcmpge>
 800b780:	2800      	cmp	r0, #0
 800b782:	d139      	bne.n	800b7f8 <__kernel_rem_pio2+0x2d0>
 800b784:	9002      	str	r0, [sp, #8]
 800b786:	2200      	movs	r2, #0
 800b788:	2300      	movs	r3, #0
 800b78a:	4630      	mov	r0, r6
 800b78c:	4639      	mov	r1, r7
 800b78e:	f7f5 f947 	bl	8000a20 <__aeabi_dcmpeq>
 800b792:	2800      	cmp	r0, #0
 800b794:	f000 80c7 	beq.w	800b926 <__kernel_rem_pio2+0x3fe>
 800b798:	1e65      	subs	r5, r4, #1
 800b79a:	462b      	mov	r3, r5
 800b79c:	2200      	movs	r2, #0
 800b79e:	9904      	ldr	r1, [sp, #16]
 800b7a0:	428b      	cmp	r3, r1
 800b7a2:	da6a      	bge.n	800b87a <__kernel_rem_pio2+0x352>
 800b7a4:	2a00      	cmp	r2, #0
 800b7a6:	f000 8088 	beq.w	800b8ba <__kernel_rem_pio2+0x392>
 800b7aa:	ab0e      	add	r3, sp, #56	; 0x38
 800b7ac:	f1aa 0a18 	sub.w	sl, sl, #24
 800b7b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f000 80b4 	beq.w	800b922 <__kernel_rem_pio2+0x3fa>
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b848 <__kernel_rem_pio2+0x320>
 800b7c0:	f000 fce6 	bl	800c190 <scalbn>
 800b7c4:	00ec      	lsls	r4, r5, #3
 800b7c6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b7c8:	191e      	adds	r6, r3, r4
 800b7ca:	ec59 8b10 	vmov	r8, r9, d0
 800b7ce:	f106 0a08 	add.w	sl, r6, #8
 800b7d2:	462f      	mov	r7, r5
 800b7d4:	2f00      	cmp	r7, #0
 800b7d6:	f280 80df 	bge.w	800b998 <__kernel_rem_pio2+0x470>
 800b7da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b840 <__kernel_rem_pio2+0x318>
 800b7de:	f04f 0a00 	mov.w	sl, #0
 800b7e2:	eba5 030a 	sub.w	r3, r5, sl
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f2c0 810a 	blt.w	800ba00 <__kernel_rem_pio2+0x4d8>
 800b7ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b868 <__kernel_rem_pio2+0x340>
 800b7f0:	ec59 8b18 	vmov	r8, r9, d8
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	e0f5      	b.n	800b9e4 <__kernel_rem_pio2+0x4bc>
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	9302      	str	r3, [sp, #8]
 800b7fc:	e760      	b.n	800b6c0 <__kernel_rem_pio2+0x198>
 800b7fe:	ab0e      	add	r3, sp, #56	; 0x38
 800b800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b804:	b94d      	cbnz	r5, 800b81a <__kernel_rem_pio2+0x2f2>
 800b806:	b12b      	cbz	r3, 800b814 <__kernel_rem_pio2+0x2ec>
 800b808:	a80e      	add	r0, sp, #56	; 0x38
 800b80a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b80e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b812:	2301      	movs	r3, #1
 800b814:	3201      	adds	r2, #1
 800b816:	461d      	mov	r5, r3
 800b818:	e759      	b.n	800b6ce <__kernel_rem_pio2+0x1a6>
 800b81a:	a80e      	add	r0, sp, #56	; 0x38
 800b81c:	1acb      	subs	r3, r1, r3
 800b81e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b822:	462b      	mov	r3, r5
 800b824:	e7f6      	b.n	800b814 <__kernel_rem_pio2+0x2ec>
 800b826:	1e62      	subs	r2, r4, #1
 800b828:	ab0e      	add	r3, sp, #56	; 0x38
 800b82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b832:	a90e      	add	r1, sp, #56	; 0x38
 800b834:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b838:	e757      	b.n	800b6ea <__kernel_rem_pio2+0x1c2>
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w
	...
 800b84c:	3ff00000 	.word	0x3ff00000
 800b850:	0800c700 	.word	0x0800c700
 800b854:	40200000 	.word	0x40200000
 800b858:	3ff00000 	.word	0x3ff00000
 800b85c:	3e700000 	.word	0x3e700000
 800b860:	41700000 	.word	0x41700000
 800b864:	3fe00000 	.word	0x3fe00000
 800b868:	0800c6c0 	.word	0x0800c6c0
 800b86c:	1e62      	subs	r2, r4, #1
 800b86e:	ab0e      	add	r3, sp, #56	; 0x38
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b878:	e7db      	b.n	800b832 <__kernel_rem_pio2+0x30a>
 800b87a:	a90e      	add	r1, sp, #56	; 0x38
 800b87c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b880:	3b01      	subs	r3, #1
 800b882:	430a      	orrs	r2, r1
 800b884:	e78b      	b.n	800b79e <__kernel_rem_pio2+0x276>
 800b886:	3301      	adds	r3, #1
 800b888:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b88c:	2900      	cmp	r1, #0
 800b88e:	d0fa      	beq.n	800b886 <__kernel_rem_pio2+0x35e>
 800b890:	9a08      	ldr	r2, [sp, #32]
 800b892:	4422      	add	r2, r4
 800b894:	00d2      	lsls	r2, r2, #3
 800b896:	a922      	add	r1, sp, #136	; 0x88
 800b898:	18e3      	adds	r3, r4, r3
 800b89a:	9206      	str	r2, [sp, #24]
 800b89c:	440a      	add	r2, r1
 800b89e:	9302      	str	r3, [sp, #8]
 800b8a0:	f10b 0108 	add.w	r1, fp, #8
 800b8a4:	f102 0308 	add.w	r3, r2, #8
 800b8a8:	1c66      	adds	r6, r4, #1
 800b8aa:	910a      	str	r1, [sp, #40]	; 0x28
 800b8ac:	2500      	movs	r5, #0
 800b8ae:	930d      	str	r3, [sp, #52]	; 0x34
 800b8b0:	9b02      	ldr	r3, [sp, #8]
 800b8b2:	42b3      	cmp	r3, r6
 800b8b4:	da04      	bge.n	800b8c0 <__kernel_rem_pio2+0x398>
 800b8b6:	461c      	mov	r4, r3
 800b8b8:	e6a6      	b.n	800b608 <__kernel_rem_pio2+0xe0>
 800b8ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e7e3      	b.n	800b888 <__kernel_rem_pio2+0x360>
 800b8c0:	9b06      	ldr	r3, [sp, #24]
 800b8c2:	18ef      	adds	r7, r5, r3
 800b8c4:	ab22      	add	r3, sp, #136	; 0x88
 800b8c6:	441f      	add	r7, r3
 800b8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b8ce:	f7f4 fdd5 	bl	800047c <__aeabi_i2d>
 800b8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d4:	461c      	mov	r4, r3
 800b8d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8d8:	e9c7 0100 	strd	r0, r1, [r7]
 800b8dc:	eb03 0b05 	add.w	fp, r3, r5
 800b8e0:	2700      	movs	r7, #0
 800b8e2:	f04f 0800 	mov.w	r8, #0
 800b8e6:	f04f 0900 	mov.w	r9, #0
 800b8ea:	9b07      	ldr	r3, [sp, #28]
 800b8ec:	429f      	cmp	r7, r3
 800b8ee:	dd08      	ble.n	800b902 <__kernel_rem_pio2+0x3da>
 800b8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f2:	aa72      	add	r2, sp, #456	; 0x1c8
 800b8f4:	18eb      	adds	r3, r5, r3
 800b8f6:	4413      	add	r3, r2
 800b8f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	3508      	adds	r5, #8
 800b900:	e7d6      	b.n	800b8b0 <__kernel_rem_pio2+0x388>
 800b902:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b906:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b90a:	f7f4 fe21 	bl	8000550 <__aeabi_dmul>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	4640      	mov	r0, r8
 800b914:	4649      	mov	r1, r9
 800b916:	f7f4 fc65 	bl	80001e4 <__adddf3>
 800b91a:	3701      	adds	r7, #1
 800b91c:	4680      	mov	r8, r0
 800b91e:	4689      	mov	r9, r1
 800b920:	e7e3      	b.n	800b8ea <__kernel_rem_pio2+0x3c2>
 800b922:	3d01      	subs	r5, #1
 800b924:	e741      	b.n	800b7aa <__kernel_rem_pio2+0x282>
 800b926:	f1ca 0000 	rsb	r0, sl, #0
 800b92a:	ec47 6b10 	vmov	d0, r6, r7
 800b92e:	f000 fc2f 	bl	800c190 <scalbn>
 800b932:	ec57 6b10 	vmov	r6, r7, d0
 800b936:	2200      	movs	r2, #0
 800b938:	4b99      	ldr	r3, [pc, #612]	; (800bba0 <__kernel_rem_pio2+0x678>)
 800b93a:	ee10 0a10 	vmov	r0, s0
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f5 f88c 	bl	8000a5c <__aeabi_dcmpge>
 800b944:	b1f8      	cbz	r0, 800b986 <__kernel_rem_pio2+0x45e>
 800b946:	2200      	movs	r2, #0
 800b948:	4b96      	ldr	r3, [pc, #600]	; (800bba4 <__kernel_rem_pio2+0x67c>)
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f4 fdff 	bl	8000550 <__aeabi_dmul>
 800b952:	f7f5 f8ad 	bl	8000ab0 <__aeabi_d2iz>
 800b956:	4680      	mov	r8, r0
 800b958:	f7f4 fd90 	bl	800047c <__aeabi_i2d>
 800b95c:	2200      	movs	r2, #0
 800b95e:	4b90      	ldr	r3, [pc, #576]	; (800bba0 <__kernel_rem_pio2+0x678>)
 800b960:	f7f4 fdf6 	bl	8000550 <__aeabi_dmul>
 800b964:	460b      	mov	r3, r1
 800b966:	4602      	mov	r2, r0
 800b968:	4639      	mov	r1, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7f4 fc38 	bl	80001e0 <__aeabi_dsub>
 800b970:	f7f5 f89e 	bl	8000ab0 <__aeabi_d2iz>
 800b974:	1c65      	adds	r5, r4, #1
 800b976:	ab0e      	add	r3, sp, #56	; 0x38
 800b978:	f10a 0a18 	add.w	sl, sl, #24
 800b97c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b980:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b984:	e719      	b.n	800b7ba <__kernel_rem_pio2+0x292>
 800b986:	4630      	mov	r0, r6
 800b988:	4639      	mov	r1, r7
 800b98a:	f7f5 f891 	bl	8000ab0 <__aeabi_d2iz>
 800b98e:	ab0e      	add	r3, sp, #56	; 0x38
 800b990:	4625      	mov	r5, r4
 800b992:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b996:	e710      	b.n	800b7ba <__kernel_rem_pio2+0x292>
 800b998:	ab0e      	add	r3, sp, #56	; 0x38
 800b99a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b99e:	f7f4 fd6d 	bl	800047c <__aeabi_i2d>
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	f7f4 fdd3 	bl	8000550 <__aeabi_dmul>
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b9b0:	4b7c      	ldr	r3, [pc, #496]	; (800bba4 <__kernel_rem_pio2+0x67c>)
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	f7f4 fdcb 	bl	8000550 <__aeabi_dmul>
 800b9ba:	3f01      	subs	r7, #1
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	e708      	b.n	800b7d4 <__kernel_rem_pio2+0x2ac>
 800b9c2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b9ce:	f7f4 fdbf 	bl	8000550 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	4649      	mov	r1, r9
 800b9da:	f7f4 fc03 	bl	80001e4 <__adddf3>
 800b9de:	3701      	adds	r7, #1
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	4689      	mov	r9, r1
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	429f      	cmp	r7, r3
 800b9e8:	dc01      	bgt.n	800b9ee <__kernel_rem_pio2+0x4c6>
 800b9ea:	45ba      	cmp	sl, r7
 800b9ec:	dae9      	bge.n	800b9c2 <__kernel_rem_pio2+0x49a>
 800b9ee:	ab4a      	add	r3, sp, #296	; 0x128
 800b9f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9f4:	e9c3 8900 	strd	r8, r9, [r3]
 800b9f8:	f10a 0a01 	add.w	sl, sl, #1
 800b9fc:	3e08      	subs	r6, #8
 800b9fe:	e6f0      	b.n	800b7e2 <__kernel_rem_pio2+0x2ba>
 800ba00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d85b      	bhi.n	800babe <__kernel_rem_pio2+0x596>
 800ba06:	e8df f003 	tbb	[pc, r3]
 800ba0a:	264a      	.short	0x264a
 800ba0c:	0226      	.short	0x0226
 800ba0e:	ab9a      	add	r3, sp, #616	; 0x268
 800ba10:	441c      	add	r4, r3
 800ba12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ba16:	46a2      	mov	sl, r4
 800ba18:	46ab      	mov	fp, r5
 800ba1a:	f1bb 0f00 	cmp.w	fp, #0
 800ba1e:	dc6c      	bgt.n	800bafa <__kernel_rem_pio2+0x5d2>
 800ba20:	46a2      	mov	sl, r4
 800ba22:	46ab      	mov	fp, r5
 800ba24:	f1bb 0f01 	cmp.w	fp, #1
 800ba28:	f300 8086 	bgt.w	800bb38 <__kernel_rem_pio2+0x610>
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2d01      	cmp	r5, #1
 800ba32:	f300 80a0 	bgt.w	800bb76 <__kernel_rem_pio2+0x64e>
 800ba36:	9b02      	ldr	r3, [sp, #8]
 800ba38:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ba3c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f040 809e 	bne.w	800bb82 <__kernel_rem_pio2+0x65a>
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	e9c3 7800 	strd	r7, r8, [r3]
 800ba4c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ba50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ba54:	e033      	b.n	800babe <__kernel_rem_pio2+0x596>
 800ba56:	3408      	adds	r4, #8
 800ba58:	ab4a      	add	r3, sp, #296	; 0x128
 800ba5a:	441c      	add	r4, r3
 800ba5c:	462e      	mov	r6, r5
 800ba5e:	2000      	movs	r0, #0
 800ba60:	2100      	movs	r1, #0
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	da3a      	bge.n	800badc <__kernel_rem_pio2+0x5b4>
 800ba66:	9b02      	ldr	r3, [sp, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d03d      	beq.n	800bae8 <__kernel_rem_pio2+0x5c0>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba72:	9c01      	ldr	r4, [sp, #4]
 800ba74:	e9c4 2300 	strd	r2, r3, [r4]
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ba80:	f7f4 fbae 	bl	80001e0 <__aeabi_dsub>
 800ba84:	ae4c      	add	r6, sp, #304	; 0x130
 800ba86:	2401      	movs	r4, #1
 800ba88:	42a5      	cmp	r5, r4
 800ba8a:	da30      	bge.n	800baee <__kernel_rem_pio2+0x5c6>
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	b113      	cbz	r3, 800ba96 <__kernel_rem_pio2+0x56e>
 800ba90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba94:	4619      	mov	r1, r3
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ba9c:	e00f      	b.n	800babe <__kernel_rem_pio2+0x596>
 800ba9e:	ab9a      	add	r3, sp, #616	; 0x268
 800baa0:	441c      	add	r4, r3
 800baa2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800baa6:	2000      	movs	r0, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	2d00      	cmp	r5, #0
 800baac:	da10      	bge.n	800bad0 <__kernel_rem_pio2+0x5a8>
 800baae:	9b02      	ldr	r3, [sp, #8]
 800bab0:	b113      	cbz	r3, 800bab8 <__kernel_rem_pio2+0x590>
 800bab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bab6:	4619      	mov	r1, r3
 800bab8:	9b01      	ldr	r3, [sp, #4]
 800baba:	e9c3 0100 	strd	r0, r1, [r3]
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	f003 0007 	and.w	r0, r3, #7
 800bac4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bac8:	ecbd 8b02 	vpop	{d8}
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bad4:	f7f4 fb86 	bl	80001e4 <__adddf3>
 800bad8:	3d01      	subs	r5, #1
 800bada:	e7e6      	b.n	800baaa <__kernel_rem_pio2+0x582>
 800badc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bae0:	f7f4 fb80 	bl	80001e4 <__adddf3>
 800bae4:	3e01      	subs	r6, #1
 800bae6:	e7bc      	b.n	800ba62 <__kernel_rem_pio2+0x53a>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	e7c1      	b.n	800ba72 <__kernel_rem_pio2+0x54a>
 800baee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800baf2:	f7f4 fb77 	bl	80001e4 <__adddf3>
 800baf6:	3401      	adds	r4, #1
 800baf8:	e7c6      	b.n	800ba88 <__kernel_rem_pio2+0x560>
 800bafa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bafe:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bb02:	4640      	mov	r0, r8
 800bb04:	ec53 2b17 	vmov	r2, r3, d7
 800bb08:	4649      	mov	r1, r9
 800bb0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb0e:	f7f4 fb69 	bl	80001e4 <__adddf3>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	f7f4 fb5f 	bl	80001e0 <__aeabi_dsub>
 800bb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb26:	f7f4 fb5d 	bl	80001e4 <__adddf3>
 800bb2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb2e:	e9ca 0100 	strd	r0, r1, [sl]
 800bb32:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bb36:	e770      	b.n	800ba1a <__kernel_rem_pio2+0x4f2>
 800bb38:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bb3c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bb40:	4630      	mov	r0, r6
 800bb42:	ec53 2b17 	vmov	r2, r3, d7
 800bb46:	4639      	mov	r1, r7
 800bb48:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb4c:	f7f4 fb4a 	bl	80001e4 <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	4630      	mov	r0, r6
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f7f4 fb40 	bl	80001e0 <__aeabi_dsub>
 800bb60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb64:	f7f4 fb3e 	bl	80001e4 <__adddf3>
 800bb68:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb6c:	e9ca 0100 	strd	r0, r1, [sl]
 800bb70:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bb74:	e756      	b.n	800ba24 <__kernel_rem_pio2+0x4fc>
 800bb76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bb7a:	f7f4 fb33 	bl	80001e4 <__adddf3>
 800bb7e:	3d01      	subs	r5, #1
 800bb80:	e756      	b.n	800ba30 <__kernel_rem_pio2+0x508>
 800bb82:	9b01      	ldr	r3, [sp, #4]
 800bb84:	9a01      	ldr	r2, [sp, #4]
 800bb86:	601f      	str	r7, [r3, #0]
 800bb88:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bb8c:	605c      	str	r4, [r3, #4]
 800bb8e:	609d      	str	r5, [r3, #8]
 800bb90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb94:	60d3      	str	r3, [r2, #12]
 800bb96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb9a:	6110      	str	r0, [r2, #16]
 800bb9c:	6153      	str	r3, [r2, #20]
 800bb9e:	e78e      	b.n	800babe <__kernel_rem_pio2+0x596>
 800bba0:	41700000 	.word	0x41700000
 800bba4:	3e700000 	.word	0x3e700000

0800bba8 <__kernel_tan>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	ec5b ab10 	vmov	sl, fp, d0
 800bbb0:	4bbf      	ldr	r3, [pc, #764]	; (800beb0 <__kernel_tan+0x308>)
 800bbb2:	b089      	sub	sp, #36	; 0x24
 800bbb4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800bbb8:	429f      	cmp	r7, r3
 800bbba:	ec59 8b11 	vmov	r8, r9, d1
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	f8cd b008 	str.w	fp, [sp, #8]
 800bbc4:	dc22      	bgt.n	800bc0c <__kernel_tan+0x64>
 800bbc6:	ee10 0a10 	vmov	r0, s0
 800bbca:	4659      	mov	r1, fp
 800bbcc:	f7f4 ff70 	bl	8000ab0 <__aeabi_d2iz>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d145      	bne.n	800bc60 <__kernel_tan+0xb8>
 800bbd4:	1c73      	adds	r3, r6, #1
 800bbd6:	4652      	mov	r2, sl
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	433b      	orrs	r3, r7
 800bbdc:	d110      	bne.n	800bc00 <__kernel_tan+0x58>
 800bbde:	ec4b ab10 	vmov	d0, sl, fp
 800bbe2:	f000 f9ad 	bl	800bf40 <fabs>
 800bbe6:	49b3      	ldr	r1, [pc, #716]	; (800beb4 <__kernel_tan+0x30c>)
 800bbe8:	ec53 2b10 	vmov	r2, r3, d0
 800bbec:	2000      	movs	r0, #0
 800bbee:	f7f4 fdd9 	bl	80007a4 <__aeabi_ddiv>
 800bbf2:	4682      	mov	sl, r0
 800bbf4:	468b      	mov	fp, r1
 800bbf6:	ec4b ab10 	vmov	d0, sl, fp
 800bbfa:	b009      	add	sp, #36	; 0x24
 800bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc00:	2e01      	cmp	r6, #1
 800bc02:	d0f8      	beq.n	800bbf6 <__kernel_tan+0x4e>
 800bc04:	465b      	mov	r3, fp
 800bc06:	2000      	movs	r0, #0
 800bc08:	49ab      	ldr	r1, [pc, #684]	; (800beb8 <__kernel_tan+0x310>)
 800bc0a:	e7f0      	b.n	800bbee <__kernel_tan+0x46>
 800bc0c:	4bab      	ldr	r3, [pc, #684]	; (800bebc <__kernel_tan+0x314>)
 800bc0e:	429f      	cmp	r7, r3
 800bc10:	dd26      	ble.n	800bc60 <__kernel_tan+0xb8>
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	da09      	bge.n	800bc2c <__kernel_tan+0x84>
 800bc18:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc1c:	469b      	mov	fp, r3
 800bc1e:	ee10 aa10 	vmov	sl, s0
 800bc22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc26:	ee11 8a10 	vmov	r8, s2
 800bc2a:	4699      	mov	r9, r3
 800bc2c:	4652      	mov	r2, sl
 800bc2e:	465b      	mov	r3, fp
 800bc30:	a181      	add	r1, pc, #516	; (adr r1, 800be38 <__kernel_tan+0x290>)
 800bc32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc36:	f7f4 fad3 	bl	80001e0 <__aeabi_dsub>
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	a17f      	add	r1, pc, #508	; (adr r1, 800be40 <__kernel_tan+0x298>)
 800bc44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc48:	f7f4 faca 	bl	80001e0 <__aeabi_dsub>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	462b      	mov	r3, r5
 800bc50:	f7f4 fac8 	bl	80001e4 <__adddf3>
 800bc54:	f04f 0800 	mov.w	r8, #0
 800bc58:	4682      	mov	sl, r0
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	f04f 0900 	mov.w	r9, #0
 800bc60:	4652      	mov	r2, sl
 800bc62:	465b      	mov	r3, fp
 800bc64:	4650      	mov	r0, sl
 800bc66:	4659      	mov	r1, fp
 800bc68:	f7f4 fc72 	bl	8000550 <__aeabi_dmul>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	e9cd 0100 	strd	r0, r1, [sp]
 800bc74:	f7f4 fc6c 	bl	8000550 <__aeabi_dmul>
 800bc78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	4650      	mov	r0, sl
 800bc82:	4659      	mov	r1, fp
 800bc84:	f7f4 fc64 	bl	8000550 <__aeabi_dmul>
 800bc88:	a36f      	add	r3, pc, #444	; (adr r3, 800be48 <__kernel_tan+0x2a0>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7f4 fc5b 	bl	8000550 <__aeabi_dmul>
 800bc9a:	a36d      	add	r3, pc, #436	; (adr r3, 800be50 <__kernel_tan+0x2a8>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f7f4 faa0 	bl	80001e4 <__adddf3>
 800bca4:	4622      	mov	r2, r4
 800bca6:	462b      	mov	r3, r5
 800bca8:	f7f4 fc52 	bl	8000550 <__aeabi_dmul>
 800bcac:	a36a      	add	r3, pc, #424	; (adr r3, 800be58 <__kernel_tan+0x2b0>)
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	f7f4 fa97 	bl	80001e4 <__adddf3>
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	462b      	mov	r3, r5
 800bcba:	f7f4 fc49 	bl	8000550 <__aeabi_dmul>
 800bcbe:	a368      	add	r3, pc, #416	; (adr r3, 800be60 <__kernel_tan+0x2b8>)
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	f7f4 fa8e 	bl	80001e4 <__adddf3>
 800bcc8:	4622      	mov	r2, r4
 800bcca:	462b      	mov	r3, r5
 800bccc:	f7f4 fc40 	bl	8000550 <__aeabi_dmul>
 800bcd0:	a365      	add	r3, pc, #404	; (adr r3, 800be68 <__kernel_tan+0x2c0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fa85 	bl	80001e4 <__adddf3>
 800bcda:	4622      	mov	r2, r4
 800bcdc:	462b      	mov	r3, r5
 800bcde:	f7f4 fc37 	bl	8000550 <__aeabi_dmul>
 800bce2:	a363      	add	r3, pc, #396	; (adr r3, 800be70 <__kernel_tan+0x2c8>)
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f7f4 fa7c 	bl	80001e4 <__adddf3>
 800bcec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcf0:	f7f4 fc2e 	bl	8000550 <__aeabi_dmul>
 800bcf4:	a360      	add	r3, pc, #384	; (adr r3, 800be78 <__kernel_tan+0x2d0>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 fc25 	bl	8000550 <__aeabi_dmul>
 800bd06:	a35e      	add	r3, pc, #376	; (adr r3, 800be80 <__kernel_tan+0x2d8>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f7f4 fa6a 	bl	80001e4 <__adddf3>
 800bd10:	4622      	mov	r2, r4
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fc1c 	bl	8000550 <__aeabi_dmul>
 800bd18:	a35b      	add	r3, pc, #364	; (adr r3, 800be88 <__kernel_tan+0x2e0>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fa61 	bl	80001e4 <__adddf3>
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	f7f4 fc13 	bl	8000550 <__aeabi_dmul>
 800bd2a:	a359      	add	r3, pc, #356	; (adr r3, 800be90 <__kernel_tan+0x2e8>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f7f4 fa58 	bl	80001e4 <__adddf3>
 800bd34:	4622      	mov	r2, r4
 800bd36:	462b      	mov	r3, r5
 800bd38:	f7f4 fc0a 	bl	8000550 <__aeabi_dmul>
 800bd3c:	a356      	add	r3, pc, #344	; (adr r3, 800be98 <__kernel_tan+0x2f0>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 fa4f 	bl	80001e4 <__adddf3>
 800bd46:	4622      	mov	r2, r4
 800bd48:	462b      	mov	r3, r5
 800bd4a:	f7f4 fc01 	bl	8000550 <__aeabi_dmul>
 800bd4e:	a354      	add	r3, pc, #336	; (adr r3, 800bea0 <__kernel_tan+0x2f8>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fa46 	bl	80001e4 <__adddf3>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd60:	f7f4 fa40 	bl	80001e4 <__adddf3>
 800bd64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd68:	f7f4 fbf2 	bl	8000550 <__aeabi_dmul>
 800bd6c:	4642      	mov	r2, r8
 800bd6e:	464b      	mov	r3, r9
 800bd70:	f7f4 fa38 	bl	80001e4 <__adddf3>
 800bd74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd78:	f7f4 fbea 	bl	8000550 <__aeabi_dmul>
 800bd7c:	4642      	mov	r2, r8
 800bd7e:	464b      	mov	r3, r9
 800bd80:	f7f4 fa30 	bl	80001e4 <__adddf3>
 800bd84:	a348      	add	r3, pc, #288	; (adr r3, 800bea8 <__kernel_tan+0x300>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	460d      	mov	r5, r1
 800bd8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd92:	f7f4 fbdd 	bl	8000550 <__aeabi_dmul>
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	f7f4 fa23 	bl	80001e4 <__adddf3>
 800bd9e:	e9cd 0100 	strd	r0, r1, [sp]
 800bda2:	460b      	mov	r3, r1
 800bda4:	4602      	mov	r2, r0
 800bda6:	4659      	mov	r1, fp
 800bda8:	4650      	mov	r0, sl
 800bdaa:	f7f4 fa1b 	bl	80001e4 <__adddf3>
 800bdae:	4b43      	ldr	r3, [pc, #268]	; (800bebc <__kernel_tan+0x314>)
 800bdb0:	429f      	cmp	r7, r3
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	460d      	mov	r5, r1
 800bdb6:	f340 8083 	ble.w	800bec0 <__kernel_tan+0x318>
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7f4 fb5e 	bl	800047c <__aeabi_i2d>
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4689      	mov	r9, r1
 800bdc6:	462b      	mov	r3, r5
 800bdc8:	4620      	mov	r0, r4
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f7f4 fbc0 	bl	8000550 <__aeabi_dmul>
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	464b      	mov	r3, r9
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 fa02 	bl	80001e4 <__adddf3>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4630      	mov	r0, r6
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 fcdc 	bl	80007a4 <__aeabi_ddiv>
 800bdec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdf0:	f7f4 f9f6 	bl	80001e0 <__aeabi_dsub>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	4659      	mov	r1, fp
 800bdfc:	f7f4 f9f0 	bl	80001e0 <__aeabi_dsub>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	f7f4 f9ee 	bl	80001e4 <__adddf3>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4640      	mov	r0, r8
 800be0e:	4649      	mov	r1, r9
 800be10:	f7f4 f9e6 	bl	80001e0 <__aeabi_dsub>
 800be14:	9b02      	ldr	r3, [sp, #8]
 800be16:	4604      	mov	r4, r0
 800be18:	1798      	asrs	r0, r3, #30
 800be1a:	f000 0002 	and.w	r0, r0, #2
 800be1e:	f1c0 0001 	rsb	r0, r0, #1
 800be22:	460d      	mov	r5, r1
 800be24:	f7f4 fb2a 	bl	800047c <__aeabi_i2d>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4620      	mov	r0, r4
 800be2e:	4629      	mov	r1, r5
 800be30:	f7f4 fb8e 	bl	8000550 <__aeabi_dmul>
 800be34:	e6dd      	b.n	800bbf2 <__kernel_tan+0x4a>
 800be36:	bf00      	nop
 800be38:	54442d18 	.word	0x54442d18
 800be3c:	3fe921fb 	.word	0x3fe921fb
 800be40:	33145c07 	.word	0x33145c07
 800be44:	3c81a626 	.word	0x3c81a626
 800be48:	74bf7ad4 	.word	0x74bf7ad4
 800be4c:	3efb2a70 	.word	0x3efb2a70
 800be50:	32f0a7e9 	.word	0x32f0a7e9
 800be54:	3f12b80f 	.word	0x3f12b80f
 800be58:	1a8d1068 	.word	0x1a8d1068
 800be5c:	3f3026f7 	.word	0x3f3026f7
 800be60:	fee08315 	.word	0xfee08315
 800be64:	3f57dbc8 	.word	0x3f57dbc8
 800be68:	e96e8493 	.word	0xe96e8493
 800be6c:	3f8226e3 	.word	0x3f8226e3
 800be70:	1bb341fe 	.word	0x1bb341fe
 800be74:	3faba1ba 	.word	0x3faba1ba
 800be78:	db605373 	.word	0xdb605373
 800be7c:	bef375cb 	.word	0xbef375cb
 800be80:	a03792a6 	.word	0xa03792a6
 800be84:	3f147e88 	.word	0x3f147e88
 800be88:	f2f26501 	.word	0xf2f26501
 800be8c:	3f4344d8 	.word	0x3f4344d8
 800be90:	c9560328 	.word	0xc9560328
 800be94:	3f6d6d22 	.word	0x3f6d6d22
 800be98:	8406d637 	.word	0x8406d637
 800be9c:	3f9664f4 	.word	0x3f9664f4
 800bea0:	1110fe7a 	.word	0x1110fe7a
 800bea4:	3fc11111 	.word	0x3fc11111
 800bea8:	55555563 	.word	0x55555563
 800beac:	3fd55555 	.word	0x3fd55555
 800beb0:	3e2fffff 	.word	0x3e2fffff
 800beb4:	3ff00000 	.word	0x3ff00000
 800beb8:	bff00000 	.word	0xbff00000
 800bebc:	3fe59427 	.word	0x3fe59427
 800bec0:	2e01      	cmp	r6, #1
 800bec2:	d036      	beq.n	800bf32 <__kernel_tan+0x38a>
 800bec4:	460f      	mov	r7, r1
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	2000      	movs	r0, #0
 800becc:	491a      	ldr	r1, [pc, #104]	; (800bf38 <__kernel_tan+0x390>)
 800bece:	f7f4 fc69 	bl	80007a4 <__aeabi_ddiv>
 800bed2:	2600      	movs	r6, #0
 800bed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed8:	4652      	mov	r2, sl
 800beda:	465b      	mov	r3, fp
 800bedc:	4630      	mov	r0, r6
 800bede:	4639      	mov	r1, r7
 800bee0:	f7f4 f97e 	bl	80001e0 <__aeabi_dsub>
 800bee4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bef0:	f7f4 f976 	bl	80001e0 <__aeabi_dsub>
 800bef4:	4632      	mov	r2, r6
 800bef6:	462b      	mov	r3, r5
 800bef8:	f7f4 fb2a 	bl	8000550 <__aeabi_dmul>
 800befc:	4632      	mov	r2, r6
 800befe:	4682      	mov	sl, r0
 800bf00:	468b      	mov	fp, r1
 800bf02:	462b      	mov	r3, r5
 800bf04:	4630      	mov	r0, r6
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 fb22 	bl	8000550 <__aeabi_dmul>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4b0b      	ldr	r3, [pc, #44]	; (800bf3c <__kernel_tan+0x394>)
 800bf10:	f7f4 f968 	bl	80001e4 <__adddf3>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4650      	mov	r0, sl
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	f7f4 f962 	bl	80001e4 <__adddf3>
 800bf20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf24:	f7f4 fb14 	bl	8000550 <__aeabi_dmul>
 800bf28:	4632      	mov	r2, r6
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	f7f4 f95a 	bl	80001e4 <__adddf3>
 800bf30:	e65f      	b.n	800bbf2 <__kernel_tan+0x4a>
 800bf32:	4682      	mov	sl, r0
 800bf34:	468b      	mov	fp, r1
 800bf36:	e65e      	b.n	800bbf6 <__kernel_tan+0x4e>
 800bf38:	bff00000 	.word	0xbff00000
 800bf3c:	3ff00000 	.word	0x3ff00000

0800bf40 <fabs>:
 800bf40:	ec51 0b10 	vmov	r0, r1, d0
 800bf44:	ee10 2a10 	vmov	r2, s0
 800bf48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf4c:	ec43 2b10 	vmov	d0, r2, r3
 800bf50:	4770      	bx	lr

0800bf52 <finite>:
 800bf52:	ee10 3a90 	vmov	r3, s1
 800bf56:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800bf5a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bf5e:	0fc0      	lsrs	r0, r0, #31
 800bf60:	4770      	bx	lr
 800bf62:	0000      	movs	r0, r0
 800bf64:	0000      	movs	r0, r0
	...

0800bf68 <floor>:
 800bf68:	ec51 0b10 	vmov	r0, r1, d0
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bf74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bf78:	2e13      	cmp	r6, #19
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	ee10 5a10 	vmov	r5, s0
 800bf80:	4680      	mov	r8, r0
 800bf82:	dc34      	bgt.n	800bfee <floor+0x86>
 800bf84:	2e00      	cmp	r6, #0
 800bf86:	da16      	bge.n	800bfb6 <floor+0x4e>
 800bf88:	a335      	add	r3, pc, #212	; (adr r3, 800c060 <floor+0xf8>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f7f4 f929 	bl	80001e4 <__adddf3>
 800bf92:	2200      	movs	r2, #0
 800bf94:	2300      	movs	r3, #0
 800bf96:	f7f4 fd6b 	bl	8000a70 <__aeabi_dcmpgt>
 800bf9a:	b148      	cbz	r0, 800bfb0 <floor+0x48>
 800bf9c:	2c00      	cmp	r4, #0
 800bf9e:	da59      	bge.n	800c054 <floor+0xec>
 800bfa0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bfa4:	4a30      	ldr	r2, [pc, #192]	; (800c068 <floor+0x100>)
 800bfa6:	432b      	orrs	r3, r5
 800bfa8:	2500      	movs	r5, #0
 800bfaa:	42ab      	cmp	r3, r5
 800bfac:	bf18      	it	ne
 800bfae:	4614      	movne	r4, r2
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	e025      	b.n	800c002 <floor+0x9a>
 800bfb6:	4f2d      	ldr	r7, [pc, #180]	; (800c06c <floor+0x104>)
 800bfb8:	4137      	asrs	r7, r6
 800bfba:	ea01 0307 	and.w	r3, r1, r7
 800bfbe:	4303      	orrs	r3, r0
 800bfc0:	d01f      	beq.n	800c002 <floor+0x9a>
 800bfc2:	a327      	add	r3, pc, #156	; (adr r3, 800c060 <floor+0xf8>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 f90c 	bl	80001e4 <__adddf3>
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f7f4 fd4e 	bl	8000a70 <__aeabi_dcmpgt>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d0eb      	beq.n	800bfb0 <floor+0x48>
 800bfd8:	2c00      	cmp	r4, #0
 800bfda:	bfbe      	ittt	lt
 800bfdc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bfe0:	fa43 f606 	asrlt.w	r6, r3, r6
 800bfe4:	19a4      	addlt	r4, r4, r6
 800bfe6:	ea24 0407 	bic.w	r4, r4, r7
 800bfea:	2500      	movs	r5, #0
 800bfec:	e7e0      	b.n	800bfb0 <floor+0x48>
 800bfee:	2e33      	cmp	r6, #51	; 0x33
 800bff0:	dd0b      	ble.n	800c00a <floor+0xa2>
 800bff2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bff6:	d104      	bne.n	800c002 <floor+0x9a>
 800bff8:	ee10 2a10 	vmov	r2, s0
 800bffc:	460b      	mov	r3, r1
 800bffe:	f7f4 f8f1 	bl	80001e4 <__adddf3>
 800c002:	ec41 0b10 	vmov	d0, r0, r1
 800c006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c00a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c00e:	f04f 33ff 	mov.w	r3, #4294967295
 800c012:	fa23 f707 	lsr.w	r7, r3, r7
 800c016:	4207      	tst	r7, r0
 800c018:	d0f3      	beq.n	800c002 <floor+0x9a>
 800c01a:	a311      	add	r3, pc, #68	; (adr r3, 800c060 <floor+0xf8>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f8e0 	bl	80001e4 <__adddf3>
 800c024:	2200      	movs	r2, #0
 800c026:	2300      	movs	r3, #0
 800c028:	f7f4 fd22 	bl	8000a70 <__aeabi_dcmpgt>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d0bf      	beq.n	800bfb0 <floor+0x48>
 800c030:	2c00      	cmp	r4, #0
 800c032:	da02      	bge.n	800c03a <floor+0xd2>
 800c034:	2e14      	cmp	r6, #20
 800c036:	d103      	bne.n	800c040 <floor+0xd8>
 800c038:	3401      	adds	r4, #1
 800c03a:	ea25 0507 	bic.w	r5, r5, r7
 800c03e:	e7b7      	b.n	800bfb0 <floor+0x48>
 800c040:	2301      	movs	r3, #1
 800c042:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c046:	fa03 f606 	lsl.w	r6, r3, r6
 800c04a:	4435      	add	r5, r6
 800c04c:	4545      	cmp	r5, r8
 800c04e:	bf38      	it	cc
 800c050:	18e4      	addcc	r4, r4, r3
 800c052:	e7f2      	b.n	800c03a <floor+0xd2>
 800c054:	2500      	movs	r5, #0
 800c056:	462c      	mov	r4, r5
 800c058:	e7aa      	b.n	800bfb0 <floor+0x48>
 800c05a:	bf00      	nop
 800c05c:	f3af 8000 	nop.w
 800c060:	8800759c 	.word	0x8800759c
 800c064:	7e37e43c 	.word	0x7e37e43c
 800c068:	bff00000 	.word	0xbff00000
 800c06c:	000fffff 	.word	0x000fffff

0800c070 <matherr>:
 800c070:	2000      	movs	r0, #0
 800c072:	4770      	bx	lr
 800c074:	0000      	movs	r0, r0
	...

0800c078 <nan>:
 800c078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c080 <nan+0x8>
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	00000000 	.word	0x00000000
 800c084:	7ff80000 	.word	0x7ff80000

0800c088 <rint>:
 800c088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c08a:	ec51 0b10 	vmov	r0, r1, d0
 800c08e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c092:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c096:	2e13      	cmp	r6, #19
 800c098:	460b      	mov	r3, r1
 800c09a:	ee10 4a10 	vmov	r4, s0
 800c09e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c0a2:	dc56      	bgt.n	800c152 <rint+0xca>
 800c0a4:	2e00      	cmp	r6, #0
 800c0a6:	da2b      	bge.n	800c100 <rint+0x78>
 800c0a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c0ac:	4302      	orrs	r2, r0
 800c0ae:	d023      	beq.n	800c0f8 <rint+0x70>
 800c0b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c0b4:	4302      	orrs	r2, r0
 800c0b6:	4254      	negs	r4, r2
 800c0b8:	4314      	orrs	r4, r2
 800c0ba:	0c4b      	lsrs	r3, r1, #17
 800c0bc:	0b24      	lsrs	r4, r4, #12
 800c0be:	045b      	lsls	r3, r3, #17
 800c0c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c0c4:	ea44 0103 	orr.w	r1, r4, r3
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	492f      	ldr	r1, [pc, #188]	; (800c188 <rint+0x100>)
 800c0cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c0d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7f4 f883 	bl	80001e4 <__adddf3>
 800c0de:	e9cd 0100 	strd	r0, r1, [sp]
 800c0e2:	463b      	mov	r3, r7
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0ea:	f7f4 f879 	bl	80001e0 <__aeabi_dsub>
 800c0ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c0f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c0f6:	4639      	mov	r1, r7
 800c0f8:	ec41 0b10 	vmov	d0, r0, r1
 800c0fc:	b003      	add	sp, #12
 800c0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c100:	4a22      	ldr	r2, [pc, #136]	; (800c18c <rint+0x104>)
 800c102:	4132      	asrs	r2, r6
 800c104:	ea01 0702 	and.w	r7, r1, r2
 800c108:	4307      	orrs	r7, r0
 800c10a:	d0f5      	beq.n	800c0f8 <rint+0x70>
 800c10c:	0852      	lsrs	r2, r2, #1
 800c10e:	4011      	ands	r1, r2
 800c110:	430c      	orrs	r4, r1
 800c112:	d00b      	beq.n	800c12c <rint+0xa4>
 800c114:	ea23 0202 	bic.w	r2, r3, r2
 800c118:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c11c:	2e13      	cmp	r6, #19
 800c11e:	fa43 f306 	asr.w	r3, r3, r6
 800c122:	bf0c      	ite	eq
 800c124:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c128:	2400      	movne	r4, #0
 800c12a:	4313      	orrs	r3, r2
 800c12c:	4916      	ldr	r1, [pc, #88]	; (800c188 <rint+0x100>)
 800c12e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c132:	4622      	mov	r2, r4
 800c134:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 f852 	bl	80001e4 <__adddf3>
 800c140:	e9cd 0100 	strd	r0, r1, [sp]
 800c144:	4622      	mov	r2, r4
 800c146:	462b      	mov	r3, r5
 800c148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c14c:	f7f4 f848 	bl	80001e0 <__aeabi_dsub>
 800c150:	e7d2      	b.n	800c0f8 <rint+0x70>
 800c152:	2e33      	cmp	r6, #51	; 0x33
 800c154:	dd07      	ble.n	800c166 <rint+0xde>
 800c156:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c15a:	d1cd      	bne.n	800c0f8 <rint+0x70>
 800c15c:	ee10 2a10 	vmov	r2, s0
 800c160:	f7f4 f840 	bl	80001e4 <__adddf3>
 800c164:	e7c8      	b.n	800c0f8 <rint+0x70>
 800c166:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295
 800c16e:	40f2      	lsrs	r2, r6
 800c170:	4210      	tst	r0, r2
 800c172:	d0c1      	beq.n	800c0f8 <rint+0x70>
 800c174:	0852      	lsrs	r2, r2, #1
 800c176:	4210      	tst	r0, r2
 800c178:	bf1f      	itttt	ne
 800c17a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c17e:	ea20 0202 	bicne.w	r2, r0, r2
 800c182:	4134      	asrne	r4, r6
 800c184:	4314      	orrne	r4, r2
 800c186:	e7d1      	b.n	800c12c <rint+0xa4>
 800c188:	0800c710 	.word	0x0800c710
 800c18c:	000fffff 	.word	0x000fffff

0800c190 <scalbn>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	ec55 4b10 	vmov	r4, r5, d0
 800c196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c19a:	4606      	mov	r6, r0
 800c19c:	462b      	mov	r3, r5
 800c19e:	b9aa      	cbnz	r2, 800c1cc <scalbn+0x3c>
 800c1a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1a4:	4323      	orrs	r3, r4
 800c1a6:	d03b      	beq.n	800c220 <scalbn+0x90>
 800c1a8:	4b31      	ldr	r3, [pc, #196]	; (800c270 <scalbn+0xe0>)
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	ee10 0a10 	vmov	r0, s0
 800c1b2:	f7f4 f9cd 	bl	8000550 <__aeabi_dmul>
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <scalbn+0xe4>)
 800c1b8:	429e      	cmp	r6, r3
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460d      	mov	r5, r1
 800c1be:	da12      	bge.n	800c1e6 <scalbn+0x56>
 800c1c0:	a327      	add	r3, pc, #156	; (adr r3, 800c260 <scalbn+0xd0>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 f9c3 	bl	8000550 <__aeabi_dmul>
 800c1ca:	e009      	b.n	800c1e0 <scalbn+0x50>
 800c1cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c1d0:	428a      	cmp	r2, r1
 800c1d2:	d10c      	bne.n	800c1ee <scalbn+0x5e>
 800c1d4:	ee10 2a10 	vmov	r2, s0
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 f802 	bl	80001e4 <__adddf3>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	e01c      	b.n	800c220 <scalbn+0x90>
 800c1e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	3a36      	subs	r2, #54	; 0x36
 800c1ee:	4432      	add	r2, r6
 800c1f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c1f4:	428a      	cmp	r2, r1
 800c1f6:	dd0b      	ble.n	800c210 <scalbn+0x80>
 800c1f8:	ec45 4b11 	vmov	d1, r4, r5
 800c1fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c268 <scalbn+0xd8>
 800c200:	f000 f83c 	bl	800c27c <copysign>
 800c204:	a318      	add	r3, pc, #96	; (adr r3, 800c268 <scalbn+0xd8>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	ec51 0b10 	vmov	r0, r1, d0
 800c20e:	e7da      	b.n	800c1c6 <scalbn+0x36>
 800c210:	2a00      	cmp	r2, #0
 800c212:	dd08      	ble.n	800c226 <scalbn+0x96>
 800c214:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c21c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c220:	ec45 4b10 	vmov	d0, r4, r5
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c22a:	da0d      	bge.n	800c248 <scalbn+0xb8>
 800c22c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c230:	429e      	cmp	r6, r3
 800c232:	ec45 4b11 	vmov	d1, r4, r5
 800c236:	dce1      	bgt.n	800c1fc <scalbn+0x6c>
 800c238:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c260 <scalbn+0xd0>
 800c23c:	f000 f81e 	bl	800c27c <copysign>
 800c240:	a307      	add	r3, pc, #28	; (adr r3, 800c260 <scalbn+0xd0>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	e7e0      	b.n	800c20a <scalbn+0x7a>
 800c248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c24c:	3236      	adds	r2, #54	; 0x36
 800c24e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	2200      	movs	r2, #0
 800c25c:	4b06      	ldr	r3, [pc, #24]	; (800c278 <scalbn+0xe8>)
 800c25e:	e7b2      	b.n	800c1c6 <scalbn+0x36>
 800c260:	c2f8f359 	.word	0xc2f8f359
 800c264:	01a56e1f 	.word	0x01a56e1f
 800c268:	8800759c 	.word	0x8800759c
 800c26c:	7e37e43c 	.word	0x7e37e43c
 800c270:	43500000 	.word	0x43500000
 800c274:	ffff3cb0 	.word	0xffff3cb0
 800c278:	3c900000 	.word	0x3c900000

0800c27c <copysign>:
 800c27c:	ec51 0b10 	vmov	r0, r1, d0
 800c280:	ee11 0a90 	vmov	r0, s3
 800c284:	ee10 2a10 	vmov	r2, s0
 800c288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c28c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c290:	ea41 0300 	orr.w	r3, r1, r0
 800c294:	ec43 2b10 	vmov	d0, r2, r3
 800c298:	4770      	bx	lr
	...

0800c29c <_init>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	bf00      	nop
 800c2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a2:	bc08      	pop	{r3}
 800c2a4:	469e      	mov	lr, r3
 800c2a6:	4770      	bx	lr

0800c2a8 <_fini>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr
