
RoboTrcae_2023_TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800d558  0800d558  0001d558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daa0  0800daa0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daa8  0800daa8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daa8  0800daa8  0001daa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c6b4  200001e0  0800dc90  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c894  0800dc90  0002c894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3d2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bfd  00000000  00000000  0003e5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  000421e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001440  00000000  00000000  000437c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024968  00000000  00000000  00044c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014e58  00000000  00000000  00069570  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf8c3  00000000  00000000  0007e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014dc8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b88  00000000  00000000  0014dd08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d53c 	.word	0x0800d53c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d53c 	.word	0x0800d53c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <read_byte>:
//#include <stdio.h>

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <read_byte+0x50>)
 8000fa2:	f004 fcfb 	bl	800599c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&ret,1,100);
 8000fa6:	f107 010f 	add.w	r1, r7, #15
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	2201      	movs	r2, #1
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <read_byte+0x54>)
 8000fb0:	f005 fcad 	bl	800690e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&val,1,100);
 8000fb4:	f107 010e 	add.w	r1, r7, #14
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <read_byte+0x54>)
 8000fbe:	f005 fdda 	bl	8006b76 <HAL_SPI_Receive>
	CS_SET;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <read_byte+0x50>)
 8000fc8:	f004 fce8 	bl	800599c <HAL_GPIO_WritePin>

	return val;
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	2000c770 	.word	0x2000c770

08000fe0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <write_byte+0x50>)
 8001000:	f004 fccc 	bl	800599c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&ret,1,100);
 8001004:	f107 010f 	add.w	r1, r7, #15
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <write_byte+0x54>)
 800100e:	f005 fc7e 	bl	800690e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&val,1,100);
 8001012:	1db9      	adds	r1, r7, #6
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2201      	movs	r2, #1
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <write_byte+0x54>)
 800101a:	f005 fc78 	bl	800690e <HAL_SPI_Transmit>
	CS_SET;
 800101e:	2201      	movs	r2, #1
 8001020:	2110      	movs	r1, #16
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <write_byte+0x50>)
 8001024:	f004 fcba 	bl	800599c <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020800 	.word	0x40020800
 8001034:	2000c770 	.word	0x2000c770

08001038 <IMU_init>:

uint16_t IMU_init() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ffa0 	bl	8000f88 <read_byte>
 8001048:	4603      	mov	r3, r0
 800104a:	717b      	strb	r3, [r7, #5]
	//printf("who am i -> %x\r\n", who_am_i);
	if ( who_am_i == 0xE0 ) {
 800104c:	797b      	ldrb	r3, [r7, #5]
 800104e:	2be0      	cmp	r3, #224	; 0xe0
 8001050:	d119      	bne.n	8001086 <IMU_init+0x4e>
		ret = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001056:	2101      	movs	r1, #1
 8001058:	2006      	movs	r0, #6
 800105a:	f7ff ffc1 	bl	8000fe0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800105e:	2110      	movs	r1, #16
 8001060:	2003      	movs	r0, #3
 8001062:	f7ff ffbd 	bl	8000fe0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001066:	2120      	movs	r1, #32
 8001068:	207f      	movs	r0, #127	; 0x7f
 800106a:	f7ff ffb9 	bl	8000fe0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800106e:	2106      	movs	r1, #6
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff ffb5 	bl	8000fe0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±500	01:±1000 10:±2000 11:±4000
		write_byte(0x14,0x06);	//レンジ±16g
 8001076:	2106      	movs	r1, #6
 8001078:	2014      	movs	r0, #20
 800107a:	f7ff ffb1 	bl	8000fe0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±4	01:±8 10:±16 11:±30
		write_byte(0x7F,0x00);	//USER_BANK0
 800107e:	2100      	movs	r1, #0
 8001080:	207f      	movs	r0, #127	; 0x7f
 8001082:	f7ff ffad 	bl	8000fe0 <write_byte>
	}
	return ret;
 8001086:	88fb      	ldrh	r3, [r7, #6]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <read_gyro_data>:

void read_gyro_data() {
 8001090:	b598      	push	{r3, r4, r7, lr}
 8001092:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001094:	2033      	movs	r0, #51	; 0x33
 8001096:	f7ff ff77 	bl	8000f88 <read_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21c      	sxth	r4, r3
 80010a0:	2034      	movs	r0, #52	; 0x34
 80010a2:	f7ff ff71 	bl	8000f88 <read_byte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4323      	orrs	r3, r4
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <read_gyro_data+0x64>)
 80010b0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80010b2:	2035      	movs	r0, #53	; 0x35
 80010b4:	f7ff ff68 	bl	8000f88 <read_byte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21c      	sxth	r4, r3
 80010be:	2036      	movs	r0, #54	; 0x36
 80010c0:	f7ff ff62 	bl	8000f88 <read_byte>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4323      	orrs	r3, r4
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <read_gyro_data+0x68>)
 80010ce:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80010d0:	2037      	movs	r0, #55	; 0x37
 80010d2:	f7ff ff59 	bl	8000f88 <read_byte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21c      	sxth	r4, r3
 80010dc:	2038      	movs	r0, #56	; 0x38
 80010de:	f7ff ff53 	bl	8000f88 <read_byte>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4323      	orrs	r3, r4
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <read_gyro_data+0x6c>)
 80010ec:	801a      	strh	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	bd98      	pop	{r3, r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20009810 	.word	0x20009810
 80010f8:	2000980e 	.word	0x2000980e
 80010fc:	20009808 	.word	0x20009808

08001100 <SpeedContorol_R>:

#include "speed.h"


double SpeedContorol_R(double Speed_Ref)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 500.0, IGain = 0.0, duty;
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	4c3c      	ldr	r4, [pc, #240]	; (8001200 <SpeedContorol_R+0x100>)
 8001110:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	f04f 0400 	mov.w	r4, #0
 800111c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref + SR;
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <SpeedContorol_R+0x104>)
 8001122:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001126:	461a      	mov	r2, r3
 8001128:	4623      	mov	r3, r4
 800112a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800112e:	f7ff f8ad 	bl	800028c <__adddf3>
 8001132:	4603      	mov	r3, r0
 8001134:	460c      	mov	r4, r1
 8001136:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedR_I_buff += delta_speed * TIM05 * 0.001;
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <SpeedContorol_R+0x108>)
 8001140:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001144:	f7ff fa58 	bl	80005f8 <__aeabi_dmul>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	4618      	mov	r0, r3
 800114e:	4621      	mov	r1, r4
 8001150:	a325      	add	r3, pc, #148	; (adr r3, 80011e8 <SpeedContorol_R+0xe8>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa4f 	bl	80005f8 <__aeabi_dmul>
 800115a:	4603      	mov	r3, r0
 800115c:	460c      	mov	r4, r1
 800115e:	4618      	mov	r0, r3
 8001160:	4621      	mov	r1, r4
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <SpeedContorol_R+0x10c>)
 8001164:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001168:	461a      	mov	r2, r3
 800116a:	4623      	mov	r3, r4
 800116c:	f7ff f88e 	bl	800028c <__adddf3>
 8001170:	4603      	mov	r3, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4a25      	ldr	r2, [pc, #148]	; (800120c <SpeedContorol_R+0x10c>)
 8001176:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff >= 1000000) speedR_I_buff = 1000000;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <SpeedContorol_R+0x10c>)
 800117c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001180:	a31b      	add	r3, pc, #108	; (adr r3, 80011f0 <SpeedContorol_R+0xf0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fcbd 	bl	8000b04 <__aeabi_dcmpge>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <SpeedContorol_R+0x9c>
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <SpeedContorol_R+0x10c>)
 8001192:	a417      	add	r4, pc, #92	; (adr r4, 80011f0 <SpeedContorol_R+0xf0>)
 8001194:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001198:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff <= -1000000) speedR_I_buff = -1000000;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <SpeedContorol_R+0x10c>)
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	a315      	add	r3, pc, #84	; (adr r3, 80011f8 <SpeedContorol_R+0xf8>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fca2 	bl	8000af0 <__aeabi_dcmple>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <SpeedContorol_R+0xbe>
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <SpeedContorol_R+0x10c>)
 80011b4:	a410      	add	r4, pc, #64	; (adr r4, 80011f8 <SpeedContorol_R+0xf8>)
 80011b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ba:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedR_I_buff * IGain )*/;
 80011be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 80011d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011d6:	ec44 3b17 	vmov	d7, r3, r4
}
 80011da:	eeb0 0a47 	vmov.f32	s0, s14
 80011de:	eef0 0a67 	vmov.f32	s1, s15
 80011e2:	372c      	adds	r7, #44	; 0x2c
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011ec:	3f50624d 	.word	0x3f50624d
 80011f0:	00000000 	.word	0x00000000
 80011f4:	412e8480 	.word	0x412e8480
 80011f8:	00000000 	.word	0x00000000
 80011fc:	c12e8480 	.word	0xc12e8480
 8001200:	407f4000 	.word	0x407f4000
 8001204:	20009858 	.word	0x20009858
 8001208:	3fe00000 	.word	0x3fe00000
 800120c:	20009820 	.word	0x20009820

08001210 <SpeedContorol_L>:

double SpeedContorol_L(double Speed_Ref)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af00      	add	r7, sp, #0
 8001216:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 500.0, IGain = 0.0, duty;
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	4c3c      	ldr	r4, [pc, #240]	; (8001310 <SpeedContorol_L+0x100>)
 8001220:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	f04f 0400 	mov.w	r4, #0
 800122c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref - SL;
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <SpeedContorol_L+0x104>)
 8001232:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001236:	461a      	mov	r2, r3
 8001238:	4623      	mov	r3, r4
 800123a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123e:	f7ff f823 	bl	8000288 <__aeabi_dsub>
 8001242:	4603      	mov	r3, r0
 8001244:	460c      	mov	r4, r1
 8001246:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedL_I_buff += delta_speed * TIM05 * 0.001;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <SpeedContorol_L+0x108>)
 8001250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001254:	f7ff f9d0 	bl	80005f8 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4618      	mov	r0, r3
 800125e:	4621      	mov	r1, r4
 8001260:	a325      	add	r3, pc, #148	; (adr r3, 80012f8 <SpeedContorol_L+0xe8>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	4618      	mov	r0, r3
 8001270:	4621      	mov	r1, r4
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <SpeedContorol_L+0x10c>)
 8001274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	f7ff f806 	bl	800028c <__adddf3>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <SpeedContorol_L+0x10c>)
 8001286:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff >= 1000000) speedL_I_buff = 1000000;
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <SpeedContorol_L+0x10c>)
 800128c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001290:	a31b      	add	r3, pc, #108	; (adr r3, 8001300 <SpeedContorol_L+0xf0>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fc35 	bl	8000b04 <__aeabi_dcmpge>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <SpeedContorol_L+0x9c>
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <SpeedContorol_L+0x10c>)
 80012a2:	a417      	add	r4, pc, #92	; (adr r4, 8001300 <SpeedContorol_L+0xf0>)
 80012a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012a8:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff <= -1000000) speedL_I_buff = -1000000;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <SpeedContorol_L+0x10c>)
 80012ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b2:	a315      	add	r3, pc, #84	; (adr r3, 8001308 <SpeedContorol_L+0xf8>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff fc1a 	bl	8000af0 <__aeabi_dcmple>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <SpeedContorol_L+0xbe>
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <SpeedContorol_L+0x10c>)
 80012c4:	a410      	add	r4, pc, #64	; (adr r4, 8001308 <SpeedContorol_L+0xf8>)
 80012c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012ca:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedL_I_buff * IGain )*/;
 80012ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012d6:	f7ff f98f 	bl	80005f8 <__aeabi_dmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 80012e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012e6:	ec44 3b17 	vmov	d7, r3, r4
}
 80012ea:	eeb0 0a47 	vmov.f32	s0, s14
 80012ee:	eef0 0a67 	vmov.f32	s1, s15
 80012f2:	372c      	adds	r7, #44	; 0x2c
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80012fc:	3f50624d 	.word	0x3f50624d
 8001300:	00000000 	.word	0x00000000
 8001304:	412e8480 	.word	0x412e8480
 8001308:	00000000 	.word	0x00000000
 800130c:	c12e8480 	.word	0xc12e8480
 8001310:	407f4000 	.word	0x407f4000
 8001314:	20009838 	.word	0x20009838
 8001318:	3fe00000 	.word	0x3fe00000
 800131c:	20009860 	.word	0x20009860

08001320 <StearingContorol>:

	return value;
}

double StearingContorol( double Delta )
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 0.1, IGain = 0.0, DGain = 0.0, duty;
 800132a:	a461      	add	r4, pc, #388	; (adr r4, 80014b0 <StearingContorol+0x190>)
 800132c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001330:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	f04f 0400 	mov.w	r4, #0
 800133c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	f04f 0400 	mov.w	r4, #0
 8001348:	e9c7 3404 	strd	r3, r4, [r7, #16]

	stear_I_buff += Delta * TIM05 * 0.001;
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <StearingContorol+0x180>)
 8001352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001356:	f7ff f94f 	bl	80005f8 <__aeabi_dmul>
 800135a:	4603      	mov	r3, r0
 800135c:	460c      	mov	r4, r1
 800135e:	4618      	mov	r0, r3
 8001360:	4621      	mov	r1, r4
 8001362:	a349      	add	r3, pc, #292	; (adr r3, 8001488 <StearingContorol+0x168>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4618      	mov	r0, r3
 8001372:	4621      	mov	r1, r4
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <StearingContorol+0x184>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4623      	mov	r3, r4
 800137e:	f7fe ff85 	bl	800028c <__adddf3>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <StearingContorol+0x184>)
 8001388:	e9c2 3400 	strd	r3, r4, [r2]
	if(stear_I_buff >= 1000000) stear_I_buff = 1000000;
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <StearingContorol+0x184>)
 800138e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001392:	a33f      	add	r3, pc, #252	; (adr r3, 8001490 <StearingContorol+0x170>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff fbb4 	bl	8000b04 <__aeabi_dcmpge>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <StearingContorol+0x8e>
 80013a2:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <StearingContorol+0x184>)
 80013a4:	a43a      	add	r4, pc, #232	; (adr r4, 8001490 <StearingContorol+0x170>)
 80013a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013aa:	e9c2 3400 	strd	r3, r4, [r2]
	if(stear_I_buff <= -1000000) stear_I_buff = -1000000;
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <StearingContorol+0x184>)
 80013b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b4:	a338      	add	r3, pc, #224	; (adr r3, 8001498 <StearingContorol+0x178>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff fb99 	bl	8000af0 <__aeabi_dcmple>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <StearingContorol+0xb0>
 80013c4:	4a37      	ldr	r2, [pc, #220]	; (80014a4 <StearingContorol+0x184>)
 80013c6:	a434      	add	r4, pc, #208	; (adr r4, 8001498 <StearingContorol+0x178>)
 80013c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013cc:	e9c2 3400 	strd	r3, r4, [r2]
	stear_D_buff = (stear_buff - Delta) * TIM05 * 0.001;
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <StearingContorol+0x188>)
 80013d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013da:	f7fe ff55 	bl	8000288 <__aeabi_dsub>
 80013de:	4603      	mov	r3, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	4618      	mov	r0, r3
 80013e4:	4621      	mov	r1, r4
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <StearingContorol+0x180>)
 80013ec:	f7ff f904 	bl	80005f8 <__aeabi_dmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	4618      	mov	r0, r3
 80013f6:	4621      	mov	r1, r4
 80013f8:	a323      	add	r3, pc, #140	; (adr r3, 8001488 <StearingContorol+0x168>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8fb 	bl	80005f8 <__aeabi_dmul>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <StearingContorol+0x18c>)
 8001408:	e9c2 3400 	strd	r3, r4, [r2]
	stear_buff = Delta;
 800140c:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <StearingContorol+0x188>)
 800140e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001412:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( Delta * PGain ) + ( stear_I_buff * IGain ) - ( stear_D_buff * DGain );
 8001416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800141a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141e:	f7ff f8eb 	bl	80005f8 <__aeabi_dmul>
 8001422:	4603      	mov	r3, r0
 8001424:	460c      	mov	r4, r1
 8001426:	4625      	mov	r5, r4
 8001428:	461c      	mov	r4, r3
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <StearingContorol+0x184>)
 800142c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff24 	bl	800028c <__adddf3>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	4625      	mov	r5, r4
 800144a:	461c      	mov	r4, r3
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <StearingContorol+0x18c>)
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001456:	f7ff f8cf 	bl	80005f8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe ff11 	bl	8000288 <__aeabi_dsub>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 800146e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001472:	ec44 3b17 	vmov	d7, r3, r4
}
 8001476:	eeb0 0a47 	vmov.f32	s0, s14
 800147a:	eef0 0a67 	vmov.f32	s1, s15
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bdb0      	pop	{r4, r5, r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	d2f1a9fc 	.word	0xd2f1a9fc
 800148c:	3f50624d 	.word	0x3f50624d
 8001490:	00000000 	.word	0x00000000
 8001494:	412e8480 	.word	0x412e8480
 8001498:	00000000 	.word	0x00000000
 800149c:	c12e8480 	.word	0xc12e8480
 80014a0:	3fe00000 	.word	0x3fe00000
 80014a4:	20009868 	.word	0x20009868
 80014a8:	20009850 	.word	0x20009850
 80014ac:	20009848 	.word	0x20009848
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	3fb99999 	.word	0x3fb99999

080014b8 <z_gyro>:
 */

#include "accelerometer.h"

double z_gyro()
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	double z_gyro;
	read_gyro_data();
 80014be:	f7ff fde7 	bl	8001090 <read_gyro_data>
	z_gyro = zg;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <z_gyro+0x88>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f82b 	bl	8000524 <__aeabi_i2d>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	e9c7 3400 	strd	r3, r4, [r7]
	z_gyro = ((0.01) * (z_gyro) + (1.0 - (0.01)) * (pre_zg)); // lowpath filter
 80014d6:	a316      	add	r3, pc, #88	; (adr r3, 8001530 <z_gyro+0x78>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e0:	f7ff f88a 	bl	80005f8 <__aeabi_dmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4625      	mov	r5, r4
 80014ea:	461c      	mov	r4, r3
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <z_gyro+0x8c>)
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	a311      	add	r3, pc, #68	; (adr r3, 8001538 <z_gyro+0x80>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f87e 	bl	80005f8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fec2 	bl	800028c <__adddf3>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	e9c7 3400 	strd	r3, r4, [r7]
	pre_zg = z_gyro;
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <z_gyro+0x8c>)
 8001512:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001516:	e9c2 3400 	strd	r3, r4, [r2]

	return z_gyro;
 800151a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800151e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001522:	eeb0 0a47 	vmov.f32	s0, s14
 8001526:	eef0 0a67 	vmov.f32	s1, s15
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	47ae147b 	.word	0x47ae147b
 8001534:	3f847ae1 	.word	0x3f847ae1
 8001538:	7ae147ae 	.word	0x7ae147ae
 800153c:	3fefae14 	.word	0x3fefae14
 8001540:	20009808 	.word	0x20009808
 8001544:	20009878 	.word	0x20009878

08001548 <ADCStart>:
 */

#include "analog.h"

void ADCStart()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog_, 6);
 800154c:	2206      	movs	r2, #6
 800154e:	490a      	ldr	r1, [pc, #40]	; (8001578 <ADCStart+0x30>)
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <ADCStart+0x34>)
 8001552:	f003 f81f 	bl	8004594 <HAL_ADC_Start_DMA>
	R_Min = L_Min = 1000;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ADCStart+0x38>)
 8001558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <ADCStart+0x38>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <ADCStart+0x3c>)
 8001564:	6013      	str	r3, [r2, #0]
	R_Max = L_Max = 0;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <ADCStart+0x40>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <ADCStart+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <ADCStart+0x44>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20009908 	.word	0x20009908
 800157c:	2000c55c 	.word	0x2000c55c
 8001580:	200098b0 	.word	0x200098b0
 8001584:	20009924 	.word	0x20009924
 8001588:	20009918 	.word	0x20009918
 800158c:	20009920 	.word	0x20009920

08001590 <adc_getValues>:

void adc_getValues()
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	if (num >= 9) num = 0;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <adc_getValues+0x7c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b08      	cmp	r3, #8
 800159a:	d902      	bls.n	80015a2 <adc_getValues+0x12>
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <adc_getValues+0x7c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
	line_L1_[num] = analog_[12];
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <adc_getValues+0x7c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <adc_getValues+0x80>)
 80015a8:	8b11      	ldrh	r1, [r2, #24]
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <adc_getValues+0x84>)
 80015ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_L2_[num] = analog_[3];
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <adc_getValues+0x7c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <adc_getValues+0x80>)
 80015b6:	88d1      	ldrh	r1, [r2, #6]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <adc_getValues+0x88>)
 80015ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_L3_[num] = analog_[4];
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <adc_getValues+0x7c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <adc_getValues+0x80>)
 80015c4:	8911      	ldrh	r1, [r2, #8]
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <adc_getValues+0x8c>)
 80015c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R3_[num] = analog_[15];
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <adc_getValues+0x7c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <adc_getValues+0x80>)
 80015d2:	8bd1      	ldrh	r1, [r2, #30]
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <adc_getValues+0x90>)
 80015d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R2_[num] = analog_[8];
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <adc_getValues+0x7c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <adc_getValues+0x80>)
 80015e0:	8a11      	ldrh	r1, [r2, #16]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <adc_getValues+0x94>)
 80015e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R1_[num] = analog_[9];
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <adc_getValues+0x7c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <adc_getValues+0x80>)
 80015ee:	8a51      	ldrh	r1, [r2, #18]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <adc_getValues+0x98>)
 80015f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	num++;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <adc_getValues+0x7c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <adc_getValues+0x7c>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000991c 	.word	0x2000991c
 8001610:	20009908 	.word	0x20009908
 8001614:	200098f4 	.word	0x200098f4
 8001618:	200098b4 	.word	0x200098b4
 800161c:	200098c8 	.word	0x200098c8
 8001620:	20009888 	.word	0x20009888
 8001624:	200098dc 	.word	0x200098dc
 8001628:	2000989c 	.word	0x2000989c

0800162c <updateValues>:

void updateValues()
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
	uint32_t tmp;
	for(int i = 0; i < 10; i++){
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e0bb      	b.n	80017b0 <updateValues+0x184>
		for(int j = i+1; j < 10; j++){
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	e0b0      	b.n	80017a2 <updateValues+0x176>
			if(line_L1_[i] > line_L1_[j]){
 8001640:	4aaa      	ldr	r2, [pc, #680]	; (80018ec <updateValues+0x2c0>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001648:	49a8      	ldr	r1, [pc, #672]	; (80018ec <updateValues+0x2c0>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001650:	429a      	cmp	r2, r3
 8001652:	d912      	bls.n	800167a <updateValues+0x4e>
				tmp = line_L1_[i];
 8001654:	4aa5      	ldr	r2, [pc, #660]	; (80018ec <updateValues+0x2c0>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165c:	607b      	str	r3, [r7, #4]
				line_L1_[i] = line_L1_[j];
 800165e:	4aa3      	ldr	r2, [pc, #652]	; (80018ec <updateValues+0x2c0>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001666:	4aa1      	ldr	r2, [pc, #644]	; (80018ec <updateValues+0x2c0>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L1_[j] = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	b299      	uxth	r1, r3
 8001672:	4a9e      	ldr	r2, [pc, #632]	; (80018ec <updateValues+0x2c0>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_L2_[i] > line_L2_[j]){
 800167a:	4a9d      	ldr	r2, [pc, #628]	; (80018f0 <updateValues+0x2c4>)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001682:	499b      	ldr	r1, [pc, #620]	; (80018f0 <updateValues+0x2c4>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800168a:	429a      	cmp	r2, r3
 800168c:	d912      	bls.n	80016b4 <updateValues+0x88>
				tmp = line_L2_[i];
 800168e:	4a98      	ldr	r2, [pc, #608]	; (80018f0 <updateValues+0x2c4>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001696:	607b      	str	r3, [r7, #4]
				line_L2_[i] = line_L2_[j];
 8001698:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <updateValues+0x2c4>)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016a0:	4a93      	ldr	r2, [pc, #588]	; (80018f0 <updateValues+0x2c4>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L2_[j] = tmp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b299      	uxth	r1, r3
 80016ac:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <updateValues+0x2c4>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_L3_[i] > line_L3_[j]){
 80016b4:	4a8f      	ldr	r2, [pc, #572]	; (80018f4 <updateValues+0x2c8>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016bc:	498d      	ldr	r1, [pc, #564]	; (80018f4 <updateValues+0x2c8>)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d912      	bls.n	80016ee <updateValues+0xc2>
				tmp = line_L3_[i];
 80016c8:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <updateValues+0x2c8>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	607b      	str	r3, [r7, #4]
				line_L3_[i] = line_L3_[j];
 80016d2:	4a88      	ldr	r2, [pc, #544]	; (80018f4 <updateValues+0x2c8>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016da:	4a86      	ldr	r2, [pc, #536]	; (80018f4 <updateValues+0x2c8>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L3_[j] = tmp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	b299      	uxth	r1, r3
 80016e6:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <updateValues+0x2c8>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R3_[i] > line_R3_[j]){
 80016ee:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <updateValues+0x2cc>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016f6:	4980      	ldr	r1, [pc, #512]	; (80018f8 <updateValues+0x2cc>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d912      	bls.n	8001728 <updateValues+0xfc>
				tmp = line_R3_[i];
 8001702:	4a7d      	ldr	r2, [pc, #500]	; (80018f8 <updateValues+0x2cc>)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800170a:	607b      	str	r3, [r7, #4]
				line_R3_[i] = line_R3_[j];
 800170c:	4a7a      	ldr	r2, [pc, #488]	; (80018f8 <updateValues+0x2cc>)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001714:	4a78      	ldr	r2, [pc, #480]	; (80018f8 <updateValues+0x2cc>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R3_[j] = tmp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	b299      	uxth	r1, r3
 8001720:	4a75      	ldr	r2, [pc, #468]	; (80018f8 <updateValues+0x2cc>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R2_[i] > line_R2_[j]){
 8001728:	4a74      	ldr	r2, [pc, #464]	; (80018fc <updateValues+0x2d0>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001730:	4972      	ldr	r1, [pc, #456]	; (80018fc <updateValues+0x2d0>)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001738:	429a      	cmp	r2, r3
 800173a:	d912      	bls.n	8001762 <updateValues+0x136>
				tmp = line_R2_[i];
 800173c:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <updateValues+0x2d0>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001744:	607b      	str	r3, [r7, #4]
				line_R2_[i] = line_R2_[j];
 8001746:	4a6d      	ldr	r2, [pc, #436]	; (80018fc <updateValues+0x2d0>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800174e:	4a6b      	ldr	r2, [pc, #428]	; (80018fc <updateValues+0x2d0>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R2_[j] = tmp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b299      	uxth	r1, r3
 800175a:	4a68      	ldr	r2, [pc, #416]	; (80018fc <updateValues+0x2d0>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R1_[i] > line_R1_[j]){
 8001762:	4a67      	ldr	r2, [pc, #412]	; (8001900 <updateValues+0x2d4>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <updateValues+0x2d4>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001772:	429a      	cmp	r2, r3
 8001774:	d912      	bls.n	800179c <updateValues+0x170>
				tmp = line_R1_[i];
 8001776:	4a62      	ldr	r2, [pc, #392]	; (8001900 <updateValues+0x2d4>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177e:	607b      	str	r3, [r7, #4]
				line_R1_[i] = line_R1_[j];
 8001780:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <updateValues+0x2d4>)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001788:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <updateValues+0x2d4>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R1_[j] = tmp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	b299      	uxth	r1, r3
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <updateValues+0x2d4>)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = i+1; j < 10; j++){
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3301      	adds	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	f77f af4b 	ble.w	8001640 <updateValues+0x14>
	for(int i = 0; i < 10; i++){
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b09      	cmp	r3, #9
 80017b4:	f77f af40 	ble.w	8001638 <updateValues+0xc>
			}

		}
	}
	Line_Sens_L = (line_L1_[4] + line_L2_[4] + line_L3_[4]) / 3;
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <updateValues+0x2c0>)
 80017ba:	891b      	ldrh	r3, [r3, #8]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <updateValues+0x2c4>)
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <updateValues+0x2c8>)
 80017c6:	8912      	ldrh	r2, [r2, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <updateValues+0x2d8>)
 80017cc:	fb82 1203 	smull	r1, r2, r2, r3
 80017d0:	17db      	asrs	r3, r3, #31
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017dc:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <updateValues+0x2dc>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_R = (line_R1_[4] + line_R2_[4] + line_R3_[4]) / 3;
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <updateValues+0x2d4>)
 80017e4:	891b      	ldrh	r3, [r3, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b44      	ldr	r3, [pc, #272]	; (80018fc <updateValues+0x2d0>)
 80017ea:	891b      	ldrh	r3, [r3, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <updateValues+0x2cc>)
 80017f0:	8912      	ldrh	r2, [r2, #8]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a43      	ldr	r2, [pc, #268]	; (8001904 <updateValues+0x2d8>)
 80017f6:	fb82 1203 	smull	r1, r2, r2, r3
 80017fa:	17db      	asrs	r3, r3, #31
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <updateValues+0x2e0>)
 8001808:	edc3 7a00 	vstr	s15, [r3]

	Line_Calib_R = ((Line_Sens_R - (double)R_Min) / (double)(R_Max - R_Min)) * 1000;
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <updateValues+0x2e0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe99 	bl	8000548 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <updateValues+0x2e4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe80 	bl	8000524 <__aeabi_i2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe fd2c 	bl	8000288 <__aeabi_dsub>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	4625      	mov	r5, r4
 8001836:	461c      	mov	r4, r3
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <updateValues+0x2e8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <updateValues+0x2e4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe6e 	bl	8000524 <__aeabi_i2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fffc 	bl	800084c <__aeabi_ddiv>
 8001854:	4603      	mov	r3, r0
 8001856:	460c      	mov	r4, r1
 8001858:	4618      	mov	r0, r3
 800185a:	4621      	mov	r1, r4
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <updateValues+0x2ec>)
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4603      	mov	r3, r0
 8001868:	460c      	mov	r4, r1
 800186a:	4618      	mov	r0, r3
 800186c:	4621      	mov	r1, r4
 800186e:	f7ff f9bb 	bl	8000be8 <__aeabi_d2f>
 8001872:	4602      	mov	r2, r0
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <updateValues+0x2f0>)
 8001876:	601a      	str	r2, [r3, #0]
	Line_Calib_L = ((Line_Sens_L - (double)L_Min) / (double)(L_Max - L_Min)) * 1000;
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <updateValues+0x2dc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe63 	bl	8000548 <__aeabi_f2d>
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <updateValues+0x2f4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe4a 	bl	8000524 <__aeabi_i2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcf6 	bl	8000288 <__aeabi_dsub>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4625      	mov	r5, r4
 80018a2:	461c      	mov	r4, r3
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <updateValues+0x2f8>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <updateValues+0x2f4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe ffc6 	bl	800084c <__aeabi_ddiv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	4618      	mov	r0, r3
 80018c6:	4621      	mov	r1, r4
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <updateValues+0x2ec>)
 80018ce:	f7fe fe93 	bl	80005f8 <__aeabi_dmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	4618      	mov	r0, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	f7ff f985 	bl	8000be8 <__aeabi_d2f>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <updateValues+0x2fc>)
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	200098f4 	.word	0x200098f4
 80018f0:	200098b4 	.word	0x200098b4
 80018f4:	200098c8 	.word	0x200098c8
 80018f8:	20009888 	.word	0x20009888
 80018fc:	200098dc 	.word	0x200098dc
 8001900:	2000989c 	.word	0x2000989c
 8001904:	55555556 	.word	0x55555556
 8001908:	20009914 	.word	0x20009914
 800190c:	2000992c 	.word	0x2000992c
 8001910:	20009924 	.word	0x20009924
 8001914:	20009920 	.word	0x20009920
 8001918:	408f4000 	.word	0x408f4000
 800191c:	20009930 	.word	0x20009930
 8001920:	200098b0 	.word	0x200098b0
 8001924:	20009918 	.word	0x20009918
 8001928:	20009928 	.word	0x20009928

0800192c <led_num>:


#include "led.h"

void led_num(uint8_t num)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	// 1000
	if(num >= 8){
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b07      	cmp	r3, #7
 800193a:	d908      	bls.n	800194e <led_num+0x22>
		num = num - 8;
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3b08      	subs	r3, #8
 8001940:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2104      	movs	r1, #4
 8001946:	4821      	ldr	r0, [pc, #132]	; (80019cc <led_num+0xa0>)
 8001948:	f004 f828 	bl	800599c <HAL_GPIO_WritePin>
 800194c:	e004      	b.n	8001958 <led_num+0x2c>
	}
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2104      	movs	r1, #4
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <led_num+0xa0>)
 8001954:	f004 f822 	bl	800599c <HAL_GPIO_WritePin>
	// 0001
	if( !(num % 2) ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <led_num+0x44>
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	4819      	ldr	r0, [pc, #100]	; (80019d0 <led_num+0xa4>)
 800196a:	f004 f817 	bl	800599c <HAL_GPIO_WritePin>
 800196e:	e004      	b.n	800197a <led_num+0x4e>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2101      	movs	r1, #1
 8001974:	4816      	ldr	r0, [pc, #88]	; (80019d0 <led_num+0xa4>)
 8001976:	f004 f811 	bl	800599c <HAL_GPIO_WritePin>

	// 0010
	if( (num/2)%2 ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <led_num+0x6c>
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <led_num+0xa4>)
 8001992:	f004 f803 	bl	800599c <HAL_GPIO_WritePin>
 8001996:	e005      	b.n	80019a4 <led_num+0x78>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <led_num+0xa4>)
 80019a0:	f003 fffc 	bl	800599c <HAL_GPIO_WritePin>

	// 0100
	if( num >= 4 ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d906      	bls.n	80019b8 <led_num+0x8c>
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <led_num+0xa4>)
 80019b2:	f003 fff3 	bl	800599c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}
 80019b6:	e005      	b.n	80019c4 <led_num+0x98>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	4804      	ldr	r0, [pc, #16]	; (80019d0 <led_num+0xa4>)
 80019c0:	f003 ffec 	bl	800599c <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40020800 	.word	0x40020800

080019d4 <Trace_Init>:
 */

#include "linetrace.h"

void Trace_Init()
{
 80019d4:	b490      	push	{r4, r7}
 80019d6:	af00      	add	r7, sp, #0
	//Time = Start_Flag = 0;
	Speed_Ref = 0;
 80019d8:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <Trace_Init+0x1c>)
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f04f 0400 	mov.w	r4, #0
 80019e2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc90      	pop	{r4, r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20009840 	.word	0x20009840
 80019f4:	00000000 	.word	0x00000000

080019f8 <LineTrace>:

void LineTrace(uint8_t state, uint8_t memory)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]

	degree = Degree_S();
 8001a08:	f001 fc9a 	bl	8003340 <Degree_S>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	eef0 7a60 	vmov.f32	s15, s1
 8001a14:	4bba      	ldr	r3, [pc, #744]	; (8001d00 <LineTrace+0x308>)
 8001a16:	ed83 7b00 	vstr	d7, [r3]
	theta = (180 / M_PI) * degree;
 8001a1a:	4bb9      	ldr	r3, [pc, #740]	; (8001d00 <LineTrace+0x308>)
 8001a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a20:	a3ad      	add	r3, pc, #692	; (adr r3, 8001cd8 <LineTrace+0x2e0>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fde7 	bl	80005f8 <__aeabi_dmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	4ab5      	ldr	r2, [pc, #724]	; (8001d04 <LineTrace+0x30c>)
 8001a30:	e9c2 3400 	strd	r3, r4, [r2]
	Turning_Radius = 60 / tan(theta);
 8001a34:	4bb3      	ldr	r3, [pc, #716]	; (8001d04 <LineTrace+0x30c>)
 8001a36:	ed93 7b00 	vldr	d7, [r3]
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	eef0 0a67 	vmov.f32	s1, s15
 8001a42:	f009 fd6d 	bl	800b520 <tan>
 8001a46:	ec54 3b10 	vmov	r3, r4, d0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	49ad      	ldr	r1, [pc, #692]	; (8001d08 <LineTrace+0x310>)
 8001a54:	f7fe fefa 	bl	800084c <__aeabi_ddiv>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4aab      	ldr	r2, [pc, #684]	; (8001d0c <LineTrace+0x314>)
 8001a5e:	e9c2 3400 	strd	r3, r4, [r2]


	Speed_input_R = SpeedContorol_R( (Turning_Radius - TREAD) * (Speed_Ref / Turning_Radius) );
 8001a62:	4baa      	ldr	r3, [pc, #680]	; (8001d0c <LineTrace+0x314>)
 8001a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4ba8      	ldr	r3, [pc, #672]	; (8001d10 <LineTrace+0x318>)
 8001a6e:	f7fe fc0b 	bl	8000288 <__aeabi_dsub>
 8001a72:	4603      	mov	r3, r0
 8001a74:	460c      	mov	r4, r1
 8001a76:	461d      	mov	r5, r3
 8001a78:	4626      	mov	r6, r4
 8001a7a:	4ba6      	ldr	r3, [pc, #664]	; (8001d14 <LineTrace+0x31c>)
 8001a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a80:	4ba2      	ldr	r3, [pc, #648]	; (8001d0c <LineTrace+0x314>)
 8001a82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	f7fe fedf 	bl	800084c <__aeabi_ddiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	4628      	mov	r0, r5
 8001a98:	4631      	mov	r1, r6
 8001a9a:	f7fe fdad 	bl	80005f8 <__aeabi_dmul>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	ec44 3b17 	vmov	d7, r3, r4
 8001aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aaa:	eef0 0a67 	vmov.f32	s1, s15
 8001aae:	f7ff fb27 	bl	8001100 <SpeedContorol_R>
 8001ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab6:	eef0 7a60 	vmov.f32	s15, s1
 8001aba:	4b97      	ldr	r3, [pc, #604]	; (8001d18 <LineTrace+0x320>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]
	Speed_input_L = SpeedContorol_L( (Turning_Radius + TREAD) * (Speed_Ref / Turning_Radius) );
 8001ac0:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <LineTrace+0x314>)
 8001ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <LineTrace+0x318>)
 8001acc:	f7fe fbde 	bl	800028c <__adddf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	4626      	mov	r6, r4
 8001ad8:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <LineTrace+0x31c>)
 8001ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ade:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <LineTrace+0x314>)
 8001ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	f7fe feb0 	bl	800084c <__aeabi_ddiv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	460c      	mov	r4, r1
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	4628      	mov	r0, r5
 8001af6:	4631      	mov	r1, r6
 8001af8:	f7fe fd7e 	bl	80005f8 <__aeabi_dmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	ec44 3b17 	vmov	d7, r3, r4
 8001b04:	eeb0 0a47 	vmov.f32	s0, s14
 8001b08:	eef0 0a67 	vmov.f32	s1, s15
 8001b0c:	f7ff fb80 	bl	8001210 <SpeedContorol_L>
 8001b10:	eeb0 7a40 	vmov.f32	s14, s0
 8001b14:	eef0 7a60 	vmov.f32	s15, s1
 8001b18:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <LineTrace+0x324>)
 8001b1a:	ed83 7b00 	vstr	d7, [r3]
	Stearing_input = StearingContorol( Line_Calib_R - Line_Calib_L );
 8001b1e:	4b80      	ldr	r3, [pc, #512]	; (8001d20 <LineTrace+0x328>)
 8001b20:	ed93 7a00 	vldr	s14, [r3]
 8001b24:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <LineTrace+0x32c>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	ee17 0a90 	vmov	r0, s15
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4603      	mov	r3, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	ec44 3b10 	vmov	d0, r3, r4
 8001b3e:	f7ff fbef 	bl	8001320 <StearingContorol>
 8001b42:	eeb0 7a40 	vmov.f32	s14, s0
 8001b46:	eef0 7a60 	vmov.f32	s15, s1
 8001b4a:	4b77      	ldr	r3, [pc, #476]	; (8001d28 <LineTrace+0x330>)
 8001b4c:	ed83 7b00 	vstr	d7, [r3]

	switch(state){
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80bb 	bhi.w	8001cce <LineTrace+0x2d6>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <LineTrace+0x168>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b91 	.word	0x08001b91
 8001b68:	08001c07 	.word	0x08001c07
 8001b6c:	08001c55 	.word	0x08001c55
		case 0:
			motor_R(0);
 8001b70:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8001ce0 <LineTrace+0x2e8>
 8001b74:	f001 faa0 	bl	80030b8 <motor_R>
			motor_L(0);
 8001b78:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8001ce0 <LineTrace+0x2e8>
 8001b7c:	f001 fae2 	bl	8003144 <motor_L>
			Speed_Ref = 0;
 8001b80:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <LineTrace+0x31c>)
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f04f 0400 	mov.w	r4, #0
 8001b8a:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001b8e:	e09f      	b.n	8001cd0 <LineTrace+0x2d8>
		case 1:
			motor_R( Speed_input_R );
 8001b90:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <LineTrace+0x320>)
 8001b92:	ed93 7b00 	vldr	d7, [r3]
 8001b96:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9a:	eef0 0a67 	vmov.f32	s1, s15
 8001b9e:	f001 fa8b 	bl	80030b8 <motor_R>
			motor_L( Speed_input_L );
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <LineTrace+0x324>)
 8001ba4:	ed93 7b00 	vldr	d7, [r3]
 8001ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bac:	eef0 0a67 	vmov.f32	s1, s15
 8001bb0:	f001 fac8 	bl	8003144 <motor_L>
			motor_S( Stearing_input );
 8001bb4:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <LineTrace+0x330>)
 8001bb6:	ed93 7b00 	vldr	d7, [r3]
 8001bba:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbe:	eef0 0a67 	vmov.f32	s1, s15
 8001bc2:	f001 fb05 	bl	80031d0 <motor_S>
			Speed_Ref += 0.002;
 8001bc6:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <LineTrace+0x31c>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	a346      	add	r3, pc, #280	; (adr r3, 8001ce8 <LineTrace+0x2f0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb5b 	bl	800028c <__adddf3>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <LineTrace+0x31c>)
 8001bdc:	e9c2 3400 	strd	r3, r4, [r2]
			if(Speed_Ref >= MIN_SPEED) Speed_Ref = MIN_SPEED;
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <LineTrace+0x31c>)
 8001be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be6:	a342      	add	r3, pc, #264	; (adr r3, 8001cf0 <LineTrace+0x2f8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe ff8a 	bl	8000b04 <__aeabi_dcmpge>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d100      	bne.n	8001bf8 <LineTrace+0x200>
			break;
 8001bf6:	e06b      	b.n	8001cd0 <LineTrace+0x2d8>
			if(Speed_Ref >= MIN_SPEED) Speed_Ref = MIN_SPEED;
 8001bf8:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <LineTrace+0x31c>)
 8001bfa:	a43d      	add	r4, pc, #244	; (adr r4, 8001cf0 <LineTrace+0x2f8>)
 8001bfc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c00:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001c04:	e064      	b.n	8001cd0 <LineTrace+0x2d8>
		case 2:
			motor_R( Speed_input_R );
 8001c06:	4b44      	ldr	r3, [pc, #272]	; (8001d18 <LineTrace+0x320>)
 8001c08:	ed93 7b00 	vldr	d7, [r3]
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f001 fa50 	bl	80030b8 <motor_R>
			motor_L( Speed_input_L );
 8001c18:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <LineTrace+0x324>)
 8001c1a:	ed93 7b00 	vldr	d7, [r3]
 8001c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c22:	eef0 0a67 	vmov.f32	s1, s15
 8001c26:	f001 fa8d 	bl	8003144 <motor_L>
			motor_S( Stearing_input );
 8001c2a:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <LineTrace+0x330>)
 8001c2c:	ed93 7b00 	vldr	d7, [r3]
 8001c30:	eeb0 0a47 	vmov.f32	s0, s14
 8001c34:	eef0 0a67 	vmov.f32	s1, s15
 8001c38:	f001 faca 	bl	80031d0 <motor_S>
			Speed_Ref = route_calculation(memory);
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 ff3e 	bl	8002ac0 <route_calculation>
 8001c44:	eeb0 7a40 	vmov.f32	s14, s0
 8001c48:	eef0 7a60 	vmov.f32	s15, s1
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <LineTrace+0x31c>)
 8001c4e:	ed83 7b00 	vstr	d7, [r3]
			break;
 8001c52:	e03d      	b.n	8001cd0 <LineTrace+0x2d8>
		case 3:
			motor_R( Speed_input_R );
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <LineTrace+0x320>)
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c5e:	eef0 0a67 	vmov.f32	s1, s15
 8001c62:	f001 fa29 	bl	80030b8 <motor_R>
			motor_L( Speed_input_L );
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <LineTrace+0x324>)
 8001c68:	ed93 7b00 	vldr	d7, [r3]
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	f001 fa66 	bl	8003144 <motor_L>
			motor_S( Stearing_input );
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <LineTrace+0x330>)
 8001c7a:	ed93 7b00 	vldr	d7, [r3]
 8001c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c82:	eef0 0a67 	vmov.f32	s1, s15
 8001c86:	f001 faa3 	bl	80031d0 <motor_S>
			Speed_Ref -= 0.004;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <LineTrace+0x31c>)
 8001c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c90:	a319      	add	r3, pc, #100	; (adr r3, 8001cf8 <LineTrace+0x300>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe faf7 	bl	8000288 <__aeabi_dsub>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <LineTrace+0x31c>)
 8001ca0:	e9c2 3400 	strd	r3, r4, [r2]
			if(Speed_Ref <= 0) Speed_Ref = 0.0;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <LineTrace+0x31c>)
 8001ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	f7fe ff1d 	bl	8000af0 <__aeabi_dcmple>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d100      	bne.n	8001cbe <LineTrace+0x2c6>
			break;
 8001cbc:	e008      	b.n	8001cd0 <LineTrace+0x2d8>
			if(Speed_Ref <= 0) Speed_Ref = 0.0;
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <LineTrace+0x31c>)
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	f04f 0400 	mov.w	r4, #0
 8001cc8:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001ccc:	e000      	b.n	8001cd0 <LineTrace+0x2d8>
		default:
			break;
 8001cce:	bf00      	nop
	}

}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd8:	1a63c1f8 	.word	0x1a63c1f8
 8001cdc:	404ca5dc 	.word	0x404ca5dc
	...
 8001ce8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cec:	3f60624d 	.word	0x3f60624d
 8001cf0:	cccccccd 	.word	0xcccccccd
 8001cf4:	3ffccccc 	.word	0x3ffccccc
 8001cf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cfc:	3f70624d 	.word	0x3f70624d
 8001d00:	2000c3a0 	.word	0x2000c3a0
 8001d04:	2000ba18 	.word	0x2000ba18
 8001d08:	404e0000 	.word	0x404e0000
 8001d0c:	2000ba28 	.word	0x2000ba28
 8001d10:	40490000 	.word	0x40490000
 8001d14:	20009840 	.word	0x20009840
 8001d18:	2000c3a8 	.word	0x2000c3a8
 8001d1c:	2000c3b0 	.word	0x2000c3b0
 8001d20:	20009930 	.word	0x20009930
 8001d24:	20009928 	.word	0x20009928
 8001d28:	2000ba10 	.word	0x2000ba10

08001d2c <_write>:
WRITE_DATA_SECTOR11 write_data_sector11 = {{0}};
READ_DATA_SECTOR11 read_data_sector11 = {{0}};
WRITE_DATA_SECTOR10 write_data_sector10 = {{0}};
READ_DATA_SECTOR10 read_data_sector10 = {{0}};

int _write(int file, char *ptr, int len) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	4804      	ldr	r0, [pc, #16]	; (8001d54 <_write+0x28>)
 8001d44:	f006 f9f1 	bl	800812a <HAL_UART_Transmit>
	return len;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000c5a8 	.word	0x2000c5a8

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5c:	f002 fb42 	bl	80043e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d60:	f000 f84c 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d64:	f000 fdca 	bl	80028fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001d68:	f000 fda8 	bl	80028bc <MX_DMA_Init>
  MX_ADC1_Init();
 8001d6c:	f000 f8c8 	bl	8001f00 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d70:	f000 f95e 	bl	8002030 <MX_I2C1_Init>
  MX_RTC_Init();
 8001d74:	f000 f98a 	bl	800208c <MX_RTC_Init>
  MX_SPI1_Init();
 8001d78:	f000 f9ae 	bl	80020d8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d7c:	f000 f9e2 	bl	8002144 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d80:	f000 fa62 	bl	8002248 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d84:	f000 fab4 	bl	80022f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d88:	f000 fb06 	bl	8002398 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d8c:	f000 fb58 	bl	8002440 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001d90:	f000 fc18 	bl	80025c4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001d94:	f000 fc98 	bl	80026c8 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001d98:	f000 fcda 	bl	8002750 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001d9c:	f000 fcfc 	bl	8002798 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001da0:	f000 fd1e 	bl	80027e0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001da4:	f000 fd60 	bl	8002868 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001da8:	f000 fba2 	bl	80024f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001dac:	f000 fbd4 	bl	8002558 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <main+0x8c>)
 8001db2:	f005 fac8 	bl	8007346 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <main+0x90>)
 8001db8:	f005 fac5 	bl	8007346 <HAL_TIM_Base_Start_IT>
  init();
 8001dbc:	f002 f938 	bl	8004030 <init>
  // reload flash data
  loadFlash(start_address_sector11, (uint8_t*)&read_data_sector11, sizeof(READ_DATA_SECTOR11));
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <main+0x94>)
 8001dc2:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8001dc6:	490a      	ldr	r1, [pc, #40]	; (8001df0 <main+0x98>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 f93d 	bl	8003048 <loadFlash>
  loadFlash(start_address_sector10, (uint8_t*)&read_data_sector10, sizeof(READ_DATA_SECTOR10));
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <main+0x9c>)
 8001dd0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001dd4:	4908      	ldr	r1, [pc, #32]	; (8001df8 <main+0xa0>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 f936 	bl	8003048 <loadFlash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_loop();
 8001ddc:	f002 f946 	bl	800406c <main_loop>
 8001de0:	e7fc      	b.n	8001ddc <main+0x84>
 8001de2:	bf00      	nop
 8001de4:	2000c6ac 	.word	0x2000c6ac
 8001de8:	2000c848 	.word	0x2000c848
 8001dec:	080e0000 	.word	0x080e0000
 8001df0:	20003a3c 	.word	0x20003a3c
 8001df4:	080c0000 	.word	0x080c0000
 8001df8:	2000853c 	.word	0x2000853c

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b098      	sub	sp, #96	; 0x60
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e06:	2230      	movs	r2, #48	; 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f007 f861 	bl	8008ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <SystemClock_Config+0xfc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <SystemClock_Config+0xfc>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <SystemClock_Config+0xfc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <SystemClock_Config+0x100>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <SystemClock_Config+0x100>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <SystemClock_Config+0x100>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e66:	2309      	movs	r3, #9
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e70:	2301      	movs	r3, #1
 8001e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e74:	2302      	movs	r3, #2
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e7e:	2319      	movs	r3, #25
 8001e80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e82:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fed3 	bl	8005c40 <HAL_RCC_OscConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ea0:	f000 fe0a 	bl	8002ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 f92c 	bl	8006120 <HAL_RCC_ClockConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001ece:	f000 fdf3 	bl	8002ab8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eda:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fae9 	bl	80064b8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001eec:	f000 fde4 	bl	8002ab8 <Error_Handler>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3760      	adds	r7, #96	; 0x60
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f14:	4a44      	ldr	r2, [pc, #272]	; (8002028 <MX_ADC1_Init+0x128>)
 8001f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f26:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f42:	4a3a      	ldr	r2, [pc, #232]	; (800202c <MX_ADC1_Init+0x12c>)
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f4e:	2206      	movs	r2, #6
 8001f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f52:	4b34      	ldr	r3, [pc, #208]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f60:	4830      	ldr	r0, [pc, #192]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f62:	f002 fad3 	bl	800450c <HAL_ADC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f6c:	f000 fda4 	bl	8002ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f70:	2303      	movs	r3, #3
 8001f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4828      	ldr	r0, [pc, #160]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f82:	f002 fc17 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f8c:	f000 fd94 	bl	8002ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f90:	2304      	movs	r3, #4
 8001f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4821      	ldr	r0, [pc, #132]	; (8002024 <MX_ADC1_Init+0x124>)
 8001f9e:	f002 fc09 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001fa8:	f000 fd86 	bl	8002ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fac:	2308      	movs	r3, #8
 8001fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481a      	ldr	r0, [pc, #104]	; (8002024 <MX_ADC1_Init+0x124>)
 8001fba:	f002 fbfb 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001fc4:	f000 fd78 	bl	8002ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fc8:	2309      	movs	r3, #9
 8001fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <MX_ADC1_Init+0x124>)
 8001fd6:	f002 fbed 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001fe0:	f000 fd6a 	bl	8002ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001fe8:	2305      	movs	r3, #5
 8001fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <MX_ADC1_Init+0x124>)
 8001ff2:	f002 fbdf 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ffc:	f000 fd5c 	bl	8002ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002000:	230f      	movs	r3, #15
 8002002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002004:	2306      	movs	r3, #6
 8002006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002008:	463b      	mov	r3, r7
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_ADC1_Init+0x124>)
 800200e:	f002 fbd1 	bl	80047b4 <HAL_ADC_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002018:	f000 fd4e 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000c55c 	.word	0x2000c55c
 8002028:	40012000 	.word	0x40012000
 800202c:	0f000001 	.word	0x0f000001

08002030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_I2C1_Init+0x50>)
 8002036:	4a13      	ldr	r2, [pc, #76]	; (8002084 <MX_I2C1_Init+0x54>)
 8002038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_I2C1_Init+0x50>)
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <MX_I2C1_Init+0x58>)
 800203e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_I2C1_Init+0x50>)
 800204e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_I2C1_Init+0x50>)
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_I2C1_Init+0x50>)
 800206e:	f003 fcaf 	bl	80059d0 <HAL_I2C_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002078:	f000 fd1e 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000c438 	.word	0x2000c438
 8002084:	40005400 	.word	0x40005400
 8002088:	000186a0 	.word	0x000186a0

0800208c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_RTC_Init+0x44>)
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <MX_RTC_Init+0x48>)
 8002094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_RTC_Init+0x44>)
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_RTC_Init+0x44>)
 800209e:	227f      	movs	r2, #127	; 0x7f
 80020a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_RTC_Init+0x44>)
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_RTC_Init+0x44>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_RTC_Init+0x44>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_RTC_Init+0x44>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_RTC_Init+0x44>)
 80020bc:	f004 fade 	bl	800667c <HAL_RTC_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80020c6:	f000 fcf7 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000c688 	.word	0x2000c688
 80020d4:	40002800 	.word	0x40002800

080020d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020dc:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_SPI1_Init+0x64>)
 80020de:	4a18      	ldr	r2, [pc, #96]	; (8002140 <MX_SPI1_Init+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <MX_SPI1_Init+0x64>)
 80020e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_SPI1_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_SPI1_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_SPI1_Init+0x64>)
 80020f8:	2202      	movs	r2, #2
 80020fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_SPI1_Init+0x64>)
 80020fe:	2201      	movs	r2, #1
 8002100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_SPI1_Init+0x64>)
 8002104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_SPI1_Init+0x64>)
 800210c:	2228      	movs	r2, #40	; 0x28
 800210e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <MX_SPI1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_SPI1_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <MX_SPI1_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_SPI1_Init+0x64>)
 8002124:	220a      	movs	r2, #10
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <MX_SPI1_Init+0x64>)
 800212a:	f004 fb8c 	bl	8006846 <HAL_SPI_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002134:	f000 fcc0 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2000c770 	.word	0x2000c770
 8002140:	40013000 	.word	0x40013000

08002144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b092      	sub	sp, #72	; 0x48
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
 8002164:	615a      	str	r2, [r3, #20]
 8002166:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2220      	movs	r2, #32
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f006 feaf 	bl	8008ed2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <MX_TIM1_Init+0xfc>)
 8002176:	4a33      	ldr	r2, [pc, #204]	; (8002244 <MX_TIM1_Init+0x100>)
 8002178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <MX_TIM1_Init+0xfc>)
 800217c:	2253      	movs	r2, #83	; 0x53
 800217e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <MX_TIM1_Init+0xfc>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <MX_TIM1_Init+0xfc>)
 8002188:	2209      	movs	r2, #9
 800218a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <MX_TIM1_Init+0xfc>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_TIM1_Init+0xfc>)
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <MX_TIM1_Init+0xfc>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800219e:	4828      	ldr	r0, [pc, #160]	; (8002240 <MX_TIM1_Init+0xfc>)
 80021a0:	f005 f8f5 	bl	800738e <HAL_TIM_PWM_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80021aa:	f000 fc85 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ba:	4619      	mov	r1, r3
 80021bc:	4820      	ldr	r0, [pc, #128]	; (8002240 <MX_TIM1_Init+0xfc>)
 80021be:	f005 fe85 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80021c8:	f000 fc76 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021cc:	2360      	movs	r3, #96	; 0x60
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4813      	ldr	r0, [pc, #76]	; (8002240 <MX_TIM1_Init+0xfc>)
 80021f2:	f005 fb07 	bl	8007804 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80021fc:	f000 fc5c 	bl	8002ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4807      	ldr	r0, [pc, #28]	; (8002240 <MX_TIM1_Init+0xfc>)
 8002224:	f005 fece 	bl	8007fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800222e:	f000 fc43 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <MX_TIM1_Init+0xfc>)
 8002234:	f001 fca4 	bl	8003b80 <HAL_TIM_MspPostInit>

}
 8002238:	bf00      	nop
 800223a:	3748      	adds	r7, #72	; 0x48
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000c6ec 	.word	0x2000c6ec
 8002244:	40010000 	.word	0x40010000

08002248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fe3b 	bl	8008ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MX_TIM2_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <MX_TIM2_Init+0xa4>)
 800227a:	f04f 32ff 	mov.w	r2, #4294967295
 800227e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <MX_TIM2_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800228c:	2303      	movs	r3, #3
 800228e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002294:	2301      	movs	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <MX_TIM2_Init+0xa4>)
 80022b8:	f005 f8d2 	bl	8007460 <HAL_TIM_Encoder_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022c2:	f000 fbf9 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <MX_TIM2_Init+0xa4>)
 80022d4:	f005 fdfa 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022de:	f000 fbeb 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	3730      	adds	r7, #48	; 0x30
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000c7c8 	.word	0x2000c7c8

080022f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 fde7 	bl	8008ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <MX_TIM3_Init+0xa0>)
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <MX_TIM3_Init+0xa4>)
 8002310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <MX_TIM3_Init+0xa0>)
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <MX_TIM3_Init+0xa0>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_TIM3_Init+0xa0>)
 8002320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_TIM3_Init+0xa0>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_TIM3_Init+0xa0>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002332:	2303      	movs	r3, #3
 8002334:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800233a:	2301      	movs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800234a:	2301      	movs	r3, #1
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	4619      	mov	r1, r3
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <MX_TIM3_Init+0xa0>)
 800235e:	f005 f87f 	bl	8007460 <HAL_TIM_Encoder_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002368:	f000 fba6 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_TIM3_Init+0xa0>)
 800237a:	f005 fda7 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002384:	f000 fb98 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000c518 	.word	0x2000c518
 8002394:	40000400 	.word	0x40000400

08002398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 fd93 	bl	8008ed2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023b6:	4a21      	ldr	r2, [pc, #132]	; (800243c <MX_TIM4_Init+0xa4>)
 80023b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_TIM4_Init+0xa0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023da:	2303      	movs	r3, #3
 80023dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e2:	2301      	movs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f2:	2301      	movs	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_TIM4_Init+0xa0>)
 8002406:	f005 f82b 	bl	8007460 <HAL_TIM_Encoder_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002410:	f000 fb52 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_TIM4_Init+0xa0>)
 8002422:	f005 fd53 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800242c:	f000 fb44 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3730      	adds	r7, #48	; 0x30
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000c3f8 	.word	0x2000c3f8
 800243c:	40000800 	.word	0x40000800

08002440 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	f107 0320 	add.w	r3, r7, #32
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <MX_TIM5_Init+0xa8>)
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <MX_TIM5_Init+0xac>)
 8002466:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 20;
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <MX_TIM5_Init+0xa8>)
 800246a:	2214      	movs	r2, #20
 800246c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_TIM5_Init+0xa8>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19;
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <MX_TIM5_Init+0xa8>)
 8002476:	2213      	movs	r2, #19
 8002478:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <MX_TIM5_Init+0xa8>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <MX_TIM5_Init+0xa8>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002486:	4818      	ldr	r0, [pc, #96]	; (80024e8 <MX_TIM5_Init+0xa8>)
 8002488:	f004 ff81 	bl	800738e <HAL_TIM_PWM_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002492:	f000 fb11 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	4619      	mov	r1, r3
 80024a4:	4810      	ldr	r0, [pc, #64]	; (80024e8 <MX_TIM5_Init+0xa8>)
 80024a6:	f005 fd11 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80024b0:	f000 fb02 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b4:	2360      	movs	r3, #96	; 0x60
 80024b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2200      	movs	r2, #0
 80024c8:	4619      	mov	r1, r3
 80024ca:	4807      	ldr	r0, [pc, #28]	; (80024e8 <MX_TIM5_Init+0xa8>)
 80024cc:	f005 f99a 	bl	8007804 <HAL_TIM_PWM_ConfigChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80024d6:	f000 faef 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <MX_TIM5_Init+0xa8>)
 80024dc:	f001 fb50 	bl	8003b80 <HAL_TIM_MspPostInit>

}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000c4d8 	.word	0x2000c4d8
 80024ec:	40000c00 	.word	0x40000c00

080024f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f6:	463b      	mov	r3, r7
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_TIM6_Init+0x60>)
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <MX_TIM6_Init+0x64>)
 8002502:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_TIM6_Init+0x60>)
 8002506:	2253      	movs	r2, #83	; 0x53
 8002508:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_TIM6_Init+0x60>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_TIM6_Init+0x60>)
 8002512:	2231      	movs	r2, #49	; 0x31
 8002514:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_TIM6_Init+0x60>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_TIM6_Init+0x60>)
 800251e:	f004 fee7 	bl	80072f0 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002528:	f000 fac6 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002534:	463b      	mov	r3, r7
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_TIM6_Init+0x60>)
 800253a:	f005 fcc7 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002544:	f000 fab8 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2000c6ac 	.word	0x2000c6ac
 8002554:	40001000 	.word	0x40001000

08002558 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255e:	463b      	mov	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <MX_TIM7_Init+0x64>)
 8002568:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <MX_TIM7_Init+0x68>)
 800256a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <MX_TIM7_Init+0x64>)
 800256e:	2253      	movs	r2, #83	; 0x53
 8002570:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <MX_TIM7_Init+0x64>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <MX_TIM7_Init+0x64>)
 800257a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800257e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_TIM7_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002586:	480d      	ldr	r0, [pc, #52]	; (80025bc <MX_TIM7_Init+0x64>)
 8002588:	f004 feb2 	bl	80072f0 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002592:	f000 fa91 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800259e:	463b      	mov	r3, r7
 80025a0:	4619      	mov	r1, r3
 80025a2:	4806      	ldr	r0, [pc, #24]	; (80025bc <MX_TIM7_Init+0x64>)
 80025a4:	f005 fc92 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80025ae:	f000 fa83 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000c848 	.word	0x2000c848
 80025c0:	40001400 	.word	0x40001400

080025c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b092      	sub	sp, #72	; 0x48
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
 80025e4:	615a      	str	r2, [r3, #20]
 80025e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2220      	movs	r2, #32
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f006 fc6f 	bl	8008ed2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <MX_TIM8_Init+0xfc>)
 80025f6:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <MX_TIM8_Init+0x100>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <MX_TIM8_Init+0xfc>)
 80025fc:	2253      	movs	r2, #83	; 0x53
 80025fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <MX_TIM8_Init+0xfc>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <MX_TIM8_Init+0xfc>)
 8002608:	2209      	movs	r2, #9
 800260a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <MX_TIM8_Init+0xfc>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <MX_TIM8_Init+0xfc>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <MX_TIM8_Init+0xfc>)
 800261a:	2200      	movs	r2, #0
 800261c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800261e:	4828      	ldr	r0, [pc, #160]	; (80026c0 <MX_TIM8_Init+0xfc>)
 8002620:	f004 feb5 	bl	800738e <HAL_TIM_PWM_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800262a:	f000 fa45 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800263a:	4619      	mov	r1, r3
 800263c:	4820      	ldr	r0, [pc, #128]	; (80026c0 <MX_TIM8_Init+0xfc>)
 800263e:	f005 fc45 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002648:	f000 fa36 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264c:	2360      	movs	r3, #96	; 0x60
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002658:	2300      	movs	r3, #0
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	4619      	mov	r1, r3
 8002670:	4813      	ldr	r0, [pc, #76]	; (80026c0 <MX_TIM8_Init+0xfc>)
 8002672:	f005 f8c7 	bl	8007804 <HAL_TIM_PWM_ConfigChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 800267c:	f000 fa1c 	bl	8002ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <MX_TIM8_Init+0xfc>)
 80026a4:	f005 fc8e 	bl	8007fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80026ae:	f000 fa03 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <MX_TIM8_Init+0xfc>)
 80026b4:	f001 fa64 	bl	8003b80 <HAL_TIM_MspPostInit>

}
 80026b8:	bf00      	nop
 80026ba:	3748      	adds	r7, #72	; 0x48
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000c3b8 	.word	0x2000c3b8
 80026c4:	40010400 	.word	0x40010400

080026c8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_TIM9_Init+0x80>)
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <MX_TIM9_Init+0x84>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_TIM9_Init+0x80>)
 80026e8:	2253      	movs	r2, #83	; 0x53
 80026ea:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <MX_TIM9_Init+0x80>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_TIM9_Init+0x80>)
 80026f4:	2213      	movs	r2, #19
 80026f6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <MX_TIM9_Init+0x80>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <MX_TIM9_Init+0x80>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002704:	4810      	ldr	r0, [pc, #64]	; (8002748 <MX_TIM9_Init+0x80>)
 8002706:	f004 fe42 	bl	800738e <HAL_TIM_PWM_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8002710:	f000 f9d2 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002714:	2360      	movs	r3, #96	; 0x60
 8002716:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	4619      	mov	r1, r3
 800272a:	4807      	ldr	r0, [pc, #28]	; (8002748 <MX_TIM9_Init+0x80>)
 800272c:	f005 f86a 	bl	8007804 <HAL_TIM_PWM_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8002736:	f000 f9bf 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800273a:	4803      	ldr	r0, [pc, #12]	; (8002748 <MX_TIM9_Init+0x80>)
 800273c:	f001 fa20 	bl	8003b80 <HAL_TIM_MspPostInit>

}
 8002740:	bf00      	nop
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000c730 	.word	0x2000c730
 800274c:	40014000 	.word	0x40014000

08002750 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_TIM10_Init+0x40>)
 8002756:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <MX_TIM10_Init+0x44>)
 8002758:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800275a:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <MX_TIM10_Init+0x40>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <MX_TIM10_Init+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_TIM10_Init+0x40>)
 8002768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <MX_TIM10_Init+0x40>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_TIM10_Init+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <MX_TIM10_Init+0x40>)
 800277c:	f004 fdb8 	bl	80072f0 <HAL_TIM_Base_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002786:	f000 f997 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000c48c 	.word	0x2000c48c
 8002794:	40014400 	.word	0x40014400

08002798 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_TIM11_Init+0x40>)
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <MX_TIM11_Init+0x44>)
 80027a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <MX_TIM11_Init+0x40>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_TIM11_Init+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <MX_TIM11_Init+0x40>)
 80027b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_TIM11_Init+0x40>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_TIM11_Init+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_TIM11_Init+0x40>)
 80027c4:	f004 fd94 	bl	80072f0 <HAL_TIM_Base_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80027ce:	f000 f973 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000c5e8 	.word	0x2000c5e8
 80027dc:	40014800 	.word	0x40014800

080027e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	615a      	str	r2, [r3, #20]
 80027f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_TIM12_Init+0x80>)
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <MX_TIM12_Init+0x84>)
 80027fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM12_Init+0x80>)
 8002800:	2229      	movs	r2, #41	; 0x29
 8002802:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_TIM12_Init+0x80>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_TIM12_Init+0x80>)
 800280c:	2213      	movs	r2, #19
 800280e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_TIM12_Init+0x80>)
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_TIM12_Init+0x80>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800281c:	4810      	ldr	r0, [pc, #64]	; (8002860 <MX_TIM12_Init+0x80>)
 800281e:	f004 fdb6 	bl	800738e <HAL_TIM_PWM_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002828:	f000 f946 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282c:	2360      	movs	r3, #96	; 0x60
 800282e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	2200      	movs	r2, #0
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_TIM12_Init+0x80>)
 8002844:	f004 ffde 	bl	8007804 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800284e:	f000 f933 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM12_Init+0x80>)
 8002854:	f001 f994 	bl	8003b80 <HAL_TIM_MspPostInit>

}
 8002858:	bf00      	nop
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	2000c808 	.word	0x2000c808
 8002864:	40001800 	.word	0x40001800

08002868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <MX_USART1_UART_Init+0x50>)
 8002870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 8002874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_USART1_UART_Init+0x4c>)
 80028a0:	f005 fbf6 	bl	8008090 <HAL_UART_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028aa:	f000 f905 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2000c5a8 	.word	0x2000c5a8
 80028b8:	40011000 	.word	0x40011000

080028bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_DMA_Init+0x3c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <MX_DMA_Init+0x3c>)
 80028cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_DMA_Init+0x3c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	2038      	movs	r0, #56	; 0x38
 80028e4:	f002 fae1 	bl	8004eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028e8:	2038      	movs	r0, #56	; 0x38
 80028ea:	f002 fafa 	bl	8004ee2 <HAL_NVIC_EnableIRQ>

}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a55      	ldr	r2, [pc, #340]	; (8002a70 <MX_GPIO_Init+0x174>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b4f      	ldr	r3, [pc, #316]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a4e      	ldr	r2, [pc, #312]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b45      	ldr	r3, [pc, #276]	; (8002a70 <MX_GPIO_Init+0x174>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <MX_GPIO_Init+0x174>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a40      	ldr	r2, [pc, #256]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <MX_GPIO_Init+0x174>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <MX_GPIO_Init+0x174>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	f242 2118 	movw	r1, #8728	; 0x2218
 80029a4:	4833      	ldr	r0, [pc, #204]	; (8002a74 <MX_GPIO_Init+0x178>)
 80029a6:	f002 fff9 	bl	800599c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b0:	4831      	ldr	r0, [pc, #196]	; (8002a78 <MX_GPIO_Init+0x17c>)
 80029b2:	f002 fff3 	bl	800599c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029bc:	482f      	ldr	r0, [pc, #188]	; (8002a7c <MX_GPIO_Init+0x180>)
 80029be:	f002 ffed 	bl	800599c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9;
 80029c2:	f242 2318 	movw	r3, #8728	; 0x2218
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	4826      	ldr	r0, [pc, #152]	; (8002a74 <MX_GPIO_Init+0x178>)
 80029dc:	f002 fe2c 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC0 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
 80029e0:	f645 4301 	movw	r3, #23553	; 0x5c01
 80029e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	481f      	ldr	r0, [pc, #124]	; (8002a74 <MX_GPIO_Init+0x178>)
 80029f6:	f002 fe1f 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 80029fa:	f640 4304 	movw	r3, #3076	; 0xc04
 80029fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	481a      	ldr	r0, [pc, #104]	; (8002a78 <MX_GPIO_Init+0x17c>)
 8002a10:	f002 fe12 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4812      	ldr	r0, [pc, #72]	; (8002a78 <MX_GPIO_Init+0x17c>)
 8002a2e:	f002 fe03 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <MX_GPIO_Init+0x180>)
 8002a4c:	f002 fdf4 	bl	8005638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a50:	2304      	movs	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4807      	ldr	r0, [pc, #28]	; (8002a80 <MX_GPIO_Init+0x184>)
 8002a64:	f002 fde8 	bl	8005638 <HAL_GPIO_Init>

}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020c00 	.word	0x40020c00

08002a84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	// TIM6
	if (htim->Instance == TIM6)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		PeriodElapsed_005ms();
 8002a96:	f001 fc4d 	bl	8004334 <PeriodElapsed_005ms>
	}
	// TIM7
	if (htim->Instance == TIM7)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		PeriodElapsed_05ms();
 8002aa4:	f001 fc4c 	bl	8004340 <PeriodElapsed_05ms>
	}
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40001000 	.word	0x40001000
 8002ab4:	40001400 	.word	0x40001400

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002abe:	e7fe      	b.n	8002abe <Error_Handler+0x6>

08002ac0 <route_calculation>:
 */

#include "memory.h"

double route_calculation(uint8_t flag)
{
 8002ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac4:	b08b      	sub	sp, #44	; 0x2c
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
	double median, cal_speed, speed_1, speed_2;
	milage += ((-SR + SL) / 2) * TIM05; // mm
 8002acc:	4b8e      	ldr	r3, [pc, #568]	; (8002d08 <route_calculation+0x248>)
 8002ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad2:	4b8e      	ldr	r3, [pc, #568]	; (8002d0c <route_calculation+0x24c>)
 8002ad4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4623      	mov	r3, r4
 8002adc:	f7fd fbd4 	bl	8000288 <__aeabi_dsub>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af0:	f7fd feac 	bl	800084c <__aeabi_ddiv>
 8002af4:	4603      	mov	r3, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	4618      	mov	r0, r3
 8002afa:	4621      	mov	r1, r4
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <route_calculation+0x250>)
 8002b02:	f7fd fd79 	bl	80005f8 <__aeabi_dmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4b81      	ldr	r3, [pc, #516]	; (8002d14 <route_calculation+0x254>)
 8002b10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	f7fd fbb8 	bl	800028c <__adddf3>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <route_calculation+0x254>)
 8002b22:	e9c2 3400 	strd	r3, r4, [r2]
	cal_speed = (-SR + SL) / 2;
 8002b26:	4b78      	ldr	r3, [pc, #480]	; (8002d08 <route_calculation+0x248>)
 8002b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2c:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <route_calculation+0x24c>)
 8002b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4623      	mov	r3, r4
 8002b36:	f7fd fba7 	bl	8000288 <__aeabi_dsub>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4621      	mov	r1, r4
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b4a:	f7fd fe7f 	bl	800084c <__aeabi_ddiv>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	e9c7 3408 	strd	r3, r4, [r7, #32]
	gyro = (z_gyro() / 16.4) * M_PI / 180;
 8002b56:	f7fe fcaf 	bl	80014b8 <z_gyro>
 8002b5a:	ec51 0b10 	vmov	r0, r1, d0
 8002b5e:	a364      	add	r3, pc, #400	; (adr r3, 8002cf0 <route_calculation+0x230>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fe72 	bl	800084c <__aeabi_ddiv>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	4621      	mov	r1, r4
 8002b70:	a361      	add	r3, pc, #388	; (adr r3, 8002cf8 <route_calculation+0x238>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fd3f 	bl	80005f8 <__aeabi_dmul>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4621      	mov	r1, r4
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <route_calculation+0x258>)
 8002b88:	f7fd fe60 	bl	800084c <__aeabi_ddiv>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <route_calculation+0x25c>)
 8002b92:	e9c2 3400 	strd	r3, r4, [r2]
	scoretime += TIM05;
 8002b96:	4b62      	ldr	r3, [pc, #392]	; (8002d20 <route_calculation+0x260>)
 8002b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <route_calculation+0x250>)
 8002ba2:	f7fd fb73 	bl	800028c <__adddf3>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <route_calculation+0x260>)
 8002bac:	e9c2 3400 	strd	r3, r4, [r2]

	switch(flag){
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d01d      	beq.n	8002bf2 <route_calculation+0x132>
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	f000 80be 	beq.w	8002d38 <route_calculation+0x278>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 8212 	bne.w	8002fe6 <route_calculation+0x526>
	 case 0:
		 milage = data_num = scoretime = 0;
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <route_calculation+0x260>)
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f04f 0400 	mov.w	r4, #0
 8002bcc:	e9c2 3400 	strd	r3, r4, [r2]
 8002bd0:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <route_calculation+0x264>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <route_calculation+0x264>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fca2 	bl	8000524 <__aeabi_i2d>
 8002be0:	4603      	mov	r3, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <route_calculation+0x254>)
 8002be6:	e9c2 3400 	strd	r3, r4, [r2]
		 return MIN_SPEED;
 8002bea:	a445      	add	r4, pc, #276	; (adr r4, 8002d00 <route_calculation+0x240>)
 8002bec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002bf0:	e1fd      	b.n	8002fee <route_calculation+0x52e>
		 break;
	 case 1:
		 if(milage / 50 >= data_num){
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <route_calculation+0x254>)
 8002bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <route_calculation+0x268>)
 8002bfe:	f7fd fe25 	bl	800084c <__aeabi_ddiv>
 8002c02:	4603      	mov	r3, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	4698      	mov	r8, r3
 8002c08:	46a1      	mov	r9, r4
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <route_calculation+0x264>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fc88 	bl	8000524 <__aeabi_i2d>
 8002c14:	4603      	mov	r3, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	4649      	mov	r1, r9
 8002c20:	f7fd ff70 	bl	8000b04 <__aeabi_dcmpge>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d05c      	beq.n	8002ce4 <route_calculation+0x224>
			 write_data_sector11.Omega[data_num] = gyro * 1000;
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <route_calculation+0x25c>)
 8002c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <route_calculation+0x26c>)
 8002c36:	f7fd fcdf 	bl	80005f8 <__aeabi_dmul>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4622      	mov	r2, r4
 8002c42:	4b38      	ldr	r3, [pc, #224]	; (8002d24 <route_calculation+0x264>)
 8002c44:	681c      	ldr	r4, [r3, #0]
 8002c46:	4608      	mov	r0, r1
 8002c48:	4611      	mov	r1, r2
 8002c4a:	f7fd ff85 	bl	8000b58 <__aeabi_d2iz>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <route_calculation+0x270>)
 8002c52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			 write_data_sector11.speed_R[data_num] = -SR * 1000;
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <route_calculation+0x24c>)
 8002c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <route_calculation+0x26c>)
 8002c68:	4628      	mov	r0, r5
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	f7fd fcc4 	bl	80005f8 <__aeabi_dmul>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	4619      	mov	r1, r3
 8002c76:	4622      	mov	r2, r4
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <route_calculation+0x264>)
 8002c7a:	681c      	ldr	r4, [r3, #0]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	f7fd ff92 	bl	8000ba8 <__aeabi_d2uiz>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <route_calculation+0x270>)
 8002c88:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
 8002c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 write_data_sector11.speed_R[data_num] = SL * 1000;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <route_calculation+0x248>)
 8002c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <route_calculation+0x26c>)
 8002c9c:	f7fd fcac 	bl	80005f8 <__aeabi_dmul>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <route_calculation+0x264>)
 8002caa:	681c      	ldr	r4, [r3, #0]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	f7fd ff7a 	bl	8000ba8 <__aeabi_d2uiz>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <route_calculation+0x270>)
 8002cb8:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
 8002cbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 write_data_sector10.time[data_num] = scoretime;
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <route_calculation+0x260>)
 8002cc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <route_calculation+0x264>)
 8002cc8:	6815      	ldr	r5, [r2, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	4621      	mov	r1, r4
 8002cce:	f7fd ff6b 	bl	8000ba8 <__aeabi_d2uiz>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <route_calculation+0x274>)
 8002cd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
			 data_num++;
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <route_calculation+0x264>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <route_calculation+0x264>)
 8002ce2:	6013      	str	r3, [r2, #0]
		 }
		 return MIN_SPEED;
 8002ce4:	a406      	add	r4, pc, #24	; (adr r4, 8002d00 <route_calculation+0x240>)
 8002ce6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cea:	e180      	b.n	8002fee <route_calculation+0x52e>
 8002cec:	f3af 8000 	nop.w
 8002cf0:	66666666 	.word	0x66666666
 8002cf4:	40306666 	.word	0x40306666
 8002cf8:	54442d18 	.word	0x54442d18
 8002cfc:	400921fb 	.word	0x400921fb
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	3ffccccc 	.word	0x3ffccccc
 8002d08:	20009838 	.word	0x20009838
 8002d0c:	20009858 	.word	0x20009858
 8002d10:	3fe00000 	.word	0x3fe00000
 8002d14:	2000ba38 	.word	0x2000ba38
 8002d18:	40668000 	.word	0x40668000
 8002d1c:	2000ba20 	.word	0x2000ba20
 8002d20:	2000ba08 	.word	0x2000ba08
 8002d24:	2000ba30 	.word	0x2000ba30
 8002d28:	40490000 	.word	0x40490000
 8002d2c:	408f4000 	.word	0x408f4000
 8002d30:	200001fc 	.word	0x200001fc
 8002d34:	2000727c 	.word	0x2000727c
		 break;
	 case 2:
		 if(milage >= (double)(section_milage[data_num])) data_num++;
 8002d38:	4bbb      	ldr	r3, [pc, #748]	; (8003028 <route_calculation+0x568>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4abb      	ldr	r2, [pc, #748]	; (800302c <route_calculation+0x56c>)
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fbde 	bl	8000504 <__aeabi_ui2d>
 8002d48:	4bb9      	ldr	r3, [pc, #740]	; (8003030 <route_calculation+0x570>)
 8002d4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4623      	mov	r3, r4
 8002d52:	f7fd fecd 	bl	8000af0 <__aeabi_dcmple>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <route_calculation+0x2a6>
 8002d5c:	4bb2      	ldr	r3, [pc, #712]	; (8003028 <route_calculation+0x568>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	4ab1      	ldr	r2, [pc, #708]	; (8003028 <route_calculation+0x568>)
 8002d64:	6013      	str	r3, [r2, #0]
		 // to curve
		 if(section_curvature[data_num] < section_curvature[data_num+1]){
 8002d66:	4bb0      	ldr	r3, [pc, #704]	; (8003028 <route_calculation+0x568>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4ab2      	ldr	r2, [pc, #712]	; (8003034 <route_calculation+0x574>)
 8002d6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d70:	4bad      	ldr	r3, [pc, #692]	; (8003028 <route_calculation+0x568>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	49af      	ldr	r1, [pc, #700]	; (8003034 <route_calculation+0x574>)
 8002d78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f080 80d5 	bcs.w	8002f2c <route_calculation+0x46c>
			 speed_1 = Max_Speed + (double)read_curvature[data_num] * ((MIN_SPEED - Max_Speed) / 10);
 8002d82:	4ba9      	ldr	r3, [pc, #676]	; (8003028 <route_calculation+0x568>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4aac      	ldr	r2, [pc, #688]	; (8003038 <route_calculation+0x578>)
 8002d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbb9 	bl	8000504 <__aeabi_ui2d>
 8002d92:	4605      	mov	r5, r0
 8002d94:	460e      	mov	r6, r1
 8002d96:	4ba9      	ldr	r3, [pc, #676]	; (800303c <route_calculation+0x57c>)
 8002d98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	a199      	add	r1, pc, #612	; (adr r1, 8003008 <route_calculation+0x548>)
 8002da2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002da6:	f7fd fa6f 	bl	8000288 <__aeabi_dsub>
 8002daa:	4603      	mov	r3, r0
 8002dac:	460c      	mov	r4, r1
 8002dae:	4618      	mov	r0, r3
 8002db0:	4621      	mov	r1, r4
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	4ba2      	ldr	r3, [pc, #648]	; (8003040 <route_calculation+0x580>)
 8002db8:	f7fd fd48 	bl	800084c <__aeabi_ddiv>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	f7fd fc16 	bl	80005f8 <__aeabi_dmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	4b99      	ldr	r3, [pc, #612]	; (800303c <route_calculation+0x57c>)
 8002dd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4623      	mov	r3, r4
 8002dde:	f7fd fa55 	bl	800028c <__adddf3>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	e9c7 3406 	strd	r3, r4, [r7, #24]
			 speed_2 = Max_Speed + (double)read_curvature[data_num+1] * ((MIN_SPEED - Max_Speed) / 10);
 8002dea:	4b8f      	ldr	r3, [pc, #572]	; (8003028 <route_calculation+0x568>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	4a91      	ldr	r2, [pc, #580]	; (8003038 <route_calculation+0x578>)
 8002df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb84 	bl	8000504 <__aeabi_ui2d>
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	460e      	mov	r6, r1
 8002e00:	4b8e      	ldr	r3, [pc, #568]	; (800303c <route_calculation+0x57c>)
 8002e02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4623      	mov	r3, r4
 8002e0a:	a17f      	add	r1, pc, #508	; (adr r1, 8003008 <route_calculation+0x548>)
 8002e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e10:	f7fd fa3a 	bl	8000288 <__aeabi_dsub>
 8002e14:	4603      	mov	r3, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4b87      	ldr	r3, [pc, #540]	; (8003040 <route_calculation+0x580>)
 8002e22:	f7fd fd13 	bl	800084c <__aeabi_ddiv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	4628      	mov	r0, r5
 8002e30:	4631      	mov	r1, r6
 8002e32:	f7fd fbe1 	bl	80005f8 <__aeabi_dmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	; (800303c <route_calculation+0x57c>)
 8002e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	f7fd fa20 	bl	800028c <__adddf3>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	e9c7 3404 	strd	r3, r4, [r7, #16]
			 median = (pow(speed_1, 2) - pow(speed_2, 2)) / (2 * ACC);
 8002e54:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8003010 <route_calculation+0x550>
 8002e58:	ed97 0b06 	vldr	d0, [r7, #24]
 8002e5c:	f008 fb90 	bl	800b580 <pow>
 8002e60:	ec55 4b10 	vmov	r4, r5, d0
 8002e64:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8003010 <route_calculation+0x550>
 8002e68:	ed97 0b04 	vldr	d0, [r7, #16]
 8002e6c:	f008 fb88 	bl	800b580 <pow>
 8002e70:	ec53 2b10 	vmov	r2, r3, d0
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd fa06 	bl	8000288 <__aeabi_dsub>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4618      	mov	r0, r3
 8002e82:	4621      	mov	r1, r4
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	4b6e      	ldr	r3, [pc, #440]	; (8003044 <route_calculation+0x584>)
 8002e8a:	f7fd fcdf 	bl	800084c <__aeabi_ddiv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	460c      	mov	r4, r1
 8002e92:	e9c7 3402 	strd	r3, r4, [r7, #8]
			 if(milage < median){
 8002e96:	4b66      	ldr	r3, [pc, #408]	; (8003030 <route_calculation+0x570>)
 8002e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ea4:	f7fd fe38 	bl	8000b18 <__aeabi_dcmpgt>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d019      	beq.n	8002ee2 <route_calculation+0x422>
				 cal_speed += ACC * (TIM05/1000);
 8002eae:	a35a      	add	r3, pc, #360	; (adr r3, 8003018 <route_calculation+0x558>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eb8:	f7fd f9e8 	bl	800028c <__adddf3>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	e9c7 3408 	strd	r3, r4, [r7, #32]
				 if(cal_speed >= speed_1) cal_speed = speed_1;
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ecc:	f7fd fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8084 	beq.w	8002fe0 <route_calculation+0x520>
 8002ed8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002edc:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002ee0:	e07e      	b.n	8002fe0 <route_calculation+0x520>
			 }
			 else if(milage >= median){
 8002ee2:	4b53      	ldr	r3, [pc, #332]	; (8003030 <route_calculation+0x570>)
 8002ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef0:	f7fd fdfe 	bl	8000af0 <__aeabi_dcmple>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d072      	beq.n	8002fe0 <route_calculation+0x520>
				 cal_speed -= ACC + (TIM05/1000);
 8002efa:	a349      	add	r3, pc, #292	; (adr r3, 8003020 <route_calculation+0x560>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f04:	f7fd f9c0 	bl	8000288 <__aeabi_dsub>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
				 if(cal_speed <= speed_2) cal_speed = speed_2;
 8002f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f18:	f7fd fdea 	bl	8000af0 <__aeabi_dcmple>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d05e      	beq.n	8002fe0 <route_calculation+0x520>
 8002f22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f26:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002f2a:	e059      	b.n	8002fe0 <route_calculation+0x520>
			 }
		 }
		 // to straight
		 else if(section_curvature[data_num] >= section_curvature[data_num+1]){
 8002f2c:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <route_calculation+0x568>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a40      	ldr	r2, [pc, #256]	; (8003034 <route_calculation+0x574>)
 8002f32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <route_calculation+0x568>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	493d      	ldr	r1, [pc, #244]	; (8003034 <route_calculation+0x574>)
 8002f3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d34c      	bcc.n	8002fe0 <route_calculation+0x520>
			 speed_1 = Max_Speed + (double)read_curvature[data_num] * ((MIN_SPEED - Max_Speed) / 10);
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <route_calculation+0x568>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3b      	ldr	r2, [pc, #236]	; (8003038 <route_calculation+0x578>)
 8002f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fad7 	bl	8000504 <__aeabi_ui2d>
 8002f56:	4605      	mov	r5, r0
 8002f58:	460e      	mov	r6, r1
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <route_calculation+0x57c>)
 8002f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	a128      	add	r1, pc, #160	; (adr r1, 8003008 <route_calculation+0x548>)
 8002f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6a:	f7fd f98d 	bl	8000288 <__aeabi_dsub>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	4618      	mov	r0, r3
 8002f74:	4621      	mov	r1, r4
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <route_calculation+0x580>)
 8002f7c:	f7fd fc66 	bl	800084c <__aeabi_ddiv>
 8002f80:	4603      	mov	r3, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	461a      	mov	r2, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	4628      	mov	r0, r5
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	f7fd fb34 	bl	80005f8 <__aeabi_dmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	4618      	mov	r0, r3
 8002f96:	4621      	mov	r1, r4
 8002f98:	4b28      	ldr	r3, [pc, #160]	; (800303c <route_calculation+0x57c>)
 8002f9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	f7fd f973 	bl	800028c <__adddf3>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	e9c7 3406 	strd	r3, r4, [r7, #24]
			 if(cal_speed > speed_1) cal_speed -= ACC + (TIM05/1000);
 8002fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fb6:	f7fd fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <route_calculation+0x518>
 8002fc0:	a317      	add	r3, pc, #92	; (adr r3, 8003020 <route_calculation+0x560>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fca:	f7fd f95d 	bl	8000288 <__aeabi_dsub>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002fd6:	e003      	b.n	8002fe0 <route_calculation+0x520>
			 else cal_speed = speed_1;
 8002fd8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002fdc:	e9c7 3408 	strd	r3, r4, [r7, #32]
		 }
		 return cal_speed;
 8002fe0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002fe4:	e003      	b.n	8002fee <route_calculation+0x52e>
		 break;
	 default:
		 return 0;
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	f04f 0400 	mov.w	r4, #0
 8002fee:	ec44 3b17 	vmov	d7, r3, r4
		 break;
	}
}
 8002ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff6:	eef0 0a67 	vmov.f32	s1, s15
 8002ffa:	372c      	adds	r7, #44	; 0x2c
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003002:	bf00      	nop
 8003004:	f3af 8000 	nop.w
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	3ffccccc 	.word	0x3ffccccc
 8003010:	00000000 	.word	0x00000000
 8003014:	40000000 	.word	0x40000000
 8003018:	bc6a7efa 	.word	0xbc6a7efa
 800301c:	3f689374 	.word	0x3f689374
 8003020:	126e978d 	.word	0x126e978d
 8003024:	40180083 	.word	0x40180083
 8003028:	2000ba30 	.word	0x2000ba30
 800302c:	2000b0a8 	.word	0x2000b0a8
 8003030:	2000ba38 	.word	0x2000ba38
 8003034:	2000abf8 	.word	0x2000abf8
 8003038:	2000ba40 	.word	0x2000ba40
 800303c:	20009830 	.word	0x20009830
 8003040:	40240000 	.word	0x40240000
 8003044:	40280000 	.word	0x40280000

08003048 <loadFlash>:
	HAL_FLASH_Lock();
}

// load Data from Flash
void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address, size);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4619      	mov	r1, r3
 800305a:	68b8      	ldr	r0, [r7, #8]
 800305c:	f005 ff2e 	bl	8008ebc <memcpy>
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <MotorStart>:
#include "macro.h"

#include <math.h>

void MotorStart()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800306c:	2100      	movs	r1, #0
 800306e:	480c      	ldr	r0, [pc, #48]	; (80030a0 <MotorStart+0x38>)
 8003070:	f004 f9b8 	bl	80073e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003074:	2100      	movs	r1, #0
 8003076:	480b      	ldr	r0, [pc, #44]	; (80030a4 <MotorStart+0x3c>)
 8003078:	f004 f9b4 	bl	80073e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800307c:	2100      	movs	r1, #0
 800307e:	480a      	ldr	r0, [pc, #40]	; (80030a8 <MotorStart+0x40>)
 8003080:	f004 f9b0 	bl	80073e4 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8003084:	213c      	movs	r1, #60	; 0x3c
 8003086:	4809      	ldr	r0, [pc, #36]	; (80030ac <MotorStart+0x44>)
 8003088:	f004 fa7c 	bl	8007584 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800308c:	213c      	movs	r1, #60	; 0x3c
 800308e:	4808      	ldr	r0, [pc, #32]	; (80030b0 <MotorStart+0x48>)
 8003090:	f004 fa78 	bl	8007584 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8003094:	213c      	movs	r1, #60	; 0x3c
 8003096:	4807      	ldr	r0, [pc, #28]	; (80030b4 <MotorStart+0x4c>)
 8003098:	f004 fa74 	bl	8007584 <HAL_TIM_Encoder_Start>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	2000c6ec 	.word	0x2000c6ec
 80030a4:	2000c3b8 	.word	0x2000c3b8
 80030a8:	2000c4d8 	.word	0x2000c4d8
 80030ac:	2000c7c8 	.word	0x2000c7c8
 80030b0:	2000c518 	.word	0x2000c518
 80030b4:	2000c3f8 	.word	0x2000c3f8

080030b8 <motor_R>:

void motor_R( double duty )
{
 80030b8:	b5b0      	push	{r4, r5, r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030d2:	f7fd fd03 	bl	8000adc <__aeabi_dcmplt>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <motor_R+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80030dc:	2201      	movs	r2, #1
 80030de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e2:	4816      	ldr	r0, [pc, #88]	; (800313c <motor_R+0x84>)
 80030e4:	f002 fc5a 	bl	800599c <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 80030e8:	683c      	ldr	r4, [r7, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7fd fd30 	bl	8000b58 <__aeabi_d2iz>
 80030f8:	4603      	mov	r3, r0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e016      	b.n	800312c <motor_R+0x74>
	}
	else if( duty >= 0 ){
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800310a:	f7fd fcfb 	bl	8000b04 <__aeabi_dcmpge>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <motor_R+0x74>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 7100 	mov.w	r1, #512	; 0x200
 800311a:	4808      	ldr	r0, [pc, #32]	; (800313c <motor_R+0x84>)
 800311c:	f002 fc3e 	bl	800599c <HAL_GPIO_WritePin>
		countorperiod = duty;
 8003120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003124:	f7fd fd18 	bl	8000b58 <__aeabi_d2iz>
 8003128:	4603      	mov	r3, r0
 800312a:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, countorperiod);
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <motor_R+0x88>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bdb0      	pop	{r4, r5, r7, pc}
 800313c:	40020800 	.word	0x40020800
 8003140:	2000c6ec 	.word	0x2000c6ec

08003144 <motor_L>:

void motor_L( double duty )
{
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800315e:	f7fd fcbd 	bl	8000adc <__aeabi_dcmplt>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <motor_L+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003168:	2200      	movs	r2, #0
 800316a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316e:	4816      	ldr	r0, [pc, #88]	; (80031c8 <motor_L+0x84>)
 8003170:	f002 fc14 	bl	800599c <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 8003174:	683c      	ldr	r4, [r7, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd fcea 	bl	8000b58 <__aeabi_d2iz>
 8003184:	4603      	mov	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e016      	b.n	80031b8 <motor_L+0x74>
	}
	else if( duty >= 0 ){
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003196:	f7fd fcb5 	bl	8000b04 <__aeabi_dcmpge>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <motor_L+0x74>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80031a0:	2201      	movs	r2, #1
 80031a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a6:	4808      	ldr	r0, [pc, #32]	; (80031c8 <motor_L+0x84>)
 80031a8:	f002 fbf8 	bl	800599c <HAL_GPIO_WritePin>
		countorperiod = duty;
 80031ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031b0:	f7fd fcd2 	bl	8000b58 <__aeabi_d2iz>
 80031b4:	4603      	mov	r3, r0
 80031b6:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, countorperiod);
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <motor_L+0x88>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bdb0      	pop	{r4, r5, r7, pc}
 80031c8:	40020400 	.word	0x40020400
 80031cc:	2000c3b8 	.word	0x2000c3b8

080031d0 <motor_S>:

void motor_S( double duty )
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ea:	f7fd fc77 	bl	8000adc <__aeabi_dcmplt>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00f      	beq.n	8003214 <motor_S+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80031f4:	2201      	movs	r2, #1
 80031f6:	2108      	movs	r1, #8
 80031f8:	4815      	ldr	r0, [pc, #84]	; (8003250 <motor_S+0x80>)
 80031fa:	f002 fbcf 	bl	800599c <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 80031fe:	683c      	ldr	r4, [r7, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003206:	4620      	mov	r0, r4
 8003208:	4629      	mov	r1, r5
 800320a:	f7fd fca5 	bl	8000b58 <__aeabi_d2iz>
 800320e:	4603      	mov	r3, r0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e015      	b.n	8003240 <motor_S+0x70>
	}
	else if( duty >= 0 ){
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003220:	f7fd fc70 	bl	8000b04 <__aeabi_dcmpge>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <motor_S+0x70>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800322a:	2200      	movs	r2, #0
 800322c:	2108      	movs	r1, #8
 800322e:	4808      	ldr	r0, [pc, #32]	; (8003250 <motor_S+0x80>)
 8003230:	f002 fbb4 	bl	800599c <HAL_GPIO_WritePin>
		countorperiod = duty;
 8003234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003238:	f7fd fc8e 	bl	8000b58 <__aeabi_d2iz>
 800323c:	4603      	mov	r3, r0
 800323e:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, countorperiod);
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <motor_S+0x84>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bdb0      	pop	{r4, r5, r7, pc}
 8003250:	40020800 	.word	0x40020800
 8003254:	2000c4d8 	.word	0x2000c4d8

08003258 <Speed_R>:


// v = r * 2pi * (3/40960) * (dC/dt)
// m/s
double Speed_R()
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
	int Encoder = (TIM2 -> CNT) - 212483647;
 800325e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <Speed_R+0x68>)
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
	TIM2 -> CNT = 212483647;
 800326a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <Speed_R+0x6c>)
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7fd f956 	bl	8000524 <__aeabi_i2d>
 8003278:	a30f      	add	r3, pc, #60	; (adr r3, 80032b8 <Speed_R+0x60>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f7fd f9bb 	bl	80005f8 <__aeabi_dmul>
 8003282:	4603      	mov	r3, r0
 8003284:	460c      	mov	r4, r1
 8003286:	4618      	mov	r0, r3
 8003288:	4621      	mov	r1, r4
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <Speed_R+0x70>)
 8003290:	f7fd fadc 	bl	800084c <__aeabi_ddiv>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 800329c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80032a0:	ec44 3b17 	vmov	d7, r3, r4
}
 80032a4:	eeb0 0a47 	vmov.f32	s0, s14
 80032a8:	eef0 0a67 	vmov.f32	s1, s15
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	f3af 8000 	nop.w
 80032b8:	ef4cbd98 	.word	0xef4cbd98
 80032bc:	40707e4c 	.word	0x40707e4c
 80032c0:	f355c1c1 	.word	0xf355c1c1
 80032c4:	0caa3e3f 	.word	0x0caa3e3f
 80032c8:	40d40000 	.word	0x40d40000
 80032cc:	00000000 	.word	0x00000000

080032d0 <Speed_L>:

double Speed_L()
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
	int Encoder = (TIM3 -> CNT) - 32767;
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <Speed_L+0x68>)
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80032de:	3b7f      	subs	r3, #127	; 0x7f
 80032e0:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32767;
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <Speed_L+0x68>)
 80032e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7fd f91a 	bl	8000524 <__aeabi_i2d>
 80032f0:	a30f      	add	r3, pc, #60	; (adr r3, 8003330 <Speed_L+0x60>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fd f97f 	bl	80005f8 <__aeabi_dmul>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	4618      	mov	r0, r3
 8003300:	4621      	mov	r1, r4
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <Speed_L+0x6c>)
 8003308:	f7fd faa0 	bl	800084c <__aeabi_ddiv>
 800330c:	4603      	mov	r3, r0
 800330e:	460c      	mov	r4, r1
 8003310:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 8003314:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003318:	ec44 3b17 	vmov	d7, r3, r4
}
 800331c:	eeb0 0a47 	vmov.f32	s0, s14
 8003320:	eef0 0a67 	vmov.f32	s1, s15
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	ef4cbd98 	.word	0xef4cbd98
 8003334:	40707e4c 	.word	0x40707e4c
 8003338:	40000400 	.word	0x40000400
 800333c:	40d40000 	.word	0x40d40000

08003340 <Degree_S>:

double Degree_S()
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
	int initial_degree_value = 32767;
 8003346:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800334a:	60fb      	str	r3, [r7, #12]
	int Encoder = (TIM4 -> CNT) - initial_degree_value;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <Degree_S+0x54>)
 800334e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	60bb      	str	r3, [r7, #8]
	double degree = 360 * (Encoder / 65535);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <Degree_S+0x58>)
 800335a:	fb82 1203 	smull	r1, r2, r2, r3
 800335e:	441a      	add	r2, r3
 8003360:	13d2      	asrs	r2, r2, #15
 8003362:	17db      	asrs	r3, r3, #31
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f8d8 	bl	8000524 <__aeabi_i2d>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	e9c7 3400 	strd	r3, r4, [r7]
	return degree;
 800337c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003380:	ec44 3b17 	vmov	d7, r3, r4
}
 8003384:	eeb0 0a47 	vmov.f32	s0, s14
 8003388:	eef0 0a67 	vmov.f32	s1, s15
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	40000800 	.word	0x40000800
 8003398:	80008001 	.word	0x80008001

0800339c <stop_init>:
 */

#include "side_sensor.h"

void stop_init()
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
	side_r_time = side_l_time = 0;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <stop_init+0x38>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <stop_init+0x38>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <stop_init+0x3c>)
 80033ac:	6013      	str	r3, [r2, #0]
	side_r_flag = side_l_flag = 0;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <stop_init+0x40>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <stop_init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <stop_init+0x44>)
 80033ba:	6013      	str	r3, [r2, #0]
	side_r_count = 0;
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <stop_init+0x48>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
	Crossing_Flag = 0;
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <stop_init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000c72c 	.word	0x2000c72c
 80033d8:	2000c888 	.word	0x2000c888
 80033dc:	2000c4d0 	.word	0x2000c4d0
 80033e0:	2000c5a4 	.word	0x2000c5a4
 80033e4:	2000c6a8 	.word	0x2000c6a8
 80033e8:	20009818 	.word	0x20009818

080033ec <start_stop>:

int start_stop()
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) side_r_flag = 1;
 80033f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f4:	4846      	ldr	r0, [pc, #280]	; (8003510 <start_stop+0x124>)
 80033f6:	f002 fab9 	bl	800596c <HAL_GPIO_ReadPin>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <start_stop+0x1c>
 8003400:	4b44      	ldr	r3, [pc, #272]	; (8003514 <start_stop+0x128>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e00a      	b.n	800341e <start_stop+0x32>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) != 0) side_r_flag = 0;
 8003408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340c:	4840      	ldr	r0, [pc, #256]	; (8003510 <start_stop+0x124>)
 800340e:	f002 faad 	bl	800596c <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <start_stop+0x32>
 8003418:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <start_stop+0x128>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) side_l_flag = 1;
 800341e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003422:	483d      	ldr	r0, [pc, #244]	; (8003518 <start_stop+0x12c>)
 8003424:	f002 faa2 	bl	800596c <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <start_stop+0x4a>
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <start_stop+0x130>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e00a      	b.n	800344c <start_stop+0x60>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) != 0) side_l_flag = 0;
 8003436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343a:	4835      	ldr	r0, [pc, #212]	; (8003510 <start_stop+0x124>)
 800343c:	f002 fa96 	bl	800596c <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <start_stop+0x60>
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <start_stop+0x130>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

	if(side_r_flag) side_r_time++;
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <start_stop+0x128>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <start_stop+0x72>
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <start_stop+0x134>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	4a31      	ldr	r2, [pc, #196]	; (8003520 <start_stop+0x134>)
 800345c:	6013      	str	r3, [r2, #0]
	if(side_l_flag) side_l_time++;
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <start_stop+0x130>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <start_stop+0x84>
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <start_stop+0x138>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <start_stop+0x138>)
 800346e:	6013      	str	r3, [r2, #0]

	if(!side_r_flag && !side_l_flag){
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <start_stop+0x128>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d13c      	bne.n	80034f2 <start_stop+0x106>
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <start_stop+0x130>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d138      	bne.n	80034f2 <start_stop+0x106>
		if( side_r_time - side_l_time >= 20 ) side_r_count += 1;
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <start_stop+0x134>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <start_stop+0x138>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b13      	cmp	r3, #19
 800348c:	dd05      	ble.n	800349a <start_stop+0xae>
 800348e:	4b26      	ldr	r3, [pc, #152]	; (8003528 <start_stop+0x13c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <start_stop+0x13c>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e024      	b.n	80034e4 <start_stop+0xf8>
		else if( side_l_time - side_r_time >= 20);
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <start_stop+0x138>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <start_stop+0x134>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b13      	cmp	r3, #19
 80034a6:	dc1d      	bgt.n	80034e4 <start_stop+0xf8>
		else if( abs(side_l_time - side_r_time) < 15 && abs(side_l_time - side_r_time) > 0 ) Crossing_Flag++;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <start_stop+0x138>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <start_stop+0x134>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f113 0f0e 	cmn.w	r3, #14
 80034b6:	db15      	blt.n	80034e4 <start_stop+0xf8>
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <start_stop+0x138>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b18      	ldr	r3, [pc, #96]	; (8003520 <start_stop+0x134>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b0e      	cmp	r3, #14
 80034c4:	dc0e      	bgt.n	80034e4 <start_stop+0xf8>
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <start_stop+0x138>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <start_stop+0x134>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bfb8      	it	lt
 80034d4:	425b      	neglt	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	dd04      	ble.n	80034e4 <start_stop+0xf8>
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <start_stop+0x140>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3301      	adds	r3, #1
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <start_stop+0x140>)
 80034e2:	6013      	str	r3, [r2, #0]
		side_r_time = side_l_time = 0;
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <start_stop+0x138>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <start_stop+0x138>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <start_stop+0x134>)
 80034f0:	6013      	str	r3, [r2, #0]
	}

	if(side_r_count >= 2) return 2;
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <start_stop+0x13c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	dd01      	ble.n	80034fe <start_stop+0x112>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e006      	b.n	800350c <start_stop+0x120>
	else if(side_r_count >= 1) return 1;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <start_stop+0x13c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	dd01      	ble.n	800350a <start_stop+0x11e>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <start_stop+0x120>
	else return 0;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40020000 	.word	0x40020000
 8003514:	2000c5a4 	.word	0x2000c5a4
 8003518:	40020800 	.word	0x40020800
 800351c:	2000c4d0 	.word	0x2000c4d0
 8003520:	2000c888 	.word	0x2000c888
 8003524:	2000c72c 	.word	0x2000c72c
 8003528:	2000c6a8 	.word	0x2000c6a8
 800352c:	20009818 	.word	0x20009818

08003530 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_MspInit+0x4c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_MspInit+0x4c>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_MspInit+0x4c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_MspInit+0x4c>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_MspInit+0x4c>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 031c 	add.w	r3, r7, #28
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_ADC_MspInit+0x144>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f040 808c 	bne.w	80036bc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	4a46      	ldr	r2, [pc, #280]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6453      	str	r3, [r2, #68]	; 0x44
 80035b4:	4b44      	ldr	r3, [pc, #272]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6313      	str	r3, [r2, #48]	; 0x30
 80035d0:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6313      	str	r3, [r2, #48]	; 0x30
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	6313      	str	r3, [r2, #48]	; 0x30
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_ADC_MspInit+0x148>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8003614:	2326      	movs	r3, #38	; 0x26
 8003616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003618:	2303      	movs	r3, #3
 800361a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	f107 031c 	add.w	r3, r7, #28
 8003624:	4619      	mov	r1, r3
 8003626:	4829      	ldr	r0, [pc, #164]	; (80036cc <HAL_ADC_MspInit+0x14c>)
 8003628:	f002 f806 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800362c:	2318      	movs	r3, #24
 800362e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003630:	2303      	movs	r3, #3
 8003632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	4619      	mov	r1, r3
 800363e:	4824      	ldr	r0, [pc, #144]	; (80036d0 <HAL_ADC_MspInit+0x150>)
 8003640:	f001 fffa 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003644:	2303      	movs	r3, #3
 8003646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003648:	2303      	movs	r3, #3
 800364a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	4619      	mov	r1, r3
 8003656:	481f      	ldr	r0, [pc, #124]	; (80036d4 <HAL_ADC_MspInit+0x154>)
 8003658:	f001 ffee 	bl	8005638 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_ADC_MspInit+0x15c>)
 8003660:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 8003664:	2200      	movs	r2, #0
 8003666:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 8003670:	2200      	movs	r2, #0
 8003672:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003674:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 8003676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 800367e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003682:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 8003686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800368a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 800368e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003692:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036a0:	480d      	ldr	r0, [pc, #52]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 80036a2:	f001 fc39 	bl	8004f18 <HAL_DMA_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80036ac:	f7ff fa04 	bl	8002ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <HAL_ADC_MspInit+0x158>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40012000 	.word	0x40012000
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	2000c628 	.word	0x2000c628
 80036dc:	40026410 	.word	0x40026410

080036e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_I2C_MspInit+0x84>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d12c      	bne.n	800375c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_I2C_MspInit+0x88>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_I2C_MspInit+0x88>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_I2C_MspInit+0x88>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800371e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003724:	2312      	movs	r3, #18
 8003726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003728:	2301      	movs	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003730:	2304      	movs	r3, #4
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	4619      	mov	r1, r3
 800373a:	480c      	ldr	r0, [pc, #48]	; (800376c <HAL_I2C_MspInit+0x8c>)
 800373c:	f001 ff7c 	bl	8005638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_I2C_MspInit+0x88>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_I2C_MspInit+0x88>)
 800374a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_I2C_MspInit+0x88>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800375c:	bf00      	nop
 800375e:	3728      	adds	r7, #40	; 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40005400 	.word	0x40005400
 8003768:	40023800 	.word	0x40023800
 800376c:	40020400 	.word	0x40020400

08003770 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <HAL_RTC_MspInit+0x24>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d102      	bne.n	8003788 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RTC_MspInit+0x28>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40002800 	.word	0x40002800
 8003798:	42470e3c 	.word	0x42470e3c

0800379c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_SPI_MspInit+0x84>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d12b      	bne.n	8003816 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	4b18      	ldr	r3, [pc, #96]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037cc:	6453      	str	r3, [r2, #68]	; 0x44
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_SPI_MspInit+0x88>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80037f6:	23e0      	movs	r3, #224	; 0xe0
 80037f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003802:	2303      	movs	r3, #3
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003806:	2305      	movs	r3, #5
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <HAL_SPI_MspInit+0x8c>)
 8003812:	f001 ff11 	bl	8005638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003816:	bf00      	nop
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40013000 	.word	0x40013000
 8003824:	40023800 	.word	0x40023800
 8003828:	40020000 	.word	0x40020000

0800382c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <HAL_TIM_PWM_MspInit+0xf8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d116      	bne.n	800386c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	4b39      	ldr	r3, [pc, #228]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	4a38      	ldr	r2, [pc, #224]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6453      	str	r3, [r2, #68]	; 0x44
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	2100      	movs	r1, #0
 800385e:	2018      	movs	r0, #24
 8003860:	f001 fb23 	bl	8004eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003864:	2018      	movs	r0, #24
 8003866:	f001 fb3c 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800386a:	e056      	b.n	800391a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM5)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2e      	ldr	r2, [pc, #184]	; (800392c <HAL_TIM_PWM_MspInit+0x100>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003880:	f043 0308 	orr.w	r3, r3, #8
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	69bb      	ldr	r3, [r7, #24]
}
 8003892:	e042      	b.n	800391a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM8)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <HAL_TIM_PWM_MspInit+0x104>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	4b21      	ldr	r3, [pc, #132]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6453      	str	r3, [r2, #68]	; 0x44
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]
}
 80038ba:	e02e      	b.n	800391a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM9)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <HAL_TIM_PWM_MspInit+0x108>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d116      	bne.n	80038f4 <HAL_TIM_PWM_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2018      	movs	r0, #24
 80038e8:	f001 fadf 	bl	8004eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80038ec:	2018      	movs	r0, #24
 80038ee:	f001 faf8 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
}
 80038f2:	e012      	b.n	800391a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM12)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_TIM_PWM_MspInit+0x10c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10d      	bne.n	800391a <HAL_TIM_PWM_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_TIM_PWM_MspInit+0xfc>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	40023800 	.word	0x40023800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40010400 	.word	0x40010400
 8003934:	40014000 	.word	0x40014000
 8003938:	40001800 	.word	0x40001800

0800393c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	; 0x38
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d12d      	bne.n	80039ba <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a41      	ldr	r2, [pc, #260]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8003996:	f248 0302 	movw	r3, #32770	; 0x8002
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a4:	2300      	movs	r3, #0
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039a8:	2301      	movs	r3, #1
 80039aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b0:	4619      	mov	r1, r3
 80039b2:	4836      	ldr	r0, [pc, #216]	; (8003a8c <HAL_TIM_Encoder_MspInit+0x150>)
 80039b4:	f001 fe40 	bl	8005638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039b8:	e062      	b.n	8003a80 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a34      	ldr	r2, [pc, #208]	; (8003a90 <HAL_TIM_Encoder_MspInit+0x154>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d12c      	bne.n	8003a1e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	4a2e      	ldr	r2, [pc, #184]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 80039ce:	f043 0302 	orr.w	r3, r3, #2
 80039d2:	6413      	str	r3, [r2, #64]	; 0x40
 80039d4:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	6313      	str	r3, [r2, #48]	; 0x30
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039fc:	2330      	movs	r3, #48	; 0x30
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a14:	4619      	mov	r1, r3
 8003a16:	481f      	ldr	r0, [pc, #124]	; (8003a94 <HAL_TIM_Encoder_MspInit+0x158>)
 8003a18:	f001 fe0e 	bl	8005638 <HAL_GPIO_Init>
}
 8003a1c:	e030      	b.n	8003a80 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d12b      	bne.n	8003a80 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6413      	str	r3, [r2, #64]	; 0x40
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	6313      	str	r3, [r2, #48]	; 0x30
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a60:	23c0      	movs	r3, #192	; 0xc0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a70:	2302      	movs	r3, #2
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4806      	ldr	r0, [pc, #24]	; (8003a94 <HAL_TIM_Encoder_MspInit+0x158>)
 8003a7c:	f001 fddc 	bl	8005638 <HAL_GPIO_Init>
}
 8003a80:	bf00      	nop
 8003a82:	3738      	adds	r7, #56	; 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40020400 	.word	0x40020400
 8003a98:	40000800 	.word	0x40000800

08003a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <HAL_TIM_Base_MspInit+0xd0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d116      	bne.n	8003adc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003ab8:	f043 0310 	orr.w	r3, r3, #16
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	2036      	movs	r0, #54	; 0x36
 8003ad0:	f001 f9eb 	bl	8004eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ad4:	2036      	movs	r0, #54	; 0x36
 8003ad6:	f001 fa04 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003ada:	e042      	b.n	8003b62 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a24      	ldr	r2, [pc, #144]	; (8003b74 <HAL_TIM_Base_MspInit+0xd8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d116      	bne.n	8003b14 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003af0:	f043 0320 	orr.w	r3, r3, #32
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	2037      	movs	r0, #55	; 0x37
 8003b08:	f001 f9cf 	bl	8004eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b0c:	2037      	movs	r0, #55	; 0x37
 8003b0e:	f001 f9e8 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
}
 8003b12:	e026      	b.n	8003b62 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_TIM_Base_MspInit+0xdc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	e012      	b.n	8003b62 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_TIM_Base_MspInit+0xe0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6453      	str	r3, [r2, #68]	; 0x44
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_TIM_Base_MspInit+0xd4>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40001000 	.word	0x40001000
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40001400 	.word	0x40001400
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800

08003b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5b      	ldr	r2, [pc, #364]	; (8003d0c <HAL_TIM_MspPostInit+0x18c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d11f      	bne.n	8003be2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	4b5a      	ldr	r3, [pc, #360]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a59      	ldr	r2, [pc, #356]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b57      	ldr	r3, [pc, #348]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	484e      	ldr	r0, [pc, #312]	; (8003d14 <HAL_TIM_MspPostInit+0x194>)
 8003bdc:	f001 fd2c 	bl	8005638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003be0:	e08f      	b.n	8003d02 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4c      	ldr	r2, [pc, #304]	; (8003d18 <HAL_TIM_MspPostInit+0x198>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d11e      	bne.n	8003c2a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4a46      	ldr	r2, [pc, #280]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfc:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 031c 	add.w	r3, r7, #28
 8003c20:	4619      	mov	r1, r3
 8003c22:	483c      	ldr	r0, [pc, #240]	; (8003d14 <HAL_TIM_MspPostInit+0x194>)
 8003c24:	f001 fd08 	bl	8005638 <HAL_GPIO_Init>
}
 8003c28:	e06b      	b.n	8003d02 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM8)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3b      	ldr	r2, [pc, #236]	; (8003d1c <HAL_TIM_MspPostInit+0x19c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d11e      	bne.n	8003c72 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6313      	str	r3, [r2, #48]	; 0x30
 8003c44:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c50:	2340      	movs	r3, #64	; 0x40
 8003c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2302      	movs	r3, #2
 8003c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c60:	2303      	movs	r3, #3
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	4619      	mov	r1, r3
 8003c6a:	482d      	ldr	r0, [pc, #180]	; (8003d20 <HAL_TIM_MspPostInit+0x1a0>)
 8003c6c:	f001 fce4 	bl	8005638 <HAL_GPIO_Init>
}
 8003c70:	e047      	b.n	8003d02 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM9)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2b      	ldr	r2, [pc, #172]	; (8003d24 <HAL_TIM_MspPostInit+0x1a4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d11e      	bne.n	8003cba <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8c:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c98:	2304      	movs	r3, #4
 8003c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cac:	f107 031c 	add.w	r3, r7, #28
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4818      	ldr	r0, [pc, #96]	; (8003d14 <HAL_TIM_MspPostInit+0x194>)
 8003cb4:	f001 fcc0 	bl	8005638 <HAL_GPIO_Init>
}
 8003cb8:	e023      	b.n	8003d02 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <HAL_TIM_MspPostInit+0x1a8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d11e      	bne.n	8003d02 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003cce:	f043 0302 	orr.w	r3, r3, #2
 8003cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_TIM_MspPostInit+0x190>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003cf2:	2309      	movs	r3, #9
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf6:	f107 031c 	add.w	r3, r7, #28
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	480b      	ldr	r0, [pc, #44]	; (8003d2c <HAL_TIM_MspPostInit+0x1ac>)
 8003cfe:	f001 fc9b 	bl	8005638 <HAL_GPIO_Init>
}
 8003d02:	bf00      	nop
 8003d04:	3730      	adds	r7, #48	; 0x30
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40010400 	.word	0x40010400
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40014000 	.word	0x40014000
 8003d28:	40001800 	.word	0x40001800
 8003d2c:	40020400 	.word	0x40020400

08003d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	; 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <HAL_UART_MspInit+0x94>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d134      	bne.n	8003dbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <HAL_UART_MspInit+0x98>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_UART_MspInit+0x98>)
 8003d5c:	f043 0310 	orr.w	r3, r3, #16
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_UART_MspInit+0x98>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_UART_MspInit+0x98>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <HAL_UART_MspInit+0x98>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_UART_MspInit+0x98>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	4619      	mov	r1, r3
 8003da6:	4809      	ldr	r0, [pc, #36]	; (8003dcc <HAL_UART_MspInit+0x9c>)
 8003da8:	f001 fc46 	bl	8005638 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	2100      	movs	r1, #0
 8003db0:	2025      	movs	r0, #37	; 0x25
 8003db2:	f001 f87a 	bl	8004eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003db6:	2025      	movs	r0, #37	; 0x25
 8003db8:	f001 f893 	bl	8004ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003dbc:	bf00      	nop
 8003dbe:	3728      	adds	r7, #40	; 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40020000 	.word	0x40020000

08003dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dd4:	e7fe      	b.n	8003dd4 <NMI_Handler+0x4>

08003dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dda:	e7fe      	b.n	8003dda <HardFault_Handler+0x4>

08003ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de0:	e7fe      	b.n	8003de0 <MemManage_Handler+0x4>

08003de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <BusFault_Handler+0x4>

08003de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <UsageFault_Handler+0x4>

08003dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e1c:	f000 fb34 	bl	8004488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e28:	4803      	ldr	r0, [pc, #12]	; (8003e38 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003e2a:	f003 fbe2 	bl	80075f2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003e2e:	4803      	ldr	r0, [pc, #12]	; (8003e3c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003e30:	f003 fbdf 	bl	80075f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	2000c6ec 	.word	0x2000c6ec
 8003e3c:	2000c730 	.word	0x2000c730

08003e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <USART1_IRQHandler+0x10>)
 8003e46:	f004 fa09 	bl	800825c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	2000c5a8 	.word	0x2000c5a8

08003e54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <TIM6_DAC_IRQHandler+0x10>)
 8003e5a:	f003 fbca 	bl	80075f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000c6ac 	.word	0x2000c6ac

08003e68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <TIM7_IRQHandler+0x10>)
 8003e6e:	f003 fbc0 	bl	80075f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000c848 	.word	0x2000c848

08003e7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <DMA2_Stream0_IRQHandler+0x10>)
 8003e82:	f001 f971 	bl	8005168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	2000c628 	.word	0x2000c628

08003e90 <switch_get>:
 */

#include "switch.h"

uint16_t switch_get()
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
	uint16_t value = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	80fb      	strh	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) value |= 0x01;
 8003e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e9e:	4814      	ldr	r0, [pc, #80]	; (8003ef0 <switch_get+0x60>)
 8003ea0:	f001 fd64 	bl	800596c <HAL_GPIO_ReadPin>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <switch_get+0x24>
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	80fb      	strh	r3, [r7, #6]
 8003eb2:	e017      	b.n	8003ee4 <switch_get+0x54>
	else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) value |= 0x02;
 8003eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <switch_get+0x60>)
 8003eba:	f001 fd57 	bl	800596c <HAL_GPIO_ReadPin>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d104      	bne.n	8003ece <switch_get+0x3e>
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	80fb      	strh	r3, [r7, #6]
 8003ecc:	e00a      	b.n	8003ee4 <switch_get+0x54>
	else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) value |= 0x03;
 8003ece:	2104      	movs	r1, #4
 8003ed0:	4807      	ldr	r0, [pc, #28]	; (8003ef0 <switch_get+0x60>)
 8003ed2:	f001 fd4b 	bl	800596c <HAL_GPIO_ReadPin>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <switch_get+0x54>
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	f043 0303 	orr.w	r3, r3, #3
 8003ee2:	80fb      	strh	r3, [r7, #6]
	else value |= 0x00;

	return value;
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40020400 	.word	0x40020400

08003ef4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e00a      	b.n	8003f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f06:	f3af 8000 	nop.w
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	60ba      	str	r2, [r7, #8]
 8003f12:	b2ca      	uxtb	r2, r1
 8003f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	dbf0      	blt.n	8003f06 <_read+0x12>
	}

return len;
 8003f24:	687b      	ldr	r3, [r7, #4]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
	return -1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f56:	605a      	str	r2, [r3, #4]
	return 0;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <_isatty>:

int _isatty(int file)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8003f6e:	2301      	movs	r3, #1
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
	return 0;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <_sbrk+0x5c>)
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <_sbrk+0x60>)
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_sbrk+0x64>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <_sbrk+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <_sbrk+0x64>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc8:	f004 ff4e 	bl	8008e68 <__errno>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	230c      	movs	r3, #12
 8003fd0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	e009      	b.n	8003fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <_sbrk+0x64>)
 8003fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20020000 	.word	0x20020000
 8003ff8:	00000400 	.word	0x00000400
 8003ffc:	200097fc 	.word	0x200097fc
 8004000:	2000c898 	.word	0x2000c898

08004004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <SystemInit+0x28>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <SystemInit+0x28>)
 8004010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <SystemInit+0x28>)
 800401a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800401e:	609a      	str	r2, [r3, #8]
#endif
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <init>:
 */

#include "wrapper.h"

void init()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
	IMU_init();
 8004034:	f7fd f800 	bl	8001038 <IMU_init>
	ADCStart();
 8004038:	f7fd fa86 	bl	8001548 <ADCStart>
	MotorStart();
 800403c:	f7ff f814 	bl	8003068 <MotorStart>
	Trace_Init();
 8004040:	f7fd fcc8 	bl	80019d4 <Trace_Init>
	stop_init();
 8004044:	f7ff f9aa 	bl	800339c <stop_init>
	LineTrace_Flag = 0;
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <init+0x30>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
	Start_Flag = 0;
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <init+0x34>)
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
	Mode_Flag = 0;
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <init+0x38>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000c4cc 	.word	0x2000c4cc
 8004064:	2000c559 	.word	0x2000c559
 8004068:	2000c4cd 	.word	0x2000c4cd

0800406c <main_loop>:

void main_loop()
{
 800406c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af04      	add	r7, sp, #16

	while(1){
		LineTrace_Flag = 0;
 8004074:	4ba2      	ldr	r3, [pc, #648]	; (8004300 <main_loop+0x294>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
		if( switch_get() == SW_1 ){
 800407a:	f7ff ff09 	bl	8003e90 <switch_get>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d106      	bne.n	8004092 <main_loop+0x26>
			Mode_Flag--;
 8004084:	4b9f      	ldr	r3, [pc, #636]	; (8004304 <main_loop+0x298>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	3b01      	subs	r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	4b9d      	ldr	r3, [pc, #628]	; (8004304 <main_loop+0x298>)
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e017      	b.n	80040c2 <main_loop+0x56>
			if(Mode_Flag < 0) Mode_Flag = 9;
		}
		else if( switch_get() == SW_2 ){
 8004092:	f7ff fefd 	bl	8003e90 <switch_get>
 8004096:	4603      	mov	r3, r0
 8004098:	2b02      	cmp	r3, #2
 800409a:	d10d      	bne.n	80040b8 <main_loop+0x4c>
			Mode_Flag++;
 800409c:	4b99      	ldr	r3, [pc, #612]	; (8004304 <main_loop+0x298>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	4b97      	ldr	r3, [pc, #604]	; (8004304 <main_loop+0x298>)
 80040a6:	701a      	strb	r2, [r3, #0]
			if(Mode_Flag > 9) Mode_Flag = 0;
 80040a8:	4b96      	ldr	r3, [pc, #600]	; (8004304 <main_loop+0x298>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b09      	cmp	r3, #9
 80040ae:	d908      	bls.n	80040c2 <main_loop+0x56>
 80040b0:	4b94      	ldr	r3, [pc, #592]	; (8004304 <main_loop+0x298>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e004      	b.n	80040c2 <main_loop+0x56>
		}
		else if( switch_get() == SW_3 ) break;
 80040b8:	f7ff feea 	bl	8003e90 <switch_get>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d071      	beq.n	80041a6 <main_loop+0x13a>

		switch(Mode_Flag){
 80040c2:	4b90      	ldr	r3, [pc, #576]	; (8004304 <main_loop+0x298>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b09      	cmp	r3, #9
 80040c8:	d868      	bhi.n	800419c <main_loop+0x130>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <main_loop+0x64>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	0800413b 	.word	0x0800413b
 80040d8:	0800415d 	.word	0x0800415d
 80040dc:	08004165 	.word	0x08004165
 80040e0:	0800416d 	.word	0x0800416d
 80040e4:	08004175 	.word	0x08004175
 80040e8:	0800417d 	.word	0x0800417d
 80040ec:	08004185 	.word	0x08004185
 80040f0:	0800418d 	.word	0x0800418d
 80040f4:	08004195 	.word	0x08004195
			case 0:
				led_num(0);
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7fd fc17 	bl	800192c <led_num>
				printf("ADC_L -> %f,	ADC_R -> %f,	DEG_S -> %f\r\n", Line_Calib_L, Line_Calib_R, Degree_S());
 80040fe:	4b82      	ldr	r3, [pc, #520]	; (8004308 <main_loop+0x29c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fa20 	bl	8000548 <__aeabi_f2d>
 8004108:	4680      	mov	r8, r0
 800410a:	4689      	mov	r9, r1
 800410c:	4b7f      	ldr	r3, [pc, #508]	; (800430c <main_loop+0x2a0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc fa19 	bl	8000548 <__aeabi_f2d>
 8004116:	4604      	mov	r4, r0
 8004118:	460d      	mov	r5, r1
 800411a:	f7ff f911 	bl	8003340 <Degree_S>
 800411e:	eeb0 7a40 	vmov.f32	s14, s0
 8004122:	eef0 7a60 	vmov.f32	s15, s1
 8004126:	ed8d 7b02 	vstr	d7, [sp, #8]
 800412a:	e9cd 4500 	strd	r4, r5, [sp]
 800412e:	4642      	mov	r2, r8
 8004130:	464b      	mov	r3, r9
 8004132:	4877      	ldr	r0, [pc, #476]	; (8004310 <main_loop+0x2a4>)
 8004134:	f005 fb32 	bl	800979c <iprintf>
				break;
 8004138:	e031      	b.n	800419e <main_loop+0x132>
			case 1:
				led_num(1);
 800413a:	2001      	movs	r0, #1
 800413c:	f7fd fbf6 	bl	800192c <led_num>
				printf("Speed_L -> %f,	Speed_R -> %f\r\n", SL, SR);
 8004140:	4b74      	ldr	r3, [pc, #464]	; (8004314 <main_loop+0x2a8>)
 8004142:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004146:	4b74      	ldr	r3, [pc, #464]	; (8004318 <main_loop+0x2ac>)
 8004148:	e9d3 3400 	ldrd	r3, r4, [r3]
 800414c:	e9cd 3400 	strd	r3, r4, [sp]
 8004150:	4613      	mov	r3, r2
 8004152:	460a      	mov	r2, r1
 8004154:	4871      	ldr	r0, [pc, #452]	; (800431c <main_loop+0x2b0>)
 8004156:	f005 fb21 	bl	800979c <iprintf>
				break;
 800415a:	e020      	b.n	800419e <main_loop+0x132>
			case 2:
				// Run only
				led_num(2);
 800415c:	2002      	movs	r0, #2
 800415e:	f7fd fbe5 	bl	800192c <led_num>
				break;
 8004162:	e01c      	b.n	800419e <main_loop+0x132>
			case 3:
				// Run & data flash
				led_num(3);
 8004164:	2003      	movs	r0, #3
 8004166:	f7fd fbe1 	bl	800192c <led_num>
				break;
 800416a:	e018      	b.n	800419e <main_loop+0x132>
			case 4:
				// Speed Control speed1
				led_num(4);
 800416c:	2004      	movs	r0, #4
 800416e:	f7fd fbdd 	bl	800192c <led_num>
				break;
 8004172:	e014      	b.n	800419e <main_loop+0x132>
			case 5:
				// Speed Control speed2
				led_num(5);
 8004174:	2005      	movs	r0, #5
 8004176:	f7fd fbd9 	bl	800192c <led_num>
				break;
 800417a:	e010      	b.n	800419e <main_loop+0x132>
			case 6:
				// Speed Control speed3
				led_num(6);
 800417c:	2006      	movs	r0, #6
 800417e:	f7fd fbd5 	bl	800192c <led_num>
				break;
 8004182:	e00c      	b.n	800419e <main_loop+0x132>
			case 7:
				// Speed Control speed4
				led_num(7);
 8004184:	2007      	movs	r0, #7
 8004186:	f7fd fbd1 	bl	800192c <led_num>
				break;
 800418a:	e008      	b.n	800419e <main_loop+0x132>
			case 8:
				// Speed Control speed5
				led_num(8);
 800418c:	2008      	movs	r0, #8
 800418e:	f7fd fbcd 	bl	800192c <led_num>
				break;
 8004192:	e004      	b.n	800419e <main_loop+0x132>
			case 9:
				// Auto Run
				led_num(9);
 8004194:	2009      	movs	r0, #9
 8004196:	f7fd fbc9 	bl	800192c <led_num>
				break;
 800419a:	e000      	b.n	800419e <main_loop+0x132>
			default:
				break;
 800419c:	bf00      	nop
		}

		HAL_Delay(100);
 800419e:	2064      	movs	r0, #100	; 0x64
 80041a0:	f000 f992 	bl	80044c8 <HAL_Delay>
		LineTrace_Flag = 0;
 80041a4:	e766      	b.n	8004074 <main_loop+0x8>
		else if( switch_get() == SW_3 ) break;
 80041a6:	bf00      	nop
	}

	HAL_Delay(500);
 80041a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041ac:	f000 f98c 	bl	80044c8 <HAL_Delay>

	//LineTrace
	while(1){
		if(Mode_Flag == 9) break;
 80041b0:	4b54      	ldr	r3, [pc, #336]	; (8004304 <main_loop+0x298>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	f000 8099 	beq.w	80042ec <main_loop+0x280>
		Start_Flag = start_stop();
 80041ba:	f7ff f917 	bl	80033ec <start_stop>
 80041be:	4603      	mov	r3, r0
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b57      	ldr	r3, [pc, #348]	; (8004320 <main_loop+0x2b4>)
 80041c4:	701a      	strb	r2, [r3, #0]

		switch(State_Flag){
 80041c6:	4b57      	ldr	r3, [pc, #348]	; (8004324 <main_loop+0x2b8>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	3b02      	subs	r3, #2
 80041cc:	2b06      	cmp	r3, #6
 80041ce:	d860      	bhi.n	8004292 <main_loop+0x226>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <main_loop+0x16c>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	08004203 	.word	0x08004203
 80041e0:	08004211 	.word	0x08004211
 80041e4:	0800422b 	.word	0x0800422b
 80041e8:	08004245 	.word	0x08004245
 80041ec:	0800425f 	.word	0x0800425f
 80041f0:	08004279 	.word	0x08004279
			case 2:
				// Run only
				led_num(2);
 80041f4:	2002      	movs	r0, #2
 80041f6:	f7fd fb99 	bl	800192c <led_num>
				Memory_Flag = 0;
 80041fa:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <main_loop+0x2bc>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
				break;
 8004200:	e04b      	b.n	800429a <main_loop+0x22e>
			case 3:
				// Run & data flash
				led_num(3);
 8004202:	2003      	movs	r0, #3
 8004204:	f7fd fb92 	bl	800192c <led_num>
				Memory_Flag = 1;
 8004208:	4b47      	ldr	r3, [pc, #284]	; (8004328 <main_loop+0x2bc>)
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
				break;
 800420e:	e044      	b.n	800429a <main_loop+0x22e>
			case 4:
				// Speed Control speed1
				led_num(4);
 8004210:	2004      	movs	r0, #4
 8004212:	f7fd fb8b 	bl	800192c <led_num>
				Memory_Flag = 2;
 8004216:	4b44      	ldr	r3, [pc, #272]	; (8004328 <main_loop+0x2bc>)
 8004218:	2202      	movs	r2, #2
 800421a:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 800421c:	4a43      	ldr	r2, [pc, #268]	; (800432c <main_loop+0x2c0>)
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	4c43      	ldr	r4, [pc, #268]	; (8004330 <main_loop+0x2c4>)
 8004224:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8004228:	e037      	b.n	800429a <main_loop+0x22e>
			case 5:
				// Speed Control speed2
				led_num(5);
 800422a:	2005      	movs	r0, #5
 800422c:	f7fd fb7e 	bl	800192c <led_num>
				Memory_Flag = 2;
 8004230:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <main_loop+0x2bc>)
 8004232:	2202      	movs	r2, #2
 8004234:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8004236:	4a3d      	ldr	r2, [pc, #244]	; (800432c <main_loop+0x2c0>)
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	4c3c      	ldr	r4, [pc, #240]	; (8004330 <main_loop+0x2c4>)
 800423e:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8004242:	e02a      	b.n	800429a <main_loop+0x22e>
			case 6:
				// Speed Control speed3
				led_num(6);
 8004244:	2006      	movs	r0, #6
 8004246:	f7fd fb71 	bl	800192c <led_num>
				Memory_Flag = 2;
 800424a:	4b37      	ldr	r3, [pc, #220]	; (8004328 <main_loop+0x2bc>)
 800424c:	2202      	movs	r2, #2
 800424e:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8004250:	4a36      	ldr	r2, [pc, #216]	; (800432c <main_loop+0x2c0>)
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	4c36      	ldr	r4, [pc, #216]	; (8004330 <main_loop+0x2c4>)
 8004258:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 800425c:	e01d      	b.n	800429a <main_loop+0x22e>
			case 7:
				// Speed Control speed4
				led_num(7);
 800425e:	2007      	movs	r0, #7
 8004260:	f7fd fb64 	bl	800192c <led_num>
				Memory_Flag = 2;
 8004264:	4b30      	ldr	r3, [pc, #192]	; (8004328 <main_loop+0x2bc>)
 8004266:	2202      	movs	r2, #2
 8004268:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 800426a:	4a30      	ldr	r2, [pc, #192]	; (800432c <main_loop+0x2c0>)
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	4c2f      	ldr	r4, [pc, #188]	; (8004330 <main_loop+0x2c4>)
 8004272:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8004276:	e010      	b.n	800429a <main_loop+0x22e>
			case 8:
				// Speed Control speed5
				led_num(8);
 8004278:	2008      	movs	r0, #8
 800427a:	f7fd fb57 	bl	800192c <led_num>
				Memory_Flag = 2;
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <main_loop+0x2bc>)
 8004280:	2202      	movs	r2, #2
 8004282:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <main_loop+0x2c0>)
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	4c29      	ldr	r4, [pc, #164]	; (8004330 <main_loop+0x2c4>)
 800428c:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8004290:	e003      	b.n	800429a <main_loop+0x22e>
			default:
				LineTrace_Flag = 0;
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <main_loop+0x294>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
				break;
 8004298:	bf00      	nop
		}
		if( Start_Flag == 0 ) LineTrace_Flag = 1;
 800429a:	4b21      	ldr	r3, [pc, #132]	; (8004320 <main_loop+0x2b4>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <main_loop+0x23e>
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <main_loop+0x294>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e01c      	b.n	80042e4 <main_loop+0x278>
		else if( Start_Flag == 1 ) LineTrace_Flag = 2;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <main_loop+0x2b4>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d103      	bne.n	80042ba <main_loop+0x24e>
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <main_loop+0x294>)
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e014      	b.n	80042e4 <main_loop+0x278>
		else if( Start_Flag == 2 ){
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <main_loop+0x2b4>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d110      	bne.n	80042e4 <main_loop+0x278>
			LineTrace_Flag = 3;
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <main_loop+0x294>)
 80042c4:	2203      	movs	r2, #3
 80042c6:	701a      	strb	r2, [r3, #0]
			Trace_Init();
 80042c8:	f7fd fb84 	bl	80019d4 <Trace_Init>
			stop_init();
 80042cc:	f7ff f866 	bl	800339c <stop_init>
			Start_Flag = 0;
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <main_loop+0x2b4>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
			Mode_Flag = 0;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <main_loop+0x298>)
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
			// data write
			led_num(15);
 80042dc:	200f      	movs	r0, #15
 80042de:	f7fd fb25 	bl	800192c <led_num>
			if(Memory_Flag == 1){

			}
			break;
 80042e2:	e004      	b.n	80042ee <main_loop+0x282>
		}
		HAL_Delay(0.5);
 80042e4:	2000      	movs	r0, #0
 80042e6:	f000 f8ef 	bl	80044c8 <HAL_Delay>
		if(Mode_Flag == 9) break;
 80042ea:	e761      	b.n	80041b0 <main_loop+0x144>
 80042ec:	bf00      	nop
	}

	HAL_Delay(500);
 80042ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042f2:	f000 f8e9 	bl	80044c8 <HAL_Delay>

}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042fe:	bf00      	nop
 8004300:	2000c4cc 	.word	0x2000c4cc
 8004304:	2000c4cd 	.word	0x2000c4cd
 8004308:	20009928 	.word	0x20009928
 800430c:	20009930 	.word	0x20009930
 8004310:	0800d558 	.word	0x0800d558
 8004314:	20009838 	.word	0x20009838
 8004318:	20009858 	.word	0x20009858
 800431c:	0800d580 	.word	0x0800d580
 8004320:	2000c559 	.word	0x2000c559
 8004324:	2000c4d4 	.word	0x2000c4d4
 8004328:	2000c558 	.word	0x2000c558
 800432c:	20009830 	.word	0x20009830
 8004330:	40040000 	.word	0x40040000

08004334 <PeriodElapsed_005ms>:

void PeriodElapsed_005ms()
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
	adc_getValues();
 8004338:	f7fd f92a 	bl	8001590 <adc_getValues>
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}

08004340 <PeriodElapsed_05ms>:


void PeriodElapsed_05ms()
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
	updateValues();
 8004344:	f7fd f972 	bl	800162c <updateValues>
	LineTrace( LineTrace_Flag , Memory_Flag);
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <PeriodElapsed_05ms+0x40>)
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <PeriodElapsed_05ms+0x44>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f7fd fb50 	bl	80019f8 <LineTrace>
	SR = Speed_R();
 8004358:	f7fe ff7e 	bl	8003258 <Speed_R>
 800435c:	eeb0 7a40 	vmov.f32	s14, s0
 8004360:	eef0 7a60 	vmov.f32	s15, s1
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <PeriodElapsed_05ms+0x48>)
 8004366:	ed83 7b00 	vstr	d7, [r3]
	SL = Speed_L();
 800436a:	f7fe ffb1 	bl	80032d0 <Speed_L>
 800436e:	eeb0 7a40 	vmov.f32	s14, s0
 8004372:	eef0 7a60 	vmov.f32	s15, s1
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <PeriodElapsed_05ms+0x4c>)
 8004378:	ed83 7b00 	vstr	d7, [r3]
}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}
 8004380:	2000c4cc 	.word	0x2000c4cc
 8004384:	2000c558 	.word	0x2000c558
 8004388:	20009858 	.word	0x20009858
 800438c:	20009838 	.word	0x20009838

08004390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004396:	e003      	b.n	80043a0 <LoopCopyDataInit>

08004398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800439a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800439c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800439e:	3104      	adds	r1, #4

080043a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043a0:	480b      	ldr	r0, [pc, #44]	; (80043d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043a8:	d3f6      	bcc.n	8004398 <CopyDataInit>
  ldr  r2, =_sbss
 80043aa:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043ac:	e002      	b.n	80043b4 <LoopFillZerobss>

080043ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043b0:	f842 3b04 	str.w	r3, [r2], #4

080043b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043b8:	d3f9      	bcc.n	80043ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043ba:	f7ff fe23 	bl	8004004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043be:	f004 fd59 	bl	8008e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043c2:	f7fd fcc9 	bl	8001d58 <main>
  bx  lr    
 80043c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043cc:	0800dab0 	.word	0x0800dab0
  ldr  r0, =_sdata
 80043d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043d4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80043d8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80043dc:	2000c894 	.word	0x2000c894

080043e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043e0:	e7fe      	b.n	80043e0 <ADC_IRQHandler>
	...

080043e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_Init+0x40>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <HAL_Init+0x40>)
 80043ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_Init+0x40>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <HAL_Init+0x40>)
 80043fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004400:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a07      	ldr	r2, [pc, #28]	; (8004424 <HAL_Init+0x40>)
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800440c:	2003      	movs	r0, #3
 800440e:	f000 fd41 	bl	8004e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004412:	2000      	movs	r0, #0
 8004414:	f000 f808 	bl	8004428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004418:	f7ff f88a 	bl	8003530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00

08004428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <HAL_InitTick+0x54>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_InitTick+0x58>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	4619      	mov	r1, r3
 800443a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800443e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd59 	bl	8004efe <HAL_SYSTICK_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e00e      	b.n	8004474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b0f      	cmp	r3, #15
 800445a:	d80a      	bhi.n	8004472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800445c:	2200      	movs	r2, #0
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	f000 fd21 	bl	8004eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004468:	4a06      	ldr	r2, [pc, #24]	; (8004484 <HAL_InitTick+0x5c>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000000 	.word	0x20000000
 8004480:	20000008 	.word	0x20000008
 8004484:	20000004 	.word	0x20000004

08004488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_IncTick+0x20>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_IncTick+0x24>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4413      	add	r3, r2
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_IncTick+0x24>)
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000008 	.word	0x20000008
 80044ac:	2000c88c 	.word	0x2000c88c

080044b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return uwTick;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_GetTick+0x14>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	2000c88c 	.word	0x2000c88c

080044c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d0:	f7ff ffee 	bl	80044b0 <HAL_GetTick>
 80044d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d005      	beq.n	80044ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_Delay+0x40>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044ee:	bf00      	nop
 80044f0:	f7ff ffde 	bl	80044b0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d8f7      	bhi.n	80044f0 <HAL_Delay+0x28>
  {
  }
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000008 	.word	0x20000008

0800450c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e033      	b.n	800458a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff f828 	bl	8003580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004552:	f023 0302 	bic.w	r3, r3, #2
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa4a 	bl	80049f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	f043 0201 	orr.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
 800457a:	e001      	b.n	8004580 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_Start_DMA+0x1e>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e0cc      	b.n	800474c <HAL_ADC_Start_DMA+0x1b8>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d018      	beq.n	80045fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045d8:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <HAL_ADC_Start_DMA+0x1c0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5e      	ldr	r2, [pc, #376]	; (8004758 <HAL_ADC_Start_DMA+0x1c4>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0c9a      	lsrs	r2, r3, #18
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045ec:	e002      	b.n	80045f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f9      	bne.n	80045ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 80a0 	bne.w	800474a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d106      	bne.n	8004658 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f023 0206 	bic.w	r2, r3, #6
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
 8004656:	e002      	b.n	800465e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <HAL_ADC_Start_DMA+0x1c8>)
 8004668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <HAL_ADC_Start_DMA+0x1cc>)
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4a3b      	ldr	r2, [pc, #236]	; (8004764 <HAL_ADC_Start_DMA+0x1d0>)
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	4a3a      	ldr	r2, [pc, #232]	; (8004768 <HAL_ADC_Start_DMA+0x1d4>)
 8004680:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800468a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800469a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	334c      	adds	r3, #76	; 0x4c
 80046b6:	4619      	mov	r1, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f000 fcda 	bl	8005074 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d12a      	bne.n	8004722 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a26      	ldr	r2, [pc, #152]	; (800476c <HAL_ADC_Start_DMA+0x1d8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d015      	beq.n	8004702 <HAL_ADC_Start_DMA+0x16e>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a25      	ldr	r2, [pc, #148]	; (8004770 <HAL_ADC_Start_DMA+0x1dc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d105      	bne.n	80046ec <HAL_ADC_Start_DMA+0x158>
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_ADC_Start_DMA+0x1c8>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a20      	ldr	r2, [pc, #128]	; (8004774 <HAL_ADC_Start_DMA+0x1e0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d129      	bne.n	800474a <HAL_ADC_Start_DMA+0x1b6>
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_ADC_Start_DMA+0x1c8>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	d823      	bhi.n	800474a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11c      	bne.n	800474a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	e013      	b.n	800474a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a11      	ldr	r2, [pc, #68]	; (800476c <HAL_ADC_Start_DMA+0x1d8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10e      	bne.n	800474a <HAL_ADC_Start_DMA+0x1b6>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004748:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000000 	.word	0x20000000
 8004758:	431bde83 	.word	0x431bde83
 800475c:	40012300 	.word	0x40012300
 8004760:	08004bf1 	.word	0x08004bf1
 8004764:	08004cab 	.word	0x08004cab
 8004768:	08004cc7 	.word	0x08004cc7
 800476c:	40012000 	.word	0x40012000
 8004770:	40012100 	.word	0x40012100
 8004774:	40012200 	.word	0x40012200

08004778 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x1c>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e105      	b.n	80049dc <HAL_ADC_ConfigChannel+0x228>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b09      	cmp	r3, #9
 80047de:	d925      	bls.n	800482c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68d9      	ldr	r1, [r3, #12]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	3b1e      	subs	r3, #30
 80047f6:	2207      	movs	r2, #7
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43da      	mvns	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	400a      	ands	r2, r1
 8004804:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68d9      	ldr	r1, [r3, #12]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	4618      	mov	r0, r3
 8004818:	4603      	mov	r3, r0
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4403      	add	r3, r0
 800481e:	3b1e      	subs	r3, #30
 8004820:	409a      	lsls	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	e022      	b.n	8004872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6919      	ldr	r1, [r3, #16]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	2207      	movs	r2, #7
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43da      	mvns	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	400a      	ands	r2, r1
 800484e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6919      	ldr	r1, [r3, #16]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	4618      	mov	r0, r3
 8004862:	4603      	mov	r3, r0
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4403      	add	r3, r0
 8004868:	409a      	lsls	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d824      	bhi.n	80048c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	3b05      	subs	r3, #5
 800488c:	221f      	movs	r2, #31
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	400a      	ands	r2, r1
 800489a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4618      	mov	r0, r3
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	3b05      	subs	r3, #5
 80048b6:	fa00 f203 	lsl.w	r2, r0, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34
 80048c2:	e04c      	b.n	800495e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d824      	bhi.n	8004916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	3b23      	subs	r3, #35	; 0x23
 80048de:	221f      	movs	r2, #31
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43da      	mvns	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	400a      	ands	r2, r1
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	3b23      	subs	r3, #35	; 0x23
 8004908:	fa00 f203 	lsl.w	r2, r0, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
 8004914:	e023      	b.n	800495e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	3b41      	subs	r3, #65	; 0x41
 8004928:	221f      	movs	r2, #31
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	400a      	ands	r2, r1
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	4618      	mov	r0, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	3b41      	subs	r3, #65	; 0x41
 8004952:	fa00 f203 	lsl.w	r2, r0, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800495e:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <HAL_ADC_ConfigChannel+0x234>)
 8004960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <HAL_ADC_ConfigChannel+0x238>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d109      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x1cc>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b12      	cmp	r3, #18
 8004972:	d105      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a19      	ldr	r2, [pc, #100]	; (80049ec <HAL_ADC_ConfigChannel+0x238>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d123      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x21e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b10      	cmp	r3, #16
 8004990:	d003      	beq.n	800499a <HAL_ADC_ConfigChannel+0x1e6>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b11      	cmp	r3, #17
 8004998:	d11b      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d111      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_ADC_ConfigChannel+0x23c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <HAL_ADC_ConfigChannel+0x240>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	0c9a      	lsrs	r2, r3, #18
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049c4:	e002      	b.n	80049cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f9      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40012300 	.word	0x40012300
 80049ec:	40012000 	.word	0x40012000
 80049f0:	20000000 	.word	0x20000000
 80049f4:	431bde83 	.word	0x431bde83

080049f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a00:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <ADC_Init+0x1f0>)
 8004a02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	021a      	lsls	r2, r3, #8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6899      	ldr	r1, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	4a58      	ldr	r2, [pc, #352]	; (8004bec <ADC_Init+0x1f4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6899      	ldr	r1, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6899      	ldr	r1, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	e00f      	b.n	8004af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004af4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0202 	bic.w	r2, r2, #2
 8004b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7e1b      	ldrb	r3, [r3, #24]
 8004b10:	005a      	lsls	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	035a      	lsls	r2, r3, #13
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	e007      	b.n	8004b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	051a      	lsls	r2, r3, #20
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bae:	025a      	lsls	r2, r3, #9
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6899      	ldr	r1, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	029a      	lsls	r2, r3, #10
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40012300 	.word	0x40012300
 8004bec:	0f000001 	.word	0x0f000001

08004bf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d13c      	bne.n	8004c84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d12b      	bne.n	8004c7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d127      	bne.n	8004c7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d119      	bne.n	8004c7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0220 	bic.w	r2, r2, #32
 8004c56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff fd7b 	bl	8004778 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c82:	e00e      	b.n	8004ca2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fd85 	bl	80047a0 <HAL_ADC_ErrorCallback>
}
 8004c96:	e004      	b.n	8004ca2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff fd67 	bl	800478c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	f043 0204 	orr.w	r2, r3, #4
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff fd5a 	bl	80047a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <__NVIC_SetPriorityGrouping+0x44>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d10:	4013      	ands	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d26:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <__NVIC_SetPriorityGrouping+0x44>)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	60d3      	str	r3, [r2, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <__NVIC_GetPriorityGrouping+0x18>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	f003 0307 	and.w	r3, r3, #7
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db0b      	blt.n	8004d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	4907      	ldr	r1, [pc, #28]	; (8004d90 <__NVIC_EnableIRQ+0x38>)
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2001      	movs	r0, #1
 8004d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	e000e100 	.word	0xe000e100

08004d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	6039      	str	r1, [r7, #0]
 8004d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db0a      	blt.n	8004dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	490c      	ldr	r1, [pc, #48]	; (8004de0 <__NVIC_SetPriority+0x4c>)
 8004dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db2:	0112      	lsls	r2, r2, #4
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	440b      	add	r3, r1
 8004db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dbc:	e00a      	b.n	8004dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4908      	ldr	r1, [pc, #32]	; (8004de4 <__NVIC_SetPriority+0x50>)
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	3b04      	subs	r3, #4
 8004dcc:	0112      	lsls	r2, r2, #4
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	761a      	strb	r2, [r3, #24]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	e000e100 	.word	0xe000e100
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b089      	sub	sp, #36	; 0x24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f1c3 0307 	rsb	r3, r3, #7
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	bf28      	it	cs
 8004e06:	2304      	movcs	r3, #4
 8004e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d902      	bls.n	8004e18 <NVIC_EncodePriority+0x30>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3b03      	subs	r3, #3
 8004e16:	e000      	b.n	8004e1a <NVIC_EncodePriority+0x32>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43da      	mvns	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e30:	f04f 31ff 	mov.w	r1, #4294967295
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3a:	43d9      	mvns	r1, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e40:	4313      	orrs	r3, r2
         );
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3724      	adds	r7, #36	; 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e60:	d301      	bcc.n	8004e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e62:	2301      	movs	r3, #1
 8004e64:	e00f      	b.n	8004e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <SysTick_Config+0x40>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e6e:	210f      	movs	r1, #15
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	f7ff ff8e 	bl	8004d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <SysTick_Config+0x40>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <SysTick_Config+0x40>)
 8004e80:	2207      	movs	r2, #7
 8004e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	e000e010 	.word	0xe000e010

08004e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ff29 	bl	8004cf4 <__NVIC_SetPriorityGrouping>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b086      	sub	sp, #24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ebc:	f7ff ff3e 	bl	8004d3c <__NVIC_GetPriorityGrouping>
 8004ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f7ff ff8e 	bl	8004de8 <NVIC_EncodePriority>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff5d 	bl	8004d94 <__NVIC_SetPriority>
}
 8004eda:	bf00      	nop
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	4603      	mov	r3, r0
 8004eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ff31 	bl	8004d58 <__NVIC_EnableIRQ>
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ffa2 	bl	8004e50 <SysTick_Config>
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f24:	f7ff fac4 	bl	80044b0 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e099      	b.n	8005068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f54:	e00f      	b.n	8004f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f56:	f7ff faab 	bl	80044b0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d908      	bls.n	8004f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e078      	b.n	8005068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e8      	bne.n	8004f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <HAL_DMA_Init+0x158>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d107      	bne.n	8004fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b04      	cmp	r3, #4
 8005008:	d117      	bne.n	800503a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00e      	beq.n	800503a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa91 	bl	8005544 <DMA_CheckFifoParam>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2240      	movs	r2, #64	; 0x40
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005036:	2301      	movs	r3, #1
 8005038:	e016      	b.n	8005068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa48 	bl	80054d8 <DMA_CalcBaseAndBitshift>
 8005048:	4603      	mov	r3, r0
 800504a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	223f      	movs	r2, #63	; 0x3f
 8005052:	409a      	lsls	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	f010803f 	.word	0xf010803f

08005074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_DMA_Start_IT+0x26>
 8005096:	2302      	movs	r3, #2
 8005098:	e040      	b.n	800511c <HAL_DMA_Start_IT+0xa8>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d12f      	bne.n	800510e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f9da 	bl	800547c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	223f      	movs	r2, #63	; 0x3f
 80050ce:	409a      	lsls	r2, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0216 	orr.w	r2, r2, #22
 80050e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0208 	orr.w	r2, r2, #8
 80050fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e005      	b.n	800511a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005116:	2302      	movs	r3, #2
 8005118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d004      	beq.n	8005142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e00c      	b.n	800515c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2205      	movs	r2, #5
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005174:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_DMA_IRQHandler+0x258>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a92      	ldr	r2, [pc, #584]	; (80053c4 <HAL_DMA_IRQHandler+0x25c>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0a9b      	lsrs	r3, r3, #10
 8005180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	2208      	movs	r2, #8
 8005194:	409a      	lsls	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01a      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0204 	bic.w	r2, r2, #4
 80051ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	2208      	movs	r2, #8
 80051c2:	409a      	lsls	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f043 0201 	orr.w	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	2201      	movs	r2, #1
 80051da:	409a      	lsls	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d012      	beq.n	800520a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f6:	2201      	movs	r2, #1
 80051f8:	409a      	lsls	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	2204      	movs	r2, #4
 8005210:	409a      	lsls	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	2204      	movs	r2, #4
 800522e:	409a      	lsls	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	f043 0204 	orr.w	r2, r3, #4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	2210      	movs	r2, #16
 8005246:	409a      	lsls	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4013      	ands	r3, r2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d043      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03c      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005262:	2210      	movs	r2, #16
 8005264:	409a      	lsls	r2, r3
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d018      	beq.n	80052aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d108      	bne.n	8005298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d024      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
 8005296:	e01f      	b.n	80052d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
 80052a8:	e016      	b.n	80052d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d107      	bne.n	80052c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0208 	bic.w	r2, r2, #8
 80052c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	2220      	movs	r2, #32
 80052de:	409a      	lsls	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 808e 	beq.w	8005406 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8086 	beq.w	8005406 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fe:	2220      	movs	r2, #32
 8005300:	409a      	lsls	r2, r3
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b05      	cmp	r3, #5
 8005310:	d136      	bne.n	8005380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0216 	bic.w	r2, r2, #22
 8005320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <HAL_DMA_IRQHandler+0x1da>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0208 	bic.w	r2, r2, #8
 8005350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	223f      	movs	r2, #63	; 0x3f
 8005358:	409a      	lsls	r2, r3
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005372:	2b00      	cmp	r3, #0
 8005374:	d07d      	beq.n	8005472 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
        }
        return;
 800537e:	e078      	b.n	8005472 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01c      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d108      	bne.n	80053ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d030      	beq.n	8005406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
 80053ac:	e02b      	b.n	8005406 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
 80053be:	e022      	b.n	8005406 <HAL_DMA_IRQHandler+0x29e>
 80053c0:	20000000 	.word	0x20000000
 80053c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0210 	bic.w	r2, r2, #16
 80053e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	2b00      	cmp	r3, #0
 800540c:	d032      	beq.n	8005474 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d022      	beq.n	8005460 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2205      	movs	r2, #5
 800541e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3301      	adds	r3, #1
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	429a      	cmp	r2, r3
 800543c:	d307      	bcc.n	800544e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f2      	bne.n	8005432 <HAL_DMA_IRQHandler+0x2ca>
 800544c:	e000      	b.n	8005450 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800544e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e000      	b.n	8005474 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005472:	bf00      	nop
    }
  }
}
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d108      	bne.n	80054bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054ba:	e007      	b.n	80054cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	3b10      	subs	r3, #16
 80054e8:	4a14      	ldr	r2, [pc, #80]	; (800553c <DMA_CalcBaseAndBitshift+0x64>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	091b      	lsrs	r3, r3, #4
 80054f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054f2:	4a13      	ldr	r2, [pc, #76]	; (8005540 <DMA_CalcBaseAndBitshift+0x68>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d909      	bls.n	800551a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	659a      	str	r2, [r3, #88]	; 0x58
 8005518:	e007      	b.n	800552a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	aaaaaaab 	.word	0xaaaaaaab
 8005540:	0800d5b8 	.word	0x0800d5b8

08005544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11f      	bne.n	800559e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d855      	bhi.n	8005610 <DMA_CheckFifoParam+0xcc>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <DMA_CheckFifoParam+0x28>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	0800557d 	.word	0x0800557d
 8005570:	0800558f 	.word	0x0800558f
 8005574:	0800557d 	.word	0x0800557d
 8005578:	08005611 	.word	0x08005611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d045      	beq.n	8005614 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800558c:	e042      	b.n	8005614 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005596:	d13f      	bne.n	8005618 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559c:	e03c      	b.n	8005618 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a6:	d121      	bne.n	80055ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d836      	bhi.n	800561c <DMA_CheckFifoParam+0xd8>
 80055ae:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <DMA_CheckFifoParam+0x70>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055cb 	.word	0x080055cb
 80055bc:	080055c5 	.word	0x080055c5
 80055c0:	080055dd 	.word	0x080055dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
      break;
 80055c8:	e02f      	b.n	800562a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d024      	beq.n	8005620 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055da:	e021      	b.n	8005620 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055e4:	d11e      	bne.n	8005624 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055ea:	e01b      	b.n	8005624 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d902      	bls.n	80055f8 <DMA_CheckFifoParam+0xb4>
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d003      	beq.n	80055fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055f6:	e018      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e015      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00e      	beq.n	8005628 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
      break;
 800560e:	e00b      	b.n	8005628 <DMA_CheckFifoParam+0xe4>
      break;
 8005610:	bf00      	nop
 8005612:	e00a      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      break;
 8005614:	bf00      	nop
 8005616:	e008      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      break;
 8005618:	bf00      	nop
 800561a:	e006      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      break;
 800561c:	bf00      	nop
 800561e:	e004      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      break;
 8005620:	bf00      	nop
 8005622:	e002      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      break;   
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <DMA_CheckFifoParam+0xe6>
      break;
 8005628:	bf00      	nop
    }
  } 
  
  return status; 
 800562a:	7bfb      	ldrb	r3, [r7, #15]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	e16b      	b.n	800592c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005654:	2201      	movs	r2, #1
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	429a      	cmp	r2, r3
 800566e:	f040 815a 	bne.w	8005926 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d00b      	beq.n	8005692 <HAL_GPIO_Init+0x5a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d007      	beq.n	8005692 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005686:	2b11      	cmp	r3, #17
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b12      	cmp	r3, #18
 8005690:	d130      	bne.n	80056f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	2203      	movs	r2, #3
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056c8:	2201      	movs	r2, #1
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 0201 	and.w	r2, r3, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	2203      	movs	r2, #3
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0xfc>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b12      	cmp	r3, #18
 8005732:	d123      	bne.n	800577c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	08da      	lsrs	r2, r3, #3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3208      	adds	r2, #8
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	220f      	movs	r2, #15
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	08da      	lsrs	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3208      	adds	r2, #8
 8005776:	69b9      	ldr	r1, [r7, #24]
 8005778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2203      	movs	r2, #3
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 0203 	and.w	r2, r3, #3
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80b4 	beq.w	8005926 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <HAL_GPIO_Init+0x308>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	4a5e      	ldr	r2, [pc, #376]	; (8005940 <HAL_GPIO_Init+0x308>)
 80057c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057cc:	6453      	str	r3, [r2, #68]	; 0x44
 80057ce:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <HAL_GPIO_Init+0x308>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057da:	4a5a      	ldr	r2, [pc, #360]	; (8005944 <HAL_GPIO_Init+0x30c>)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3302      	adds	r3, #2
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a51      	ldr	r2, [pc, #324]	; (8005948 <HAL_GPIO_Init+0x310>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02b      	beq.n	800585e <HAL_GPIO_Init+0x226>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a50      	ldr	r2, [pc, #320]	; (800594c <HAL_GPIO_Init+0x314>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d025      	beq.n	800585a <HAL_GPIO_Init+0x222>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a4f      	ldr	r2, [pc, #316]	; (8005950 <HAL_GPIO_Init+0x318>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01f      	beq.n	8005856 <HAL_GPIO_Init+0x21e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a4e      	ldr	r2, [pc, #312]	; (8005954 <HAL_GPIO_Init+0x31c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d019      	beq.n	8005852 <HAL_GPIO_Init+0x21a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a4d      	ldr	r2, [pc, #308]	; (8005958 <HAL_GPIO_Init+0x320>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_GPIO_Init+0x216>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4c      	ldr	r2, [pc, #304]	; (800595c <HAL_GPIO_Init+0x324>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00d      	beq.n	800584a <HAL_GPIO_Init+0x212>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4b      	ldr	r2, [pc, #300]	; (8005960 <HAL_GPIO_Init+0x328>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_Init+0x20e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a4a      	ldr	r2, [pc, #296]	; (8005964 <HAL_GPIO_Init+0x32c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_GPIO_Init+0x20a>
 800583e:	2307      	movs	r3, #7
 8005840:	e00e      	b.n	8005860 <HAL_GPIO_Init+0x228>
 8005842:	2308      	movs	r3, #8
 8005844:	e00c      	b.n	8005860 <HAL_GPIO_Init+0x228>
 8005846:	2306      	movs	r3, #6
 8005848:	e00a      	b.n	8005860 <HAL_GPIO_Init+0x228>
 800584a:	2305      	movs	r3, #5
 800584c:	e008      	b.n	8005860 <HAL_GPIO_Init+0x228>
 800584e:	2304      	movs	r3, #4
 8005850:	e006      	b.n	8005860 <HAL_GPIO_Init+0x228>
 8005852:	2303      	movs	r3, #3
 8005854:	e004      	b.n	8005860 <HAL_GPIO_Init+0x228>
 8005856:	2302      	movs	r3, #2
 8005858:	e002      	b.n	8005860 <HAL_GPIO_Init+0x228>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_GPIO_Init+0x228>
 800585e:	2300      	movs	r3, #0
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	f002 0203 	and.w	r2, r2, #3
 8005866:	0092      	lsls	r2, r2, #2
 8005868:	4093      	lsls	r3, r2
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005870:	4934      	ldr	r1, [pc, #208]	; (8005944 <HAL_GPIO_Init+0x30c>)
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	089b      	lsrs	r3, r3, #2
 8005876:	3302      	adds	r3, #2
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800587e:	4b3a      	ldr	r3, [pc, #232]	; (8005968 <HAL_GPIO_Init+0x330>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	43db      	mvns	r3, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4013      	ands	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058a2:	4a31      	ldr	r2, [pc, #196]	; (8005968 <HAL_GPIO_Init+0x330>)
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058a8:	4b2f      	ldr	r3, [pc, #188]	; (8005968 <HAL_GPIO_Init+0x330>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058cc:	4a26      	ldr	r2, [pc, #152]	; (8005968 <HAL_GPIO_Init+0x330>)
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058d2:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_GPIO_Init+0x330>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	43db      	mvns	r3, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4013      	ands	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058f6:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <HAL_GPIO_Init+0x330>)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_GPIO_Init+0x330>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005920:	4a11      	ldr	r2, [pc, #68]	; (8005968 <HAL_GPIO_Init+0x330>)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3301      	adds	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b0f      	cmp	r3, #15
 8005930:	f67f ae90 	bls.w	8005654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005934:	bf00      	nop
 8005936:	3724      	adds	r7, #36	; 0x24
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40023800 	.word	0x40023800
 8005944:	40013800 	.word	0x40013800
 8005948:	40020000 	.word	0x40020000
 800594c:	40020400 	.word	0x40020400
 8005950:	40020800 	.word	0x40020800
 8005954:	40020c00 	.word	0x40020c00
 8005958:	40021000 	.word	0x40021000
 800595c:	40021400 	.word	0x40021400
 8005960:	40021800 	.word	0x40021800
 8005964:	40021c00 	.word	0x40021c00
 8005968:	40013c00 	.word	0x40013c00

0800596c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	887b      	ldrh	r3, [r7, #2]
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e001      	b.n	800598e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
 80059a8:	4613      	mov	r3, r2
 80059aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059ac:	787b      	ldrb	r3, [r7, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059b8:	e003      	b.n	80059c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ba:	887b      	ldrh	r3, [r7, #2]
 80059bc:	041a      	lsls	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	619a      	str	r2, [r3, #24]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e11f      	b.n	8005c22 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fd fe72 	bl	80036e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a34:	f000 fd18 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 8005a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4a7b      	ldr	r2, [pc, #492]	; (8005c2c <HAL_I2C_Init+0x25c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d807      	bhi.n	8005a54 <HAL_I2C_Init+0x84>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4a7a      	ldr	r2, [pc, #488]	; (8005c30 <HAL_I2C_Init+0x260>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bf94      	ite	ls
 8005a4c:	2301      	movls	r3, #1
 8005a4e:	2300      	movhi	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	e006      	b.n	8005a62 <HAL_I2C_Init+0x92>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a77      	ldr	r2, [pc, #476]	; (8005c34 <HAL_I2C_Init+0x264>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bf94      	ite	ls
 8005a5c:	2301      	movls	r3, #1
 8005a5e:	2300      	movhi	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e0db      	b.n	8005c22 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4a72      	ldr	r2, [pc, #456]	; (8005c38 <HAL_I2C_Init+0x268>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	0c9b      	lsrs	r3, r3, #18
 8005a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a64      	ldr	r2, [pc, #400]	; (8005c2c <HAL_I2C_Init+0x25c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d802      	bhi.n	8005aa4 <HAL_I2C_Init+0xd4>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	e009      	b.n	8005ab8 <HAL_I2C_Init+0xe8>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	4a63      	ldr	r2, [pc, #396]	; (8005c3c <HAL_I2C_Init+0x26c>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	099b      	lsrs	r3, r3, #6
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005aca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4956      	ldr	r1, [pc, #344]	; (8005c2c <HAL_I2C_Init+0x25c>)
 8005ad4:	428b      	cmp	r3, r1
 8005ad6:	d80d      	bhi.n	8005af4 <HAL_I2C_Init+0x124>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1e59      	subs	r1, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	bf38      	it	cc
 8005af0:	2304      	movcc	r3, #4
 8005af2:	e04f      	b.n	8005b94 <HAL_I2C_Init+0x1c4>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d111      	bne.n	8005b20 <HAL_I2C_Init+0x150>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1e58      	subs	r0, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6859      	ldr	r1, [r3, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	440b      	add	r3, r1
 8005b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf0c      	ite	eq
 8005b18:	2301      	moveq	r3, #1
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	e012      	b.n	8005b46 <HAL_I2C_Init+0x176>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1e58      	subs	r0, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	0099      	lsls	r1, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Init+0x17e>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e022      	b.n	8005b94 <HAL_I2C_Init+0x1c4>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10e      	bne.n	8005b74 <HAL_I2C_Init+0x1a4>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1e58      	subs	r0, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	440b      	add	r3, r1
 8005b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b68:	3301      	adds	r3, #1
 8005b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b72:	e00f      	b.n	8005b94 <HAL_I2C_Init+0x1c4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1e58      	subs	r0, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6859      	ldr	r1, [r3, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	0099      	lsls	r1, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6911      	ldr	r1, [r2, #16]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68d2      	ldr	r2, [r2, #12]
 8005bce:	4311      	orrs	r1, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	000186a0 	.word	0x000186a0
 8005c30:	001e847f 	.word	0x001e847f
 8005c34:	003d08ff 	.word	0x003d08ff
 8005c38:	431bde83 	.word	0x431bde83
 8005c3c:	10624dd3 	.word	0x10624dd3

08005c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e25b      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d075      	beq.n	8005d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c5e:	4ba3      	ldr	r3, [pc, #652]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d00c      	beq.n	8005c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c6a:	4ba0      	ldr	r3, [pc, #640]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d112      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c76:	4b9d      	ldr	r3, [pc, #628]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c82:	d10b      	bne.n	8005c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c84:	4b99      	ldr	r3, [pc, #612]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d05b      	beq.n	8005d48 <HAL_RCC_OscConfig+0x108>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d157      	bne.n	8005d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e236      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca4:	d106      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x74>
 8005ca6:	4b91      	ldr	r3, [pc, #580]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a90      	ldr	r2, [pc, #576]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e01d      	b.n	8005cf0 <HAL_RCC_OscConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x98>
 8005cbe:	4b8b      	ldr	r3, [pc, #556]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a8a      	ldr	r2, [pc, #552]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b88      	ldr	r3, [pc, #544]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a87      	ldr	r2, [pc, #540]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e00b      	b.n	8005cf0 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	4b84      	ldr	r3, [pc, #528]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a83      	ldr	r2, [pc, #524]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	4b81      	ldr	r3, [pc, #516]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a80      	ldr	r2, [pc, #512]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d013      	beq.n	8005d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf8:	f7fe fbda 	bl	80044b0 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d00:	f7fe fbd6 	bl	80044b0 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	; 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e1fb      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	4b76      	ldr	r3, [pc, #472]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0xc0>
 8005d1e:	e014      	b.n	8005d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d20:	f7fe fbc6 	bl	80044b0 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d28:	f7fe fbc2 	bl	80044b0 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b64      	cmp	r3, #100	; 0x64
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1e7      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3a:	4b6c      	ldr	r3, [pc, #432]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0xe8>
 8005d46:	e000      	b.n	8005d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d063      	beq.n	8005e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d56:	4b65      	ldr	r3, [pc, #404]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d62:	4b62      	ldr	r3, [pc, #392]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d11c      	bne.n	8005da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d6e:	4b5f      	ldr	r3, [pc, #380]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d116      	bne.n	8005da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7a:	4b5c      	ldr	r3, [pc, #368]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCC_OscConfig+0x152>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e1bb      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d92:	4b56      	ldr	r3, [pc, #344]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4952      	ldr	r1, [pc, #328]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da6:	e03a      	b.n	8005e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d020      	beq.n	8005df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db0:	4b4f      	ldr	r3, [pc, #316]	; (8005ef0 <HAL_RCC_OscConfig+0x2b0>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7fe fb7b 	bl	80044b0 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dbe:	f7fe fb77 	bl	80044b0 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e19c      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd0:	4b46      	ldr	r3, [pc, #280]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0f0      	beq.n	8005dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ddc:	4b43      	ldr	r3, [pc, #268]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4940      	ldr	r1, [pc, #256]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	600b      	str	r3, [r1, #0]
 8005df0:	e015      	b.n	8005e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005df2:	4b3f      	ldr	r3, [pc, #252]	; (8005ef0 <HAL_RCC_OscConfig+0x2b0>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fe fb5a 	bl	80044b0 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e00:	f7fe fb56 	bl	80044b0 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e17b      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e12:	4b36      	ldr	r3, [pc, #216]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d030      	beq.n	8005e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e32:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <HAL_RCC_OscConfig+0x2b4>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fe fb3a 	bl	80044b0 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e40:	f7fe fb36 	bl	80044b0 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e15b      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x200>
 8005e5e:	e015      	b.n	8005e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e60:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <HAL_RCC_OscConfig+0x2b4>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e66:	f7fe fb23 	bl	80044b0 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6e:	f7fe fb1f 	bl	80044b0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e144      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f0      	bne.n	8005e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80a0 	beq.w	8005fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10f      	bne.n	8005eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
 8005eae:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eba:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_OscConfig+0x2b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d121      	bne.n	8005f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ed6:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <HAL_RCC_OscConfig+0x2b8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <HAL_RCC_OscConfig+0x2b8>)
 8005edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee2:	f7fe fae5 	bl	80044b0 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee8:	e011      	b.n	8005f0e <HAL_RCC_OscConfig+0x2ce>
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	42470000 	.word	0x42470000
 8005ef4:	42470e80 	.word	0x42470e80
 8005ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005efc:	f7fe fad8 	bl	80044b0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0fd      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0e:	4b81      	ldr	r3, [pc, #516]	; (8006114 <HAL_RCC_OscConfig+0x4d4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d106      	bne.n	8005f30 <HAL_RCC_OscConfig+0x2f0>
 8005f22:	4b7d      	ldr	r3, [pc, #500]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	4a7c      	ldr	r2, [pc, #496]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2e:	e01c      	b.n	8005f6a <HAL_RCC_OscConfig+0x32a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d10c      	bne.n	8005f52 <HAL_RCC_OscConfig+0x312>
 8005f38:	4b77      	ldr	r3, [pc, #476]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a76      	ldr	r2, [pc, #472]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f3e:	f043 0304 	orr.w	r3, r3, #4
 8005f42:	6713      	str	r3, [r2, #112]	; 0x70
 8005f44:	4b74      	ldr	r3, [pc, #464]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	4a73      	ldr	r2, [pc, #460]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f50:	e00b      	b.n	8005f6a <HAL_RCC_OscConfig+0x32a>
 8005f52:	4b71      	ldr	r3, [pc, #452]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a70      	ldr	r2, [pc, #448]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5e:	4b6e      	ldr	r3, [pc, #440]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	4a6d      	ldr	r2, [pc, #436]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d015      	beq.n	8005f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f72:	f7fe fa9d 	bl	80044b0 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f78:	e00a      	b.n	8005f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f7a:	f7fe fa99 	bl	80044b0 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e0bc      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f90:	4b61      	ldr	r3, [pc, #388]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0ee      	beq.n	8005f7a <HAL_RCC_OscConfig+0x33a>
 8005f9c:	e014      	b.n	8005fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9e:	f7fe fa87 	bl	80044b0 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fe fa83 	bl	80044b0 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e0a6      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fbc:	4b56      	ldr	r3, [pc, #344]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ee      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fce:	4b52      	ldr	r3, [pc, #328]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 8092 	beq.w	8006108 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 030c 	and.w	r3, r3, #12
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d05c      	beq.n	80060aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d141      	bne.n	800607c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff8:	4b48      	ldr	r3, [pc, #288]	; (800611c <HAL_RCC_OscConfig+0x4dc>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffe:	f7fe fa57 	bl	80044b0 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006004:	e008      	b.n	8006018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006006:	f7fe fa53 	bl	80044b0 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e078      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006018:	4b3f      	ldr	r3, [pc, #252]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f0      	bne.n	8006006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	019b      	lsls	r3, r3, #6
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	3b01      	subs	r3, #1
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	061b      	lsls	r3, r3, #24
 8006048:	4933      	ldr	r1, [pc, #204]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 800604a:	4313      	orrs	r3, r2
 800604c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800604e:	4b33      	ldr	r3, [pc, #204]	; (800611c <HAL_RCC_OscConfig+0x4dc>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7fe fa2c 	bl	80044b0 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605c:	f7fe fa28 	bl	80044b0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e04d      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800606e:	4b2a      	ldr	r3, [pc, #168]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x41c>
 800607a:	e045      	b.n	8006108 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <HAL_RCC_OscConfig+0x4dc>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006082:	f7fe fa15 	bl	80044b0 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608a:	f7fe fa11 	bl	80044b0 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e036      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f0      	bne.n	800608a <HAL_RCC_OscConfig+0x44a>
 80060a8:	e02e      	b.n	8006108 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e029      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <HAL_RCC_OscConfig+0x4d8>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d11c      	bne.n	8006104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d115      	bne.n	8006104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060de:	4013      	ands	r3, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d10d      	bne.n	8006104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d106      	bne.n	8006104 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40007000 	.word	0x40007000
 8006118:	40023800 	.word	0x40023800
 800611c:	42470060 	.word	0x42470060

08006120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0cc      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006134:	4b68      	ldr	r3, [pc, #416]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	429a      	cmp	r2, r3
 8006140:	d90c      	bls.n	800615c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006142:	4b65      	ldr	r3, [pc, #404]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	4b63      	ldr	r3, [pc, #396]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0b8      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006174:	4b59      	ldr	r3, [pc, #356]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a58      	ldr	r2, [pc, #352]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800617e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800618c:	4b53      	ldr	r3, [pc, #332]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a52      	ldr	r2, [pc, #328]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006198:	4b50      	ldr	r3, [pc, #320]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	494d      	ldr	r1, [pc, #308]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d044      	beq.n	8006240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d119      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e07f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d003      	beq.n	80061de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e06f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ee:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e067      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061fe:	4b37      	ldr	r3, [pc, #220]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f023 0203 	bic.w	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4934      	ldr	r1, [pc, #208]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	4313      	orrs	r3, r2
 800620e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006210:	f7fe f94e 	bl	80044b0 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006216:	e00a      	b.n	800622e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006218:	f7fe f94a 	bl	80044b0 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04f      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 020c 	and.w	r2, r3, #12
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	429a      	cmp	r2, r3
 800623e:	d1eb      	bne.n	8006218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006240:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d20c      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624e:	4b22      	ldr	r3, [pc, #136]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e032      	b.n	80062ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006274:	4b19      	ldr	r3, [pc, #100]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4916      	ldr	r1, [pc, #88]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	490e      	ldr	r1, [pc, #56]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062a6:	f000 f821 	bl	80062ec <HAL_RCC_GetSysClockFreq>
 80062aa:	4601      	mov	r1, r0
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	5cd3      	ldrb	r3, [r2, r3]
 80062ba:	fa21 f303 	lsr.w	r3, r1, r3
 80062be:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe f8ae 	bl	8004428 <HAL_InitTick>

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40023c00 	.word	0x40023c00
 80062dc:	40023800 	.word	0x40023800
 80062e0:	0800d5a0 	.word	0x0800d5a0
 80062e4:	20000000 	.word	0x20000000
 80062e8:	20000004 	.word	0x20000004

080062ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	607b      	str	r3, [r7, #4]
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	2300      	movs	r3, #0
 80062fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006302:	4b50      	ldr	r3, [pc, #320]	; (8006444 <HAL_RCC_GetSysClockFreq+0x158>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b04      	cmp	r3, #4
 800630c:	d007      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x32>
 800630e:	2b08      	cmp	r3, #8
 8006310:	d008      	beq.n	8006324 <HAL_RCC_GetSysClockFreq+0x38>
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 808d 	bne.w	8006432 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006318:	4b4b      	ldr	r3, [pc, #300]	; (8006448 <HAL_RCC_GetSysClockFreq+0x15c>)
 800631a:	60bb      	str	r3, [r7, #8]
       break;
 800631c:	e08c      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800631e:	4b4b      	ldr	r3, [pc, #300]	; (800644c <HAL_RCC_GetSysClockFreq+0x160>)
 8006320:	60bb      	str	r3, [r7, #8]
      break;
 8006322:	e089      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006324:	4b47      	ldr	r3, [pc, #284]	; (8006444 <HAL_RCC_GetSysClockFreq+0x158>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800632c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800632e:	4b45      	ldr	r3, [pc, #276]	; (8006444 <HAL_RCC_GetSysClockFreq+0x158>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d023      	beq.n	8006382 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800633a:	4b42      	ldr	r3, [pc, #264]	; (8006444 <HAL_RCC_GetSysClockFreq+0x158>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	099b      	lsrs	r3, r3, #6
 8006340:	f04f 0400 	mov.w	r4, #0
 8006344:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	ea03 0501 	and.w	r5, r3, r1
 8006350:	ea04 0602 	and.w	r6, r4, r2
 8006354:	4a3d      	ldr	r2, [pc, #244]	; (800644c <HAL_RCC_GetSysClockFreq+0x160>)
 8006356:	fb02 f106 	mul.w	r1, r2, r6
 800635a:	2200      	movs	r2, #0
 800635c:	fb02 f205 	mul.w	r2, r2, r5
 8006360:	440a      	add	r2, r1
 8006362:	493a      	ldr	r1, [pc, #232]	; (800644c <HAL_RCC_GetSysClockFreq+0x160>)
 8006364:	fba5 0101 	umull	r0, r1, r5, r1
 8006368:	1853      	adds	r3, r2, r1
 800636a:	4619      	mov	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f04f 0400 	mov.w	r4, #0
 8006372:	461a      	mov	r2, r3
 8006374:	4623      	mov	r3, r4
 8006376:	f7fa fc87 	bl	8000c88 <__aeabi_uldivmod>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e049      	b.n	8006416 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006382:	4b30      	ldr	r3, [pc, #192]	; (8006444 <HAL_RCC_GetSysClockFreq+0x158>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	099b      	lsrs	r3, r3, #6
 8006388:	f04f 0400 	mov.w	r4, #0
 800638c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	ea03 0501 	and.w	r5, r3, r1
 8006398:	ea04 0602 	and.w	r6, r4, r2
 800639c:	4629      	mov	r1, r5
 800639e:	4632      	mov	r2, r6
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	f04f 0400 	mov.w	r4, #0
 80063a8:	0154      	lsls	r4, r2, #5
 80063aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063ae:	014b      	lsls	r3, r1, #5
 80063b0:	4619      	mov	r1, r3
 80063b2:	4622      	mov	r2, r4
 80063b4:	1b49      	subs	r1, r1, r5
 80063b6:	eb62 0206 	sbc.w	r2, r2, r6
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	f04f 0400 	mov.w	r4, #0
 80063c2:	0194      	lsls	r4, r2, #6
 80063c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063c8:	018b      	lsls	r3, r1, #6
 80063ca:	1a5b      	subs	r3, r3, r1
 80063cc:	eb64 0402 	sbc.w	r4, r4, r2
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	00e2      	lsls	r2, r4, #3
 80063da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063de:	00d9      	lsls	r1, r3, #3
 80063e0:	460b      	mov	r3, r1
 80063e2:	4614      	mov	r4, r2
 80063e4:	195b      	adds	r3, r3, r5
 80063e6:	eb44 0406 	adc.w	r4, r4, r6
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	02a2      	lsls	r2, r4, #10
 80063f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063f8:	0299      	lsls	r1, r3, #10
 80063fa:	460b      	mov	r3, r1
 80063fc:	4614      	mov	r4, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	4621      	mov	r1, r4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f04f 0400 	mov.w	r4, #0
 8006408:	461a      	mov	r2, r3
 800640a:	4623      	mov	r3, r4
 800640c:	f7fa fc3c 	bl	8000c88 <__aeabi_uldivmod>
 8006410:	4603      	mov	r3, r0
 8006412:	460c      	mov	r4, r1
 8006414:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_GetSysClockFreq+0x158>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	3301      	adds	r3, #1
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	60bb      	str	r3, [r7, #8]
      break;
 8006430:	e002      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006434:	60bb      	str	r3, [r7, #8]
      break;
 8006436:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006438:	68bb      	ldr	r3, [r7, #8]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	00f42400 	.word	0x00f42400
 800644c:	017d7840 	.word	0x017d7840

08006450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <HAL_RCC_GetHCLKFreq+0x14>)
 8006456:	681b      	ldr	r3, [r3, #0]
}
 8006458:	4618      	mov	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000000 	.word	0x20000000

08006468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800646c:	f7ff fff0 	bl	8006450 <HAL_RCC_GetHCLKFreq>
 8006470:	4601      	mov	r1, r0
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	0a9b      	lsrs	r3, r3, #10
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4a03      	ldr	r2, [pc, #12]	; (800648c <HAL_RCC_GetPCLK1Freq+0x24>)
 800647e:	5cd3      	ldrb	r3, [r2, r3]
 8006480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40023800 	.word	0x40023800
 800648c:	0800d5b0 	.word	0x0800d5b0

08006490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006494:	f7ff ffdc 	bl	8006450 <HAL_RCC_GetHCLKFreq>
 8006498:	4601      	mov	r1, r0
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	0b5b      	lsrs	r3, r3, #13
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4a03      	ldr	r2, [pc, #12]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064a6:	5cd3      	ldrb	r3, [r2, r3]
 80064a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40023800 	.word	0x40023800
 80064b4:	0800d5b0 	.word	0x0800d5b0

080064b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d035      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064e0:	4b62      	ldr	r3, [pc, #392]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064e6:	f7fd ffe3 	bl	80044b0 <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ee:	f7fd ffdf 	bl	80044b0 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e0b0      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006500:	4b5b      	ldr	r3, [pc, #364]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f0      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	019a      	lsls	r2, r3, #6
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	071b      	lsls	r3, r3, #28
 8006518:	4955      	ldr	r1, [pc, #340]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006520:	4b52      	ldr	r3, [pc, #328]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006526:	f7fd ffc3 	bl	80044b0 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800652e:	f7fd ffbf 	bl	80044b0 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e090      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006540:	4b4b      	ldr	r3, [pc, #300]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8083 	beq.w	8006660 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	4b44      	ldr	r3, [pc, #272]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	4a43      	ldr	r2, [pc, #268]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006568:	6413      	str	r3, [r2, #64]	; 0x40
 800656a:	4b41      	ldr	r3, [pc, #260]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006576:	4b3f      	ldr	r3, [pc, #252]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a3e      	ldr	r2, [pc, #248]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800657c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006580:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006582:	f7fd ff95 	bl	80044b0 <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006588:	e008      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800658a:	f7fd ff91 	bl	80044b0 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e062      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800659c:	4b35      	ldr	r3, [pc, #212]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0f0      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065a8:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02f      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d028      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065c6:	4b2a      	ldr	r3, [pc, #168]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065d0:	4b29      	ldr	r3, [pc, #164]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065d2:	2201      	movs	r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065d6:	4b28      	ldr	r3, [pc, #160]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065dc:	4a24      	ldr	r2, [pc, #144]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065e2:	4b23      	ldr	r3, [pc, #140]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d114      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065ee:	f7fd ff5f 	bl	80044b0 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f4:	e00a      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f6:	f7fd ff5b 	bl	80044b0 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e02a      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660c:	4b18      	ldr	r3, [pc, #96]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ee      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006624:	d10d      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663a:	490d      	ldr	r1, [pc, #52]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800663c:	4313      	orrs	r3, r2
 800663e:	608b      	str	r3, [r1, #8]
 8006640:	e005      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006648:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800664c:	6093      	str	r3, [r2, #8]
 800664e:	4b08      	ldr	r3, [pc, #32]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006650:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665a:	4905      	ldr	r1, [pc, #20]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800665c:	4313      	orrs	r3, r2
 800665e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	42470068 	.word	0x42470068
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
 8006678:	42470e40 	.word	0x42470e40

0800667c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e083      	b.n	8006796 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	7f5b      	ldrb	r3, [r3, #29]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fd f866 	bl	8003770 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	22ca      	movs	r2, #202	; 0xca
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2253      	movs	r2, #83	; 0x53
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f897 	bl	80067ee <RTC_EnterInitMode>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	22ff      	movs	r2, #255	; 0xff
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2204      	movs	r2, #4
 80066d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e05e      	b.n	8006796 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6899      	ldr	r1, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68d2      	ldr	r2, [r2, #12]
 8006712:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6919      	ldr	r1, [r3, #16]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	041a      	lsls	r2, r3, #16
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006736:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10e      	bne.n	8006764 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f829 	bl	800679e <HAL_RTC_WaitForSynchro>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d008      	beq.n	8006764 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	22ff      	movs	r2, #255	; 0xff
 8006758:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e018      	b.n	8006796 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006772:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	22ff      	movs	r2, #255	; 0xff
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006794:	2300      	movs	r3, #0
  }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ba:	f7fd fe79 	bl	80044b0 <HAL_GetTick>
 80067be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067c0:	e009      	b.n	80067d6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067c2:	f7fd fe75 	bl	80044b0 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d0:	d901      	bls.n	80067d6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e007      	b.n	80067e6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ee      	beq.n	80067c2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d119      	bne.n	800683c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f04f 32ff 	mov.w	r2, #4294967295
 8006810:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006812:	f7fd fe4d 	bl	80044b0 <HAL_GetTick>
 8006816:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006818:	e009      	b.n	800682e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800681a:	f7fd fe49 	bl	80044b0 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006828:	d901      	bls.n	800682e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e007      	b.n	800683e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0ee      	beq.n	800681a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e056      	b.n	8006906 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fc ff92 	bl	800379c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	ea42 0103 	orr.w	r1, r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	f003 0104 	and.w	r1, r3, #4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b088      	sub	sp, #32
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_SPI_Transmit+0x22>
 800692c:	2302      	movs	r3, #2
 800692e:	e11e      	b.n	8006b6e <HAL_SPI_Transmit+0x260>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006938:	f7fd fdba 	bl	80044b0 <HAL_GetTick>
 800693c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d002      	beq.n	8006954 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800694e:	2302      	movs	r3, #2
 8006950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006952:	e103      	b.n	8006b5c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_SPI_Transmit+0x52>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006964:	e0fa      	b.n	8006b5c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2203      	movs	r2, #3
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ac:	d107      	bne.n	80069be <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b40      	cmp	r3, #64	; 0x40
 80069ca:	d007      	beq.n	80069dc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e4:	d14b      	bne.n	8006a7e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_SPI_Transmit+0xe6>
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d13e      	bne.n	8006a72 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	881a      	ldrh	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	1c9a      	adds	r2, r3, #2
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a18:	e02b      	b.n	8006a72 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d112      	bne.n	8006a4e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	1c9a      	adds	r2, r3, #2
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a4c:	e011      	b.n	8006a72 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4e:	f7fd fd2f 	bl	80044b0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d803      	bhi.n	8006a66 <HAL_SPI_Transmit+0x158>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d102      	bne.n	8006a6c <HAL_SPI_Transmit+0x15e>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a70:	e074      	b.n	8006b5c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1ce      	bne.n	8006a1a <HAL_SPI_Transmit+0x10c>
 8006a7c:	e04c      	b.n	8006b18 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_SPI_Transmit+0x17e>
 8006a86:	8afb      	ldrh	r3, [r7, #22]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d140      	bne.n	8006b0e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	7812      	ldrb	r2, [r2, #0]
 8006a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ab2:	e02c      	b.n	8006b0e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d113      	bne.n	8006aea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ae8:	e011      	b.n	8006b0e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aea:	f7fd fce1 	bl	80044b0 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d803      	bhi.n	8006b02 <HAL_SPI_Transmit+0x1f4>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_Transmit+0x1fa>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b0c:	e026      	b.n	8006b5c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1cd      	bne.n	8006ab4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fba5 	bl	800726c <SPI_EndRxTxTransaction>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e000      	b.n	8006b5c <HAL_SPI_Transmit+0x24e>
  }

error:
 8006b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b088      	sub	sp, #32
 8006b7a:	af02      	add	r7, sp, #8
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b92:	d112      	bne.n	8006bba <HAL_SPI_Receive+0x44>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10e      	bne.n	8006bba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ba4:	88fa      	ldrh	r2, [r7, #6]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f8e9 	bl	8006d88 <HAL_SPI_TransmitReceive>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	e0e2      	b.n	8006d80 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_SPI_Receive+0x52>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e0db      	b.n	8006d80 <HAL_SPI_Receive+0x20a>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bd0:	f7fd fc6e 	bl	80044b0 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
 8006be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006be6:	e0c2      	b.n	8006d6e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_SPI_Receive+0x7e>
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bf8:	e0b9      	b.n	8006d6e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	88fa      	ldrh	r2, [r7, #6]
 8006c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c40:	d107      	bne.n	8006c52 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d007      	beq.n	8006c70 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d162      	bne.n	8006d3e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c78:	e02e      	b.n	8006cd8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d115      	bne.n	8006cb4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f103 020c 	add.w	r2, r3, #12
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	7812      	ldrb	r2, [r2, #0]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cb2:	e011      	b.n	8006cd8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb4:	f7fd fbfc 	bl	80044b0 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d803      	bhi.n	8006ccc <HAL_SPI_Receive+0x156>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Receive+0x15c>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006cd6:	e04a      	b.n	8006d6e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cb      	bne.n	8006c7a <HAL_SPI_Receive+0x104>
 8006ce2:	e031      	b.n	8006d48 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d113      	bne.n	8006d1a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d18:	e011      	b.n	8006d3e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d1a:	f7fd fbc9 	bl	80044b0 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d803      	bhi.n	8006d32 <HAL_SPI_Receive+0x1bc>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d102      	bne.n	8006d38 <HAL_SPI_Receive+0x1c2>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d3c:	e017      	b.n	8006d6e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1cd      	bne.n	8006ce4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fa27 	bl	80071a0 <SPI_EndRxTransaction>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
 8006d6a:	e000      	b.n	8006d6e <HAL_SPI_Receive+0x1f8>
  }

error :
 8006d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08c      	sub	sp, #48	; 0x30
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d96:	2301      	movs	r3, #1
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x26>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e18a      	b.n	80070c4 <HAL_SPI_TransmitReceive+0x33c>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006db6:	f7fd fb7b 	bl	80044b0 <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006dcc:	887b      	ldrh	r3, [r7, #2]
 8006dce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d00f      	beq.n	8006df8 <HAL_SPI_TransmitReceive+0x70>
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dde:	d107      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d103      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x68>
 8006de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d003      	beq.n	8006df8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006df6:	e15b      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_SPI_TransmitReceive+0x82>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <HAL_SPI_TransmitReceive+0x82>
 8006e04:	887b      	ldrh	r3, [r7, #2]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e10:	e14e      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d003      	beq.n	8006e26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2205      	movs	r2, #5
 8006e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	887a      	ldrh	r2, [r7, #2]
 8006e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	887a      	ldrh	r2, [r7, #2]
 8006e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	887a      	ldrh	r2, [r7, #2]
 8006e48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	887a      	ldrh	r2, [r7, #2]
 8006e4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d007      	beq.n	8006e7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e82:	d178      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <HAL_SPI_TransmitReceive+0x10a>
 8006e8c:	8b7b      	ldrh	r3, [r7, #26]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d166      	bne.n	8006f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	881a      	ldrh	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	1c9a      	adds	r2, r3, #2
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eb6:	e053      	b.n	8006f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d11b      	bne.n	8006efe <HAL_SPI_TransmitReceive+0x176>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d016      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x176>
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d113      	bne.n	8006efe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	881a      	ldrh	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	1c9a      	adds	r2, r3, #2
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d119      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x1b8>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d014      	beq.n	8006f40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	b292      	uxth	r2, r2
 8006f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	1c9a      	adds	r2, r3, #2
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f40:	f7fd fab6 	bl	80044b0 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d807      	bhi.n	8006f60 <HAL_SPI_TransmitReceive+0x1d8>
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d003      	beq.n	8006f60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f5e:	e0a7      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1a6      	bne.n	8006eb8 <HAL_SPI_TransmitReceive+0x130>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1a1      	bne.n	8006eb8 <HAL_SPI_TransmitReceive+0x130>
 8006f74:	e07c      	b.n	8007070 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SPI_TransmitReceive+0x1fc>
 8006f7e:	8b7b      	ldrh	r3, [r7, #26]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d16b      	bne.n	800705c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006faa:	e057      	b.n	800705c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d11c      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x26c>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d017      	beq.n	8006ff4 <HAL_SPI_TransmitReceive+0x26c>
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d114      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d119      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x2ae>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d014      	beq.n	8007036 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007032:	2301      	movs	r3, #1
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007036:	f7fd fa3b 	bl	80044b0 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007042:	429a      	cmp	r2, r3
 8007044:	d803      	bhi.n	800704e <HAL_SPI_TransmitReceive+0x2c6>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d102      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x2cc>
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800705a:	e029      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1a2      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x224>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d19d      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 f8f9 	bl	800726c <SPI_EndRxTxTransaction>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800708c:	e010      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	e000      	b.n	80070b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80070ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3730      	adds	r7, #48	; 0x30
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070dc:	e04c      	b.n	8007178 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d048      	beq.n	8007178 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80070e6:	f7fd f9e3 	bl	80044b0 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d902      	bls.n	80070fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d13d      	bne.n	8007178 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800710a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007114:	d111      	bne.n	800713a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800711e:	d004      	beq.n	800712a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007128:	d107      	bne.n	800713a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007138:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007142:	d10f      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007162:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e00f      	b.n	8007198 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	4013      	ands	r3, r2
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	bf0c      	ite	eq
 8007188:	2301      	moveq	r3, #1
 800718a:	2300      	movne	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	429a      	cmp	r2, r3
 8007194:	d1a3      	bne.n	80070de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071b4:	d111      	bne.n	80071da <SPI_EndRxTransaction+0x3a>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071be:	d004      	beq.n	80071ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c8:	d107      	bne.n	80071da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071e2:	d12a      	bne.n	800723a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ec:	d012      	beq.n	8007214 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff ff67 	bl	80070cc <SPI_WaitFlagStateUntilTimeout>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d02d      	beq.n	8007260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007208:	f043 0220 	orr.w	r2, r3, #32
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e026      	b.n	8007262 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	2101      	movs	r1, #1
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff ff54 	bl	80070cc <SPI_WaitFlagStateUntilTimeout>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01a      	beq.n	8007260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	f043 0220 	orr.w	r2, r3, #32
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e013      	b.n	8007262 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2200      	movs	r2, #0
 8007242:	2101      	movs	r1, #1
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7ff ff41 	bl	80070cc <SPI_WaitFlagStateUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	f043 0220 	orr.w	r2, r3, #32
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e000      	b.n	8007262 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af02      	add	r7, sp, #8
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007278:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <SPI_EndRxTxTransaction+0x7c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <SPI_EndRxTxTransaction+0x80>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	0d5b      	lsrs	r3, r3, #21
 8007284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007296:	d112      	bne.n	80072be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff ff12 	bl	80070cc <SPI_WaitFlagStateUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d016      	beq.n	80072dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e00f      	b.n	80072de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d4:	2b80      	cmp	r3, #128	; 0x80
 80072d6:	d0f2      	beq.n	80072be <SPI_EndRxTxTransaction+0x52>
 80072d8:	e000      	b.n	80072dc <SPI_EndRxTxTransaction+0x70>
        break;
 80072da:	bf00      	nop
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000000 	.word	0x20000000
 80072ec:	165e9f81 	.word	0x165e9f81

080072f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e01d      	b.n	800733e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fc fbc0 	bl	8003a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f000 fb56 	bl	80079e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b085      	sub	sp, #20
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b06      	cmp	r3, #6
 800736e:	d007      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0201 	orr.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e01d      	b.n	80073dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fc fa39 	bl	800382c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f000 fb07 	bl	80079e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2201      	movs	r2, #1
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fd42 	bl	8007e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a15      	ldr	r2, [pc, #84]	; (8007458 <HAL_TIM_PWM_Start+0x74>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_TIM_PWM_Start+0x2c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a14      	ldr	r2, [pc, #80]	; (800745c <HAL_TIM_PWM_Start+0x78>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d101      	bne.n	8007414 <HAL_TIM_PWM_Start+0x30>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_TIM_PWM_Start+0x32>
 8007414:	2300      	movs	r3, #0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b06      	cmp	r3, #6
 800743a:	d007      	beq.n	800744c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40010000 	.word	0x40010000
 800745c:	40010400 	.word	0x40010400

08007460 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e083      	b.n	800757c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fc fa57 	bl	800393c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6812      	ldr	r2, [r2, #0]
 80074a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a4:	f023 0307 	bic.w	r3, r3, #7
 80074a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f000 fa93 	bl	80079e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	4313      	orrs	r3, r2
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007500:	f023 030c 	bic.w	r3, r3, #12
 8007504:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800750c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	4313      	orrs	r3, r2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	011a      	lsls	r2, r3, #4
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	031b      	lsls	r3, r3, #12
 8007530:	4313      	orrs	r3, r2
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800753e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007546:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	4313      	orrs	r3, r2
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_TIM_Encoder_Start+0x16>
 8007594:	2b04      	cmp	r3, #4
 8007596:	d008      	beq.n	80075aa <HAL_TIM_Encoder_Start+0x26>
 8007598:	e00f      	b.n	80075ba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2201      	movs	r2, #1
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fc6c 	bl	8007e80 <TIM_CCxChannelCmd>
      break;
 80075a8:	e016      	b.n	80075d8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2201      	movs	r2, #1
 80075b0:	2104      	movs	r1, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fc64 	bl	8007e80 <TIM_CCxChannelCmd>
      break;
 80075b8:	e00e      	b.n	80075d8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2201      	movs	r2, #1
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fc5c 	bl	8007e80 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	2104      	movs	r1, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fc55 	bl	8007e80 <TIM_CCxChannelCmd>
      break;
 80075d6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b02      	cmp	r3, #2
 8007606:	d122      	bne.n	800764e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b02      	cmp	r3, #2
 8007614:	d11b      	bne.n	800764e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f06f 0202 	mvn.w	r2, #2
 800761e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f9b5 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 800763a:	e005      	b.n	8007648 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9a7 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9b8 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b04      	cmp	r3, #4
 800765a:	d122      	bne.n	80076a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b04      	cmp	r3, #4
 8007668:	d11b      	bne.n	80076a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f06f 0204 	mvn.w	r2, #4
 8007672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f98b 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 800768e:	e005      	b.n	800769c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f97d 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f98e 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d122      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d11b      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f06f 0208 	mvn.w	r2, #8
 80076c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2204      	movs	r2, #4
 80076cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f003 0303 	and.w	r3, r3, #3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f961 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 80076e2:	e005      	b.n	80076f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f953 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f964 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b10      	cmp	r3, #16
 8007702:	d122      	bne.n	800774a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b10      	cmp	r3, #16
 8007710:	d11b      	bne.n	800774a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f06f 0210 	mvn.w	r2, #16
 800771a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2208      	movs	r2, #8
 8007720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f937 	bl	80079a4 <HAL_TIM_IC_CaptureCallback>
 8007736:	e005      	b.n	8007744 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f929 	bl	8007990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f93a 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d10e      	bne.n	8007776 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d107      	bne.n	8007776 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f06f 0201 	mvn.w	r2, #1
 800776e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fb f987 	bl	8002a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007780:	2b80      	cmp	r3, #128	; 0x80
 8007782:	d10e      	bne.n	80077a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778e:	2b80      	cmp	r3, #128	; 0x80
 8007790:	d107      	bne.n	80077a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800779a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fc6d 	bl	800807c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ac:	2b40      	cmp	r3, #64	; 0x40
 80077ae:	d10e      	bne.n	80077ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d107      	bne.n	80077ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f8ff 	bl	80079cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d10e      	bne.n	80077fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b20      	cmp	r3, #32
 80077e8:	d107      	bne.n	80077fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f06f 0220 	mvn.w	r2, #32
 80077f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc37 	bl	8008068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800781a:	2302      	movs	r3, #2
 800781c:	e0b4      	b.n	8007988 <HAL_TIM_PWM_ConfigChannel+0x184>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2202      	movs	r2, #2
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b0c      	cmp	r3, #12
 8007832:	f200 809f 	bhi.w	8007974 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007871 	.word	0x08007871
 8007840:	08007975 	.word	0x08007975
 8007844:	08007975 	.word	0x08007975
 8007848:	08007975 	.word	0x08007975
 800784c:	080078b1 	.word	0x080078b1
 8007850:	08007975 	.word	0x08007975
 8007854:	08007975 	.word	0x08007975
 8007858:	08007975 	.word	0x08007975
 800785c:	080078f3 	.word	0x080078f3
 8007860:	08007975 	.word	0x08007975
 8007864:	08007975 	.word	0x08007975
 8007868:	08007975 	.word	0x08007975
 800786c:	08007933 	.word	0x08007933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f952 	bl	8007b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0208 	orr.w	r2, r2, #8
 800788a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0204 	bic.w	r2, r2, #4
 800789a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6999      	ldr	r1, [r3, #24]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	619a      	str	r2, [r3, #24]
      break;
 80078ae:	e062      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f9a2 	bl	8007c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6999      	ldr	r1, [r3, #24]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	619a      	str	r2, [r3, #24]
      break;
 80078f0:	e041      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 f9f7 	bl	8007cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0208 	orr.w	r2, r2, #8
 800790c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0204 	bic.w	r2, r2, #4
 800791c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69d9      	ldr	r1, [r3, #28]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	61da      	str	r2, [r3, #28]
      break;
 8007930:	e021      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fa4b 	bl	8007dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800794c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69da      	ldr	r2, [r3, #28]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69d9      	ldr	r1, [r3, #28]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	021a      	lsls	r2, r3, #8
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	61da      	str	r2, [r3, #28]
      break;
 8007972:	e000      	b.n	8007976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a40      	ldr	r2, [pc, #256]	; (8007af4 <TIM_Base_SetConfig+0x114>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d013      	beq.n	8007a20 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fe:	d00f      	beq.n	8007a20 <TIM_Base_SetConfig+0x40>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a3d      	ldr	r2, [pc, #244]	; (8007af8 <TIM_Base_SetConfig+0x118>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00b      	beq.n	8007a20 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a3c      	ldr	r2, [pc, #240]	; (8007afc <TIM_Base_SetConfig+0x11c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d007      	beq.n	8007a20 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a3b      	ldr	r2, [pc, #236]	; (8007b00 <TIM_Base_SetConfig+0x120>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_Base_SetConfig+0x40>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a3a      	ldr	r2, [pc, #232]	; (8007b04 <TIM_Base_SetConfig+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d108      	bne.n	8007a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2f      	ldr	r2, [pc, #188]	; (8007af4 <TIM_Base_SetConfig+0x114>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d02b      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a40:	d027      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2c      	ldr	r2, [pc, #176]	; (8007af8 <TIM_Base_SetConfig+0x118>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d023      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2b      	ldr	r2, [pc, #172]	; (8007afc <TIM_Base_SetConfig+0x11c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01f      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a2a      	ldr	r2, [pc, #168]	; (8007b00 <TIM_Base_SetConfig+0x120>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d01b      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a29      	ldr	r2, [pc, #164]	; (8007b04 <TIM_Base_SetConfig+0x124>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d017      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a28      	ldr	r2, [pc, #160]	; (8007b08 <TIM_Base_SetConfig+0x128>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d013      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <TIM_Base_SetConfig+0x12c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00f      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a26      	ldr	r2, [pc, #152]	; (8007b10 <TIM_Base_SetConfig+0x130>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a25      	ldr	r2, [pc, #148]	; (8007b14 <TIM_Base_SetConfig+0x134>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a24      	ldr	r2, [pc, #144]	; (8007b18 <TIM_Base_SetConfig+0x138>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a23      	ldr	r2, [pc, #140]	; (8007b1c <TIM_Base_SetConfig+0x13c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d108      	bne.n	8007aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <TIM_Base_SetConfig+0x114>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0xf8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a0c      	ldr	r2, [pc, #48]	; (8007b04 <TIM_Base_SetConfig+0x124>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d103      	bne.n	8007ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	615a      	str	r2, [r3, #20]
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40000400 	.word	0x40000400
 8007afc:	40000800 	.word	0x40000800
 8007b00:	40000c00 	.word	0x40000c00
 8007b04:	40010400 	.word	0x40010400
 8007b08:	40014000 	.word	0x40014000
 8007b0c:	40014400 	.word	0x40014400
 8007b10:	40014800 	.word	0x40014800
 8007b14:	40001800 	.word	0x40001800
 8007b18:	40001c00 	.word	0x40001c00
 8007b1c:	40002000 	.word	0x40002000

08007b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 0302 	bic.w	r3, r3, #2
 8007b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a20      	ldr	r2, [pc, #128]	; (8007bf8 <TIM_OC1_SetConfig+0xd8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC1_SetConfig+0x64>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1f      	ldr	r2, [pc, #124]	; (8007bfc <TIM_OC1_SetConfig+0xdc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10c      	bne.n	8007b9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0308 	bic.w	r3, r3, #8
 8007b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f023 0304 	bic.w	r3, r3, #4
 8007b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <TIM_OC1_SetConfig+0xd8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC1_SetConfig+0x8e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <TIM_OC1_SetConfig+0xdc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d111      	bne.n	8007bd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	621a      	str	r2, [r3, #32]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400

08007c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f023 0210 	bic.w	r2, r3, #16
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f023 0320 	bic.w	r3, r3, #32
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a22      	ldr	r2, [pc, #136]	; (8007ce4 <TIM_OC2_SetConfig+0xe4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_OC2_SetConfig+0x68>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <TIM_OC2_SetConfig+0xe8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d10d      	bne.n	8007c84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a17      	ldr	r2, [pc, #92]	; (8007ce4 <TIM_OC2_SetConfig+0xe4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC2_SetConfig+0x94>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a16      	ldr	r2, [pc, #88]	; (8007ce8 <TIM_OC2_SetConfig+0xe8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d113      	bne.n	8007cbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40010000 	.word	0x40010000
 8007ce8:	40010400 	.word	0x40010400

08007cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <TIM_OC3_SetConfig+0xe0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d003      	beq.n	8007d52 <TIM_OC3_SetConfig+0x66>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a20      	ldr	r2, [pc, #128]	; (8007dd0 <TIM_OC3_SetConfig+0xe4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10d      	bne.n	8007d6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a16      	ldr	r2, [pc, #88]	; (8007dcc <TIM_OC3_SetConfig+0xe0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC3_SetConfig+0x92>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a15      	ldr	r2, [pc, #84]	; (8007dd0 <TIM_OC3_SetConfig+0xe4>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d113      	bne.n	8007da6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	621a      	str	r2, [r3, #32]
}
 8007dc0:	bf00      	nop
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40010000 	.word	0x40010000
 8007dd0:	40010400 	.word	0x40010400

08007dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	031b      	lsls	r3, r3, #12
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a12      	ldr	r2, [pc, #72]	; (8007e78 <TIM_OC4_SetConfig+0xa4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_OC4_SetConfig+0x68>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <TIM_OC4_SetConfig+0xa8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d109      	bne.n	8007e50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	019b      	lsls	r3, r3, #6
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40010000 	.word	0x40010000
 8007e7c:	40010400 	.word	0x40010400

08007e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f003 031f 	and.w	r3, r3, #31
 8007e92:	2201      	movs	r2, #1
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6a1a      	ldr	r2, [r3, #32]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	401a      	ands	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a1a      	ldr	r2, [r3, #32]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 031f 	and.w	r3, r3, #31
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	621a      	str	r2, [r3, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e05a      	b.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a21      	ldr	r2, [pc, #132]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d022      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f30:	d01d      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1d      	ldr	r2, [pc, #116]	; (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d018      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d013      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00e      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a18      	ldr	r2, [pc, #96]	; (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d009      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d004      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10c      	bne.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40000800 	.word	0x40000800
 8007fb4:	40000c00 	.word	0x40000c00
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40001800 	.word	0x40001800

08007fc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e03d      	b.n	800805c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e03f      	b.n	8008122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fb fe3a 	bl	8003d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	; 0x24
 80080c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fb4b 	bl	8008770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695a      	ldr	r2, [r3, #20]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b088      	sub	sp, #32
 800812e:	af02      	add	r7, sp, #8
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b20      	cmp	r3, #32
 8008148:	f040 8083 	bne.w	8008252 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Transmit+0x2e>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e07b      	b.n	8008254 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_UART_Transmit+0x40>
 8008166:	2302      	movs	r3, #2
 8008168:	e074      	b.n	8008254 <HAL_UART_Transmit+0x12a>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2221      	movs	r2, #33	; 0x21
 800817c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008180:	f7fc f996 	bl	80044b0 <HAL_GetTick>
 8008184:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	88fa      	ldrh	r2, [r7, #6]
 800818a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800819a:	e042      	b.n	8008222 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b2:	d122      	bne.n	80081fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2200      	movs	r2, #0
 80081bc:	2180      	movs	r1, #128	; 0x80
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f96a 	bl	8008498 <UART_WaitOnFlagUntilTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e042      	b.n	8008254 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d103      	bne.n	80081f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3302      	adds	r3, #2
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	e017      	b.n	8008222 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	e013      	b.n	8008222 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2200      	movs	r2, #0
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f947 	bl	8008498 <UART_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e01f      	b.n	8008254 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	60ba      	str	r2, [r7, #8]
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008226:	b29b      	uxth	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1b7      	bne.n	800819c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2200      	movs	r2, #0
 8008234:	2140      	movs	r1, #64	; 0x40
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f92e 	bl	8008498 <UART_WaitOnFlagUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e006      	b.n	8008254 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e000      	b.n	8008254 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008252:	2302      	movs	r3, #2
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10d      	bne.n	80082ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <HAL_UART_IRQHandler+0x52>
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f9e0 	bl	800866c <UART_Receive_IT>
      return;
 80082ac:	e0d1      	b.n	8008452 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 80b0 	beq.w	8008416 <HAL_UART_IRQHandler+0x1ba>
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d105      	bne.n	80082cc <HAL_UART_IRQHandler+0x70>
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80a5 	beq.w	8008416 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <HAL_UART_IRQHandler+0x90>
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	f043 0201 	orr.w	r2, r3, #1
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f003 0304 	and.w	r3, r3, #4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <HAL_UART_IRQHandler+0xb0>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008304:	f043 0202 	orr.w	r2, r3, #2
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_UART_IRQHandler+0xd0>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008324:	f043 0204 	orr.w	r2, r3, #4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00f      	beq.n	8008356 <HAL_UART_IRQHandler+0xfa>
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <HAL_UART_IRQHandler+0xee>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	f043 0208 	orr.w	r2, r3, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d078      	beq.n	8008450 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_UART_IRQHandler+0x11c>
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f97a 	bl	800866c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	bf0c      	ite	eq
 8008386:	2301      	moveq	r3, #1
 8008388:	2300      	movne	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <HAL_UART_IRQHandler+0x144>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d031      	beq.n	8008404 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f8c3 	bl	800852c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d123      	bne.n	80083fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	695a      	ldr	r2, [r3, #20]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d013      	beq.n	80083f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	4a21      	ldr	r2, [pc, #132]	; (8008458 <HAL_UART_IRQHandler+0x1fc>)
 80083d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fc fea3 	bl	8005124 <HAL_DMA_Abort_IT>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d016      	beq.n	8008412 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083ee:	4610      	mov	r0, r2
 80083f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f2:	e00e      	b.n	8008412 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f845 	bl	8008484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fa:	e00a      	b.n	8008412 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f841 	bl	8008484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008402:	e006      	b.n	8008412 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f83d 	bl	8008484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008410:	e01e      	b.n	8008450 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008412:	bf00      	nop
    return;
 8008414:	e01c      	b.n	8008450 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b00      	cmp	r3, #0
 800841e:	d008      	beq.n	8008432 <HAL_UART_IRQHandler+0x1d6>
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8b0 	bl	8008590 <UART_Transmit_IT>
    return;
 8008430:	e00f      	b.n	8008452 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <HAL_UART_IRQHandler+0x1f6>
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f8f8 	bl	800863c <UART_EndTransmit_IT>
    return;
 800844c:	bf00      	nop
 800844e:	e000      	b.n	8008452 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008450:	bf00      	nop
  }
}
 8008452:	3720      	adds	r7, #32
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	08008569 	.word	0x08008569

0800845c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a8:	e02c      	b.n	8008504 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b0:	d028      	beq.n	8008504 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80084b8:	f7fb fffa 	bl	80044b0 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d21d      	bcs.n	8008504 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0201 	bic.w	r2, r2, #1
 80084e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e00f      	b.n	8008524 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	4013      	ands	r3, r2
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	429a      	cmp	r2, r3
 8008512:	bf0c      	ite	eq
 8008514:	2301      	moveq	r3, #1
 8008516:	2300      	movne	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	429a      	cmp	r2, r3
 8008520:	d0c3      	beq.n	80084aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008542:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff ff7e 	bl	8008484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b21      	cmp	r3, #33	; 0x21
 80085a2:	d144      	bne.n	800862e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ac:	d11a      	bne.n	80085e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	461a      	mov	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	1c9a      	adds	r2, r3, #2
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]
 80085d6:	e00e      	b.n	80085f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	621a      	str	r2, [r3, #32]
 80085e2:	e008      	b.n	80085f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	1c59      	adds	r1, r3, #1
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6211      	str	r1, [r2, #32]
 80085ee:	781a      	ldrb	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29b      	uxth	r3, r3
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	4619      	mov	r1, r3
 8008604:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008618:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008628:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e000      	b.n	8008630 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800862e:	2302      	movs	r3, #2
  }
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008652:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff fefd 	bl	800845c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b22      	cmp	r3, #34	; 0x22
 800867e:	d171      	bne.n	8008764 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008688:	d123      	bne.n	80086d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10e      	bne.n	80086b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	1c9a      	adds	r2, r3, #2
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28
 80086b4:	e029      	b.n	800870a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	629a      	str	r2, [r3, #40]	; 0x28
 80086d0:	e01b      	b.n	800870a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6858      	ldr	r0, [r3, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	1c59      	adds	r1, r3, #1
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6291      	str	r1, [r2, #40]	; 0x28
 80086ea:	b2c2      	uxtb	r2, r0
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e00c      	b.n	800870a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fc:	1c58      	adds	r0, r3, #1
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	6288      	str	r0, [r1, #40]	; 0x28
 8008702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29b      	uxth	r3, r3
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4619      	mov	r1, r3
 8008718:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800871a:	2b00      	cmp	r3, #0
 800871c:	d120      	bne.n	8008760 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0220 	bic.w	r2, r2, #32
 800872c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800873c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff fe8a 	bl	8008470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	e002      	b.n	8008766 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	e000      	b.n	8008766 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	b085      	sub	sp, #20
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	431a      	orrs	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80087b2:	f023 030c 	bic.w	r3, r3, #12
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	430b      	orrs	r3, r1
 80087be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087de:	f040 818b 	bne.w	8008af8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4ac1      	ldr	r2, [pc, #772]	; (8008aec <UART_SetConfig+0x37c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d005      	beq.n	80087f8 <UART_SetConfig+0x88>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4abf      	ldr	r2, [pc, #764]	; (8008af0 <UART_SetConfig+0x380>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	f040 80bd 	bne.w	8008972 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087f8:	f7fd fe4a 	bl	8006490 <HAL_RCC_GetPCLK2Freq>
 80087fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	461d      	mov	r5, r3
 8008802:	f04f 0600 	mov.w	r6, #0
 8008806:	46a8      	mov	r8, r5
 8008808:	46b1      	mov	r9, r6
 800880a:	eb18 0308 	adds.w	r3, r8, r8
 800880e:	eb49 0409 	adc.w	r4, r9, r9
 8008812:	4698      	mov	r8, r3
 8008814:	46a1      	mov	r9, r4
 8008816:	eb18 0805 	adds.w	r8, r8, r5
 800881a:	eb49 0906 	adc.w	r9, r9, r6
 800881e:	f04f 0100 	mov.w	r1, #0
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800882a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800882e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008832:	4688      	mov	r8, r1
 8008834:	4691      	mov	r9, r2
 8008836:	eb18 0005 	adds.w	r0, r8, r5
 800883a:	eb49 0106 	adc.w	r1, r9, r6
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	461d      	mov	r5, r3
 8008844:	f04f 0600 	mov.w	r6, #0
 8008848:	196b      	adds	r3, r5, r5
 800884a:	eb46 0406 	adc.w	r4, r6, r6
 800884e:	461a      	mov	r2, r3
 8008850:	4623      	mov	r3, r4
 8008852:	f7f8 fa19 	bl	8000c88 <__aeabi_uldivmod>
 8008856:	4603      	mov	r3, r0
 8008858:	460c      	mov	r4, r1
 800885a:	461a      	mov	r2, r3
 800885c:	4ba5      	ldr	r3, [pc, #660]	; (8008af4 <UART_SetConfig+0x384>)
 800885e:	fba3 2302 	umull	r2, r3, r3, r2
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	461d      	mov	r5, r3
 800886c:	f04f 0600 	mov.w	r6, #0
 8008870:	46a9      	mov	r9, r5
 8008872:	46b2      	mov	sl, r6
 8008874:	eb19 0309 	adds.w	r3, r9, r9
 8008878:	eb4a 040a 	adc.w	r4, sl, sl
 800887c:	4699      	mov	r9, r3
 800887e:	46a2      	mov	sl, r4
 8008880:	eb19 0905 	adds.w	r9, r9, r5
 8008884:	eb4a 0a06 	adc.w	sl, sl, r6
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800889c:	4689      	mov	r9, r1
 800889e:	4692      	mov	sl, r2
 80088a0:	eb19 0005 	adds.w	r0, r9, r5
 80088a4:	eb4a 0106 	adc.w	r1, sl, r6
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	461d      	mov	r5, r3
 80088ae:	f04f 0600 	mov.w	r6, #0
 80088b2:	196b      	adds	r3, r5, r5
 80088b4:	eb46 0406 	adc.w	r4, r6, r6
 80088b8:	461a      	mov	r2, r3
 80088ba:	4623      	mov	r3, r4
 80088bc:	f7f8 f9e4 	bl	8000c88 <__aeabi_uldivmod>
 80088c0:	4603      	mov	r3, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	461a      	mov	r2, r3
 80088c6:	4b8b      	ldr	r3, [pc, #556]	; (8008af4 <UART_SetConfig+0x384>)
 80088c8:	fba3 1302 	umull	r1, r3, r3, r2
 80088cc:	095b      	lsrs	r3, r3, #5
 80088ce:	2164      	movs	r1, #100	; 0x64
 80088d0:	fb01 f303 	mul.w	r3, r1, r3
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	3332      	adds	r3, #50	; 0x32
 80088da:	4a86      	ldr	r2, [pc, #536]	; (8008af4 <UART_SetConfig+0x384>)
 80088dc:	fba2 2303 	umull	r2, r3, r2, r3
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088e8:	4498      	add	r8, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	461d      	mov	r5, r3
 80088ee:	f04f 0600 	mov.w	r6, #0
 80088f2:	46a9      	mov	r9, r5
 80088f4:	46b2      	mov	sl, r6
 80088f6:	eb19 0309 	adds.w	r3, r9, r9
 80088fa:	eb4a 040a 	adc.w	r4, sl, sl
 80088fe:	4699      	mov	r9, r3
 8008900:	46a2      	mov	sl, r4
 8008902:	eb19 0905 	adds.w	r9, r9, r5
 8008906:	eb4a 0a06 	adc.w	sl, sl, r6
 800890a:	f04f 0100 	mov.w	r1, #0
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800891a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800891e:	4689      	mov	r9, r1
 8008920:	4692      	mov	sl, r2
 8008922:	eb19 0005 	adds.w	r0, r9, r5
 8008926:	eb4a 0106 	adc.w	r1, sl, r6
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	461d      	mov	r5, r3
 8008930:	f04f 0600 	mov.w	r6, #0
 8008934:	196b      	adds	r3, r5, r5
 8008936:	eb46 0406 	adc.w	r4, r6, r6
 800893a:	461a      	mov	r2, r3
 800893c:	4623      	mov	r3, r4
 800893e:	f7f8 f9a3 	bl	8000c88 <__aeabi_uldivmod>
 8008942:	4603      	mov	r3, r0
 8008944:	460c      	mov	r4, r1
 8008946:	461a      	mov	r2, r3
 8008948:	4b6a      	ldr	r3, [pc, #424]	; (8008af4 <UART_SetConfig+0x384>)
 800894a:	fba3 1302 	umull	r1, r3, r3, r2
 800894e:	095b      	lsrs	r3, r3, #5
 8008950:	2164      	movs	r1, #100	; 0x64
 8008952:	fb01 f303 	mul.w	r3, r1, r3
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	3332      	adds	r3, #50	; 0x32
 800895c:	4a65      	ldr	r2, [pc, #404]	; (8008af4 <UART_SetConfig+0x384>)
 800895e:	fba2 2303 	umull	r2, r3, r2, r3
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	f003 0207 	and.w	r2, r3, #7
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4442      	add	r2, r8
 800896e:	609a      	str	r2, [r3, #8]
 8008970:	e26f      	b.n	8008e52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008972:	f7fd fd79 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 8008976:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	461d      	mov	r5, r3
 800897c:	f04f 0600 	mov.w	r6, #0
 8008980:	46a8      	mov	r8, r5
 8008982:	46b1      	mov	r9, r6
 8008984:	eb18 0308 	adds.w	r3, r8, r8
 8008988:	eb49 0409 	adc.w	r4, r9, r9
 800898c:	4698      	mov	r8, r3
 800898e:	46a1      	mov	r9, r4
 8008990:	eb18 0805 	adds.w	r8, r8, r5
 8008994:	eb49 0906 	adc.w	r9, r9, r6
 8008998:	f04f 0100 	mov.w	r1, #0
 800899c:	f04f 0200 	mov.w	r2, #0
 80089a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80089ac:	4688      	mov	r8, r1
 80089ae:	4691      	mov	r9, r2
 80089b0:	eb18 0005 	adds.w	r0, r8, r5
 80089b4:	eb49 0106 	adc.w	r1, r9, r6
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	461d      	mov	r5, r3
 80089be:	f04f 0600 	mov.w	r6, #0
 80089c2:	196b      	adds	r3, r5, r5
 80089c4:	eb46 0406 	adc.w	r4, r6, r6
 80089c8:	461a      	mov	r2, r3
 80089ca:	4623      	mov	r3, r4
 80089cc:	f7f8 f95c 	bl	8000c88 <__aeabi_uldivmod>
 80089d0:	4603      	mov	r3, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	461a      	mov	r2, r3
 80089d6:	4b47      	ldr	r3, [pc, #284]	; (8008af4 <UART_SetConfig+0x384>)
 80089d8:	fba3 2302 	umull	r2, r3, r3, r2
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	461d      	mov	r5, r3
 80089e6:	f04f 0600 	mov.w	r6, #0
 80089ea:	46a9      	mov	r9, r5
 80089ec:	46b2      	mov	sl, r6
 80089ee:	eb19 0309 	adds.w	r3, r9, r9
 80089f2:	eb4a 040a 	adc.w	r4, sl, sl
 80089f6:	4699      	mov	r9, r3
 80089f8:	46a2      	mov	sl, r4
 80089fa:	eb19 0905 	adds.w	r9, r9, r5
 80089fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a02:	f04f 0100 	mov.w	r1, #0
 8008a06:	f04f 0200 	mov.w	r2, #0
 8008a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a16:	4689      	mov	r9, r1
 8008a18:	4692      	mov	sl, r2
 8008a1a:	eb19 0005 	adds.w	r0, r9, r5
 8008a1e:	eb4a 0106 	adc.w	r1, sl, r6
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	461d      	mov	r5, r3
 8008a28:	f04f 0600 	mov.w	r6, #0
 8008a2c:	196b      	adds	r3, r5, r5
 8008a2e:	eb46 0406 	adc.w	r4, r6, r6
 8008a32:	461a      	mov	r2, r3
 8008a34:	4623      	mov	r3, r4
 8008a36:	f7f8 f927 	bl	8000c88 <__aeabi_uldivmod>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <UART_SetConfig+0x384>)
 8008a42:	fba3 1302 	umull	r1, r3, r3, r2
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	2164      	movs	r1, #100	; 0x64
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	3332      	adds	r3, #50	; 0x32
 8008a54:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <UART_SetConfig+0x384>)
 8008a56:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a62:	4498      	add	r8, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	461d      	mov	r5, r3
 8008a68:	f04f 0600 	mov.w	r6, #0
 8008a6c:	46a9      	mov	r9, r5
 8008a6e:	46b2      	mov	sl, r6
 8008a70:	eb19 0309 	adds.w	r3, r9, r9
 8008a74:	eb4a 040a 	adc.w	r4, sl, sl
 8008a78:	4699      	mov	r9, r3
 8008a7a:	46a2      	mov	sl, r4
 8008a7c:	eb19 0905 	adds.w	r9, r9, r5
 8008a80:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a84:	f04f 0100 	mov.w	r1, #0
 8008a88:	f04f 0200 	mov.w	r2, #0
 8008a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a98:	4689      	mov	r9, r1
 8008a9a:	4692      	mov	sl, r2
 8008a9c:	eb19 0005 	adds.w	r0, r9, r5
 8008aa0:	eb4a 0106 	adc.w	r1, sl, r6
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	461d      	mov	r5, r3
 8008aaa:	f04f 0600 	mov.w	r6, #0
 8008aae:	196b      	adds	r3, r5, r5
 8008ab0:	eb46 0406 	adc.w	r4, r6, r6
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	f7f8 f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8008abc:	4603      	mov	r3, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <UART_SetConfig+0x384>)
 8008ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	2164      	movs	r1, #100	; 0x64
 8008acc:	fb01 f303 	mul.w	r3, r1, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	3332      	adds	r3, #50	; 0x32
 8008ad6:	4a07      	ldr	r2, [pc, #28]	; (8008af4 <UART_SetConfig+0x384>)
 8008ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8008adc:	095b      	lsrs	r3, r3, #5
 8008ade:	f003 0207 	and.w	r2, r3, #7
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4442      	add	r2, r8
 8008ae8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008aea:	e1b2      	b.n	8008e52 <UART_SetConfig+0x6e2>
 8008aec:	40011000 	.word	0x40011000
 8008af0:	40011400 	.word	0x40011400
 8008af4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4ad7      	ldr	r2, [pc, #860]	; (8008e5c <UART_SetConfig+0x6ec>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d005      	beq.n	8008b0e <UART_SetConfig+0x39e>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4ad6      	ldr	r2, [pc, #856]	; (8008e60 <UART_SetConfig+0x6f0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	f040 80d1 	bne.w	8008cb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b0e:	f7fd fcbf 	bl	8006490 <HAL_RCC_GetPCLK2Freq>
 8008b12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	469a      	mov	sl, r3
 8008b18:	f04f 0b00 	mov.w	fp, #0
 8008b1c:	46d0      	mov	r8, sl
 8008b1e:	46d9      	mov	r9, fp
 8008b20:	eb18 0308 	adds.w	r3, r8, r8
 8008b24:	eb49 0409 	adc.w	r4, r9, r9
 8008b28:	4698      	mov	r8, r3
 8008b2a:	46a1      	mov	r9, r4
 8008b2c:	eb18 080a 	adds.w	r8, r8, sl
 8008b30:	eb49 090b 	adc.w	r9, r9, fp
 8008b34:	f04f 0100 	mov.w	r1, #0
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b48:	4688      	mov	r8, r1
 8008b4a:	4691      	mov	r9, r2
 8008b4c:	eb1a 0508 	adds.w	r5, sl, r8
 8008b50:	eb4b 0609 	adc.w	r6, fp, r9
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	f04f 0300 	mov.w	r3, #0
 8008b62:	f04f 0400 	mov.w	r4, #0
 8008b66:	0094      	lsls	r4, r2, #2
 8008b68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b6c:	008b      	lsls	r3, r1, #2
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4623      	mov	r3, r4
 8008b72:	4628      	mov	r0, r5
 8008b74:	4631      	mov	r1, r6
 8008b76:	f7f8 f887 	bl	8000c88 <__aeabi_uldivmod>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4bb8      	ldr	r3, [pc, #736]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008b82:	fba3 2302 	umull	r2, r3, r3, r2
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	469b      	mov	fp, r3
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	46d9      	mov	r9, fp
 8008b96:	46e2      	mov	sl, ip
 8008b98:	eb19 0309 	adds.w	r3, r9, r9
 8008b9c:	eb4a 040a 	adc.w	r4, sl, sl
 8008ba0:	4699      	mov	r9, r3
 8008ba2:	46a2      	mov	sl, r4
 8008ba4:	eb19 090b 	adds.w	r9, r9, fp
 8008ba8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008bac:	f04f 0100 	mov.w	r1, #0
 8008bb0:	f04f 0200 	mov.w	r2, #0
 8008bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bc0:	4689      	mov	r9, r1
 8008bc2:	4692      	mov	sl, r2
 8008bc4:	eb1b 0509 	adds.w	r5, fp, r9
 8008bc8:	eb4c 060a 	adc.w	r6, ip, sl
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	f04f 0400 	mov.w	r4, #0
 8008bde:	0094      	lsls	r4, r2, #2
 8008be0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008be4:	008b      	lsls	r3, r1, #2
 8008be6:	461a      	mov	r2, r3
 8008be8:	4623      	mov	r3, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	4631      	mov	r1, r6
 8008bee:	f7f8 f84b 	bl	8000c88 <__aeabi_uldivmod>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4b9a      	ldr	r3, [pc, #616]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008bfa:	fba3 1302 	umull	r1, r3, r3, r2
 8008bfe:	095b      	lsrs	r3, r3, #5
 8008c00:	2164      	movs	r1, #100	; 0x64
 8008c02:	fb01 f303 	mul.w	r3, r1, r3
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	3332      	adds	r3, #50	; 0x32
 8008c0c:	4a95      	ldr	r2, [pc, #596]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c18:	4498      	add	r8, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	469b      	mov	fp, r3
 8008c1e:	f04f 0c00 	mov.w	ip, #0
 8008c22:	46d9      	mov	r9, fp
 8008c24:	46e2      	mov	sl, ip
 8008c26:	eb19 0309 	adds.w	r3, r9, r9
 8008c2a:	eb4a 040a 	adc.w	r4, sl, sl
 8008c2e:	4699      	mov	r9, r3
 8008c30:	46a2      	mov	sl, r4
 8008c32:	eb19 090b 	adds.w	r9, r9, fp
 8008c36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c3a:	f04f 0100 	mov.w	r1, #0
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c4e:	4689      	mov	r9, r1
 8008c50:	4692      	mov	sl, r2
 8008c52:	eb1b 0509 	adds.w	r5, fp, r9
 8008c56:	eb4c 060a 	adc.w	r6, ip, sl
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	f04f 0400 	mov.w	r4, #0
 8008c6c:	0094      	lsls	r4, r2, #2
 8008c6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c72:	008b      	lsls	r3, r1, #2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	f7f8 f804 	bl	8000c88 <__aeabi_uldivmod>
 8008c80:	4603      	mov	r3, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	461a      	mov	r2, r3
 8008c86:	4b77      	ldr	r3, [pc, #476]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008c88:	fba3 1302 	umull	r1, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	2164      	movs	r1, #100	; 0x64
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	3332      	adds	r3, #50	; 0x32
 8008c9a:	4a72      	ldr	r2, [pc, #456]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	f003 020f 	and.w	r2, r3, #15
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4442      	add	r2, r8
 8008cac:	609a      	str	r2, [r3, #8]
 8008cae:	e0d0      	b.n	8008e52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cb0:	f7fd fbda 	bl	8006468 <HAL_RCC_GetPCLK1Freq>
 8008cb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	469a      	mov	sl, r3
 8008cba:	f04f 0b00 	mov.w	fp, #0
 8008cbe:	46d0      	mov	r8, sl
 8008cc0:	46d9      	mov	r9, fp
 8008cc2:	eb18 0308 	adds.w	r3, r8, r8
 8008cc6:	eb49 0409 	adc.w	r4, r9, r9
 8008cca:	4698      	mov	r8, r3
 8008ccc:	46a1      	mov	r9, r4
 8008cce:	eb18 080a 	adds.w	r8, r8, sl
 8008cd2:	eb49 090b 	adc.w	r9, r9, fp
 8008cd6:	f04f 0100 	mov.w	r1, #0
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ce2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ce6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cea:	4688      	mov	r8, r1
 8008cec:	4691      	mov	r9, r2
 8008cee:	eb1a 0508 	adds.w	r5, sl, r8
 8008cf2:	eb4b 0609 	adc.w	r6, fp, r9
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f04f 0200 	mov.w	r2, #0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	0094      	lsls	r4, r2, #2
 8008d0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d0e:	008b      	lsls	r3, r1, #2
 8008d10:	461a      	mov	r2, r3
 8008d12:	4623      	mov	r3, r4
 8008d14:	4628      	mov	r0, r5
 8008d16:	4631      	mov	r1, r6
 8008d18:	f7f7 ffb6 	bl	8000c88 <__aeabi_uldivmod>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	461a      	mov	r2, r3
 8008d22:	4b50      	ldr	r3, [pc, #320]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008d24:	fba3 2302 	umull	r2, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	469b      	mov	fp, r3
 8008d32:	f04f 0c00 	mov.w	ip, #0
 8008d36:	46d9      	mov	r9, fp
 8008d38:	46e2      	mov	sl, ip
 8008d3a:	eb19 0309 	adds.w	r3, r9, r9
 8008d3e:	eb4a 040a 	adc.w	r4, sl, sl
 8008d42:	4699      	mov	r9, r3
 8008d44:	46a2      	mov	sl, r4
 8008d46:	eb19 090b 	adds.w	r9, r9, fp
 8008d4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d4e:	f04f 0100 	mov.w	r1, #0
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d62:	4689      	mov	r9, r1
 8008d64:	4692      	mov	sl, r2
 8008d66:	eb1b 0509 	adds.w	r5, fp, r9
 8008d6a:	eb4c 060a 	adc.w	r6, ip, sl
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	4619      	mov	r1, r3
 8008d74:	f04f 0200 	mov.w	r2, #0
 8008d78:	f04f 0300 	mov.w	r3, #0
 8008d7c:	f04f 0400 	mov.w	r4, #0
 8008d80:	0094      	lsls	r4, r2, #2
 8008d82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d86:	008b      	lsls	r3, r1, #2
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	4631      	mov	r1, r6
 8008d90:	f7f7 ff7a 	bl	8000c88 <__aeabi_uldivmod>
 8008d94:	4603      	mov	r3, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008da0:	095b      	lsrs	r3, r3, #5
 8008da2:	2164      	movs	r1, #100	; 0x64
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	3332      	adds	r3, #50	; 0x32
 8008dae:	4a2d      	ldr	r2, [pc, #180]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008db0:	fba2 2303 	umull	r2, r3, r2, r3
 8008db4:	095b      	lsrs	r3, r3, #5
 8008db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dba:	4498      	add	r8, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	469b      	mov	fp, r3
 8008dc0:	f04f 0c00 	mov.w	ip, #0
 8008dc4:	46d9      	mov	r9, fp
 8008dc6:	46e2      	mov	sl, ip
 8008dc8:	eb19 0309 	adds.w	r3, r9, r9
 8008dcc:	eb4a 040a 	adc.w	r4, sl, sl
 8008dd0:	4699      	mov	r9, r3
 8008dd2:	46a2      	mov	sl, r4
 8008dd4:	eb19 090b 	adds.w	r9, r9, fp
 8008dd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008de8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008df0:	4689      	mov	r9, r1
 8008df2:	4692      	mov	sl, r2
 8008df4:	eb1b 0509 	adds.w	r5, fp, r9
 8008df8:	eb4c 060a 	adc.w	r6, ip, sl
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4619      	mov	r1, r3
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	f04f 0400 	mov.w	r4, #0
 8008e0e:	0094      	lsls	r4, r2, #2
 8008e10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e14:	008b      	lsls	r3, r1, #2
 8008e16:	461a      	mov	r2, r3
 8008e18:	4623      	mov	r3, r4
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	f7f7 ff33 	bl	8000c88 <__aeabi_uldivmod>
 8008e22:	4603      	mov	r3, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	461a      	mov	r2, r3
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2164      	movs	r1, #100	; 0x64
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	3332      	adds	r3, #50	; 0x32
 8008e3c:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <UART_SetConfig+0x6f4>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	095b      	lsrs	r3, r3, #5
 8008e44:	f003 020f 	and.w	r2, r3, #15
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4442      	add	r2, r8
 8008e4e:	609a      	str	r2, [r3, #8]
}
 8008e50:	e7ff      	b.n	8008e52 <UART_SetConfig+0x6e2>
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	40011000 	.word	0x40011000
 8008e60:	40011400 	.word	0x40011400
 8008e64:	51eb851f 	.word	0x51eb851f

08008e68 <__errno>:
 8008e68:	4b01      	ldr	r3, [pc, #4]	; (8008e70 <__errno+0x8>)
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	2000000c 	.word	0x2000000c

08008e74 <__libc_init_array>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	4e0d      	ldr	r6, [pc, #52]	; (8008eac <__libc_init_array+0x38>)
 8008e78:	4c0d      	ldr	r4, [pc, #52]	; (8008eb0 <__libc_init_array+0x3c>)
 8008e7a:	1ba4      	subs	r4, r4, r6
 8008e7c:	10a4      	asrs	r4, r4, #2
 8008e7e:	2500      	movs	r5, #0
 8008e80:	42a5      	cmp	r5, r4
 8008e82:	d109      	bne.n	8008e98 <__libc_init_array+0x24>
 8008e84:	4e0b      	ldr	r6, [pc, #44]	; (8008eb4 <__libc_init_array+0x40>)
 8008e86:	4c0c      	ldr	r4, [pc, #48]	; (8008eb8 <__libc_init_array+0x44>)
 8008e88:	f004 fb58 	bl	800d53c <_init>
 8008e8c:	1ba4      	subs	r4, r4, r6
 8008e8e:	10a4      	asrs	r4, r4, #2
 8008e90:	2500      	movs	r5, #0
 8008e92:	42a5      	cmp	r5, r4
 8008e94:	d105      	bne.n	8008ea2 <__libc_init_array+0x2e>
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e9c:	4798      	blx	r3
 8008e9e:	3501      	adds	r5, #1
 8008ea0:	e7ee      	b.n	8008e80 <__libc_init_array+0xc>
 8008ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ea6:	4798      	blx	r3
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	e7f2      	b.n	8008e92 <__libc_init_array+0x1e>
 8008eac:	0800daa8 	.word	0x0800daa8
 8008eb0:	0800daa8 	.word	0x0800daa8
 8008eb4:	0800daa8 	.word	0x0800daa8
 8008eb8:	0800daac 	.word	0x0800daac

08008ebc <memcpy>:
 8008ebc:	b510      	push	{r4, lr}
 8008ebe:	1e43      	subs	r3, r0, #1
 8008ec0:	440a      	add	r2, r1
 8008ec2:	4291      	cmp	r1, r2
 8008ec4:	d100      	bne.n	8008ec8 <memcpy+0xc>
 8008ec6:	bd10      	pop	{r4, pc}
 8008ec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed0:	e7f7      	b.n	8008ec2 <memcpy+0x6>

08008ed2 <memset>:
 8008ed2:	4402      	add	r2, r0
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d100      	bne.n	8008edc <memset+0xa>
 8008eda:	4770      	bx	lr
 8008edc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee0:	e7f9      	b.n	8008ed6 <memset+0x4>

08008ee2 <__cvt>:
 8008ee2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee6:	ec55 4b10 	vmov	r4, r5, d0
 8008eea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008eec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ef0:	2d00      	cmp	r5, #0
 8008ef2:	460e      	mov	r6, r1
 8008ef4:	4691      	mov	r9, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	bfb8      	it	lt
 8008efa:	4622      	movlt	r2, r4
 8008efc:	462b      	mov	r3, r5
 8008efe:	f027 0720 	bic.w	r7, r7, #32
 8008f02:	bfbb      	ittet	lt
 8008f04:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f08:	461d      	movlt	r5, r3
 8008f0a:	2300      	movge	r3, #0
 8008f0c:	232d      	movlt	r3, #45	; 0x2d
 8008f0e:	bfb8      	it	lt
 8008f10:	4614      	movlt	r4, r2
 8008f12:	2f46      	cmp	r7, #70	; 0x46
 8008f14:	700b      	strb	r3, [r1, #0]
 8008f16:	d004      	beq.n	8008f22 <__cvt+0x40>
 8008f18:	2f45      	cmp	r7, #69	; 0x45
 8008f1a:	d100      	bne.n	8008f1e <__cvt+0x3c>
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	2102      	movs	r1, #2
 8008f20:	e000      	b.n	8008f24 <__cvt+0x42>
 8008f22:	2103      	movs	r1, #3
 8008f24:	ab03      	add	r3, sp, #12
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	ab02      	add	r3, sp, #8
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4653      	mov	r3, sl
 8008f30:	ec45 4b10 	vmov	d0, r4, r5
 8008f34:	f000 fcd8 	bl	80098e8 <_dtoa_r>
 8008f38:	2f47      	cmp	r7, #71	; 0x47
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	d102      	bne.n	8008f44 <__cvt+0x62>
 8008f3e:	f019 0f01 	tst.w	r9, #1
 8008f42:	d026      	beq.n	8008f92 <__cvt+0xb0>
 8008f44:	2f46      	cmp	r7, #70	; 0x46
 8008f46:	eb08 0906 	add.w	r9, r8, r6
 8008f4a:	d111      	bne.n	8008f70 <__cvt+0x8e>
 8008f4c:	f898 3000 	ldrb.w	r3, [r8]
 8008f50:	2b30      	cmp	r3, #48	; 0x30
 8008f52:	d10a      	bne.n	8008f6a <__cvt+0x88>
 8008f54:	2200      	movs	r2, #0
 8008f56:	2300      	movs	r3, #0
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f60:	b918      	cbnz	r0, 8008f6a <__cvt+0x88>
 8008f62:	f1c6 0601 	rsb	r6, r6, #1
 8008f66:	f8ca 6000 	str.w	r6, [sl]
 8008f6a:	f8da 3000 	ldr.w	r3, [sl]
 8008f6e:	4499      	add	r9, r3
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f7c:	b938      	cbnz	r0, 8008f8e <__cvt+0xac>
 8008f7e:	2230      	movs	r2, #48	; 0x30
 8008f80:	9b03      	ldr	r3, [sp, #12]
 8008f82:	454b      	cmp	r3, r9
 8008f84:	d205      	bcs.n	8008f92 <__cvt+0xb0>
 8008f86:	1c59      	adds	r1, r3, #1
 8008f88:	9103      	str	r1, [sp, #12]
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	e7f8      	b.n	8008f80 <__cvt+0x9e>
 8008f8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f96:	eba3 0308 	sub.w	r3, r3, r8
 8008f9a:	4640      	mov	r0, r8
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	b004      	add	sp, #16
 8008fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008fa4 <__exponent>:
 8008fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	4604      	mov	r4, r0
 8008faa:	bfba      	itte	lt
 8008fac:	4249      	neglt	r1, r1
 8008fae:	232d      	movlt	r3, #45	; 0x2d
 8008fb0:	232b      	movge	r3, #43	; 0x2b
 8008fb2:	2909      	cmp	r1, #9
 8008fb4:	f804 2b02 	strb.w	r2, [r4], #2
 8008fb8:	7043      	strb	r3, [r0, #1]
 8008fba:	dd20      	ble.n	8008ffe <__exponent+0x5a>
 8008fbc:	f10d 0307 	add.w	r3, sp, #7
 8008fc0:	461f      	mov	r7, r3
 8008fc2:	260a      	movs	r6, #10
 8008fc4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fc8:	fb06 1115 	mls	r1, r6, r5, r1
 8008fcc:	3130      	adds	r1, #48	; 0x30
 8008fce:	2d09      	cmp	r5, #9
 8008fd0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008fd4:	f103 32ff 	add.w	r2, r3, #4294967295
 8008fd8:	4629      	mov	r1, r5
 8008fda:	dc09      	bgt.n	8008ff0 <__exponent+0x4c>
 8008fdc:	3130      	adds	r1, #48	; 0x30
 8008fde:	3b02      	subs	r3, #2
 8008fe0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008fe4:	42bb      	cmp	r3, r7
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	d304      	bcc.n	8008ff4 <__exponent+0x50>
 8008fea:	1a10      	subs	r0, r2, r0
 8008fec:	b003      	add	sp, #12
 8008fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	e7e7      	b.n	8008fc4 <__exponent+0x20>
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	f804 2b01 	strb.w	r2, [r4], #1
 8008ffc:	e7f2      	b.n	8008fe4 <__exponent+0x40>
 8008ffe:	2330      	movs	r3, #48	; 0x30
 8009000:	4419      	add	r1, r3
 8009002:	7083      	strb	r3, [r0, #2]
 8009004:	1d02      	adds	r2, r0, #4
 8009006:	70c1      	strb	r1, [r0, #3]
 8009008:	e7ef      	b.n	8008fea <__exponent+0x46>
	...

0800900c <_printf_float>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	b08d      	sub	sp, #52	; 0x34
 8009012:	460c      	mov	r4, r1
 8009014:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009018:	4616      	mov	r6, r2
 800901a:	461f      	mov	r7, r3
 800901c:	4605      	mov	r5, r0
 800901e:	f001 fae5 	bl	800a5ec <_localeconv_r>
 8009022:	6803      	ldr	r3, [r0, #0]
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	4618      	mov	r0, r3
 8009028:	f7f7 f8d2 	bl	80001d0 <strlen>
 800902c:	2300      	movs	r3, #0
 800902e:	930a      	str	r3, [sp, #40]	; 0x28
 8009030:	f8d8 3000 	ldr.w	r3, [r8]
 8009034:	9005      	str	r0, [sp, #20]
 8009036:	3307      	adds	r3, #7
 8009038:	f023 0307 	bic.w	r3, r3, #7
 800903c:	f103 0208 	add.w	r2, r3, #8
 8009040:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009044:	f8d4 b000 	ldr.w	fp, [r4]
 8009048:	f8c8 2000 	str.w	r2, [r8]
 800904c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009050:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009054:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009058:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800905c:	9307      	str	r3, [sp, #28]
 800905e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009062:	f04f 32ff 	mov.w	r2, #4294967295
 8009066:	4ba7      	ldr	r3, [pc, #668]	; (8009304 <_printf_float+0x2f8>)
 8009068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800906c:	f7f7 fd5e 	bl	8000b2c <__aeabi_dcmpun>
 8009070:	bb70      	cbnz	r0, 80090d0 <_printf_float+0xc4>
 8009072:	f04f 32ff 	mov.w	r2, #4294967295
 8009076:	4ba3      	ldr	r3, [pc, #652]	; (8009304 <_printf_float+0x2f8>)
 8009078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800907c:	f7f7 fd38 	bl	8000af0 <__aeabi_dcmple>
 8009080:	bb30      	cbnz	r0, 80090d0 <_printf_float+0xc4>
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	4640      	mov	r0, r8
 8009088:	4649      	mov	r1, r9
 800908a:	f7f7 fd27 	bl	8000adc <__aeabi_dcmplt>
 800908e:	b110      	cbz	r0, 8009096 <_printf_float+0x8a>
 8009090:	232d      	movs	r3, #45	; 0x2d
 8009092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009096:	4a9c      	ldr	r2, [pc, #624]	; (8009308 <_printf_float+0x2fc>)
 8009098:	4b9c      	ldr	r3, [pc, #624]	; (800930c <_printf_float+0x300>)
 800909a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800909e:	bf8c      	ite	hi
 80090a0:	4690      	movhi	r8, r2
 80090a2:	4698      	movls	r8, r3
 80090a4:	2303      	movs	r3, #3
 80090a6:	f02b 0204 	bic.w	r2, fp, #4
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	9700      	str	r7, [sp, #0]
 80090b4:	4633      	mov	r3, r6
 80090b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f9e6 	bl	800948c <_printf_common>
 80090c0:	3001      	adds	r0, #1
 80090c2:	f040 808d 	bne.w	80091e0 <_printf_float+0x1d4>
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	b00d      	add	sp, #52	; 0x34
 80090cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d0:	4642      	mov	r2, r8
 80090d2:	464b      	mov	r3, r9
 80090d4:	4640      	mov	r0, r8
 80090d6:	4649      	mov	r1, r9
 80090d8:	f7f7 fd28 	bl	8000b2c <__aeabi_dcmpun>
 80090dc:	b110      	cbz	r0, 80090e4 <_printf_float+0xd8>
 80090de:	4a8c      	ldr	r2, [pc, #560]	; (8009310 <_printf_float+0x304>)
 80090e0:	4b8c      	ldr	r3, [pc, #560]	; (8009314 <_printf_float+0x308>)
 80090e2:	e7da      	b.n	800909a <_printf_float+0x8e>
 80090e4:	6861      	ldr	r1, [r4, #4]
 80090e6:	1c4b      	adds	r3, r1, #1
 80090e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80090ec:	a80a      	add	r0, sp, #40	; 0x28
 80090ee:	d13e      	bne.n	800916e <_printf_float+0x162>
 80090f0:	2306      	movs	r3, #6
 80090f2:	6063      	str	r3, [r4, #4]
 80090f4:	2300      	movs	r3, #0
 80090f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80090fa:	ab09      	add	r3, sp, #36	; 0x24
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	ec49 8b10 	vmov	d0, r8, r9
 8009102:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009106:	6022      	str	r2, [r4, #0]
 8009108:	f8cd a004 	str.w	sl, [sp, #4]
 800910c:	6861      	ldr	r1, [r4, #4]
 800910e:	4628      	mov	r0, r5
 8009110:	f7ff fee7 	bl	8008ee2 <__cvt>
 8009114:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009118:	2b47      	cmp	r3, #71	; 0x47
 800911a:	4680      	mov	r8, r0
 800911c:	d109      	bne.n	8009132 <_printf_float+0x126>
 800911e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009120:	1cd8      	adds	r0, r3, #3
 8009122:	db02      	blt.n	800912a <_printf_float+0x11e>
 8009124:	6862      	ldr	r2, [r4, #4]
 8009126:	4293      	cmp	r3, r2
 8009128:	dd47      	ble.n	80091ba <_printf_float+0x1ae>
 800912a:	f1aa 0a02 	sub.w	sl, sl, #2
 800912e:	fa5f fa8a 	uxtb.w	sl, sl
 8009132:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009136:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009138:	d824      	bhi.n	8009184 <_printf_float+0x178>
 800913a:	3901      	subs	r1, #1
 800913c:	4652      	mov	r2, sl
 800913e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009142:	9109      	str	r1, [sp, #36]	; 0x24
 8009144:	f7ff ff2e 	bl	8008fa4 <__exponent>
 8009148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800914a:	1813      	adds	r3, r2, r0
 800914c:	2a01      	cmp	r2, #1
 800914e:	4681      	mov	r9, r0
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	dc02      	bgt.n	800915a <_printf_float+0x14e>
 8009154:	6822      	ldr	r2, [r4, #0]
 8009156:	07d1      	lsls	r1, r2, #31
 8009158:	d501      	bpl.n	800915e <_printf_float+0x152>
 800915a:	3301      	adds	r3, #1
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0a5      	beq.n	80090b2 <_printf_float+0xa6>
 8009166:	232d      	movs	r3, #45	; 0x2d
 8009168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800916c:	e7a1      	b.n	80090b2 <_printf_float+0xa6>
 800916e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009172:	f000 8177 	beq.w	8009464 <_printf_float+0x458>
 8009176:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800917a:	d1bb      	bne.n	80090f4 <_printf_float+0xe8>
 800917c:	2900      	cmp	r1, #0
 800917e:	d1b9      	bne.n	80090f4 <_printf_float+0xe8>
 8009180:	2301      	movs	r3, #1
 8009182:	e7b6      	b.n	80090f2 <_printf_float+0xe6>
 8009184:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009188:	d119      	bne.n	80091be <_printf_float+0x1b2>
 800918a:	2900      	cmp	r1, #0
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	dd0c      	ble.n	80091aa <_printf_float+0x19e>
 8009190:	6121      	str	r1, [r4, #16]
 8009192:	b913      	cbnz	r3, 800919a <_printf_float+0x18e>
 8009194:	6822      	ldr	r2, [r4, #0]
 8009196:	07d2      	lsls	r2, r2, #31
 8009198:	d502      	bpl.n	80091a0 <_printf_float+0x194>
 800919a:	3301      	adds	r3, #1
 800919c:	440b      	add	r3, r1
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80091a4:	f04f 0900 	mov.w	r9, #0
 80091a8:	e7d9      	b.n	800915e <_printf_float+0x152>
 80091aa:	b913      	cbnz	r3, 80091b2 <_printf_float+0x1a6>
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	07d0      	lsls	r0, r2, #31
 80091b0:	d501      	bpl.n	80091b6 <_printf_float+0x1aa>
 80091b2:	3302      	adds	r3, #2
 80091b4:	e7f3      	b.n	800919e <_printf_float+0x192>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e7f1      	b.n	800919e <_printf_float+0x192>
 80091ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80091be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80091c2:	4293      	cmp	r3, r2
 80091c4:	db05      	blt.n	80091d2 <_printf_float+0x1c6>
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	6123      	str	r3, [r4, #16]
 80091ca:	07d1      	lsls	r1, r2, #31
 80091cc:	d5e8      	bpl.n	80091a0 <_printf_float+0x194>
 80091ce:	3301      	adds	r3, #1
 80091d0:	e7e5      	b.n	800919e <_printf_float+0x192>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfd4      	ite	le
 80091d6:	f1c3 0302 	rsble	r3, r3, #2
 80091da:	2301      	movgt	r3, #1
 80091dc:	4413      	add	r3, r2
 80091de:	e7de      	b.n	800919e <_printf_float+0x192>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	055a      	lsls	r2, r3, #21
 80091e4:	d407      	bmi.n	80091f6 <_printf_float+0x1ea>
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	4642      	mov	r2, r8
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	d12b      	bne.n	800924c <_printf_float+0x240>
 80091f4:	e767      	b.n	80090c6 <_printf_float+0xba>
 80091f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80091fa:	f240 80dc 	bls.w	80093b6 <_printf_float+0x3aa>
 80091fe:	2200      	movs	r2, #0
 8009200:	2300      	movs	r3, #0
 8009202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009206:	f7f7 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800920a:	2800      	cmp	r0, #0
 800920c:	d033      	beq.n	8009276 <_printf_float+0x26a>
 800920e:	2301      	movs	r3, #1
 8009210:	4a41      	ldr	r2, [pc, #260]	; (8009318 <_printf_float+0x30c>)
 8009212:	4631      	mov	r1, r6
 8009214:	4628      	mov	r0, r5
 8009216:	47b8      	blx	r7
 8009218:	3001      	adds	r0, #1
 800921a:	f43f af54 	beq.w	80090c6 <_printf_float+0xba>
 800921e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009222:	429a      	cmp	r2, r3
 8009224:	db02      	blt.n	800922c <_printf_float+0x220>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	07d8      	lsls	r0, r3, #31
 800922a:	d50f      	bpl.n	800924c <_printf_float+0x240>
 800922c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	47b8      	blx	r7
 8009236:	3001      	adds	r0, #1
 8009238:	f43f af45 	beq.w	80090c6 <_printf_float+0xba>
 800923c:	f04f 0800 	mov.w	r8, #0
 8009240:	f104 091a 	add.w	r9, r4, #26
 8009244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009246:	3b01      	subs	r3, #1
 8009248:	4543      	cmp	r3, r8
 800924a:	dc09      	bgt.n	8009260 <_printf_float+0x254>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	f100 8103 	bmi.w	800945a <_printf_float+0x44e>
 8009254:	68e0      	ldr	r0, [r4, #12]
 8009256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009258:	4298      	cmp	r0, r3
 800925a:	bfb8      	it	lt
 800925c:	4618      	movlt	r0, r3
 800925e:	e734      	b.n	80090ca <_printf_float+0xbe>
 8009260:	2301      	movs	r3, #1
 8009262:	464a      	mov	r2, r9
 8009264:	4631      	mov	r1, r6
 8009266:	4628      	mov	r0, r5
 8009268:	47b8      	blx	r7
 800926a:	3001      	adds	r0, #1
 800926c:	f43f af2b 	beq.w	80090c6 <_printf_float+0xba>
 8009270:	f108 0801 	add.w	r8, r8, #1
 8009274:	e7e6      	b.n	8009244 <_printf_float+0x238>
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc2b      	bgt.n	80092d4 <_printf_float+0x2c8>
 800927c:	2301      	movs	r3, #1
 800927e:	4a26      	ldr	r2, [pc, #152]	; (8009318 <_printf_float+0x30c>)
 8009280:	4631      	mov	r1, r6
 8009282:	4628      	mov	r0, r5
 8009284:	47b8      	blx	r7
 8009286:	3001      	adds	r0, #1
 8009288:	f43f af1d 	beq.w	80090c6 <_printf_float+0xba>
 800928c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928e:	b923      	cbnz	r3, 800929a <_printf_float+0x28e>
 8009290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009292:	b913      	cbnz	r3, 800929a <_printf_float+0x28e>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	07d9      	lsls	r1, r3, #31
 8009298:	d5d8      	bpl.n	800924c <_printf_float+0x240>
 800929a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800929e:	4631      	mov	r1, r6
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b8      	blx	r7
 80092a4:	3001      	adds	r0, #1
 80092a6:	f43f af0e 	beq.w	80090c6 <_printf_float+0xba>
 80092aa:	f04f 0900 	mov.w	r9, #0
 80092ae:	f104 0a1a 	add.w	sl, r4, #26
 80092b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b4:	425b      	negs	r3, r3
 80092b6:	454b      	cmp	r3, r9
 80092b8:	dc01      	bgt.n	80092be <_printf_float+0x2b2>
 80092ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092bc:	e794      	b.n	80091e8 <_printf_float+0x1dc>
 80092be:	2301      	movs	r3, #1
 80092c0:	4652      	mov	r2, sl
 80092c2:	4631      	mov	r1, r6
 80092c4:	4628      	mov	r0, r5
 80092c6:	47b8      	blx	r7
 80092c8:	3001      	adds	r0, #1
 80092ca:	f43f aefc 	beq.w	80090c6 <_printf_float+0xba>
 80092ce:	f109 0901 	add.w	r9, r9, #1
 80092d2:	e7ee      	b.n	80092b2 <_printf_float+0x2a6>
 80092d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092d8:	429a      	cmp	r2, r3
 80092da:	bfa8      	it	ge
 80092dc:	461a      	movge	r2, r3
 80092de:	2a00      	cmp	r2, #0
 80092e0:	4691      	mov	r9, r2
 80092e2:	dd07      	ble.n	80092f4 <_printf_float+0x2e8>
 80092e4:	4613      	mov	r3, r2
 80092e6:	4631      	mov	r1, r6
 80092e8:	4642      	mov	r2, r8
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f aee9 	beq.w	80090c6 <_printf_float+0xba>
 80092f4:	f104 031a 	add.w	r3, r4, #26
 80092f8:	f04f 0b00 	mov.w	fp, #0
 80092fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009300:	9306      	str	r3, [sp, #24]
 8009302:	e015      	b.n	8009330 <_printf_float+0x324>
 8009304:	7fefffff 	.word	0x7fefffff
 8009308:	0800d5c8 	.word	0x0800d5c8
 800930c:	0800d5c4 	.word	0x0800d5c4
 8009310:	0800d5d0 	.word	0x0800d5d0
 8009314:	0800d5cc 	.word	0x0800d5cc
 8009318:	0800d5d4 	.word	0x0800d5d4
 800931c:	2301      	movs	r3, #1
 800931e:	9a06      	ldr	r2, [sp, #24]
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f aecd 	beq.w	80090c6 <_printf_float+0xba>
 800932c:	f10b 0b01 	add.w	fp, fp, #1
 8009330:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009334:	ebaa 0309 	sub.w	r3, sl, r9
 8009338:	455b      	cmp	r3, fp
 800933a:	dcef      	bgt.n	800931c <_printf_float+0x310>
 800933c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009340:	429a      	cmp	r2, r3
 8009342:	44d0      	add	r8, sl
 8009344:	db15      	blt.n	8009372 <_printf_float+0x366>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	07da      	lsls	r2, r3, #31
 800934a:	d412      	bmi.n	8009372 <_printf_float+0x366>
 800934c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009350:	eba3 020a 	sub.w	r2, r3, sl
 8009354:	eba3 0a01 	sub.w	sl, r3, r1
 8009358:	4592      	cmp	sl, r2
 800935a:	bfa8      	it	ge
 800935c:	4692      	movge	sl, r2
 800935e:	f1ba 0f00 	cmp.w	sl, #0
 8009362:	dc0e      	bgt.n	8009382 <_printf_float+0x376>
 8009364:	f04f 0800 	mov.w	r8, #0
 8009368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800936c:	f104 091a 	add.w	r9, r4, #26
 8009370:	e019      	b.n	80093a6 <_printf_float+0x39a>
 8009372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	d1e5      	bne.n	800934c <_printf_float+0x340>
 8009380:	e6a1      	b.n	80090c6 <_printf_float+0xba>
 8009382:	4653      	mov	r3, sl
 8009384:	4642      	mov	r2, r8
 8009386:	4631      	mov	r1, r6
 8009388:	4628      	mov	r0, r5
 800938a:	47b8      	blx	r7
 800938c:	3001      	adds	r0, #1
 800938e:	d1e9      	bne.n	8009364 <_printf_float+0x358>
 8009390:	e699      	b.n	80090c6 <_printf_float+0xba>
 8009392:	2301      	movs	r3, #1
 8009394:	464a      	mov	r2, r9
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f ae92 	beq.w	80090c6 <_printf_float+0xba>
 80093a2:	f108 0801 	add.w	r8, r8, #1
 80093a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	eba3 030a 	sub.w	r3, r3, sl
 80093b0:	4543      	cmp	r3, r8
 80093b2:	dcee      	bgt.n	8009392 <_printf_float+0x386>
 80093b4:	e74a      	b.n	800924c <_printf_float+0x240>
 80093b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b8:	2a01      	cmp	r2, #1
 80093ba:	dc01      	bgt.n	80093c0 <_printf_float+0x3b4>
 80093bc:	07db      	lsls	r3, r3, #31
 80093be:	d53a      	bpl.n	8009436 <_printf_float+0x42a>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4642      	mov	r2, r8
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	f43f ae7b 	beq.w	80090c6 <_printf_float+0xba>
 80093d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	f43f ae71 	beq.w	80090c6 <_printf_float+0xba>
 80093e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e6:	2200      	movs	r2, #0
 80093e8:	f103 3aff 	add.w	sl, r3, #4294967295
 80093ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093f0:	2300      	movs	r3, #0
 80093f2:	f7f7 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 80093f6:	b9c8      	cbnz	r0, 800942c <_printf_float+0x420>
 80093f8:	4653      	mov	r3, sl
 80093fa:	4642      	mov	r2, r8
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	d10e      	bne.n	8009424 <_printf_float+0x418>
 8009406:	e65e      	b.n	80090c6 <_printf_float+0xba>
 8009408:	2301      	movs	r3, #1
 800940a:	4652      	mov	r2, sl
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f ae57 	beq.w	80090c6 <_printf_float+0xba>
 8009418:	f108 0801 	add.w	r8, r8, #1
 800941c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941e:	3b01      	subs	r3, #1
 8009420:	4543      	cmp	r3, r8
 8009422:	dcf1      	bgt.n	8009408 <_printf_float+0x3fc>
 8009424:	464b      	mov	r3, r9
 8009426:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800942a:	e6de      	b.n	80091ea <_printf_float+0x1de>
 800942c:	f04f 0800 	mov.w	r8, #0
 8009430:	f104 0a1a 	add.w	sl, r4, #26
 8009434:	e7f2      	b.n	800941c <_printf_float+0x410>
 8009436:	2301      	movs	r3, #1
 8009438:	e7df      	b.n	80093fa <_printf_float+0x3ee>
 800943a:	2301      	movs	r3, #1
 800943c:	464a      	mov	r2, r9
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	f43f ae3e 	beq.w	80090c6 <_printf_float+0xba>
 800944a:	f108 0801 	add.w	r8, r8, #1
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	4543      	cmp	r3, r8
 8009456:	dcf0      	bgt.n	800943a <_printf_float+0x42e>
 8009458:	e6fc      	b.n	8009254 <_printf_float+0x248>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	f104 0919 	add.w	r9, r4, #25
 8009462:	e7f4      	b.n	800944e <_printf_float+0x442>
 8009464:	2900      	cmp	r1, #0
 8009466:	f43f ae8b 	beq.w	8009180 <_printf_float+0x174>
 800946a:	2300      	movs	r3, #0
 800946c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009470:	ab09      	add	r3, sp, #36	; 0x24
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	ec49 8b10 	vmov	d0, r8, r9
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	f8cd a004 	str.w	sl, [sp, #4]
 800947e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fd2d 	bl	8008ee2 <__cvt>
 8009488:	4680      	mov	r8, r0
 800948a:	e648      	b.n	800911e <_printf_float+0x112>

0800948c <_printf_common>:
 800948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009490:	4691      	mov	r9, r2
 8009492:	461f      	mov	r7, r3
 8009494:	688a      	ldr	r2, [r1, #8]
 8009496:	690b      	ldr	r3, [r1, #16]
 8009498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800949c:	4293      	cmp	r3, r2
 800949e:	bfb8      	it	lt
 80094a0:	4613      	movlt	r3, r2
 80094a2:	f8c9 3000 	str.w	r3, [r9]
 80094a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094aa:	4606      	mov	r6, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	b112      	cbz	r2, 80094b6 <_printf_common+0x2a>
 80094b0:	3301      	adds	r3, #1
 80094b2:	f8c9 3000 	str.w	r3, [r9]
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	0699      	lsls	r1, r3, #26
 80094ba:	bf42      	ittt	mi
 80094bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80094c0:	3302      	addmi	r3, #2
 80094c2:	f8c9 3000 	strmi.w	r3, [r9]
 80094c6:	6825      	ldr	r5, [r4, #0]
 80094c8:	f015 0506 	ands.w	r5, r5, #6
 80094cc:	d107      	bne.n	80094de <_printf_common+0x52>
 80094ce:	f104 0a19 	add.w	sl, r4, #25
 80094d2:	68e3      	ldr	r3, [r4, #12]
 80094d4:	f8d9 2000 	ldr.w	r2, [r9]
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	42ab      	cmp	r3, r5
 80094dc:	dc28      	bgt.n	8009530 <_printf_common+0xa4>
 80094de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	3300      	adds	r3, #0
 80094e6:	bf18      	it	ne
 80094e8:	2301      	movne	r3, #1
 80094ea:	0692      	lsls	r2, r2, #26
 80094ec:	d42d      	bmi.n	800954a <_printf_common+0xbe>
 80094ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094f2:	4639      	mov	r1, r7
 80094f4:	4630      	mov	r0, r6
 80094f6:	47c0      	blx	r8
 80094f8:	3001      	adds	r0, #1
 80094fa:	d020      	beq.n	800953e <_printf_common+0xb2>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	68e5      	ldr	r5, [r4, #12]
 8009500:	f8d9 2000 	ldr.w	r2, [r9]
 8009504:	f003 0306 	and.w	r3, r3, #6
 8009508:	2b04      	cmp	r3, #4
 800950a:	bf08      	it	eq
 800950c:	1aad      	subeq	r5, r5, r2
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	6922      	ldr	r2, [r4, #16]
 8009512:	bf0c      	ite	eq
 8009514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009518:	2500      	movne	r5, #0
 800951a:	4293      	cmp	r3, r2
 800951c:	bfc4      	itt	gt
 800951e:	1a9b      	subgt	r3, r3, r2
 8009520:	18ed      	addgt	r5, r5, r3
 8009522:	f04f 0900 	mov.w	r9, #0
 8009526:	341a      	adds	r4, #26
 8009528:	454d      	cmp	r5, r9
 800952a:	d11a      	bne.n	8009562 <_printf_common+0xd6>
 800952c:	2000      	movs	r0, #0
 800952e:	e008      	b.n	8009542 <_printf_common+0xb6>
 8009530:	2301      	movs	r3, #1
 8009532:	4652      	mov	r2, sl
 8009534:	4639      	mov	r1, r7
 8009536:	4630      	mov	r0, r6
 8009538:	47c0      	blx	r8
 800953a:	3001      	adds	r0, #1
 800953c:	d103      	bne.n	8009546 <_printf_common+0xba>
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009546:	3501      	adds	r5, #1
 8009548:	e7c3      	b.n	80094d2 <_printf_common+0x46>
 800954a:	18e1      	adds	r1, r4, r3
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	2030      	movs	r0, #48	; 0x30
 8009550:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009554:	4422      	add	r2, r4
 8009556:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800955a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800955e:	3302      	adds	r3, #2
 8009560:	e7c5      	b.n	80094ee <_printf_common+0x62>
 8009562:	2301      	movs	r3, #1
 8009564:	4622      	mov	r2, r4
 8009566:	4639      	mov	r1, r7
 8009568:	4630      	mov	r0, r6
 800956a:	47c0      	blx	r8
 800956c:	3001      	adds	r0, #1
 800956e:	d0e6      	beq.n	800953e <_printf_common+0xb2>
 8009570:	f109 0901 	add.w	r9, r9, #1
 8009574:	e7d8      	b.n	8009528 <_printf_common+0x9c>
	...

08009578 <_printf_i>:
 8009578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800957c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009580:	460c      	mov	r4, r1
 8009582:	7e09      	ldrb	r1, [r1, #24]
 8009584:	b085      	sub	sp, #20
 8009586:	296e      	cmp	r1, #110	; 0x6e
 8009588:	4617      	mov	r7, r2
 800958a:	4606      	mov	r6, r0
 800958c:	4698      	mov	r8, r3
 800958e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009590:	f000 80b3 	beq.w	80096fa <_printf_i+0x182>
 8009594:	d822      	bhi.n	80095dc <_printf_i+0x64>
 8009596:	2963      	cmp	r1, #99	; 0x63
 8009598:	d036      	beq.n	8009608 <_printf_i+0x90>
 800959a:	d80a      	bhi.n	80095b2 <_printf_i+0x3a>
 800959c:	2900      	cmp	r1, #0
 800959e:	f000 80b9 	beq.w	8009714 <_printf_i+0x19c>
 80095a2:	2958      	cmp	r1, #88	; 0x58
 80095a4:	f000 8083 	beq.w	80096ae <_printf_i+0x136>
 80095a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80095b0:	e032      	b.n	8009618 <_printf_i+0xa0>
 80095b2:	2964      	cmp	r1, #100	; 0x64
 80095b4:	d001      	beq.n	80095ba <_printf_i+0x42>
 80095b6:	2969      	cmp	r1, #105	; 0x69
 80095b8:	d1f6      	bne.n	80095a8 <_printf_i+0x30>
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	6813      	ldr	r3, [r2, #0]
 80095be:	0605      	lsls	r5, r0, #24
 80095c0:	f103 0104 	add.w	r1, r3, #4
 80095c4:	d52a      	bpl.n	800961c <_printf_i+0xa4>
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da03      	bge.n	80095d6 <_printf_i+0x5e>
 80095ce:	222d      	movs	r2, #45	; 0x2d
 80095d0:	425b      	negs	r3, r3
 80095d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80095d6:	486f      	ldr	r0, [pc, #444]	; (8009794 <_printf_i+0x21c>)
 80095d8:	220a      	movs	r2, #10
 80095da:	e039      	b.n	8009650 <_printf_i+0xd8>
 80095dc:	2973      	cmp	r1, #115	; 0x73
 80095de:	f000 809d 	beq.w	800971c <_printf_i+0x1a4>
 80095e2:	d808      	bhi.n	80095f6 <_printf_i+0x7e>
 80095e4:	296f      	cmp	r1, #111	; 0x6f
 80095e6:	d020      	beq.n	800962a <_printf_i+0xb2>
 80095e8:	2970      	cmp	r1, #112	; 0x70
 80095ea:	d1dd      	bne.n	80095a8 <_printf_i+0x30>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	f043 0320 	orr.w	r3, r3, #32
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	e003      	b.n	80095fe <_printf_i+0x86>
 80095f6:	2975      	cmp	r1, #117	; 0x75
 80095f8:	d017      	beq.n	800962a <_printf_i+0xb2>
 80095fa:	2978      	cmp	r1, #120	; 0x78
 80095fc:	d1d4      	bne.n	80095a8 <_printf_i+0x30>
 80095fe:	2378      	movs	r3, #120	; 0x78
 8009600:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009604:	4864      	ldr	r0, [pc, #400]	; (8009798 <_printf_i+0x220>)
 8009606:	e055      	b.n	80096b4 <_printf_i+0x13c>
 8009608:	6813      	ldr	r3, [r2, #0]
 800960a:	1d19      	adds	r1, r3, #4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6011      	str	r1, [r2, #0]
 8009610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009618:	2301      	movs	r3, #1
 800961a:	e08c      	b.n	8009736 <_printf_i+0x1be>
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6011      	str	r1, [r2, #0]
 8009620:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009624:	bf18      	it	ne
 8009626:	b21b      	sxthne	r3, r3
 8009628:	e7cf      	b.n	80095ca <_printf_i+0x52>
 800962a:	6813      	ldr	r3, [r2, #0]
 800962c:	6825      	ldr	r5, [r4, #0]
 800962e:	1d18      	adds	r0, r3, #4
 8009630:	6010      	str	r0, [r2, #0]
 8009632:	0628      	lsls	r0, r5, #24
 8009634:	d501      	bpl.n	800963a <_printf_i+0xc2>
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	e002      	b.n	8009640 <_printf_i+0xc8>
 800963a:	0668      	lsls	r0, r5, #25
 800963c:	d5fb      	bpl.n	8009636 <_printf_i+0xbe>
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	4854      	ldr	r0, [pc, #336]	; (8009794 <_printf_i+0x21c>)
 8009642:	296f      	cmp	r1, #111	; 0x6f
 8009644:	bf14      	ite	ne
 8009646:	220a      	movne	r2, #10
 8009648:	2208      	moveq	r2, #8
 800964a:	2100      	movs	r1, #0
 800964c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009650:	6865      	ldr	r5, [r4, #4]
 8009652:	60a5      	str	r5, [r4, #8]
 8009654:	2d00      	cmp	r5, #0
 8009656:	f2c0 8095 	blt.w	8009784 <_printf_i+0x20c>
 800965a:	6821      	ldr	r1, [r4, #0]
 800965c:	f021 0104 	bic.w	r1, r1, #4
 8009660:	6021      	str	r1, [r4, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d13d      	bne.n	80096e2 <_printf_i+0x16a>
 8009666:	2d00      	cmp	r5, #0
 8009668:	f040 808e 	bne.w	8009788 <_printf_i+0x210>
 800966c:	4665      	mov	r5, ip
 800966e:	2a08      	cmp	r2, #8
 8009670:	d10b      	bne.n	800968a <_printf_i+0x112>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	07db      	lsls	r3, r3, #31
 8009676:	d508      	bpl.n	800968a <_printf_i+0x112>
 8009678:	6923      	ldr	r3, [r4, #16]
 800967a:	6862      	ldr	r2, [r4, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	bfde      	ittt	le
 8009680:	2330      	movle	r3, #48	; 0x30
 8009682:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009686:	f105 35ff 	addle.w	r5, r5, #4294967295
 800968a:	ebac 0305 	sub.w	r3, ip, r5
 800968e:	6123      	str	r3, [r4, #16]
 8009690:	f8cd 8000 	str.w	r8, [sp]
 8009694:	463b      	mov	r3, r7
 8009696:	aa03      	add	r2, sp, #12
 8009698:	4621      	mov	r1, r4
 800969a:	4630      	mov	r0, r6
 800969c:	f7ff fef6 	bl	800948c <_printf_common>
 80096a0:	3001      	adds	r0, #1
 80096a2:	d14d      	bne.n	8009740 <_printf_i+0x1c8>
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	b005      	add	sp, #20
 80096aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ae:	4839      	ldr	r0, [pc, #228]	; (8009794 <_printf_i+0x21c>)
 80096b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80096b4:	6813      	ldr	r3, [r2, #0]
 80096b6:	6821      	ldr	r1, [r4, #0]
 80096b8:	1d1d      	adds	r5, r3, #4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6015      	str	r5, [r2, #0]
 80096be:	060a      	lsls	r2, r1, #24
 80096c0:	d50b      	bpl.n	80096da <_printf_i+0x162>
 80096c2:	07ca      	lsls	r2, r1, #31
 80096c4:	bf44      	itt	mi
 80096c6:	f041 0120 	orrmi.w	r1, r1, #32
 80096ca:	6021      	strmi	r1, [r4, #0]
 80096cc:	b91b      	cbnz	r3, 80096d6 <_printf_i+0x15e>
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	f022 0220 	bic.w	r2, r2, #32
 80096d4:	6022      	str	r2, [r4, #0]
 80096d6:	2210      	movs	r2, #16
 80096d8:	e7b7      	b.n	800964a <_printf_i+0xd2>
 80096da:	064d      	lsls	r5, r1, #25
 80096dc:	bf48      	it	mi
 80096de:	b29b      	uxthmi	r3, r3
 80096e0:	e7ef      	b.n	80096c2 <_printf_i+0x14a>
 80096e2:	4665      	mov	r5, ip
 80096e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e8:	fb02 3311 	mls	r3, r2, r1, r3
 80096ec:	5cc3      	ldrb	r3, [r0, r3]
 80096ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80096f2:	460b      	mov	r3, r1
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d1f5      	bne.n	80096e4 <_printf_i+0x16c>
 80096f8:	e7b9      	b.n	800966e <_printf_i+0xf6>
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	6825      	ldr	r5, [r4, #0]
 80096fe:	6961      	ldr	r1, [r4, #20]
 8009700:	1d18      	adds	r0, r3, #4
 8009702:	6010      	str	r0, [r2, #0]
 8009704:	0628      	lsls	r0, r5, #24
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	d501      	bpl.n	800970e <_printf_i+0x196>
 800970a:	6019      	str	r1, [r3, #0]
 800970c:	e002      	b.n	8009714 <_printf_i+0x19c>
 800970e:	066a      	lsls	r2, r5, #25
 8009710:	d5fb      	bpl.n	800970a <_printf_i+0x192>
 8009712:	8019      	strh	r1, [r3, #0]
 8009714:	2300      	movs	r3, #0
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	4665      	mov	r5, ip
 800971a:	e7b9      	b.n	8009690 <_printf_i+0x118>
 800971c:	6813      	ldr	r3, [r2, #0]
 800971e:	1d19      	adds	r1, r3, #4
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	681d      	ldr	r5, [r3, #0]
 8009724:	6862      	ldr	r2, [r4, #4]
 8009726:	2100      	movs	r1, #0
 8009728:	4628      	mov	r0, r5
 800972a:	f7f6 fd59 	bl	80001e0 <memchr>
 800972e:	b108      	cbz	r0, 8009734 <_printf_i+0x1bc>
 8009730:	1b40      	subs	r0, r0, r5
 8009732:	6060      	str	r0, [r4, #4]
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	6123      	str	r3, [r4, #16]
 8009738:	2300      	movs	r3, #0
 800973a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800973e:	e7a7      	b.n	8009690 <_printf_i+0x118>
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	462a      	mov	r2, r5
 8009744:	4639      	mov	r1, r7
 8009746:	4630      	mov	r0, r6
 8009748:	47c0      	blx	r8
 800974a:	3001      	adds	r0, #1
 800974c:	d0aa      	beq.n	80096a4 <_printf_i+0x12c>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	079b      	lsls	r3, r3, #30
 8009752:	d413      	bmi.n	800977c <_printf_i+0x204>
 8009754:	68e0      	ldr	r0, [r4, #12]
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	4298      	cmp	r0, r3
 800975a:	bfb8      	it	lt
 800975c:	4618      	movlt	r0, r3
 800975e:	e7a3      	b.n	80096a8 <_printf_i+0x130>
 8009760:	2301      	movs	r3, #1
 8009762:	464a      	mov	r2, r9
 8009764:	4639      	mov	r1, r7
 8009766:	4630      	mov	r0, r6
 8009768:	47c0      	blx	r8
 800976a:	3001      	adds	r0, #1
 800976c:	d09a      	beq.n	80096a4 <_printf_i+0x12c>
 800976e:	3501      	adds	r5, #1
 8009770:	68e3      	ldr	r3, [r4, #12]
 8009772:	9a03      	ldr	r2, [sp, #12]
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	42ab      	cmp	r3, r5
 8009778:	dcf2      	bgt.n	8009760 <_printf_i+0x1e8>
 800977a:	e7eb      	b.n	8009754 <_printf_i+0x1dc>
 800977c:	2500      	movs	r5, #0
 800977e:	f104 0919 	add.w	r9, r4, #25
 8009782:	e7f5      	b.n	8009770 <_printf_i+0x1f8>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1ac      	bne.n	80096e2 <_printf_i+0x16a>
 8009788:	7803      	ldrb	r3, [r0, #0]
 800978a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800978e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009792:	e76c      	b.n	800966e <_printf_i+0xf6>
 8009794:	0800d5d6 	.word	0x0800d5d6
 8009798:	0800d5e7 	.word	0x0800d5e7

0800979c <iprintf>:
 800979c:	b40f      	push	{r0, r1, r2, r3}
 800979e:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <iprintf+0x2c>)
 80097a0:	b513      	push	{r0, r1, r4, lr}
 80097a2:	681c      	ldr	r4, [r3, #0]
 80097a4:	b124      	cbz	r4, 80097b0 <iprintf+0x14>
 80097a6:	69a3      	ldr	r3, [r4, #24]
 80097a8:	b913      	cbnz	r3, 80097b0 <iprintf+0x14>
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fe94 	bl	800a4d8 <__sinit>
 80097b0:	ab05      	add	r3, sp, #20
 80097b2:	9a04      	ldr	r2, [sp, #16]
 80097b4:	68a1      	ldr	r1, [r4, #8]
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	4620      	mov	r0, r4
 80097ba:	f001 fae9 	bl	800ad90 <_vfiprintf_r>
 80097be:	b002      	add	sp, #8
 80097c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c4:	b004      	add	sp, #16
 80097c6:	4770      	bx	lr
 80097c8:	2000000c 	.word	0x2000000c

080097cc <quorem>:
 80097cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	6903      	ldr	r3, [r0, #16]
 80097d2:	690c      	ldr	r4, [r1, #16]
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	4680      	mov	r8, r0
 80097d8:	f2c0 8082 	blt.w	80098e0 <quorem+0x114>
 80097dc:	3c01      	subs	r4, #1
 80097de:	f101 0714 	add.w	r7, r1, #20
 80097e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80097e6:	f100 0614 	add.w	r6, r0, #20
 80097ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80097ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80097f2:	eb06 030c 	add.w	r3, r6, ip
 80097f6:	3501      	adds	r5, #1
 80097f8:	eb07 090c 	add.w	r9, r7, ip
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8009802:	b395      	cbz	r5, 800986a <quorem+0x9e>
 8009804:	f04f 0a00 	mov.w	sl, #0
 8009808:	4638      	mov	r0, r7
 800980a:	46b6      	mov	lr, r6
 800980c:	46d3      	mov	fp, sl
 800980e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009812:	b293      	uxth	r3, r2
 8009814:	fb05 a303 	mla	r3, r5, r3, sl
 8009818:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800981c:	b29b      	uxth	r3, r3
 800981e:	ebab 0303 	sub.w	r3, fp, r3
 8009822:	0c12      	lsrs	r2, r2, #16
 8009824:	f8de b000 	ldr.w	fp, [lr]
 8009828:	fb05 a202 	mla	r2, r5, r2, sl
 800982c:	fa13 f38b 	uxtah	r3, r3, fp
 8009830:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009834:	fa1f fb82 	uxth.w	fp, r2
 8009838:	f8de 2000 	ldr.w	r2, [lr]
 800983c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009844:	b29b      	uxth	r3, r3
 8009846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800984a:	4581      	cmp	r9, r0
 800984c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009850:	f84e 3b04 	str.w	r3, [lr], #4
 8009854:	d2db      	bcs.n	800980e <quorem+0x42>
 8009856:	f856 300c 	ldr.w	r3, [r6, ip]
 800985a:	b933      	cbnz	r3, 800986a <quorem+0x9e>
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	3b04      	subs	r3, #4
 8009860:	429e      	cmp	r6, r3
 8009862:	461a      	mov	r2, r3
 8009864:	d330      	bcc.n	80098c8 <quorem+0xfc>
 8009866:	f8c8 4010 	str.w	r4, [r8, #16]
 800986a:	4640      	mov	r0, r8
 800986c:	f001 f8ea 	bl	800aa44 <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	db25      	blt.n	80098c0 <quorem+0xf4>
 8009874:	3501      	adds	r5, #1
 8009876:	4630      	mov	r0, r6
 8009878:	f04f 0c00 	mov.w	ip, #0
 800987c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009880:	f8d0 e000 	ldr.w	lr, [r0]
 8009884:	b293      	uxth	r3, r2
 8009886:	ebac 0303 	sub.w	r3, ip, r3
 800988a:	0c12      	lsrs	r2, r2, #16
 800988c:	fa13 f38e 	uxtah	r3, r3, lr
 8009890:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009894:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009898:	b29b      	uxth	r3, r3
 800989a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800989e:	45b9      	cmp	r9, r7
 80098a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098a4:	f840 3b04 	str.w	r3, [r0], #4
 80098a8:	d2e8      	bcs.n	800987c <quorem+0xb0>
 80098aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80098ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80098b2:	b92a      	cbnz	r2, 80098c0 <quorem+0xf4>
 80098b4:	3b04      	subs	r3, #4
 80098b6:	429e      	cmp	r6, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	d30b      	bcc.n	80098d4 <quorem+0x108>
 80098bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80098c0:	4628      	mov	r0, r5
 80098c2:	b003      	add	sp, #12
 80098c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c8:	6812      	ldr	r2, [r2, #0]
 80098ca:	3b04      	subs	r3, #4
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d1ca      	bne.n	8009866 <quorem+0x9a>
 80098d0:	3c01      	subs	r4, #1
 80098d2:	e7c5      	b.n	8009860 <quorem+0x94>
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	3b04      	subs	r3, #4
 80098d8:	2a00      	cmp	r2, #0
 80098da:	d1ef      	bne.n	80098bc <quorem+0xf0>
 80098dc:	3c01      	subs	r4, #1
 80098de:	e7ea      	b.n	80098b6 <quorem+0xea>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7ee      	b.n	80098c2 <quorem+0xf6>
 80098e4:	0000      	movs	r0, r0
	...

080098e8 <_dtoa_r>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	ec57 6b10 	vmov	r6, r7, d0
 80098f0:	b097      	sub	sp, #92	; 0x5c
 80098f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098f4:	9106      	str	r1, [sp, #24]
 80098f6:	4604      	mov	r4, r0
 80098f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80098fa:	9312      	str	r3, [sp, #72]	; 0x48
 80098fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009900:	e9cd 6700 	strd	r6, r7, [sp]
 8009904:	b93d      	cbnz	r5, 8009916 <_dtoa_r+0x2e>
 8009906:	2010      	movs	r0, #16
 8009908:	f000 fe7e 	bl	800a608 <malloc>
 800990c:	6260      	str	r0, [r4, #36]	; 0x24
 800990e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009912:	6005      	str	r5, [r0, #0]
 8009914:	60c5      	str	r5, [r0, #12]
 8009916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009918:	6819      	ldr	r1, [r3, #0]
 800991a:	b151      	cbz	r1, 8009932 <_dtoa_r+0x4a>
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	604a      	str	r2, [r1, #4]
 8009920:	2301      	movs	r3, #1
 8009922:	4093      	lsls	r3, r2
 8009924:	608b      	str	r3, [r1, #8]
 8009926:	4620      	mov	r0, r4
 8009928:	f000 feaa 	bl	800a680 <_Bfree>
 800992c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800992e:	2200      	movs	r2, #0
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	1e3b      	subs	r3, r7, #0
 8009934:	bfbb      	ittet	lt
 8009936:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800993a:	9301      	strlt	r3, [sp, #4]
 800993c:	2300      	movge	r3, #0
 800993e:	2201      	movlt	r2, #1
 8009940:	bfac      	ite	ge
 8009942:	f8c8 3000 	strge.w	r3, [r8]
 8009946:	f8c8 2000 	strlt.w	r2, [r8]
 800994a:	4baf      	ldr	r3, [pc, #700]	; (8009c08 <_dtoa_r+0x320>)
 800994c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009950:	ea33 0308 	bics.w	r3, r3, r8
 8009954:	d114      	bne.n	8009980 <_dtoa_r+0x98>
 8009956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009958:	f242 730f 	movw	r3, #9999	; 0x270f
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	b923      	cbnz	r3, 800996c <_dtoa_r+0x84>
 8009962:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009966:	2800      	cmp	r0, #0
 8009968:	f000 8542 	beq.w	800a3f0 <_dtoa_r+0xb08>
 800996c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800996e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009c1c <_dtoa_r+0x334>
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 8544 	beq.w	800a400 <_dtoa_r+0xb18>
 8009978:	f10b 0303 	add.w	r3, fp, #3
 800997c:	f000 bd3e 	b.w	800a3fc <_dtoa_r+0xb14>
 8009980:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009984:	2200      	movs	r2, #0
 8009986:	2300      	movs	r3, #0
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009990:	4681      	mov	r9, r0
 8009992:	b168      	cbz	r0, 80099b0 <_dtoa_r+0xc8>
 8009994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009996:	2301      	movs	r3, #1
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8524 	beq.w	800a3ea <_dtoa_r+0xb02>
 80099a2:	4b9a      	ldr	r3, [pc, #616]	; (8009c0c <_dtoa_r+0x324>)
 80099a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	f000 bd28 	b.w	800a400 <_dtoa_r+0xb18>
 80099b0:	aa14      	add	r2, sp, #80	; 0x50
 80099b2:	a915      	add	r1, sp, #84	; 0x54
 80099b4:	ec47 6b10 	vmov	d0, r6, r7
 80099b8:	4620      	mov	r0, r4
 80099ba:	f001 f8ba 	bl	800ab32 <__d2b>
 80099be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80099c2:	9004      	str	r0, [sp, #16]
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	d07c      	beq.n	8009ac2 <_dtoa_r+0x1da>
 80099c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80099d0:	46b2      	mov	sl, r6
 80099d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80099d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80099de:	2200      	movs	r2, #0
 80099e0:	4b8b      	ldr	r3, [pc, #556]	; (8009c10 <_dtoa_r+0x328>)
 80099e2:	4650      	mov	r0, sl
 80099e4:	4659      	mov	r1, fp
 80099e6:	f7f6 fc4f 	bl	8000288 <__aeabi_dsub>
 80099ea:	a381      	add	r3, pc, #516	; (adr r3, 8009bf0 <_dtoa_r+0x308>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f7f6 fe02 	bl	80005f8 <__aeabi_dmul>
 80099f4:	a380      	add	r3, pc, #512	; (adr r3, 8009bf8 <_dtoa_r+0x310>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	f7f6 fc47 	bl	800028c <__adddf3>
 80099fe:	4606      	mov	r6, r0
 8009a00:	4628      	mov	r0, r5
 8009a02:	460f      	mov	r7, r1
 8009a04:	f7f6 fd8e 	bl	8000524 <__aeabi_i2d>
 8009a08:	a37d      	add	r3, pc, #500	; (adr r3, 8009c00 <_dtoa_r+0x318>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	f7f6 fdf3 	bl	80005f8 <__aeabi_dmul>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4630      	mov	r0, r6
 8009a18:	4639      	mov	r1, r7
 8009a1a:	f7f6 fc37 	bl	800028c <__adddf3>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460f      	mov	r7, r1
 8009a22:	f7f7 f899 	bl	8000b58 <__aeabi_d2iz>
 8009a26:	2200      	movs	r2, #0
 8009a28:	4682      	mov	sl, r0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f7 f854 	bl	8000adc <__aeabi_dcmplt>
 8009a34:	b148      	cbz	r0, 8009a4a <_dtoa_r+0x162>
 8009a36:	4650      	mov	r0, sl
 8009a38:	f7f6 fd74 	bl	8000524 <__aeabi_i2d>
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	463b      	mov	r3, r7
 8009a40:	f7f7 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a44:	b908      	cbnz	r0, 8009a4a <_dtoa_r+0x162>
 8009a46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a4a:	f1ba 0f16 	cmp.w	sl, #22
 8009a4e:	d859      	bhi.n	8009b04 <_dtoa_r+0x21c>
 8009a50:	4970      	ldr	r1, [pc, #448]	; (8009c14 <_dtoa_r+0x32c>)
 8009a52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a5e:	f7f7 f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d050      	beq.n	8009b08 <_dtoa_r+0x220>
 8009a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a70:	1b5d      	subs	r5, r3, r5
 8009a72:	f1b5 0801 	subs.w	r8, r5, #1
 8009a76:	bf49      	itett	mi
 8009a78:	f1c5 0301 	rsbmi	r3, r5, #1
 8009a7c:	2300      	movpl	r3, #0
 8009a7e:	9305      	strmi	r3, [sp, #20]
 8009a80:	f04f 0800 	movmi.w	r8, #0
 8009a84:	bf58      	it	pl
 8009a86:	9305      	strpl	r3, [sp, #20]
 8009a88:	f1ba 0f00 	cmp.w	sl, #0
 8009a8c:	db3e      	blt.n	8009b0c <_dtoa_r+0x224>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	44d0      	add	r8, sl
 8009a92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	9b06      	ldr	r3, [sp, #24]
 8009a9a:	2b09      	cmp	r3, #9
 8009a9c:	f200 8090 	bhi.w	8009bc0 <_dtoa_r+0x2d8>
 8009aa0:	2b05      	cmp	r3, #5
 8009aa2:	bfc4      	itt	gt
 8009aa4:	3b04      	subgt	r3, #4
 8009aa6:	9306      	strgt	r3, [sp, #24]
 8009aa8:	9b06      	ldr	r3, [sp, #24]
 8009aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8009aae:	bfcc      	ite	gt
 8009ab0:	2500      	movgt	r5, #0
 8009ab2:	2501      	movle	r5, #1
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	f200 808f 	bhi.w	8009bd8 <_dtoa_r+0x2f0>
 8009aba:	e8df f003 	tbb	[pc, r3]
 8009abe:	7f7d      	.short	0x7f7d
 8009ac0:	7131      	.short	0x7131
 8009ac2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009ac6:	441d      	add	r5, r3
 8009ac8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009acc:	2820      	cmp	r0, #32
 8009ace:	dd13      	ble.n	8009af8 <_dtoa_r+0x210>
 8009ad0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009ad4:	9b00      	ldr	r3, [sp, #0]
 8009ad6:	fa08 f800 	lsl.w	r8, r8, r0
 8009ada:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009ade:	fa23 f000 	lsr.w	r0, r3, r0
 8009ae2:	ea48 0000 	orr.w	r0, r8, r0
 8009ae6:	f7f6 fd0d 	bl	8000504 <__aeabi_ui2d>
 8009aea:	2301      	movs	r3, #1
 8009aec:	4682      	mov	sl, r0
 8009aee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009af2:	3d01      	subs	r5, #1
 8009af4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009af6:	e772      	b.n	80099de <_dtoa_r+0xf6>
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	f1c0 0020 	rsb	r0, r0, #32
 8009afe:	fa03 f000 	lsl.w	r0, r3, r0
 8009b02:	e7f0      	b.n	8009ae6 <_dtoa_r+0x1fe>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e7b1      	b.n	8009a6c <_dtoa_r+0x184>
 8009b08:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b0a:	e7b0      	b.n	8009a6e <_dtoa_r+0x186>
 8009b0c:	9b05      	ldr	r3, [sp, #20]
 8009b0e:	eba3 030a 	sub.w	r3, r3, sl
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	f1ca 0300 	rsb	r3, sl, #0
 8009b18:	9307      	str	r3, [sp, #28]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b1e:	e7bb      	b.n	8009a98 <_dtoa_r+0x1b0>
 8009b20:	2301      	movs	r3, #1
 8009b22:	930a      	str	r3, [sp, #40]	; 0x28
 8009b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd59      	ble.n	8009bde <_dtoa_r+0x2f6>
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	4699      	mov	r9, r3
 8009b2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b30:	2200      	movs	r2, #0
 8009b32:	6072      	str	r2, [r6, #4]
 8009b34:	2204      	movs	r2, #4
 8009b36:	f102 0014 	add.w	r0, r2, #20
 8009b3a:	4298      	cmp	r0, r3
 8009b3c:	6871      	ldr	r1, [r6, #4]
 8009b3e:	d953      	bls.n	8009be8 <_dtoa_r+0x300>
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fd69 	bl	800a618 <_Balloc>
 8009b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b48:	6030      	str	r0, [r6, #0]
 8009b4a:	f1b9 0f0e 	cmp.w	r9, #14
 8009b4e:	f8d3 b000 	ldr.w	fp, [r3]
 8009b52:	f200 80e6 	bhi.w	8009d22 <_dtoa_r+0x43a>
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f000 80e3 	beq.w	8009d22 <_dtoa_r+0x43a>
 8009b5c:	ed9d 7b00 	vldr	d7, [sp]
 8009b60:	f1ba 0f00 	cmp.w	sl, #0
 8009b64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009b68:	dd74      	ble.n	8009c54 <_dtoa_r+0x36c>
 8009b6a:	4a2a      	ldr	r2, [pc, #168]	; (8009c14 <_dtoa_r+0x32c>)
 8009b6c:	f00a 030f 	and.w	r3, sl, #15
 8009b70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b74:	ed93 7b00 	vldr	d7, [r3]
 8009b78:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009b7c:	06f0      	lsls	r0, r6, #27
 8009b7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009b82:	d565      	bpl.n	8009c50 <_dtoa_r+0x368>
 8009b84:	4b24      	ldr	r3, [pc, #144]	; (8009c18 <_dtoa_r+0x330>)
 8009b86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b8e:	f7f6 fe5d 	bl	800084c <__aeabi_ddiv>
 8009b92:	e9cd 0100 	strd	r0, r1, [sp]
 8009b96:	f006 060f 	and.w	r6, r6, #15
 8009b9a:	2503      	movs	r5, #3
 8009b9c:	4f1e      	ldr	r7, [pc, #120]	; (8009c18 <_dtoa_r+0x330>)
 8009b9e:	e04c      	b.n	8009c3a <_dtoa_r+0x352>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba6:	4453      	add	r3, sl
 8009ba8:	f103 0901 	add.w	r9, r3, #1
 8009bac:	9302      	str	r3, [sp, #8]
 8009bae:	464b      	mov	r3, r9
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	bfb8      	it	lt
 8009bb4:	2301      	movlt	r3, #1
 8009bb6:	e7ba      	b.n	8009b2e <_dtoa_r+0x246>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e7b2      	b.n	8009b22 <_dtoa_r+0x23a>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e7f0      	b.n	8009ba2 <_dtoa_r+0x2ba>
 8009bc0:	2501      	movs	r5, #1
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9306      	str	r3, [sp, #24]
 8009bc6:	950a      	str	r5, [sp, #40]	; 0x28
 8009bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	4699      	mov	r9, r3
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2312      	movs	r3, #18
 8009bd4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009bd6:	e7aa      	b.n	8009b2e <_dtoa_r+0x246>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	930a      	str	r3, [sp, #40]	; 0x28
 8009bdc:	e7f4      	b.n	8009bc8 <_dtoa_r+0x2e0>
 8009bde:	2301      	movs	r3, #1
 8009be0:	9302      	str	r3, [sp, #8]
 8009be2:	4699      	mov	r9, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	e7f5      	b.n	8009bd4 <_dtoa_r+0x2ec>
 8009be8:	3101      	adds	r1, #1
 8009bea:	6071      	str	r1, [r6, #4]
 8009bec:	0052      	lsls	r2, r2, #1
 8009bee:	e7a2      	b.n	8009b36 <_dtoa_r+0x24e>
 8009bf0:	636f4361 	.word	0x636f4361
 8009bf4:	3fd287a7 	.word	0x3fd287a7
 8009bf8:	8b60c8b3 	.word	0x8b60c8b3
 8009bfc:	3fc68a28 	.word	0x3fc68a28
 8009c00:	509f79fb 	.word	0x509f79fb
 8009c04:	3fd34413 	.word	0x3fd34413
 8009c08:	7ff00000 	.word	0x7ff00000
 8009c0c:	0800d5d5 	.word	0x0800d5d5
 8009c10:	3ff80000 	.word	0x3ff80000
 8009c14:	0800d690 	.word	0x0800d690
 8009c18:	0800d668 	.word	0x0800d668
 8009c1c:	0800d601 	.word	0x0800d601
 8009c20:	07f1      	lsls	r1, r6, #31
 8009c22:	d508      	bpl.n	8009c36 <_dtoa_r+0x34e>
 8009c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c34:	3501      	adds	r5, #1
 8009c36:	1076      	asrs	r6, r6, #1
 8009c38:	3708      	adds	r7, #8
 8009c3a:	2e00      	cmp	r6, #0
 8009c3c:	d1f0      	bne.n	8009c20 <_dtoa_r+0x338>
 8009c3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c46:	f7f6 fe01 	bl	800084c <__aeabi_ddiv>
 8009c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8009c4e:	e01a      	b.n	8009c86 <_dtoa_r+0x39e>
 8009c50:	2502      	movs	r5, #2
 8009c52:	e7a3      	b.n	8009b9c <_dtoa_r+0x2b4>
 8009c54:	f000 80a0 	beq.w	8009d98 <_dtoa_r+0x4b0>
 8009c58:	f1ca 0600 	rsb	r6, sl, #0
 8009c5c:	4b9f      	ldr	r3, [pc, #636]	; (8009edc <_dtoa_r+0x5f4>)
 8009c5e:	4fa0      	ldr	r7, [pc, #640]	; (8009ee0 <_dtoa_r+0x5f8>)
 8009c60:	f006 020f 	and.w	r2, r6, #15
 8009c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c70:	f7f6 fcc2 	bl	80005f8 <__aeabi_dmul>
 8009c74:	e9cd 0100 	strd	r0, r1, [sp]
 8009c78:	1136      	asrs	r6, r6, #4
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2502      	movs	r5, #2
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	d17f      	bne.n	8009d82 <_dtoa_r+0x49a>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e1      	bne.n	8009c4a <_dtoa_r+0x362>
 8009c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 8087 	beq.w	8009d9c <_dtoa_r+0x4b4>
 8009c8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c92:	2200      	movs	r2, #0
 8009c94:	4b93      	ldr	r3, [pc, #588]	; (8009ee4 <_dtoa_r+0x5fc>)
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d07c      	beq.n	8009d9c <_dtoa_r+0x4b4>
 8009ca2:	f1b9 0f00 	cmp.w	r9, #0
 8009ca6:	d079      	beq.n	8009d9c <_dtoa_r+0x4b4>
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dd35      	ble.n	8009d1a <_dtoa_r+0x432>
 8009cae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009cb2:	9308      	str	r3, [sp, #32]
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4b8b      	ldr	r3, [pc, #556]	; (8009ee8 <_dtoa_r+0x600>)
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7f6 fc9c 	bl	80005f8 <__aeabi_dmul>
 8009cc0:	e9cd 0100 	strd	r0, r1, [sp]
 8009cc4:	9f02      	ldr	r7, [sp, #8]
 8009cc6:	3501      	adds	r5, #1
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f7f6 fc2b 	bl	8000524 <__aeabi_i2d>
 8009cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4b84      	ldr	r3, [pc, #528]	; (8009eec <_dtoa_r+0x604>)
 8009cda:	f7f6 fad7 	bl	800028c <__adddf3>
 8009cde:	4605      	mov	r5, r0
 8009ce0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009ce4:	2f00      	cmp	r7, #0
 8009ce6:	d15d      	bne.n	8009da4 <_dtoa_r+0x4bc>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4b81      	ldr	r3, [pc, #516]	; (8009ef0 <_dtoa_r+0x608>)
 8009cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cf0:	f7f6 faca 	bl	8000288 <__aeabi_dsub>
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4633      	mov	r3, r6
 8009cf8:	e9cd 0100 	strd	r0, r1, [sp]
 8009cfc:	f7f6 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	f040 8288 	bne.w	800a216 <_dtoa_r+0x92e>
 8009d06:	462a      	mov	r2, r5
 8009d08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d10:	f7f6 fee4 	bl	8000adc <__aeabi_dcmplt>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f040 827c 	bne.w	800a212 <_dtoa_r+0x92a>
 8009d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8009d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f2c0 8150 	blt.w	8009fca <_dtoa_r+0x6e2>
 8009d2a:	f1ba 0f0e 	cmp.w	sl, #14
 8009d2e:	f300 814c 	bgt.w	8009fca <_dtoa_r+0x6e2>
 8009d32:	4b6a      	ldr	r3, [pc, #424]	; (8009edc <_dtoa_r+0x5f4>)
 8009d34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d38:	ed93 7b00 	vldr	d7, [r3]
 8009d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d44:	f280 80d8 	bge.w	8009ef8 <_dtoa_r+0x610>
 8009d48:	f1b9 0f00 	cmp.w	r9, #0
 8009d4c:	f300 80d4 	bgt.w	8009ef8 <_dtoa_r+0x610>
 8009d50:	f040 825e 	bne.w	800a210 <_dtoa_r+0x928>
 8009d54:	2200      	movs	r2, #0
 8009d56:	4b66      	ldr	r3, [pc, #408]	; (8009ef0 <_dtoa_r+0x608>)
 8009d58:	ec51 0b17 	vmov	r0, r1, d7
 8009d5c:	f7f6 fc4c 	bl	80005f8 <__aeabi_dmul>
 8009d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d64:	f7f6 fece 	bl	8000b04 <__aeabi_dcmpge>
 8009d68:	464f      	mov	r7, r9
 8009d6a:	464e      	mov	r6, r9
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f040 8234 	bne.w	800a1da <_dtoa_r+0x8f2>
 8009d72:	2331      	movs	r3, #49	; 0x31
 8009d74:	f10b 0501 	add.w	r5, fp, #1
 8009d78:	f88b 3000 	strb.w	r3, [fp]
 8009d7c:	f10a 0a01 	add.w	sl, sl, #1
 8009d80:	e22f      	b.n	800a1e2 <_dtoa_r+0x8fa>
 8009d82:	07f2      	lsls	r2, r6, #31
 8009d84:	d505      	bpl.n	8009d92 <_dtoa_r+0x4aa>
 8009d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d8a:	f7f6 fc35 	bl	80005f8 <__aeabi_dmul>
 8009d8e:	3501      	adds	r5, #1
 8009d90:	2301      	movs	r3, #1
 8009d92:	1076      	asrs	r6, r6, #1
 8009d94:	3708      	adds	r7, #8
 8009d96:	e772      	b.n	8009c7e <_dtoa_r+0x396>
 8009d98:	2502      	movs	r5, #2
 8009d9a:	e774      	b.n	8009c86 <_dtoa_r+0x39e>
 8009d9c:	f8cd a020 	str.w	sl, [sp, #32]
 8009da0:	464f      	mov	r7, r9
 8009da2:	e791      	b.n	8009cc8 <_dtoa_r+0x3e0>
 8009da4:	4b4d      	ldr	r3, [pc, #308]	; (8009edc <_dtoa_r+0x5f4>)
 8009da6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009daa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d047      	beq.n	8009e44 <_dtoa_r+0x55c>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	2000      	movs	r0, #0
 8009dba:	494e      	ldr	r1, [pc, #312]	; (8009ef4 <_dtoa_r+0x60c>)
 8009dbc:	f7f6 fd46 	bl	800084c <__aeabi_ddiv>
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	4633      	mov	r3, r6
 8009dc4:	f7f6 fa60 	bl	8000288 <__aeabi_dsub>
 8009dc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009dcc:	465d      	mov	r5, fp
 8009dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd2:	f7f6 fec1 	bl	8000b58 <__aeabi_d2iz>
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	f7f6 fba4 	bl	8000524 <__aeabi_i2d>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009de4:	f7f6 fa50 	bl	8000288 <__aeabi_dsub>
 8009de8:	3630      	adds	r6, #48	; 0x30
 8009dea:	f805 6b01 	strb.w	r6, [r5], #1
 8009dee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009df2:	e9cd 0100 	strd	r0, r1, [sp]
 8009df6:	f7f6 fe71 	bl	8000adc <__aeabi_dcmplt>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d163      	bne.n	8009ec6 <_dtoa_r+0x5de>
 8009dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e02:	2000      	movs	r0, #0
 8009e04:	4937      	ldr	r1, [pc, #220]	; (8009ee4 <_dtoa_r+0x5fc>)
 8009e06:	f7f6 fa3f 	bl	8000288 <__aeabi_dsub>
 8009e0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e0e:	f7f6 fe65 	bl	8000adc <__aeabi_dcmplt>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f040 80b7 	bne.w	8009f86 <_dtoa_r+0x69e>
 8009e18:	eba5 030b 	sub.w	r3, r5, fp
 8009e1c:	429f      	cmp	r7, r3
 8009e1e:	f77f af7c 	ble.w	8009d1a <_dtoa_r+0x432>
 8009e22:	2200      	movs	r2, #0
 8009e24:	4b30      	ldr	r3, [pc, #192]	; (8009ee8 <_dtoa_r+0x600>)
 8009e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e2a:	f7f6 fbe5 	bl	80005f8 <__aeabi_dmul>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e34:	4b2c      	ldr	r3, [pc, #176]	; (8009ee8 <_dtoa_r+0x600>)
 8009e36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e3a:	f7f6 fbdd 	bl	80005f8 <__aeabi_dmul>
 8009e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009e42:	e7c4      	b.n	8009dce <_dtoa_r+0x4e6>
 8009e44:	462a      	mov	r2, r5
 8009e46:	4633      	mov	r3, r6
 8009e48:	f7f6 fbd6 	bl	80005f8 <__aeabi_dmul>
 8009e4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e50:	eb0b 0507 	add.w	r5, fp, r7
 8009e54:	465e      	mov	r6, fp
 8009e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e5a:	f7f6 fe7d 	bl	8000b58 <__aeabi_d2iz>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	f7f6 fb60 	bl	8000524 <__aeabi_i2d>
 8009e64:	3730      	adds	r7, #48	; 0x30
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e6e:	f7f6 fa0b 	bl	8000288 <__aeabi_dsub>
 8009e72:	f806 7b01 	strb.w	r7, [r6], #1
 8009e76:	42ae      	cmp	r6, r5
 8009e78:	e9cd 0100 	strd	r0, r1, [sp]
 8009e7c:	f04f 0200 	mov.w	r2, #0
 8009e80:	d126      	bne.n	8009ed0 <_dtoa_r+0x5e8>
 8009e82:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <_dtoa_r+0x60c>)
 8009e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e88:	f7f6 fa00 	bl	800028c <__adddf3>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e94:	f7f6 fe40 	bl	8000b18 <__aeabi_dcmpgt>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d174      	bne.n	8009f86 <_dtoa_r+0x69e>
 8009e9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	4914      	ldr	r1, [pc, #80]	; (8009ef4 <_dtoa_r+0x60c>)
 8009ea4:	f7f6 f9f0 	bl	8000288 <__aeabi_dsub>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eb0:	f7f6 fe14 	bl	8000adc <__aeabi_dcmplt>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f43f af30 	beq.w	8009d1a <_dtoa_r+0x432>
 8009eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ebe:	2b30      	cmp	r3, #48	; 0x30
 8009ec0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ec4:	d002      	beq.n	8009ecc <_dtoa_r+0x5e4>
 8009ec6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009eca:	e04a      	b.n	8009f62 <_dtoa_r+0x67a>
 8009ecc:	4615      	mov	r5, r2
 8009ece:	e7f4      	b.n	8009eba <_dtoa_r+0x5d2>
 8009ed0:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <_dtoa_r+0x600>)
 8009ed2:	f7f6 fb91 	bl	80005f8 <__aeabi_dmul>
 8009ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8009eda:	e7bc      	b.n	8009e56 <_dtoa_r+0x56e>
 8009edc:	0800d690 	.word	0x0800d690
 8009ee0:	0800d668 	.word	0x0800d668
 8009ee4:	3ff00000 	.word	0x3ff00000
 8009ee8:	40240000 	.word	0x40240000
 8009eec:	401c0000 	.word	0x401c0000
 8009ef0:	40140000 	.word	0x40140000
 8009ef4:	3fe00000 	.word	0x3fe00000
 8009ef8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009efc:	465d      	mov	r5, fp
 8009efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f02:	4630      	mov	r0, r6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f7f6 fca1 	bl	800084c <__aeabi_ddiv>
 8009f0a:	f7f6 fe25 	bl	8000b58 <__aeabi_d2iz>
 8009f0e:	4680      	mov	r8, r0
 8009f10:	f7f6 fb08 	bl	8000524 <__aeabi_i2d>
 8009f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f18:	f7f6 fb6e 	bl	80005f8 <__aeabi_dmul>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4630      	mov	r0, r6
 8009f22:	4639      	mov	r1, r7
 8009f24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009f28:	f7f6 f9ae 	bl	8000288 <__aeabi_dsub>
 8009f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f30:	eba5 060b 	sub.w	r6, r5, fp
 8009f34:	45b1      	cmp	r9, r6
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	d139      	bne.n	8009fb0 <_dtoa_r+0x6c8>
 8009f3c:	f7f6 f9a6 	bl	800028c <__adddf3>
 8009f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f44:	4606      	mov	r6, r0
 8009f46:	460f      	mov	r7, r1
 8009f48:	f7f6 fde6 	bl	8000b18 <__aeabi_dcmpgt>
 8009f4c:	b9c8      	cbnz	r0, 8009f82 <_dtoa_r+0x69a>
 8009f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f52:	4630      	mov	r0, r6
 8009f54:	4639      	mov	r1, r7
 8009f56:	f7f6 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f5a:	b110      	cbz	r0, 8009f62 <_dtoa_r+0x67a>
 8009f5c:	f018 0f01 	tst.w	r8, #1
 8009f60:	d10f      	bne.n	8009f82 <_dtoa_r+0x69a>
 8009f62:	9904      	ldr	r1, [sp, #16]
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fb8b 	bl	800a680 <_Bfree>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f6e:	702b      	strb	r3, [r5, #0]
 8009f70:	f10a 0301 	add.w	r3, sl, #1
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 8241 	beq.w	800a400 <_dtoa_r+0xb18>
 8009f7e:	601d      	str	r5, [r3, #0]
 8009f80:	e23e      	b.n	800a400 <_dtoa_r+0xb18>
 8009f82:	f8cd a020 	str.w	sl, [sp, #32]
 8009f86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f8a:	2a39      	cmp	r2, #57	; 0x39
 8009f8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009f90:	d108      	bne.n	8009fa4 <_dtoa_r+0x6bc>
 8009f92:	459b      	cmp	fp, r3
 8009f94:	d10a      	bne.n	8009fac <_dtoa_r+0x6c4>
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	9308      	str	r3, [sp, #32]
 8009f9c:	2330      	movs	r3, #48	; 0x30
 8009f9e:	f88b 3000 	strb.w	r3, [fp]
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	e78c      	b.n	8009ec6 <_dtoa_r+0x5de>
 8009fac:	461d      	mov	r5, r3
 8009fae:	e7ea      	b.n	8009f86 <_dtoa_r+0x69e>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4b9b      	ldr	r3, [pc, #620]	; (800a220 <_dtoa_r+0x938>)
 8009fb4:	f7f6 fb20 	bl	80005f8 <__aeabi_dmul>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2300      	movs	r3, #0
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	f7f6 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d09a      	beq.n	8009efe <_dtoa_r+0x616>
 8009fc8:	e7cb      	b.n	8009f62 <_dtoa_r+0x67a>
 8009fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fcc:	2a00      	cmp	r2, #0
 8009fce:	f000 808b 	beq.w	800a0e8 <_dtoa_r+0x800>
 8009fd2:	9a06      	ldr	r2, [sp, #24]
 8009fd4:	2a01      	cmp	r2, #1
 8009fd6:	dc6e      	bgt.n	800a0b6 <_dtoa_r+0x7ce>
 8009fd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	d067      	beq.n	800a0ae <_dtoa_r+0x7c6>
 8009fde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fe2:	9f07      	ldr	r7, [sp, #28]
 8009fe4:	9d05      	ldr	r5, [sp, #20]
 8009fe6:	9a05      	ldr	r2, [sp, #20]
 8009fe8:	2101      	movs	r1, #1
 8009fea:	441a      	add	r2, r3
 8009fec:	4620      	mov	r0, r4
 8009fee:	9205      	str	r2, [sp, #20]
 8009ff0:	4498      	add	r8, r3
 8009ff2:	f000 fbe5 	bl	800a7c0 <__i2b>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	dd0c      	ble.n	800a016 <_dtoa_r+0x72e>
 8009ffc:	f1b8 0f00 	cmp.w	r8, #0
 800a000:	dd09      	ble.n	800a016 <_dtoa_r+0x72e>
 800a002:	4545      	cmp	r5, r8
 800a004:	9a05      	ldr	r2, [sp, #20]
 800a006:	462b      	mov	r3, r5
 800a008:	bfa8      	it	ge
 800a00a:	4643      	movge	r3, r8
 800a00c:	1ad2      	subs	r2, r2, r3
 800a00e:	9205      	str	r2, [sp, #20]
 800a010:	1aed      	subs	r5, r5, r3
 800a012:	eba8 0803 	sub.w	r8, r8, r3
 800a016:	9b07      	ldr	r3, [sp, #28]
 800a018:	b1eb      	cbz	r3, 800a056 <_dtoa_r+0x76e>
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d067      	beq.n	800a0f0 <_dtoa_r+0x808>
 800a020:	b18f      	cbz	r7, 800a046 <_dtoa_r+0x75e>
 800a022:	4631      	mov	r1, r6
 800a024:	463a      	mov	r2, r7
 800a026:	4620      	mov	r0, r4
 800a028:	f000 fc6a 	bl	800a900 <__pow5mult>
 800a02c:	9a04      	ldr	r2, [sp, #16]
 800a02e:	4601      	mov	r1, r0
 800a030:	4606      	mov	r6, r0
 800a032:	4620      	mov	r0, r4
 800a034:	f000 fbcd 	bl	800a7d2 <__multiply>
 800a038:	9904      	ldr	r1, [sp, #16]
 800a03a:	9008      	str	r0, [sp, #32]
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fb1f 	bl	800a680 <_Bfree>
 800a042:	9b08      	ldr	r3, [sp, #32]
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	1bda      	subs	r2, r3, r7
 800a04a:	d004      	beq.n	800a056 <_dtoa_r+0x76e>
 800a04c:	9904      	ldr	r1, [sp, #16]
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fc56 	bl	800a900 <__pow5mult>
 800a054:	9004      	str	r0, [sp, #16]
 800a056:	2101      	movs	r1, #1
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 fbb1 	bl	800a7c0 <__i2b>
 800a05e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a060:	4607      	mov	r7, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 81d0 	beq.w	800a408 <_dtoa_r+0xb20>
 800a068:	461a      	mov	r2, r3
 800a06a:	4601      	mov	r1, r0
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fc47 	bl	800a900 <__pow5mult>
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	2b01      	cmp	r3, #1
 800a076:	4607      	mov	r7, r0
 800a078:	dc40      	bgt.n	800a0fc <_dtoa_r+0x814>
 800a07a:	9b00      	ldr	r3, [sp, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d139      	bne.n	800a0f4 <_dtoa_r+0x80c>
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a086:	2b00      	cmp	r3, #0
 800a088:	d136      	bne.n	800a0f8 <_dtoa_r+0x810>
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a090:	0d1b      	lsrs	r3, r3, #20
 800a092:	051b      	lsls	r3, r3, #20
 800a094:	b12b      	cbz	r3, 800a0a2 <_dtoa_r+0x7ba>
 800a096:	9b05      	ldr	r3, [sp, #20]
 800a098:	3301      	adds	r3, #1
 800a09a:	9305      	str	r3, [sp, #20]
 800a09c:	f108 0801 	add.w	r8, r8, #1
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	9307      	str	r3, [sp, #28]
 800a0a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d12a      	bne.n	800a100 <_dtoa_r+0x818>
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	e030      	b.n	800a110 <_dtoa_r+0x828>
 800a0ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0b4:	e795      	b.n	8009fe2 <_dtoa_r+0x6fa>
 800a0b6:	9b07      	ldr	r3, [sp, #28]
 800a0b8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a0bc:	42bb      	cmp	r3, r7
 800a0be:	bfbf      	itttt	lt
 800a0c0:	9b07      	ldrlt	r3, [sp, #28]
 800a0c2:	9707      	strlt	r7, [sp, #28]
 800a0c4:	1afa      	sublt	r2, r7, r3
 800a0c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a0c8:	bfbb      	ittet	lt
 800a0ca:	189b      	addlt	r3, r3, r2
 800a0cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0ce:	1bdf      	subge	r7, r3, r7
 800a0d0:	2700      	movlt	r7, #0
 800a0d2:	f1b9 0f00 	cmp.w	r9, #0
 800a0d6:	bfb5      	itete	lt
 800a0d8:	9b05      	ldrlt	r3, [sp, #20]
 800a0da:	9d05      	ldrge	r5, [sp, #20]
 800a0dc:	eba3 0509 	sublt.w	r5, r3, r9
 800a0e0:	464b      	movge	r3, r9
 800a0e2:	bfb8      	it	lt
 800a0e4:	2300      	movlt	r3, #0
 800a0e6:	e77e      	b.n	8009fe6 <_dtoa_r+0x6fe>
 800a0e8:	9f07      	ldr	r7, [sp, #28]
 800a0ea:	9d05      	ldr	r5, [sp, #20]
 800a0ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a0ee:	e783      	b.n	8009ff8 <_dtoa_r+0x710>
 800a0f0:	9a07      	ldr	r2, [sp, #28]
 800a0f2:	e7ab      	b.n	800a04c <_dtoa_r+0x764>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e7d4      	b.n	800a0a2 <_dtoa_r+0x7ba>
 800a0f8:	9b00      	ldr	r3, [sp, #0]
 800a0fa:	e7d2      	b.n	800a0a2 <_dtoa_r+0x7ba>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a106:	6918      	ldr	r0, [r3, #16]
 800a108:	f000 fb0c 	bl	800a724 <__hi0bits>
 800a10c:	f1c0 0020 	rsb	r0, r0, #32
 800a110:	4440      	add	r0, r8
 800a112:	f010 001f 	ands.w	r0, r0, #31
 800a116:	d047      	beq.n	800a1a8 <_dtoa_r+0x8c0>
 800a118:	f1c0 0320 	rsb	r3, r0, #32
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	dd3b      	ble.n	800a198 <_dtoa_r+0x8b0>
 800a120:	9b05      	ldr	r3, [sp, #20]
 800a122:	f1c0 001c 	rsb	r0, r0, #28
 800a126:	4403      	add	r3, r0
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	4405      	add	r5, r0
 800a12c:	4480      	add	r8, r0
 800a12e:	9b05      	ldr	r3, [sp, #20]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dd05      	ble.n	800a140 <_dtoa_r+0x858>
 800a134:	461a      	mov	r2, r3
 800a136:	9904      	ldr	r1, [sp, #16]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fc2f 	bl	800a99c <__lshift>
 800a13e:	9004      	str	r0, [sp, #16]
 800a140:	f1b8 0f00 	cmp.w	r8, #0
 800a144:	dd05      	ble.n	800a152 <_dtoa_r+0x86a>
 800a146:	4639      	mov	r1, r7
 800a148:	4642      	mov	r2, r8
 800a14a:	4620      	mov	r0, r4
 800a14c:	f000 fc26 	bl	800a99c <__lshift>
 800a150:	4607      	mov	r7, r0
 800a152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a154:	b353      	cbz	r3, 800a1ac <_dtoa_r+0x8c4>
 800a156:	4639      	mov	r1, r7
 800a158:	9804      	ldr	r0, [sp, #16]
 800a15a:	f000 fc73 	bl	800aa44 <__mcmp>
 800a15e:	2800      	cmp	r0, #0
 800a160:	da24      	bge.n	800a1ac <_dtoa_r+0x8c4>
 800a162:	2300      	movs	r3, #0
 800a164:	220a      	movs	r2, #10
 800a166:	9904      	ldr	r1, [sp, #16]
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 faa0 	bl	800a6ae <__multadd>
 800a16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a170:	9004      	str	r0, [sp, #16]
 800a172:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 814d 	beq.w	800a416 <_dtoa_r+0xb2e>
 800a17c:	2300      	movs	r3, #0
 800a17e:	4631      	mov	r1, r6
 800a180:	220a      	movs	r2, #10
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fa93 	bl	800a6ae <__multadd>
 800a188:	9b02      	ldr	r3, [sp, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	4606      	mov	r6, r0
 800a18e:	dc4f      	bgt.n	800a230 <_dtoa_r+0x948>
 800a190:	9b06      	ldr	r3, [sp, #24]
 800a192:	2b02      	cmp	r3, #2
 800a194:	dd4c      	ble.n	800a230 <_dtoa_r+0x948>
 800a196:	e011      	b.n	800a1bc <_dtoa_r+0x8d4>
 800a198:	d0c9      	beq.n	800a12e <_dtoa_r+0x846>
 800a19a:	9a05      	ldr	r2, [sp, #20]
 800a19c:	331c      	adds	r3, #28
 800a19e:	441a      	add	r2, r3
 800a1a0:	9205      	str	r2, [sp, #20]
 800a1a2:	441d      	add	r5, r3
 800a1a4:	4498      	add	r8, r3
 800a1a6:	e7c2      	b.n	800a12e <_dtoa_r+0x846>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	e7f6      	b.n	800a19a <_dtoa_r+0x8b2>
 800a1ac:	f1b9 0f00 	cmp.w	r9, #0
 800a1b0:	dc38      	bgt.n	800a224 <_dtoa_r+0x93c>
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	dd35      	ble.n	800a224 <_dtoa_r+0x93c>
 800a1b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1bc:	9b02      	ldr	r3, [sp, #8]
 800a1be:	b963      	cbnz	r3, 800a1da <_dtoa_r+0x8f2>
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	2205      	movs	r2, #5
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fa72 	bl	800a6ae <__multadd>
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	9804      	ldr	r0, [sp, #16]
 800a1d0:	f000 fc38 	bl	800aa44 <__mcmp>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f73f adcc 	bgt.w	8009d72 <_dtoa_r+0x48a>
 800a1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1dc:	465d      	mov	r5, fp
 800a1de:	ea6f 0a03 	mvn.w	sl, r3
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fa49 	bl	800a680 <_Bfree>
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	f43f aeb7 	beq.w	8009f62 <_dtoa_r+0x67a>
 800a1f4:	f1b9 0f00 	cmp.w	r9, #0
 800a1f8:	d005      	beq.n	800a206 <_dtoa_r+0x91e>
 800a1fa:	45b1      	cmp	r9, r6
 800a1fc:	d003      	beq.n	800a206 <_dtoa_r+0x91e>
 800a1fe:	4649      	mov	r1, r9
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fa3d 	bl	800a680 <_Bfree>
 800a206:	4631      	mov	r1, r6
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fa39 	bl	800a680 <_Bfree>
 800a20e:	e6a8      	b.n	8009f62 <_dtoa_r+0x67a>
 800a210:	2700      	movs	r7, #0
 800a212:	463e      	mov	r6, r7
 800a214:	e7e1      	b.n	800a1da <_dtoa_r+0x8f2>
 800a216:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a21a:	463e      	mov	r6, r7
 800a21c:	e5a9      	b.n	8009d72 <_dtoa_r+0x48a>
 800a21e:	bf00      	nop
 800a220:	40240000 	.word	0x40240000
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	f8cd 9008 	str.w	r9, [sp, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80fa 	beq.w	800a424 <_dtoa_r+0xb3c>
 800a230:	2d00      	cmp	r5, #0
 800a232:	dd05      	ble.n	800a240 <_dtoa_r+0x958>
 800a234:	4631      	mov	r1, r6
 800a236:	462a      	mov	r2, r5
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fbaf 	bl	800a99c <__lshift>
 800a23e:	4606      	mov	r6, r0
 800a240:	9b07      	ldr	r3, [sp, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d04c      	beq.n	800a2e0 <_dtoa_r+0x9f8>
 800a246:	6871      	ldr	r1, [r6, #4]
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 f9e5 	bl	800a618 <_Balloc>
 800a24e:	6932      	ldr	r2, [r6, #16]
 800a250:	3202      	adds	r2, #2
 800a252:	4605      	mov	r5, r0
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	f106 010c 	add.w	r1, r6, #12
 800a25a:	300c      	adds	r0, #12
 800a25c:	f7fe fe2e 	bl	8008ebc <memcpy>
 800a260:	2201      	movs	r2, #1
 800a262:	4629      	mov	r1, r5
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb99 	bl	800a99c <__lshift>
 800a26a:	9b00      	ldr	r3, [sp, #0]
 800a26c:	f8cd b014 	str.w	fp, [sp, #20]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	46b1      	mov	r9, r6
 800a276:	9307      	str	r3, [sp, #28]
 800a278:	4606      	mov	r6, r0
 800a27a:	4639      	mov	r1, r7
 800a27c:	9804      	ldr	r0, [sp, #16]
 800a27e:	f7ff faa5 	bl	80097cc <quorem>
 800a282:	4649      	mov	r1, r9
 800a284:	4605      	mov	r5, r0
 800a286:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a28a:	9804      	ldr	r0, [sp, #16]
 800a28c:	f000 fbda 	bl	800aa44 <__mcmp>
 800a290:	4632      	mov	r2, r6
 800a292:	9000      	str	r0, [sp, #0]
 800a294:	4639      	mov	r1, r7
 800a296:	4620      	mov	r0, r4
 800a298:	f000 fbee 	bl	800aa78 <__mdiff>
 800a29c:	68c3      	ldr	r3, [r0, #12]
 800a29e:	4602      	mov	r2, r0
 800a2a0:	bb03      	cbnz	r3, 800a2e4 <_dtoa_r+0x9fc>
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	9008      	str	r0, [sp, #32]
 800a2a6:	9804      	ldr	r0, [sp, #16]
 800a2a8:	f000 fbcc 	bl	800aa44 <__mcmp>
 800a2ac:	9a08      	ldr	r2, [sp, #32]
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	9308      	str	r3, [sp, #32]
 800a2b6:	f000 f9e3 	bl	800a680 <_Bfree>
 800a2ba:	9b08      	ldr	r3, [sp, #32]
 800a2bc:	b9a3      	cbnz	r3, 800a2e8 <_dtoa_r+0xa00>
 800a2be:	9a06      	ldr	r2, [sp, #24]
 800a2c0:	b992      	cbnz	r2, 800a2e8 <_dtoa_r+0xa00>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	b982      	cbnz	r2, 800a2e8 <_dtoa_r+0xa00>
 800a2c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2ca:	d029      	beq.n	800a320 <_dtoa_r+0xa38>
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dd01      	ble.n	800a2d6 <_dtoa_r+0x9ee>
 800a2d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a2d6:	9b05      	ldr	r3, [sp, #20]
 800a2d8:	1c5d      	adds	r5, r3, #1
 800a2da:	f883 8000 	strb.w	r8, [r3]
 800a2de:	e782      	b.n	800a1e6 <_dtoa_r+0x8fe>
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	e7c2      	b.n	800a26a <_dtoa_r+0x982>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e7e3      	b.n	800a2b0 <_dtoa_r+0x9c8>
 800a2e8:	9a00      	ldr	r2, [sp, #0]
 800a2ea:	2a00      	cmp	r2, #0
 800a2ec:	db04      	blt.n	800a2f8 <_dtoa_r+0xa10>
 800a2ee:	d125      	bne.n	800a33c <_dtoa_r+0xa54>
 800a2f0:	9a06      	ldr	r2, [sp, #24]
 800a2f2:	bb1a      	cbnz	r2, 800a33c <_dtoa_r+0xa54>
 800a2f4:	9a07      	ldr	r2, [sp, #28]
 800a2f6:	bb0a      	cbnz	r2, 800a33c <_dtoa_r+0xa54>
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	ddec      	ble.n	800a2d6 <_dtoa_r+0x9ee>
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	9904      	ldr	r1, [sp, #16]
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fb4b 	bl	800a99c <__lshift>
 800a306:	4639      	mov	r1, r7
 800a308:	9004      	str	r0, [sp, #16]
 800a30a:	f000 fb9b 	bl	800aa44 <__mcmp>
 800a30e:	2800      	cmp	r0, #0
 800a310:	dc03      	bgt.n	800a31a <_dtoa_r+0xa32>
 800a312:	d1e0      	bne.n	800a2d6 <_dtoa_r+0x9ee>
 800a314:	f018 0f01 	tst.w	r8, #1
 800a318:	d0dd      	beq.n	800a2d6 <_dtoa_r+0x9ee>
 800a31a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a31e:	d1d8      	bne.n	800a2d2 <_dtoa_r+0x9ea>
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	9a05      	ldr	r2, [sp, #20]
 800a324:	1c5d      	adds	r5, r3, #1
 800a326:	2339      	movs	r3, #57	; 0x39
 800a328:	7013      	strb	r3, [r2, #0]
 800a32a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a32e:	2b39      	cmp	r3, #57	; 0x39
 800a330:	f105 32ff 	add.w	r2, r5, #4294967295
 800a334:	d04f      	beq.n	800a3d6 <_dtoa_r+0xaee>
 800a336:	3301      	adds	r3, #1
 800a338:	7013      	strb	r3, [r2, #0]
 800a33a:	e754      	b.n	800a1e6 <_dtoa_r+0x8fe>
 800a33c:	9a05      	ldr	r2, [sp, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f102 0501 	add.w	r5, r2, #1
 800a344:	dd06      	ble.n	800a354 <_dtoa_r+0xa6c>
 800a346:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a34a:	d0e9      	beq.n	800a320 <_dtoa_r+0xa38>
 800a34c:	f108 0801 	add.w	r8, r8, #1
 800a350:	9b05      	ldr	r3, [sp, #20]
 800a352:	e7c2      	b.n	800a2da <_dtoa_r+0x9f2>
 800a354:	9a02      	ldr	r2, [sp, #8]
 800a356:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a35a:	eba5 030b 	sub.w	r3, r5, fp
 800a35e:	4293      	cmp	r3, r2
 800a360:	d021      	beq.n	800a3a6 <_dtoa_r+0xabe>
 800a362:	2300      	movs	r3, #0
 800a364:	220a      	movs	r2, #10
 800a366:	9904      	ldr	r1, [sp, #16]
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 f9a0 	bl	800a6ae <__multadd>
 800a36e:	45b1      	cmp	r9, r6
 800a370:	9004      	str	r0, [sp, #16]
 800a372:	f04f 0300 	mov.w	r3, #0
 800a376:	f04f 020a 	mov.w	r2, #10
 800a37a:	4649      	mov	r1, r9
 800a37c:	4620      	mov	r0, r4
 800a37e:	d105      	bne.n	800a38c <_dtoa_r+0xaa4>
 800a380:	f000 f995 	bl	800a6ae <__multadd>
 800a384:	4681      	mov	r9, r0
 800a386:	4606      	mov	r6, r0
 800a388:	9505      	str	r5, [sp, #20]
 800a38a:	e776      	b.n	800a27a <_dtoa_r+0x992>
 800a38c:	f000 f98f 	bl	800a6ae <__multadd>
 800a390:	4631      	mov	r1, r6
 800a392:	4681      	mov	r9, r0
 800a394:	2300      	movs	r3, #0
 800a396:	220a      	movs	r2, #10
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 f988 	bl	800a6ae <__multadd>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	e7f2      	b.n	800a388 <_dtoa_r+0xaa0>
 800a3a2:	f04f 0900 	mov.w	r9, #0
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	9904      	ldr	r1, [sp, #16]
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 faf6 	bl	800a99c <__lshift>
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	9004      	str	r0, [sp, #16]
 800a3b4:	f000 fb46 	bl	800aa44 <__mcmp>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	dcb6      	bgt.n	800a32a <_dtoa_r+0xa42>
 800a3bc:	d102      	bne.n	800a3c4 <_dtoa_r+0xadc>
 800a3be:	f018 0f01 	tst.w	r8, #1
 800a3c2:	d1b2      	bne.n	800a32a <_dtoa_r+0xa42>
 800a3c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3c8:	2b30      	cmp	r3, #48	; 0x30
 800a3ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800a3ce:	f47f af0a 	bne.w	800a1e6 <_dtoa_r+0x8fe>
 800a3d2:	4615      	mov	r5, r2
 800a3d4:	e7f6      	b.n	800a3c4 <_dtoa_r+0xadc>
 800a3d6:	4593      	cmp	fp, r2
 800a3d8:	d105      	bne.n	800a3e6 <_dtoa_r+0xafe>
 800a3da:	2331      	movs	r3, #49	; 0x31
 800a3dc:	f10a 0a01 	add.w	sl, sl, #1
 800a3e0:	f88b 3000 	strb.w	r3, [fp]
 800a3e4:	e6ff      	b.n	800a1e6 <_dtoa_r+0x8fe>
 800a3e6:	4615      	mov	r5, r2
 800a3e8:	e79f      	b.n	800a32a <_dtoa_r+0xa42>
 800a3ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a450 <_dtoa_r+0xb68>
 800a3ee:	e007      	b.n	800a400 <_dtoa_r+0xb18>
 800a3f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a454 <_dtoa_r+0xb6c>
 800a3f6:	b11b      	cbz	r3, 800a400 <_dtoa_r+0xb18>
 800a3f8:	f10b 0308 	add.w	r3, fp, #8
 800a3fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	4658      	mov	r0, fp
 800a402:	b017      	add	sp, #92	; 0x5c
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	9b06      	ldr	r3, [sp, #24]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	f77f ae35 	ble.w	800a07a <_dtoa_r+0x792>
 800a410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a412:	9307      	str	r3, [sp, #28]
 800a414:	e649      	b.n	800a0aa <_dtoa_r+0x7c2>
 800a416:	9b02      	ldr	r3, [sp, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	dc03      	bgt.n	800a424 <_dtoa_r+0xb3c>
 800a41c:	9b06      	ldr	r3, [sp, #24]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	f73f aecc 	bgt.w	800a1bc <_dtoa_r+0x8d4>
 800a424:	465d      	mov	r5, fp
 800a426:	4639      	mov	r1, r7
 800a428:	9804      	ldr	r0, [sp, #16]
 800a42a:	f7ff f9cf 	bl	80097cc <quorem>
 800a42e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a432:	f805 8b01 	strb.w	r8, [r5], #1
 800a436:	9a02      	ldr	r2, [sp, #8]
 800a438:	eba5 030b 	sub.w	r3, r5, fp
 800a43c:	429a      	cmp	r2, r3
 800a43e:	ddb0      	ble.n	800a3a2 <_dtoa_r+0xaba>
 800a440:	2300      	movs	r3, #0
 800a442:	220a      	movs	r2, #10
 800a444:	9904      	ldr	r1, [sp, #16]
 800a446:	4620      	mov	r0, r4
 800a448:	f000 f931 	bl	800a6ae <__multadd>
 800a44c:	9004      	str	r0, [sp, #16]
 800a44e:	e7ea      	b.n	800a426 <_dtoa_r+0xb3e>
 800a450:	0800d5d4 	.word	0x0800d5d4
 800a454:	0800d5f8 	.word	0x0800d5f8

0800a458 <std>:
 800a458:	2300      	movs	r3, #0
 800a45a:	b510      	push	{r4, lr}
 800a45c:	4604      	mov	r4, r0
 800a45e:	e9c0 3300 	strd	r3, r3, [r0]
 800a462:	6083      	str	r3, [r0, #8]
 800a464:	8181      	strh	r1, [r0, #12]
 800a466:	6643      	str	r3, [r0, #100]	; 0x64
 800a468:	81c2      	strh	r2, [r0, #14]
 800a46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a46e:	6183      	str	r3, [r0, #24]
 800a470:	4619      	mov	r1, r3
 800a472:	2208      	movs	r2, #8
 800a474:	305c      	adds	r0, #92	; 0x5c
 800a476:	f7fe fd2c 	bl	8008ed2 <memset>
 800a47a:	4b05      	ldr	r3, [pc, #20]	; (800a490 <std+0x38>)
 800a47c:	6263      	str	r3, [r4, #36]	; 0x24
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <std+0x3c>)
 800a480:	62a3      	str	r3, [r4, #40]	; 0x28
 800a482:	4b05      	ldr	r3, [pc, #20]	; (800a498 <std+0x40>)
 800a484:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <std+0x44>)
 800a488:	6224      	str	r4, [r4, #32]
 800a48a:	6323      	str	r3, [r4, #48]	; 0x30
 800a48c:	bd10      	pop	{r4, pc}
 800a48e:	bf00      	nop
 800a490:	0800afdd 	.word	0x0800afdd
 800a494:	0800afff 	.word	0x0800afff
 800a498:	0800b037 	.word	0x0800b037
 800a49c:	0800b05b 	.word	0x0800b05b

0800a4a0 <_cleanup_r>:
 800a4a0:	4901      	ldr	r1, [pc, #4]	; (800a4a8 <_cleanup_r+0x8>)
 800a4a2:	f000 b885 	b.w	800a5b0 <_fwalk_reent>
 800a4a6:	bf00      	nop
 800a4a8:	0800b335 	.word	0x0800b335

0800a4ac <__sfmoreglue>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	1e4a      	subs	r2, r1, #1
 800a4b0:	2568      	movs	r5, #104	; 0x68
 800a4b2:	4355      	muls	r5, r2
 800a4b4:	460e      	mov	r6, r1
 800a4b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4ba:	f000 fbe5 	bl	800ac88 <_malloc_r>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	b140      	cbz	r0, 800a4d4 <__sfmoreglue+0x28>
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	e9c0 1600 	strd	r1, r6, [r0]
 800a4c8:	300c      	adds	r0, #12
 800a4ca:	60a0      	str	r0, [r4, #8]
 800a4cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4d0:	f7fe fcff 	bl	8008ed2 <memset>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}

0800a4d8 <__sinit>:
 800a4d8:	6983      	ldr	r3, [r0, #24]
 800a4da:	b510      	push	{r4, lr}
 800a4dc:	4604      	mov	r4, r0
 800a4de:	bb33      	cbnz	r3, 800a52e <__sinit+0x56>
 800a4e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a4e4:	6503      	str	r3, [r0, #80]	; 0x50
 800a4e6:	4b12      	ldr	r3, [pc, #72]	; (800a530 <__sinit+0x58>)
 800a4e8:	4a12      	ldr	r2, [pc, #72]	; (800a534 <__sinit+0x5c>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6282      	str	r2, [r0, #40]	; 0x28
 800a4ee:	4298      	cmp	r0, r3
 800a4f0:	bf04      	itt	eq
 800a4f2:	2301      	moveq	r3, #1
 800a4f4:	6183      	streq	r3, [r0, #24]
 800a4f6:	f000 f81f 	bl	800a538 <__sfp>
 800a4fa:	6060      	str	r0, [r4, #4]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f81b 	bl	800a538 <__sfp>
 800a502:	60a0      	str	r0, [r4, #8]
 800a504:	4620      	mov	r0, r4
 800a506:	f000 f817 	bl	800a538 <__sfp>
 800a50a:	2200      	movs	r2, #0
 800a50c:	60e0      	str	r0, [r4, #12]
 800a50e:	2104      	movs	r1, #4
 800a510:	6860      	ldr	r0, [r4, #4]
 800a512:	f7ff ffa1 	bl	800a458 <std>
 800a516:	2201      	movs	r2, #1
 800a518:	2109      	movs	r1, #9
 800a51a:	68a0      	ldr	r0, [r4, #8]
 800a51c:	f7ff ff9c 	bl	800a458 <std>
 800a520:	2202      	movs	r2, #2
 800a522:	2112      	movs	r1, #18
 800a524:	68e0      	ldr	r0, [r4, #12]
 800a526:	f7ff ff97 	bl	800a458 <std>
 800a52a:	2301      	movs	r3, #1
 800a52c:	61a3      	str	r3, [r4, #24]
 800a52e:	bd10      	pop	{r4, pc}
 800a530:	0800d5c0 	.word	0x0800d5c0
 800a534:	0800a4a1 	.word	0x0800a4a1

0800a538 <__sfp>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	4b1b      	ldr	r3, [pc, #108]	; (800a5a8 <__sfp+0x70>)
 800a53c:	681e      	ldr	r6, [r3, #0]
 800a53e:	69b3      	ldr	r3, [r6, #24]
 800a540:	4607      	mov	r7, r0
 800a542:	b913      	cbnz	r3, 800a54a <__sfp+0x12>
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ffc7 	bl	800a4d8 <__sinit>
 800a54a:	3648      	adds	r6, #72	; 0x48
 800a54c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a550:	3b01      	subs	r3, #1
 800a552:	d503      	bpl.n	800a55c <__sfp+0x24>
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	b133      	cbz	r3, 800a566 <__sfp+0x2e>
 800a558:	6836      	ldr	r6, [r6, #0]
 800a55a:	e7f7      	b.n	800a54c <__sfp+0x14>
 800a55c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a560:	b16d      	cbz	r5, 800a57e <__sfp+0x46>
 800a562:	3468      	adds	r4, #104	; 0x68
 800a564:	e7f4      	b.n	800a550 <__sfp+0x18>
 800a566:	2104      	movs	r1, #4
 800a568:	4638      	mov	r0, r7
 800a56a:	f7ff ff9f 	bl	800a4ac <__sfmoreglue>
 800a56e:	6030      	str	r0, [r6, #0]
 800a570:	2800      	cmp	r0, #0
 800a572:	d1f1      	bne.n	800a558 <__sfp+0x20>
 800a574:	230c      	movs	r3, #12
 800a576:	603b      	str	r3, [r7, #0]
 800a578:	4604      	mov	r4, r0
 800a57a:	4620      	mov	r0, r4
 800a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a57e:	4b0b      	ldr	r3, [pc, #44]	; (800a5ac <__sfp+0x74>)
 800a580:	6665      	str	r5, [r4, #100]	; 0x64
 800a582:	e9c4 5500 	strd	r5, r5, [r4]
 800a586:	60a5      	str	r5, [r4, #8]
 800a588:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a58c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a590:	2208      	movs	r2, #8
 800a592:	4629      	mov	r1, r5
 800a594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a598:	f7fe fc9b 	bl	8008ed2 <memset>
 800a59c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5a4:	e7e9      	b.n	800a57a <__sfp+0x42>
 800a5a6:	bf00      	nop
 800a5a8:	0800d5c0 	.word	0x0800d5c0
 800a5ac:	ffff0001 	.word	0xffff0001

0800a5b0 <_fwalk_reent>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5bc:	2600      	movs	r6, #0
 800a5be:	b914      	cbnz	r4, 800a5c6 <_fwalk_reent+0x16>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a5ca:	3f01      	subs	r7, #1
 800a5cc:	d501      	bpl.n	800a5d2 <_fwalk_reent+0x22>
 800a5ce:	6824      	ldr	r4, [r4, #0]
 800a5d0:	e7f5      	b.n	800a5be <_fwalk_reent+0xe>
 800a5d2:	89ab      	ldrh	r3, [r5, #12]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d907      	bls.n	800a5e8 <_fwalk_reent+0x38>
 800a5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	d003      	beq.n	800a5e8 <_fwalk_reent+0x38>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	47c8      	blx	r9
 800a5e6:	4306      	orrs	r6, r0
 800a5e8:	3568      	adds	r5, #104	; 0x68
 800a5ea:	e7ee      	b.n	800a5ca <_fwalk_reent+0x1a>

0800a5ec <_localeconv_r>:
 800a5ec:	4b04      	ldr	r3, [pc, #16]	; (800a600 <_localeconv_r+0x14>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6a18      	ldr	r0, [r3, #32]
 800a5f2:	4b04      	ldr	r3, [pc, #16]	; (800a604 <_localeconv_r+0x18>)
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	bf08      	it	eq
 800a5f8:	4618      	moveq	r0, r3
 800a5fa:	30f0      	adds	r0, #240	; 0xf0
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	2000000c 	.word	0x2000000c
 800a604:	20000070 	.word	0x20000070

0800a608 <malloc>:
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <malloc+0xc>)
 800a60a:	4601      	mov	r1, r0
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	f000 bb3b 	b.w	800ac88 <_malloc_r>
 800a612:	bf00      	nop
 800a614:	2000000c 	.word	0x2000000c

0800a618 <_Balloc>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a61c:	4604      	mov	r4, r0
 800a61e:	460e      	mov	r6, r1
 800a620:	b93d      	cbnz	r5, 800a632 <_Balloc+0x1a>
 800a622:	2010      	movs	r0, #16
 800a624:	f7ff fff0 	bl	800a608 <malloc>
 800a628:	6260      	str	r0, [r4, #36]	; 0x24
 800a62a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a62e:	6005      	str	r5, [r0, #0]
 800a630:	60c5      	str	r5, [r0, #12]
 800a632:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a634:	68eb      	ldr	r3, [r5, #12]
 800a636:	b183      	cbz	r3, 800a65a <_Balloc+0x42>
 800a638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a640:	b9b8      	cbnz	r0, 800a672 <_Balloc+0x5a>
 800a642:	2101      	movs	r1, #1
 800a644:	fa01 f506 	lsl.w	r5, r1, r6
 800a648:	1d6a      	adds	r2, r5, #5
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fabf 	bl	800abd0 <_calloc_r>
 800a652:	b160      	cbz	r0, 800a66e <_Balloc+0x56>
 800a654:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a658:	e00e      	b.n	800a678 <_Balloc+0x60>
 800a65a:	2221      	movs	r2, #33	; 0x21
 800a65c:	2104      	movs	r1, #4
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fab6 	bl	800abd0 <_calloc_r>
 800a664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a666:	60e8      	str	r0, [r5, #12]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e4      	bne.n	800a638 <_Balloc+0x20>
 800a66e:	2000      	movs	r0, #0
 800a670:	bd70      	pop	{r4, r5, r6, pc}
 800a672:	6802      	ldr	r2, [r0, #0]
 800a674:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a678:	2300      	movs	r3, #0
 800a67a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a67e:	e7f7      	b.n	800a670 <_Balloc+0x58>

0800a680 <_Bfree>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a684:	4606      	mov	r6, r0
 800a686:	460d      	mov	r5, r1
 800a688:	b93c      	cbnz	r4, 800a69a <_Bfree+0x1a>
 800a68a:	2010      	movs	r0, #16
 800a68c:	f7ff ffbc 	bl	800a608 <malloc>
 800a690:	6270      	str	r0, [r6, #36]	; 0x24
 800a692:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a696:	6004      	str	r4, [r0, #0]
 800a698:	60c4      	str	r4, [r0, #12]
 800a69a:	b13d      	cbz	r5, 800a6ac <_Bfree+0x2c>
 800a69c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a69e:	686a      	ldr	r2, [r5, #4]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6a6:	6029      	str	r1, [r5, #0]
 800a6a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a6ac:	bd70      	pop	{r4, r5, r6, pc}

0800a6ae <__multadd>:
 800a6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b2:	690d      	ldr	r5, [r1, #16]
 800a6b4:	461f      	mov	r7, r3
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	f101 0c14 	add.w	ip, r1, #20
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f8dc 0000 	ldr.w	r0, [ip]
 800a6c4:	b281      	uxth	r1, r0
 800a6c6:	fb02 7101 	mla	r1, r2, r1, r7
 800a6ca:	0c0f      	lsrs	r7, r1, #16
 800a6cc:	0c00      	lsrs	r0, r0, #16
 800a6ce:	fb02 7000 	mla	r0, r2, r0, r7
 800a6d2:	b289      	uxth	r1, r1
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a6e0:	f84c 1b04 	str.w	r1, [ip], #4
 800a6e4:	dcec      	bgt.n	800a6c0 <__multadd+0x12>
 800a6e6:	b1d7      	cbz	r7, 800a71e <__multadd+0x70>
 800a6e8:	68a3      	ldr	r3, [r4, #8]
 800a6ea:	42ab      	cmp	r3, r5
 800a6ec:	dc12      	bgt.n	800a714 <__multadd+0x66>
 800a6ee:	6861      	ldr	r1, [r4, #4]
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	3101      	adds	r1, #1
 800a6f4:	f7ff ff90 	bl	800a618 <_Balloc>
 800a6f8:	6922      	ldr	r2, [r4, #16]
 800a6fa:	3202      	adds	r2, #2
 800a6fc:	f104 010c 	add.w	r1, r4, #12
 800a700:	4680      	mov	r8, r0
 800a702:	0092      	lsls	r2, r2, #2
 800a704:	300c      	adds	r0, #12
 800a706:	f7fe fbd9 	bl	8008ebc <memcpy>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ffb7 	bl	800a680 <_Bfree>
 800a712:	4644      	mov	r4, r8
 800a714:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a718:	3501      	adds	r5, #1
 800a71a:	615f      	str	r7, [r3, #20]
 800a71c:	6125      	str	r5, [r4, #16]
 800a71e:	4620      	mov	r0, r4
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a724 <__hi0bits>:
 800a724:	0c02      	lsrs	r2, r0, #16
 800a726:	0412      	lsls	r2, r2, #16
 800a728:	4603      	mov	r3, r0
 800a72a:	b9b2      	cbnz	r2, 800a75a <__hi0bits+0x36>
 800a72c:	0403      	lsls	r3, r0, #16
 800a72e:	2010      	movs	r0, #16
 800a730:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a734:	bf04      	itt	eq
 800a736:	021b      	lsleq	r3, r3, #8
 800a738:	3008      	addeq	r0, #8
 800a73a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a73e:	bf04      	itt	eq
 800a740:	011b      	lsleq	r3, r3, #4
 800a742:	3004      	addeq	r0, #4
 800a744:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a748:	bf04      	itt	eq
 800a74a:	009b      	lsleq	r3, r3, #2
 800a74c:	3002      	addeq	r0, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	db06      	blt.n	800a760 <__hi0bits+0x3c>
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	d503      	bpl.n	800a75e <__hi0bits+0x3a>
 800a756:	3001      	adds	r0, #1
 800a758:	4770      	bx	lr
 800a75a:	2000      	movs	r0, #0
 800a75c:	e7e8      	b.n	800a730 <__hi0bits+0xc>
 800a75e:	2020      	movs	r0, #32
 800a760:	4770      	bx	lr

0800a762 <__lo0bits>:
 800a762:	6803      	ldr	r3, [r0, #0]
 800a764:	f013 0207 	ands.w	r2, r3, #7
 800a768:	4601      	mov	r1, r0
 800a76a:	d00b      	beq.n	800a784 <__lo0bits+0x22>
 800a76c:	07da      	lsls	r2, r3, #31
 800a76e:	d423      	bmi.n	800a7b8 <__lo0bits+0x56>
 800a770:	0798      	lsls	r0, r3, #30
 800a772:	bf49      	itett	mi
 800a774:	085b      	lsrmi	r3, r3, #1
 800a776:	089b      	lsrpl	r3, r3, #2
 800a778:	2001      	movmi	r0, #1
 800a77a:	600b      	strmi	r3, [r1, #0]
 800a77c:	bf5c      	itt	pl
 800a77e:	600b      	strpl	r3, [r1, #0]
 800a780:	2002      	movpl	r0, #2
 800a782:	4770      	bx	lr
 800a784:	b298      	uxth	r0, r3
 800a786:	b9a8      	cbnz	r0, 800a7b4 <__lo0bits+0x52>
 800a788:	0c1b      	lsrs	r3, r3, #16
 800a78a:	2010      	movs	r0, #16
 800a78c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a790:	bf04      	itt	eq
 800a792:	0a1b      	lsreq	r3, r3, #8
 800a794:	3008      	addeq	r0, #8
 800a796:	071a      	lsls	r2, r3, #28
 800a798:	bf04      	itt	eq
 800a79a:	091b      	lsreq	r3, r3, #4
 800a79c:	3004      	addeq	r0, #4
 800a79e:	079a      	lsls	r2, r3, #30
 800a7a0:	bf04      	itt	eq
 800a7a2:	089b      	lsreq	r3, r3, #2
 800a7a4:	3002      	addeq	r0, #2
 800a7a6:	07da      	lsls	r2, r3, #31
 800a7a8:	d402      	bmi.n	800a7b0 <__lo0bits+0x4e>
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	d006      	beq.n	800a7bc <__lo0bits+0x5a>
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	600b      	str	r3, [r1, #0]
 800a7b2:	4770      	bx	lr
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	e7e9      	b.n	800a78c <__lo0bits+0x2a>
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	4770      	bx	lr
 800a7bc:	2020      	movs	r0, #32
 800a7be:	4770      	bx	lr

0800a7c0 <__i2b>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	f7ff ff27 	bl	800a618 <_Balloc>
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	6144      	str	r4, [r0, #20]
 800a7ce:	6102      	str	r2, [r0, #16]
 800a7d0:	bd10      	pop	{r4, pc}

0800a7d2 <__multiply>:
 800a7d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d6:	4614      	mov	r4, r2
 800a7d8:	690a      	ldr	r2, [r1, #16]
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	bfb8      	it	lt
 800a7e0:	460b      	movlt	r3, r1
 800a7e2:	4688      	mov	r8, r1
 800a7e4:	bfbc      	itt	lt
 800a7e6:	46a0      	movlt	r8, r4
 800a7e8:	461c      	movlt	r4, r3
 800a7ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a7ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a7f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a7fa:	eb07 0609 	add.w	r6, r7, r9
 800a7fe:	42b3      	cmp	r3, r6
 800a800:	bfb8      	it	lt
 800a802:	3101      	addlt	r1, #1
 800a804:	f7ff ff08 	bl	800a618 <_Balloc>
 800a808:	f100 0514 	add.w	r5, r0, #20
 800a80c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a810:	462b      	mov	r3, r5
 800a812:	2200      	movs	r2, #0
 800a814:	4573      	cmp	r3, lr
 800a816:	d316      	bcc.n	800a846 <__multiply+0x74>
 800a818:	f104 0214 	add.w	r2, r4, #20
 800a81c:	f108 0114 	add.w	r1, r8, #20
 800a820:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a824:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	9b00      	ldr	r3, [sp, #0]
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	4293      	cmp	r3, r2
 800a830:	d80c      	bhi.n	800a84c <__multiply+0x7a>
 800a832:	2e00      	cmp	r6, #0
 800a834:	dd03      	ble.n	800a83e <__multiply+0x6c>
 800a836:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d05d      	beq.n	800a8fa <__multiply+0x128>
 800a83e:	6106      	str	r6, [r0, #16]
 800a840:	b003      	add	sp, #12
 800a842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a846:	f843 2b04 	str.w	r2, [r3], #4
 800a84a:	e7e3      	b.n	800a814 <__multiply+0x42>
 800a84c:	f8b2 b000 	ldrh.w	fp, [r2]
 800a850:	f1bb 0f00 	cmp.w	fp, #0
 800a854:	d023      	beq.n	800a89e <__multiply+0xcc>
 800a856:	4689      	mov	r9, r1
 800a858:	46ac      	mov	ip, r5
 800a85a:	f04f 0800 	mov.w	r8, #0
 800a85e:	f859 4b04 	ldr.w	r4, [r9], #4
 800a862:	f8dc a000 	ldr.w	sl, [ip]
 800a866:	b2a3      	uxth	r3, r4
 800a868:	fa1f fa8a 	uxth.w	sl, sl
 800a86c:	fb0b a303 	mla	r3, fp, r3, sl
 800a870:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a874:	f8dc 4000 	ldr.w	r4, [ip]
 800a878:	4443      	add	r3, r8
 800a87a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a87e:	fb0b 840a 	mla	r4, fp, sl, r8
 800a882:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a886:	46e2      	mov	sl, ip
 800a888:	b29b      	uxth	r3, r3
 800a88a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a88e:	454f      	cmp	r7, r9
 800a890:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a894:	f84a 3b04 	str.w	r3, [sl], #4
 800a898:	d82b      	bhi.n	800a8f2 <__multiply+0x120>
 800a89a:	f8cc 8004 	str.w	r8, [ip, #4]
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a8a4:	3204      	adds	r2, #4
 800a8a6:	f1ba 0f00 	cmp.w	sl, #0
 800a8aa:	d020      	beq.n	800a8ee <__multiply+0x11c>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	46a8      	mov	r8, r5
 800a8b2:	f04f 0b00 	mov.w	fp, #0
 800a8b6:	f8b9 c000 	ldrh.w	ip, [r9]
 800a8ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a8be:	fb0a 440c 	mla	r4, sl, ip, r4
 800a8c2:	445c      	add	r4, fp
 800a8c4:	46c4      	mov	ip, r8
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a8cc:	f84c 3b04 	str.w	r3, [ip], #4
 800a8d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a8d8:	0c1b      	lsrs	r3, r3, #16
 800a8da:	fb0a b303 	mla	r3, sl, r3, fp
 800a8de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a8e2:	454f      	cmp	r7, r9
 800a8e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a8e8:	d805      	bhi.n	800a8f6 <__multiply+0x124>
 800a8ea:	f8c8 3004 	str.w	r3, [r8, #4]
 800a8ee:	3504      	adds	r5, #4
 800a8f0:	e79b      	b.n	800a82a <__multiply+0x58>
 800a8f2:	46d4      	mov	ip, sl
 800a8f4:	e7b3      	b.n	800a85e <__multiply+0x8c>
 800a8f6:	46e0      	mov	r8, ip
 800a8f8:	e7dd      	b.n	800a8b6 <__multiply+0xe4>
 800a8fa:	3e01      	subs	r6, #1
 800a8fc:	e799      	b.n	800a832 <__multiply+0x60>
	...

0800a900 <__pow5mult>:
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a904:	4615      	mov	r5, r2
 800a906:	f012 0203 	ands.w	r2, r2, #3
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	d007      	beq.n	800a920 <__pow5mult+0x20>
 800a910:	3a01      	subs	r2, #1
 800a912:	4c21      	ldr	r4, [pc, #132]	; (800a998 <__pow5mult+0x98>)
 800a914:	2300      	movs	r3, #0
 800a916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a91a:	f7ff fec8 	bl	800a6ae <__multadd>
 800a91e:	4607      	mov	r7, r0
 800a920:	10ad      	asrs	r5, r5, #2
 800a922:	d035      	beq.n	800a990 <__pow5mult+0x90>
 800a924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a926:	b93c      	cbnz	r4, 800a938 <__pow5mult+0x38>
 800a928:	2010      	movs	r0, #16
 800a92a:	f7ff fe6d 	bl	800a608 <malloc>
 800a92e:	6270      	str	r0, [r6, #36]	; 0x24
 800a930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a934:	6004      	str	r4, [r0, #0]
 800a936:	60c4      	str	r4, [r0, #12]
 800a938:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a93c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a940:	b94c      	cbnz	r4, 800a956 <__pow5mult+0x56>
 800a942:	f240 2171 	movw	r1, #625	; 0x271
 800a946:	4630      	mov	r0, r6
 800a948:	f7ff ff3a 	bl	800a7c0 <__i2b>
 800a94c:	2300      	movs	r3, #0
 800a94e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a952:	4604      	mov	r4, r0
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	f04f 0800 	mov.w	r8, #0
 800a95a:	07eb      	lsls	r3, r5, #31
 800a95c:	d50a      	bpl.n	800a974 <__pow5mult+0x74>
 800a95e:	4639      	mov	r1, r7
 800a960:	4622      	mov	r2, r4
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ff35 	bl	800a7d2 <__multiply>
 800a968:	4639      	mov	r1, r7
 800a96a:	4681      	mov	r9, r0
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7ff fe87 	bl	800a680 <_Bfree>
 800a972:	464f      	mov	r7, r9
 800a974:	106d      	asrs	r5, r5, #1
 800a976:	d00b      	beq.n	800a990 <__pow5mult+0x90>
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	b938      	cbnz	r0, 800a98c <__pow5mult+0x8c>
 800a97c:	4622      	mov	r2, r4
 800a97e:	4621      	mov	r1, r4
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff ff26 	bl	800a7d2 <__multiply>
 800a986:	6020      	str	r0, [r4, #0]
 800a988:	f8c0 8000 	str.w	r8, [r0]
 800a98c:	4604      	mov	r4, r0
 800a98e:	e7e4      	b.n	800a95a <__pow5mult+0x5a>
 800a990:	4638      	mov	r0, r7
 800a992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a996:	bf00      	nop
 800a998:	0800d758 	.word	0x0800d758

0800a99c <__lshift>:
 800a99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	6849      	ldr	r1, [r1, #4]
 800a9aa:	eb0a 0903 	add.w	r9, sl, r3
 800a9ae:	68a3      	ldr	r3, [r4, #8]
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4616      	mov	r6, r2
 800a9b4:	f109 0501 	add.w	r5, r9, #1
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	db32      	blt.n	800aa22 <__lshift+0x86>
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f7ff fe2b 	bl	800a618 <_Balloc>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4680      	mov	r8, r0
 800a9c6:	f100 0114 	add.w	r1, r0, #20
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4553      	cmp	r3, sl
 800a9ce:	db2b      	blt.n	800aa28 <__lshift+0x8c>
 800a9d0:	6920      	ldr	r0, [r4, #16]
 800a9d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9d6:	f104 0314 	add.w	r3, r4, #20
 800a9da:	f016 021f 	ands.w	r2, r6, #31
 800a9de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9e6:	d025      	beq.n	800aa34 <__lshift+0x98>
 800a9e8:	f1c2 0e20 	rsb	lr, r2, #32
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	681e      	ldr	r6, [r3, #0]
 800a9f0:	468a      	mov	sl, r1
 800a9f2:	4096      	lsls	r6, r2
 800a9f4:	4330      	orrs	r0, r6
 800a9f6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800a9fe:	459c      	cmp	ip, r3
 800aa00:	fa20 f00e 	lsr.w	r0, r0, lr
 800aa04:	d814      	bhi.n	800aa30 <__lshift+0x94>
 800aa06:	6048      	str	r0, [r1, #4]
 800aa08:	b108      	cbz	r0, 800aa0e <__lshift+0x72>
 800aa0a:	f109 0502 	add.w	r5, r9, #2
 800aa0e:	3d01      	subs	r5, #1
 800aa10:	4638      	mov	r0, r7
 800aa12:	f8c8 5010 	str.w	r5, [r8, #16]
 800aa16:	4621      	mov	r1, r4
 800aa18:	f7ff fe32 	bl	800a680 <_Bfree>
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa22:	3101      	adds	r1, #1
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	e7c7      	b.n	800a9b8 <__lshift+0x1c>
 800aa28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	e7cd      	b.n	800a9cc <__lshift+0x30>
 800aa30:	4651      	mov	r1, sl
 800aa32:	e7dc      	b.n	800a9ee <__lshift+0x52>
 800aa34:	3904      	subs	r1, #4
 800aa36:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3a:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa3e:	459c      	cmp	ip, r3
 800aa40:	d8f9      	bhi.n	800aa36 <__lshift+0x9a>
 800aa42:	e7e4      	b.n	800aa0e <__lshift+0x72>

0800aa44 <__mcmp>:
 800aa44:	6903      	ldr	r3, [r0, #16]
 800aa46:	690a      	ldr	r2, [r1, #16]
 800aa48:	1a9b      	subs	r3, r3, r2
 800aa4a:	b530      	push	{r4, r5, lr}
 800aa4c:	d10c      	bne.n	800aa68 <__mcmp+0x24>
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	3014      	adds	r0, #20
 800aa52:	3114      	adds	r1, #20
 800aa54:	1884      	adds	r4, r0, r2
 800aa56:	4411      	add	r1, r2
 800aa58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa60:	4295      	cmp	r5, r2
 800aa62:	d003      	beq.n	800aa6c <__mcmp+0x28>
 800aa64:	d305      	bcc.n	800aa72 <__mcmp+0x2e>
 800aa66:	2301      	movs	r3, #1
 800aa68:	4618      	mov	r0, r3
 800aa6a:	bd30      	pop	{r4, r5, pc}
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d3f3      	bcc.n	800aa58 <__mcmp+0x14>
 800aa70:	e7fa      	b.n	800aa68 <__mcmp+0x24>
 800aa72:	f04f 33ff 	mov.w	r3, #4294967295
 800aa76:	e7f7      	b.n	800aa68 <__mcmp+0x24>

0800aa78 <__mdiff>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	460d      	mov	r5, r1
 800aa7e:	4607      	mov	r7, r0
 800aa80:	4611      	mov	r1, r2
 800aa82:	4628      	mov	r0, r5
 800aa84:	4614      	mov	r4, r2
 800aa86:	f7ff ffdd 	bl	800aa44 <__mcmp>
 800aa8a:	1e06      	subs	r6, r0, #0
 800aa8c:	d108      	bne.n	800aaa0 <__mdiff+0x28>
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff fdc1 	bl	800a618 <_Balloc>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aa9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa0:	bfa4      	itt	ge
 800aaa2:	4623      	movge	r3, r4
 800aaa4:	462c      	movge	r4, r5
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	6861      	ldr	r1, [r4, #4]
 800aaaa:	bfa6      	itte	ge
 800aaac:	461d      	movge	r5, r3
 800aaae:	2600      	movge	r6, #0
 800aab0:	2601      	movlt	r6, #1
 800aab2:	f7ff fdb1 	bl	800a618 <_Balloc>
 800aab6:	692b      	ldr	r3, [r5, #16]
 800aab8:	60c6      	str	r6, [r0, #12]
 800aaba:	6926      	ldr	r6, [r4, #16]
 800aabc:	f105 0914 	add.w	r9, r5, #20
 800aac0:	f104 0214 	add.w	r2, r4, #20
 800aac4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800aac8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800aacc:	f100 0514 	add.w	r5, r0, #20
 800aad0:	f04f 0e00 	mov.w	lr, #0
 800aad4:	f852 ab04 	ldr.w	sl, [r2], #4
 800aad8:	f859 4b04 	ldr.w	r4, [r9], #4
 800aadc:	fa1e f18a 	uxtah	r1, lr, sl
 800aae0:	b2a3      	uxth	r3, r4
 800aae2:	1ac9      	subs	r1, r1, r3
 800aae4:	0c23      	lsrs	r3, r4, #16
 800aae6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800aaea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aaee:	b289      	uxth	r1, r1
 800aaf0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aaf4:	45c8      	cmp	r8, r9
 800aaf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aafa:	4694      	mov	ip, r2
 800aafc:	f845 3b04 	str.w	r3, [r5], #4
 800ab00:	d8e8      	bhi.n	800aad4 <__mdiff+0x5c>
 800ab02:	45bc      	cmp	ip, r7
 800ab04:	d304      	bcc.n	800ab10 <__mdiff+0x98>
 800ab06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ab0a:	b183      	cbz	r3, 800ab2e <__mdiff+0xb6>
 800ab0c:	6106      	str	r6, [r0, #16]
 800ab0e:	e7c5      	b.n	800aa9c <__mdiff+0x24>
 800ab10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab14:	fa1e f381 	uxtah	r3, lr, r1
 800ab18:	141a      	asrs	r2, r3, #16
 800ab1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ab28:	f845 3b04 	str.w	r3, [r5], #4
 800ab2c:	e7e9      	b.n	800ab02 <__mdiff+0x8a>
 800ab2e:	3e01      	subs	r6, #1
 800ab30:	e7e9      	b.n	800ab06 <__mdiff+0x8e>

0800ab32 <__d2b>:
 800ab32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab36:	460e      	mov	r6, r1
 800ab38:	2101      	movs	r1, #1
 800ab3a:	ec59 8b10 	vmov	r8, r9, d0
 800ab3e:	4615      	mov	r5, r2
 800ab40:	f7ff fd6a 	bl	800a618 <_Balloc>
 800ab44:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ab48:	4607      	mov	r7, r0
 800ab4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab4e:	bb34      	cbnz	r4, 800ab9e <__d2b+0x6c>
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	f1b8 0300 	subs.w	r3, r8, #0
 800ab56:	d027      	beq.n	800aba8 <__d2b+0x76>
 800ab58:	a802      	add	r0, sp, #8
 800ab5a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ab5e:	f7ff fe00 	bl	800a762 <__lo0bits>
 800ab62:	9900      	ldr	r1, [sp, #0]
 800ab64:	b1f0      	cbz	r0, 800aba4 <__d2b+0x72>
 800ab66:	9a01      	ldr	r2, [sp, #4]
 800ab68:	f1c0 0320 	rsb	r3, r0, #32
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	430b      	orrs	r3, r1
 800ab72:	40c2      	lsrs	r2, r0
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	9201      	str	r2, [sp, #4]
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	61bb      	str	r3, [r7, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bf14      	ite	ne
 800ab80:	2102      	movne	r1, #2
 800ab82:	2101      	moveq	r1, #1
 800ab84:	6139      	str	r1, [r7, #16]
 800ab86:	b1c4      	cbz	r4, 800abba <__d2b+0x88>
 800ab88:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ab8c:	4404      	add	r4, r0
 800ab8e:	6034      	str	r4, [r6, #0]
 800ab90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab94:	6028      	str	r0, [r5, #0]
 800ab96:	4638      	mov	r0, r7
 800ab98:	b003      	add	sp, #12
 800ab9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aba2:	e7d5      	b.n	800ab50 <__d2b+0x1e>
 800aba4:	6179      	str	r1, [r7, #20]
 800aba6:	e7e7      	b.n	800ab78 <__d2b+0x46>
 800aba8:	a801      	add	r0, sp, #4
 800abaa:	f7ff fdda 	bl	800a762 <__lo0bits>
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	2101      	movs	r1, #1
 800abb4:	6139      	str	r1, [r7, #16]
 800abb6:	3020      	adds	r0, #32
 800abb8:	e7e5      	b.n	800ab86 <__d2b+0x54>
 800abba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800abbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abc2:	6030      	str	r0, [r6, #0]
 800abc4:	6918      	ldr	r0, [r3, #16]
 800abc6:	f7ff fdad 	bl	800a724 <__hi0bits>
 800abca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800abce:	e7e1      	b.n	800ab94 <__d2b+0x62>

0800abd0 <_calloc_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	fb02 f401 	mul.w	r4, r2, r1
 800abd6:	4621      	mov	r1, r4
 800abd8:	f000 f856 	bl	800ac88 <_malloc_r>
 800abdc:	4605      	mov	r5, r0
 800abde:	b118      	cbz	r0, 800abe8 <_calloc_r+0x18>
 800abe0:	4622      	mov	r2, r4
 800abe2:	2100      	movs	r1, #0
 800abe4:	f7fe f975 	bl	8008ed2 <memset>
 800abe8:	4628      	mov	r0, r5
 800abea:	bd38      	pop	{r3, r4, r5, pc}

0800abec <_free_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4605      	mov	r5, r0
 800abf0:	2900      	cmp	r1, #0
 800abf2:	d045      	beq.n	800ac80 <_free_r+0x94>
 800abf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf8:	1f0c      	subs	r4, r1, #4
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bfb8      	it	lt
 800abfe:	18e4      	addlt	r4, r4, r3
 800ac00:	f000 fc4a 	bl	800b498 <__malloc_lock>
 800ac04:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <_free_r+0x98>)
 800ac06:	6813      	ldr	r3, [r2, #0]
 800ac08:	4610      	mov	r0, r2
 800ac0a:	b933      	cbnz	r3, 800ac1a <_free_r+0x2e>
 800ac0c:	6063      	str	r3, [r4, #4]
 800ac0e:	6014      	str	r4, [r2, #0]
 800ac10:	4628      	mov	r0, r5
 800ac12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac16:	f000 bc40 	b.w	800b49a <__malloc_unlock>
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	d90c      	bls.n	800ac38 <_free_r+0x4c>
 800ac1e:	6821      	ldr	r1, [r4, #0]
 800ac20:	1862      	adds	r2, r4, r1
 800ac22:	4293      	cmp	r3, r2
 800ac24:	bf04      	itt	eq
 800ac26:	681a      	ldreq	r2, [r3, #0]
 800ac28:	685b      	ldreq	r3, [r3, #4]
 800ac2a:	6063      	str	r3, [r4, #4]
 800ac2c:	bf04      	itt	eq
 800ac2e:	1852      	addeq	r2, r2, r1
 800ac30:	6022      	streq	r2, [r4, #0]
 800ac32:	6004      	str	r4, [r0, #0]
 800ac34:	e7ec      	b.n	800ac10 <_free_r+0x24>
 800ac36:	4613      	mov	r3, r2
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	b10a      	cbz	r2, 800ac40 <_free_r+0x54>
 800ac3c:	42a2      	cmp	r2, r4
 800ac3e:	d9fa      	bls.n	800ac36 <_free_r+0x4a>
 800ac40:	6819      	ldr	r1, [r3, #0]
 800ac42:	1858      	adds	r0, r3, r1
 800ac44:	42a0      	cmp	r0, r4
 800ac46:	d10b      	bne.n	800ac60 <_free_r+0x74>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	4401      	add	r1, r0
 800ac4c:	1858      	adds	r0, r3, r1
 800ac4e:	4282      	cmp	r2, r0
 800ac50:	6019      	str	r1, [r3, #0]
 800ac52:	d1dd      	bne.n	800ac10 <_free_r+0x24>
 800ac54:	6810      	ldr	r0, [r2, #0]
 800ac56:	6852      	ldr	r2, [r2, #4]
 800ac58:	605a      	str	r2, [r3, #4]
 800ac5a:	4401      	add	r1, r0
 800ac5c:	6019      	str	r1, [r3, #0]
 800ac5e:	e7d7      	b.n	800ac10 <_free_r+0x24>
 800ac60:	d902      	bls.n	800ac68 <_free_r+0x7c>
 800ac62:	230c      	movs	r3, #12
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	e7d3      	b.n	800ac10 <_free_r+0x24>
 800ac68:	6820      	ldr	r0, [r4, #0]
 800ac6a:	1821      	adds	r1, r4, r0
 800ac6c:	428a      	cmp	r2, r1
 800ac6e:	bf04      	itt	eq
 800ac70:	6811      	ldreq	r1, [r2, #0]
 800ac72:	6852      	ldreq	r2, [r2, #4]
 800ac74:	6062      	str	r2, [r4, #4]
 800ac76:	bf04      	itt	eq
 800ac78:	1809      	addeq	r1, r1, r0
 800ac7a:	6021      	streq	r1, [r4, #0]
 800ac7c:	605c      	str	r4, [r3, #4]
 800ac7e:	e7c7      	b.n	800ac10 <_free_r+0x24>
 800ac80:	bd38      	pop	{r3, r4, r5, pc}
 800ac82:	bf00      	nop
 800ac84:	20009800 	.word	0x20009800

0800ac88 <_malloc_r>:
 800ac88:	b570      	push	{r4, r5, r6, lr}
 800ac8a:	1ccd      	adds	r5, r1, #3
 800ac8c:	f025 0503 	bic.w	r5, r5, #3
 800ac90:	3508      	adds	r5, #8
 800ac92:	2d0c      	cmp	r5, #12
 800ac94:	bf38      	it	cc
 800ac96:	250c      	movcc	r5, #12
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	db01      	blt.n	800aca2 <_malloc_r+0x1a>
 800ac9e:	42a9      	cmp	r1, r5
 800aca0:	d903      	bls.n	800acaa <_malloc_r+0x22>
 800aca2:	230c      	movs	r3, #12
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	2000      	movs	r0, #0
 800aca8:	bd70      	pop	{r4, r5, r6, pc}
 800acaa:	f000 fbf5 	bl	800b498 <__malloc_lock>
 800acae:	4a21      	ldr	r2, [pc, #132]	; (800ad34 <_malloc_r+0xac>)
 800acb0:	6814      	ldr	r4, [r2, #0]
 800acb2:	4621      	mov	r1, r4
 800acb4:	b991      	cbnz	r1, 800acdc <_malloc_r+0x54>
 800acb6:	4c20      	ldr	r4, [pc, #128]	; (800ad38 <_malloc_r+0xb0>)
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	b91b      	cbnz	r3, 800acc4 <_malloc_r+0x3c>
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 f97d 	bl	800afbc <_sbrk_r>
 800acc2:	6020      	str	r0, [r4, #0]
 800acc4:	4629      	mov	r1, r5
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 f978 	bl	800afbc <_sbrk_r>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d124      	bne.n	800ad1a <_malloc_r+0x92>
 800acd0:	230c      	movs	r3, #12
 800acd2:	6033      	str	r3, [r6, #0]
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 fbe0 	bl	800b49a <__malloc_unlock>
 800acda:	e7e4      	b.n	800aca6 <_malloc_r+0x1e>
 800acdc:	680b      	ldr	r3, [r1, #0]
 800acde:	1b5b      	subs	r3, r3, r5
 800ace0:	d418      	bmi.n	800ad14 <_malloc_r+0x8c>
 800ace2:	2b0b      	cmp	r3, #11
 800ace4:	d90f      	bls.n	800ad06 <_malloc_r+0x7e>
 800ace6:	600b      	str	r3, [r1, #0]
 800ace8:	50cd      	str	r5, [r1, r3]
 800acea:	18cc      	adds	r4, r1, r3
 800acec:	4630      	mov	r0, r6
 800acee:	f000 fbd4 	bl	800b49a <__malloc_unlock>
 800acf2:	f104 000b 	add.w	r0, r4, #11
 800acf6:	1d23      	adds	r3, r4, #4
 800acf8:	f020 0007 	bic.w	r0, r0, #7
 800acfc:	1ac3      	subs	r3, r0, r3
 800acfe:	d0d3      	beq.n	800aca8 <_malloc_r+0x20>
 800ad00:	425a      	negs	r2, r3
 800ad02:	50e2      	str	r2, [r4, r3]
 800ad04:	e7d0      	b.n	800aca8 <_malloc_r+0x20>
 800ad06:	428c      	cmp	r4, r1
 800ad08:	684b      	ldr	r3, [r1, #4]
 800ad0a:	bf16      	itet	ne
 800ad0c:	6063      	strne	r3, [r4, #4]
 800ad0e:	6013      	streq	r3, [r2, #0]
 800ad10:	460c      	movne	r4, r1
 800ad12:	e7eb      	b.n	800acec <_malloc_r+0x64>
 800ad14:	460c      	mov	r4, r1
 800ad16:	6849      	ldr	r1, [r1, #4]
 800ad18:	e7cc      	b.n	800acb4 <_malloc_r+0x2c>
 800ad1a:	1cc4      	adds	r4, r0, #3
 800ad1c:	f024 0403 	bic.w	r4, r4, #3
 800ad20:	42a0      	cmp	r0, r4
 800ad22:	d005      	beq.n	800ad30 <_malloc_r+0xa8>
 800ad24:	1a21      	subs	r1, r4, r0
 800ad26:	4630      	mov	r0, r6
 800ad28:	f000 f948 	bl	800afbc <_sbrk_r>
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	d0cf      	beq.n	800acd0 <_malloc_r+0x48>
 800ad30:	6025      	str	r5, [r4, #0]
 800ad32:	e7db      	b.n	800acec <_malloc_r+0x64>
 800ad34:	20009800 	.word	0x20009800
 800ad38:	20009804 	.word	0x20009804

0800ad3c <__sfputc_r>:
 800ad3c:	6893      	ldr	r3, [r2, #8]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	b410      	push	{r4}
 800ad44:	6093      	str	r3, [r2, #8]
 800ad46:	da08      	bge.n	800ad5a <__sfputc_r+0x1e>
 800ad48:	6994      	ldr	r4, [r2, #24]
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	db01      	blt.n	800ad52 <__sfputc_r+0x16>
 800ad4e:	290a      	cmp	r1, #10
 800ad50:	d103      	bne.n	800ad5a <__sfputc_r+0x1e>
 800ad52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad56:	f000 b985 	b.w	800b064 <__swbuf_r>
 800ad5a:	6813      	ldr	r3, [r2, #0]
 800ad5c:	1c58      	adds	r0, r3, #1
 800ad5e:	6010      	str	r0, [r2, #0]
 800ad60:	7019      	strb	r1, [r3, #0]
 800ad62:	4608      	mov	r0, r1
 800ad64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <__sfputs_r>:
 800ad6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	460f      	mov	r7, r1
 800ad70:	4614      	mov	r4, r2
 800ad72:	18d5      	adds	r5, r2, r3
 800ad74:	42ac      	cmp	r4, r5
 800ad76:	d101      	bne.n	800ad7c <__sfputs_r+0x12>
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e007      	b.n	800ad8c <__sfputs_r+0x22>
 800ad7c:	463a      	mov	r2, r7
 800ad7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7ff ffda 	bl	800ad3c <__sfputc_r>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d1f3      	bne.n	800ad74 <__sfputs_r+0xa>
 800ad8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad90 <_vfiprintf_r>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	460c      	mov	r4, r1
 800ad96:	b09d      	sub	sp, #116	; 0x74
 800ad98:	4617      	mov	r7, r2
 800ad9a:	461d      	mov	r5, r3
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	b118      	cbz	r0, 800ada8 <_vfiprintf_r+0x18>
 800ada0:	6983      	ldr	r3, [r0, #24]
 800ada2:	b90b      	cbnz	r3, 800ada8 <_vfiprintf_r+0x18>
 800ada4:	f7ff fb98 	bl	800a4d8 <__sinit>
 800ada8:	4b7c      	ldr	r3, [pc, #496]	; (800af9c <_vfiprintf_r+0x20c>)
 800adaa:	429c      	cmp	r4, r3
 800adac:	d158      	bne.n	800ae60 <_vfiprintf_r+0xd0>
 800adae:	6874      	ldr	r4, [r6, #4]
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	0718      	lsls	r0, r3, #28
 800adb4:	d55e      	bpl.n	800ae74 <_vfiprintf_r+0xe4>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d05b      	beq.n	800ae74 <_vfiprintf_r+0xe4>
 800adbc:	2300      	movs	r3, #0
 800adbe:	9309      	str	r3, [sp, #36]	; 0x24
 800adc0:	2320      	movs	r3, #32
 800adc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc6:	2330      	movs	r3, #48	; 0x30
 800adc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adcc:	9503      	str	r5, [sp, #12]
 800adce:	f04f 0b01 	mov.w	fp, #1
 800add2:	46b8      	mov	r8, r7
 800add4:	4645      	mov	r5, r8
 800add6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adda:	b10b      	cbz	r3, 800ade0 <_vfiprintf_r+0x50>
 800addc:	2b25      	cmp	r3, #37	; 0x25
 800adde:	d154      	bne.n	800ae8a <_vfiprintf_r+0xfa>
 800ade0:	ebb8 0a07 	subs.w	sl, r8, r7
 800ade4:	d00b      	beq.n	800adfe <_vfiprintf_r+0x6e>
 800ade6:	4653      	mov	r3, sl
 800ade8:	463a      	mov	r2, r7
 800adea:	4621      	mov	r1, r4
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbc 	bl	800ad6a <__sfputs_r>
 800adf2:	3001      	adds	r0, #1
 800adf4:	f000 80c2 	beq.w	800af7c <_vfiprintf_r+0x1ec>
 800adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfa:	4453      	add	r3, sl
 800adfc:	9309      	str	r3, [sp, #36]	; 0x24
 800adfe:	f898 3000 	ldrb.w	r3, [r8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 80ba 	beq.w	800af7c <_vfiprintf_r+0x1ec>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	9307      	str	r3, [sp, #28]
 800ae16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae1c:	46a8      	mov	r8, r5
 800ae1e:	2205      	movs	r2, #5
 800ae20:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ae24:	485e      	ldr	r0, [pc, #376]	; (800afa0 <_vfiprintf_r+0x210>)
 800ae26:	f7f5 f9db 	bl	80001e0 <memchr>
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	bb78      	cbnz	r0, 800ae8e <_vfiprintf_r+0xfe>
 800ae2e:	06d9      	lsls	r1, r3, #27
 800ae30:	bf44      	itt	mi
 800ae32:	2220      	movmi	r2, #32
 800ae34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae38:	071a      	lsls	r2, r3, #28
 800ae3a:	bf44      	itt	mi
 800ae3c:	222b      	movmi	r2, #43	; 0x2b
 800ae3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae42:	782a      	ldrb	r2, [r5, #0]
 800ae44:	2a2a      	cmp	r2, #42	; 0x2a
 800ae46:	d02a      	beq.n	800ae9e <_vfiprintf_r+0x10e>
 800ae48:	9a07      	ldr	r2, [sp, #28]
 800ae4a:	46a8      	mov	r8, r5
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	250a      	movs	r5, #10
 800ae50:	4641      	mov	r1, r8
 800ae52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae56:	3b30      	subs	r3, #48	; 0x30
 800ae58:	2b09      	cmp	r3, #9
 800ae5a:	d969      	bls.n	800af30 <_vfiprintf_r+0x1a0>
 800ae5c:	b360      	cbz	r0, 800aeb8 <_vfiprintf_r+0x128>
 800ae5e:	e024      	b.n	800aeaa <_vfiprintf_r+0x11a>
 800ae60:	4b50      	ldr	r3, [pc, #320]	; (800afa4 <_vfiprintf_r+0x214>)
 800ae62:	429c      	cmp	r4, r3
 800ae64:	d101      	bne.n	800ae6a <_vfiprintf_r+0xda>
 800ae66:	68b4      	ldr	r4, [r6, #8]
 800ae68:	e7a2      	b.n	800adb0 <_vfiprintf_r+0x20>
 800ae6a:	4b4f      	ldr	r3, [pc, #316]	; (800afa8 <_vfiprintf_r+0x218>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	bf08      	it	eq
 800ae70:	68f4      	ldreq	r4, [r6, #12]
 800ae72:	e79d      	b.n	800adb0 <_vfiprintf_r+0x20>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4630      	mov	r0, r6
 800ae78:	f000 f958 	bl	800b12c <__swsetup_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d09d      	beq.n	800adbc <_vfiprintf_r+0x2c>
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295
 800ae84:	b01d      	add	sp, #116	; 0x74
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	46a8      	mov	r8, r5
 800ae8c:	e7a2      	b.n	800add4 <_vfiprintf_r+0x44>
 800ae8e:	4a44      	ldr	r2, [pc, #272]	; (800afa0 <_vfiprintf_r+0x210>)
 800ae90:	1a80      	subs	r0, r0, r2
 800ae92:	fa0b f000 	lsl.w	r0, fp, r0
 800ae96:	4318      	orrs	r0, r3
 800ae98:	9004      	str	r0, [sp, #16]
 800ae9a:	4645      	mov	r5, r8
 800ae9c:	e7be      	b.n	800ae1c <_vfiprintf_r+0x8c>
 800ae9e:	9a03      	ldr	r2, [sp, #12]
 800aea0:	1d11      	adds	r1, r2, #4
 800aea2:	6812      	ldr	r2, [r2, #0]
 800aea4:	9103      	str	r1, [sp, #12]
 800aea6:	2a00      	cmp	r2, #0
 800aea8:	db01      	blt.n	800aeae <_vfiprintf_r+0x11e>
 800aeaa:	9207      	str	r2, [sp, #28]
 800aeac:	e004      	b.n	800aeb8 <_vfiprintf_r+0x128>
 800aeae:	4252      	negs	r2, r2
 800aeb0:	f043 0302 	orr.w	r3, r3, #2
 800aeb4:	9207      	str	r2, [sp, #28]
 800aeb6:	9304      	str	r3, [sp, #16]
 800aeb8:	f898 3000 	ldrb.w	r3, [r8]
 800aebc:	2b2e      	cmp	r3, #46	; 0x2e
 800aebe:	d10e      	bne.n	800aede <_vfiprintf_r+0x14e>
 800aec0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aec4:	2b2a      	cmp	r3, #42	; 0x2a
 800aec6:	d138      	bne.n	800af3a <_vfiprintf_r+0x1aa>
 800aec8:	9b03      	ldr	r3, [sp, #12]
 800aeca:	1d1a      	adds	r2, r3, #4
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	9203      	str	r2, [sp, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	bfb8      	it	lt
 800aed4:	f04f 33ff 	movlt.w	r3, #4294967295
 800aed8:	f108 0802 	add.w	r8, r8, #2
 800aedc:	9305      	str	r3, [sp, #20]
 800aede:	4d33      	ldr	r5, [pc, #204]	; (800afac <_vfiprintf_r+0x21c>)
 800aee0:	f898 1000 	ldrb.w	r1, [r8]
 800aee4:	2203      	movs	r2, #3
 800aee6:	4628      	mov	r0, r5
 800aee8:	f7f5 f97a 	bl	80001e0 <memchr>
 800aeec:	b140      	cbz	r0, 800af00 <_vfiprintf_r+0x170>
 800aeee:	2340      	movs	r3, #64	; 0x40
 800aef0:	1b40      	subs	r0, r0, r5
 800aef2:	fa03 f000 	lsl.w	r0, r3, r0
 800aef6:	9b04      	ldr	r3, [sp, #16]
 800aef8:	4303      	orrs	r3, r0
 800aefa:	f108 0801 	add.w	r8, r8, #1
 800aefe:	9304      	str	r3, [sp, #16]
 800af00:	f898 1000 	ldrb.w	r1, [r8]
 800af04:	482a      	ldr	r0, [pc, #168]	; (800afb0 <_vfiprintf_r+0x220>)
 800af06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af0a:	2206      	movs	r2, #6
 800af0c:	f108 0701 	add.w	r7, r8, #1
 800af10:	f7f5 f966 	bl	80001e0 <memchr>
 800af14:	2800      	cmp	r0, #0
 800af16:	d037      	beq.n	800af88 <_vfiprintf_r+0x1f8>
 800af18:	4b26      	ldr	r3, [pc, #152]	; (800afb4 <_vfiprintf_r+0x224>)
 800af1a:	bb1b      	cbnz	r3, 800af64 <_vfiprintf_r+0x1d4>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	3307      	adds	r3, #7
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	3308      	adds	r3, #8
 800af26:	9303      	str	r3, [sp, #12]
 800af28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2a:	444b      	add	r3, r9
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	e750      	b.n	800add2 <_vfiprintf_r+0x42>
 800af30:	fb05 3202 	mla	r2, r5, r2, r3
 800af34:	2001      	movs	r0, #1
 800af36:	4688      	mov	r8, r1
 800af38:	e78a      	b.n	800ae50 <_vfiprintf_r+0xc0>
 800af3a:	2300      	movs	r3, #0
 800af3c:	f108 0801 	add.w	r8, r8, #1
 800af40:	9305      	str	r3, [sp, #20]
 800af42:	4619      	mov	r1, r3
 800af44:	250a      	movs	r5, #10
 800af46:	4640      	mov	r0, r8
 800af48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af4c:	3a30      	subs	r2, #48	; 0x30
 800af4e:	2a09      	cmp	r2, #9
 800af50:	d903      	bls.n	800af5a <_vfiprintf_r+0x1ca>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0c3      	beq.n	800aede <_vfiprintf_r+0x14e>
 800af56:	9105      	str	r1, [sp, #20]
 800af58:	e7c1      	b.n	800aede <_vfiprintf_r+0x14e>
 800af5a:	fb05 2101 	mla	r1, r5, r1, r2
 800af5e:	2301      	movs	r3, #1
 800af60:	4680      	mov	r8, r0
 800af62:	e7f0      	b.n	800af46 <_vfiprintf_r+0x1b6>
 800af64:	ab03      	add	r3, sp, #12
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	4622      	mov	r2, r4
 800af6a:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <_vfiprintf_r+0x228>)
 800af6c:	a904      	add	r1, sp, #16
 800af6e:	4630      	mov	r0, r6
 800af70:	f7fe f84c 	bl	800900c <_printf_float>
 800af74:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af78:	4681      	mov	r9, r0
 800af7a:	d1d5      	bne.n	800af28 <_vfiprintf_r+0x198>
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	065b      	lsls	r3, r3, #25
 800af80:	f53f af7e 	bmi.w	800ae80 <_vfiprintf_r+0xf0>
 800af84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af86:	e77d      	b.n	800ae84 <_vfiprintf_r+0xf4>
 800af88:	ab03      	add	r3, sp, #12
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	4622      	mov	r2, r4
 800af8e:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <_vfiprintf_r+0x228>)
 800af90:	a904      	add	r1, sp, #16
 800af92:	4630      	mov	r0, r6
 800af94:	f7fe faf0 	bl	8009578 <_printf_i>
 800af98:	e7ec      	b.n	800af74 <_vfiprintf_r+0x1e4>
 800af9a:	bf00      	nop
 800af9c:	0800d628 	.word	0x0800d628
 800afa0:	0800d764 	.word	0x0800d764
 800afa4:	0800d648 	.word	0x0800d648
 800afa8:	0800d608 	.word	0x0800d608
 800afac:	0800d76a 	.word	0x0800d76a
 800afb0:	0800d76e 	.word	0x0800d76e
 800afb4:	0800900d 	.word	0x0800900d
 800afb8:	0800ad6b 	.word	0x0800ad6b

0800afbc <_sbrk_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4c06      	ldr	r4, [pc, #24]	; (800afd8 <_sbrk_r+0x1c>)
 800afc0:	2300      	movs	r3, #0
 800afc2:	4605      	mov	r5, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	f7f8 ffe6 	bl	8003f98 <_sbrk>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d102      	bne.n	800afd6 <_sbrk_r+0x1a>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	b103      	cbz	r3, 800afd6 <_sbrk_r+0x1a>
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	2000c890 	.word	0x2000c890

0800afdc <__sread>:
 800afdc:	b510      	push	{r4, lr}
 800afde:	460c      	mov	r4, r1
 800afe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe4:	f000 fa5a 	bl	800b49c <_read_r>
 800afe8:	2800      	cmp	r0, #0
 800afea:	bfab      	itete	ge
 800afec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afee:	89a3      	ldrhlt	r3, [r4, #12]
 800aff0:	181b      	addge	r3, r3, r0
 800aff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aff6:	bfac      	ite	ge
 800aff8:	6563      	strge	r3, [r4, #84]	; 0x54
 800affa:	81a3      	strhlt	r3, [r4, #12]
 800affc:	bd10      	pop	{r4, pc}

0800affe <__swrite>:
 800affe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b002:	461f      	mov	r7, r3
 800b004:	898b      	ldrh	r3, [r1, #12]
 800b006:	05db      	lsls	r3, r3, #23
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	4616      	mov	r6, r2
 800b00e:	d505      	bpl.n	800b01c <__swrite+0x1e>
 800b010:	2302      	movs	r3, #2
 800b012:	2200      	movs	r2, #0
 800b014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b018:	f000 f9b6 	bl	800b388 <_lseek_r>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	4632      	mov	r2, r6
 800b02a:	463b      	mov	r3, r7
 800b02c:	4628      	mov	r0, r5
 800b02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	f000 b869 	b.w	800b108 <_write_r>

0800b036 <__sseek>:
 800b036:	b510      	push	{r4, lr}
 800b038:	460c      	mov	r4, r1
 800b03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03e:	f000 f9a3 	bl	800b388 <_lseek_r>
 800b042:	1c43      	adds	r3, r0, #1
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	bf15      	itete	ne
 800b048:	6560      	strne	r0, [r4, #84]	; 0x54
 800b04a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b04e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b052:	81a3      	strheq	r3, [r4, #12]
 800b054:	bf18      	it	ne
 800b056:	81a3      	strhne	r3, [r4, #12]
 800b058:	bd10      	pop	{r4, pc}

0800b05a <__sclose>:
 800b05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b05e:	f000 b8d3 	b.w	800b208 <_close_r>
	...

0800b064 <__swbuf_r>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	460e      	mov	r6, r1
 800b068:	4614      	mov	r4, r2
 800b06a:	4605      	mov	r5, r0
 800b06c:	b118      	cbz	r0, 800b076 <__swbuf_r+0x12>
 800b06e:	6983      	ldr	r3, [r0, #24]
 800b070:	b90b      	cbnz	r3, 800b076 <__swbuf_r+0x12>
 800b072:	f7ff fa31 	bl	800a4d8 <__sinit>
 800b076:	4b21      	ldr	r3, [pc, #132]	; (800b0fc <__swbuf_r+0x98>)
 800b078:	429c      	cmp	r4, r3
 800b07a:	d12a      	bne.n	800b0d2 <__swbuf_r+0x6e>
 800b07c:	686c      	ldr	r4, [r5, #4]
 800b07e:	69a3      	ldr	r3, [r4, #24]
 800b080:	60a3      	str	r3, [r4, #8]
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	071a      	lsls	r2, r3, #28
 800b086:	d52e      	bpl.n	800b0e6 <__swbuf_r+0x82>
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	b363      	cbz	r3, 800b0e6 <__swbuf_r+0x82>
 800b08c:	6923      	ldr	r3, [r4, #16]
 800b08e:	6820      	ldr	r0, [r4, #0]
 800b090:	1ac0      	subs	r0, r0, r3
 800b092:	6963      	ldr	r3, [r4, #20]
 800b094:	b2f6      	uxtb	r6, r6
 800b096:	4283      	cmp	r3, r0
 800b098:	4637      	mov	r7, r6
 800b09a:	dc04      	bgt.n	800b0a6 <__swbuf_r+0x42>
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 f948 	bl	800b334 <_fflush_r>
 800b0a4:	bb28      	cbnz	r0, 800b0f2 <__swbuf_r+0x8e>
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	60a3      	str	r3, [r4, #8]
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	6022      	str	r2, [r4, #0]
 800b0b2:	701e      	strb	r6, [r3, #0]
 800b0b4:	6963      	ldr	r3, [r4, #20]
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	4283      	cmp	r3, r0
 800b0ba:	d004      	beq.n	800b0c6 <__swbuf_r+0x62>
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	07db      	lsls	r3, r3, #31
 800b0c0:	d519      	bpl.n	800b0f6 <__swbuf_r+0x92>
 800b0c2:	2e0a      	cmp	r6, #10
 800b0c4:	d117      	bne.n	800b0f6 <__swbuf_r+0x92>
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	f000 f933 	bl	800b334 <_fflush_r>
 800b0ce:	b190      	cbz	r0, 800b0f6 <__swbuf_r+0x92>
 800b0d0:	e00f      	b.n	800b0f2 <__swbuf_r+0x8e>
 800b0d2:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <__swbuf_r+0x9c>)
 800b0d4:	429c      	cmp	r4, r3
 800b0d6:	d101      	bne.n	800b0dc <__swbuf_r+0x78>
 800b0d8:	68ac      	ldr	r4, [r5, #8]
 800b0da:	e7d0      	b.n	800b07e <__swbuf_r+0x1a>
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <__swbuf_r+0xa0>)
 800b0de:	429c      	cmp	r4, r3
 800b0e0:	bf08      	it	eq
 800b0e2:	68ec      	ldreq	r4, [r5, #12]
 800b0e4:	e7cb      	b.n	800b07e <__swbuf_r+0x1a>
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f000 f81f 	bl	800b12c <__swsetup_r>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d0cc      	beq.n	800b08c <__swbuf_r+0x28>
 800b0f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0800d628 	.word	0x0800d628
 800b100:	0800d648 	.word	0x0800d648
 800b104:	0800d608 	.word	0x0800d608

0800b108 <_write_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4c07      	ldr	r4, [pc, #28]	; (800b128 <_write_r+0x20>)
 800b10c:	4605      	mov	r5, r0
 800b10e:	4608      	mov	r0, r1
 800b110:	4611      	mov	r1, r2
 800b112:	2200      	movs	r2, #0
 800b114:	6022      	str	r2, [r4, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7f6 fe08 	bl	8001d2c <_write>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_write_r+0x1e>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	b103      	cbz	r3, 800b126 <_write_r+0x1e>
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	2000c890 	.word	0x2000c890

0800b12c <__swsetup_r>:
 800b12c:	4b32      	ldr	r3, [pc, #200]	; (800b1f8 <__swsetup_r+0xcc>)
 800b12e:	b570      	push	{r4, r5, r6, lr}
 800b130:	681d      	ldr	r5, [r3, #0]
 800b132:	4606      	mov	r6, r0
 800b134:	460c      	mov	r4, r1
 800b136:	b125      	cbz	r5, 800b142 <__swsetup_r+0x16>
 800b138:	69ab      	ldr	r3, [r5, #24]
 800b13a:	b913      	cbnz	r3, 800b142 <__swsetup_r+0x16>
 800b13c:	4628      	mov	r0, r5
 800b13e:	f7ff f9cb 	bl	800a4d8 <__sinit>
 800b142:	4b2e      	ldr	r3, [pc, #184]	; (800b1fc <__swsetup_r+0xd0>)
 800b144:	429c      	cmp	r4, r3
 800b146:	d10f      	bne.n	800b168 <__swsetup_r+0x3c>
 800b148:	686c      	ldr	r4, [r5, #4]
 800b14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b14e:	b29a      	uxth	r2, r3
 800b150:	0715      	lsls	r5, r2, #28
 800b152:	d42c      	bmi.n	800b1ae <__swsetup_r+0x82>
 800b154:	06d0      	lsls	r0, r2, #27
 800b156:	d411      	bmi.n	800b17c <__swsetup_r+0x50>
 800b158:	2209      	movs	r2, #9
 800b15a:	6032      	str	r2, [r6, #0]
 800b15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b160:	81a3      	strh	r3, [r4, #12]
 800b162:	f04f 30ff 	mov.w	r0, #4294967295
 800b166:	e03e      	b.n	800b1e6 <__swsetup_r+0xba>
 800b168:	4b25      	ldr	r3, [pc, #148]	; (800b200 <__swsetup_r+0xd4>)
 800b16a:	429c      	cmp	r4, r3
 800b16c:	d101      	bne.n	800b172 <__swsetup_r+0x46>
 800b16e:	68ac      	ldr	r4, [r5, #8]
 800b170:	e7eb      	b.n	800b14a <__swsetup_r+0x1e>
 800b172:	4b24      	ldr	r3, [pc, #144]	; (800b204 <__swsetup_r+0xd8>)
 800b174:	429c      	cmp	r4, r3
 800b176:	bf08      	it	eq
 800b178:	68ec      	ldreq	r4, [r5, #12]
 800b17a:	e7e6      	b.n	800b14a <__swsetup_r+0x1e>
 800b17c:	0751      	lsls	r1, r2, #29
 800b17e:	d512      	bpl.n	800b1a6 <__swsetup_r+0x7a>
 800b180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b182:	b141      	cbz	r1, 800b196 <__swsetup_r+0x6a>
 800b184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b188:	4299      	cmp	r1, r3
 800b18a:	d002      	beq.n	800b192 <__swsetup_r+0x66>
 800b18c:	4630      	mov	r0, r6
 800b18e:	f7ff fd2d 	bl	800abec <_free_r>
 800b192:	2300      	movs	r3, #0
 800b194:	6363      	str	r3, [r4, #52]	; 0x34
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6063      	str	r3, [r4, #4]
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	f043 0308 	orr.w	r3, r3, #8
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	6923      	ldr	r3, [r4, #16]
 800b1b0:	b94b      	cbnz	r3, 800b1c6 <__swsetup_r+0x9a>
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1bc:	d003      	beq.n	800b1c6 <__swsetup_r+0x9a>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f000 f917 	bl	800b3f4 <__smakebuf_r>
 800b1c6:	89a2      	ldrh	r2, [r4, #12]
 800b1c8:	f012 0301 	ands.w	r3, r2, #1
 800b1cc:	d00c      	beq.n	800b1e8 <__swsetup_r+0xbc>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60a3      	str	r3, [r4, #8]
 800b1d2:	6963      	ldr	r3, [r4, #20]
 800b1d4:	425b      	negs	r3, r3
 800b1d6:	61a3      	str	r3, [r4, #24]
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	b953      	cbnz	r3, 800b1f2 <__swsetup_r+0xc6>
 800b1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b1e4:	d1ba      	bne.n	800b15c <__swsetup_r+0x30>
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}
 800b1e8:	0792      	lsls	r2, r2, #30
 800b1ea:	bf58      	it	pl
 800b1ec:	6963      	ldrpl	r3, [r4, #20]
 800b1ee:	60a3      	str	r3, [r4, #8]
 800b1f0:	e7f2      	b.n	800b1d8 <__swsetup_r+0xac>
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	e7f7      	b.n	800b1e6 <__swsetup_r+0xba>
 800b1f6:	bf00      	nop
 800b1f8:	2000000c 	.word	0x2000000c
 800b1fc:	0800d628 	.word	0x0800d628
 800b200:	0800d648 	.word	0x0800d648
 800b204:	0800d608 	.word	0x0800d608

0800b208 <_close_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4c06      	ldr	r4, [pc, #24]	; (800b224 <_close_r+0x1c>)
 800b20c:	2300      	movs	r3, #0
 800b20e:	4605      	mov	r5, r0
 800b210:	4608      	mov	r0, r1
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	f7f8 fe8b 	bl	8003f2e <_close>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d102      	bne.n	800b222 <_close_r+0x1a>
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	b103      	cbz	r3, 800b222 <_close_r+0x1a>
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	2000c890 	.word	0x2000c890

0800b228 <__sflush_r>:
 800b228:	898a      	ldrh	r2, [r1, #12]
 800b22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	4605      	mov	r5, r0
 800b230:	0710      	lsls	r0, r2, #28
 800b232:	460c      	mov	r4, r1
 800b234:	d458      	bmi.n	800b2e8 <__sflush_r+0xc0>
 800b236:	684b      	ldr	r3, [r1, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	dc05      	bgt.n	800b248 <__sflush_r+0x20>
 800b23c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dc02      	bgt.n	800b248 <__sflush_r+0x20>
 800b242:	2000      	movs	r0, #0
 800b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	d0f9      	beq.n	800b242 <__sflush_r+0x1a>
 800b24e:	2300      	movs	r3, #0
 800b250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b254:	682f      	ldr	r7, [r5, #0]
 800b256:	6a21      	ldr	r1, [r4, #32]
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	d032      	beq.n	800b2c2 <__sflush_r+0x9a>
 800b25c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	075a      	lsls	r2, r3, #29
 800b262:	d505      	bpl.n	800b270 <__sflush_r+0x48>
 800b264:	6863      	ldr	r3, [r4, #4]
 800b266:	1ac0      	subs	r0, r0, r3
 800b268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b26a:	b10b      	cbz	r3, 800b270 <__sflush_r+0x48>
 800b26c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b26e:	1ac0      	subs	r0, r0, r3
 800b270:	2300      	movs	r3, #0
 800b272:	4602      	mov	r2, r0
 800b274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b276:	6a21      	ldr	r1, [r4, #32]
 800b278:	4628      	mov	r0, r5
 800b27a:	47b0      	blx	r6
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	d106      	bne.n	800b290 <__sflush_r+0x68>
 800b282:	6829      	ldr	r1, [r5, #0]
 800b284:	291d      	cmp	r1, #29
 800b286:	d848      	bhi.n	800b31a <__sflush_r+0xf2>
 800b288:	4a29      	ldr	r2, [pc, #164]	; (800b330 <__sflush_r+0x108>)
 800b28a:	40ca      	lsrs	r2, r1
 800b28c:	07d6      	lsls	r6, r2, #31
 800b28e:	d544      	bpl.n	800b31a <__sflush_r+0xf2>
 800b290:	2200      	movs	r2, #0
 800b292:	6062      	str	r2, [r4, #4]
 800b294:	04d9      	lsls	r1, r3, #19
 800b296:	6922      	ldr	r2, [r4, #16]
 800b298:	6022      	str	r2, [r4, #0]
 800b29a:	d504      	bpl.n	800b2a6 <__sflush_r+0x7e>
 800b29c:	1c42      	adds	r2, r0, #1
 800b29e:	d101      	bne.n	800b2a4 <__sflush_r+0x7c>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b903      	cbnz	r3, 800b2a6 <__sflush_r+0x7e>
 800b2a4:	6560      	str	r0, [r4, #84]	; 0x54
 800b2a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2a8:	602f      	str	r7, [r5, #0]
 800b2aa:	2900      	cmp	r1, #0
 800b2ac:	d0c9      	beq.n	800b242 <__sflush_r+0x1a>
 800b2ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2b2:	4299      	cmp	r1, r3
 800b2b4:	d002      	beq.n	800b2bc <__sflush_r+0x94>
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	f7ff fc98 	bl	800abec <_free_r>
 800b2bc:	2000      	movs	r0, #0
 800b2be:	6360      	str	r0, [r4, #52]	; 0x34
 800b2c0:	e7c0      	b.n	800b244 <__sflush_r+0x1c>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b0      	blx	r6
 800b2c8:	1c41      	adds	r1, r0, #1
 800b2ca:	d1c8      	bne.n	800b25e <__sflush_r+0x36>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0c5      	beq.n	800b25e <__sflush_r+0x36>
 800b2d2:	2b1d      	cmp	r3, #29
 800b2d4:	d001      	beq.n	800b2da <__sflush_r+0xb2>
 800b2d6:	2b16      	cmp	r3, #22
 800b2d8:	d101      	bne.n	800b2de <__sflush_r+0xb6>
 800b2da:	602f      	str	r7, [r5, #0]
 800b2dc:	e7b1      	b.n	800b242 <__sflush_r+0x1a>
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e4:	81a3      	strh	r3, [r4, #12]
 800b2e6:	e7ad      	b.n	800b244 <__sflush_r+0x1c>
 800b2e8:	690f      	ldr	r7, [r1, #16]
 800b2ea:	2f00      	cmp	r7, #0
 800b2ec:	d0a9      	beq.n	800b242 <__sflush_r+0x1a>
 800b2ee:	0793      	lsls	r3, r2, #30
 800b2f0:	680e      	ldr	r6, [r1, #0]
 800b2f2:	bf08      	it	eq
 800b2f4:	694b      	ldreq	r3, [r1, #20]
 800b2f6:	600f      	str	r7, [r1, #0]
 800b2f8:	bf18      	it	ne
 800b2fa:	2300      	movne	r3, #0
 800b2fc:	eba6 0807 	sub.w	r8, r6, r7
 800b300:	608b      	str	r3, [r1, #8]
 800b302:	f1b8 0f00 	cmp.w	r8, #0
 800b306:	dd9c      	ble.n	800b242 <__sflush_r+0x1a>
 800b308:	4643      	mov	r3, r8
 800b30a:	463a      	mov	r2, r7
 800b30c:	6a21      	ldr	r1, [r4, #32]
 800b30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b310:	4628      	mov	r0, r5
 800b312:	47b0      	blx	r6
 800b314:	2800      	cmp	r0, #0
 800b316:	dc06      	bgt.n	800b326 <__sflush_r+0xfe>
 800b318:	89a3      	ldrh	r3, [r4, #12]
 800b31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b31e:	81a3      	strh	r3, [r4, #12]
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	e78e      	b.n	800b244 <__sflush_r+0x1c>
 800b326:	4407      	add	r7, r0
 800b328:	eba8 0800 	sub.w	r8, r8, r0
 800b32c:	e7e9      	b.n	800b302 <__sflush_r+0xda>
 800b32e:	bf00      	nop
 800b330:	20400001 	.word	0x20400001

0800b334 <_fflush_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	690b      	ldr	r3, [r1, #16]
 800b338:	4605      	mov	r5, r0
 800b33a:	460c      	mov	r4, r1
 800b33c:	b1db      	cbz	r3, 800b376 <_fflush_r+0x42>
 800b33e:	b118      	cbz	r0, 800b348 <_fflush_r+0x14>
 800b340:	6983      	ldr	r3, [r0, #24]
 800b342:	b90b      	cbnz	r3, 800b348 <_fflush_r+0x14>
 800b344:	f7ff f8c8 	bl	800a4d8 <__sinit>
 800b348:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <_fflush_r+0x48>)
 800b34a:	429c      	cmp	r4, r3
 800b34c:	d109      	bne.n	800b362 <_fflush_r+0x2e>
 800b34e:	686c      	ldr	r4, [r5, #4]
 800b350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b354:	b17b      	cbz	r3, 800b376 <_fflush_r+0x42>
 800b356:	4621      	mov	r1, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35e:	f7ff bf63 	b.w	800b228 <__sflush_r>
 800b362:	4b07      	ldr	r3, [pc, #28]	; (800b380 <_fflush_r+0x4c>)
 800b364:	429c      	cmp	r4, r3
 800b366:	d101      	bne.n	800b36c <_fflush_r+0x38>
 800b368:	68ac      	ldr	r4, [r5, #8]
 800b36a:	e7f1      	b.n	800b350 <_fflush_r+0x1c>
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <_fflush_r+0x50>)
 800b36e:	429c      	cmp	r4, r3
 800b370:	bf08      	it	eq
 800b372:	68ec      	ldreq	r4, [r5, #12]
 800b374:	e7ec      	b.n	800b350 <_fflush_r+0x1c>
 800b376:	2000      	movs	r0, #0
 800b378:	bd38      	pop	{r3, r4, r5, pc}
 800b37a:	bf00      	nop
 800b37c:	0800d628 	.word	0x0800d628
 800b380:	0800d648 	.word	0x0800d648
 800b384:	0800d608 	.word	0x0800d608

0800b388 <_lseek_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4c07      	ldr	r4, [pc, #28]	; (800b3a8 <_lseek_r+0x20>)
 800b38c:	4605      	mov	r5, r0
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	2200      	movs	r2, #0
 800b394:	6022      	str	r2, [r4, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	f7f8 fdf0 	bl	8003f7c <_lseek>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_lseek_r+0x1e>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_lseek_r+0x1e>
 800b3a4:	602b      	str	r3, [r5, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	2000c890 	.word	0x2000c890

0800b3ac <__swhatbuf_r>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	460e      	mov	r6, r1
 800b3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b4:	2900      	cmp	r1, #0
 800b3b6:	b096      	sub	sp, #88	; 0x58
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	461d      	mov	r5, r3
 800b3bc:	da07      	bge.n	800b3ce <__swhatbuf_r+0x22>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	602b      	str	r3, [r5, #0]
 800b3c2:	89b3      	ldrh	r3, [r6, #12]
 800b3c4:	061a      	lsls	r2, r3, #24
 800b3c6:	d410      	bmi.n	800b3ea <__swhatbuf_r+0x3e>
 800b3c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3cc:	e00e      	b.n	800b3ec <__swhatbuf_r+0x40>
 800b3ce:	466a      	mov	r2, sp
 800b3d0:	f000 f884 	bl	800b4dc <_fstat_r>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	dbf2      	blt.n	800b3be <__swhatbuf_r+0x12>
 800b3d8:	9a01      	ldr	r2, [sp, #4]
 800b3da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3e2:	425a      	negs	r2, r3
 800b3e4:	415a      	adcs	r2, r3
 800b3e6:	602a      	str	r2, [r5, #0]
 800b3e8:	e7ee      	b.n	800b3c8 <__swhatbuf_r+0x1c>
 800b3ea:	2340      	movs	r3, #64	; 0x40
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	b016      	add	sp, #88	; 0x58
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}

0800b3f4 <__smakebuf_r>:
 800b3f4:	898b      	ldrh	r3, [r1, #12]
 800b3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3f8:	079d      	lsls	r5, r3, #30
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	d507      	bpl.n	800b410 <__smakebuf_r+0x1c>
 800b400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	2301      	movs	r3, #1
 800b40a:	6163      	str	r3, [r4, #20]
 800b40c:	b002      	add	sp, #8
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	ab01      	add	r3, sp, #4
 800b412:	466a      	mov	r2, sp
 800b414:	f7ff ffca 	bl	800b3ac <__swhatbuf_r>
 800b418:	9900      	ldr	r1, [sp, #0]
 800b41a:	4605      	mov	r5, r0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fc33 	bl	800ac88 <_malloc_r>
 800b422:	b948      	cbnz	r0, 800b438 <__smakebuf_r+0x44>
 800b424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b428:	059a      	lsls	r2, r3, #22
 800b42a:	d4ef      	bmi.n	800b40c <__smakebuf_r+0x18>
 800b42c:	f023 0303 	bic.w	r3, r3, #3
 800b430:	f043 0302 	orr.w	r3, r3, #2
 800b434:	81a3      	strh	r3, [r4, #12]
 800b436:	e7e3      	b.n	800b400 <__smakebuf_r+0xc>
 800b438:	4b0d      	ldr	r3, [pc, #52]	; (800b470 <__smakebuf_r+0x7c>)
 800b43a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	6020      	str	r0, [r4, #0]
 800b440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	6163      	str	r3, [r4, #20]
 800b44a:	9b01      	ldr	r3, [sp, #4]
 800b44c:	6120      	str	r0, [r4, #16]
 800b44e:	b15b      	cbz	r3, 800b468 <__smakebuf_r+0x74>
 800b450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b454:	4630      	mov	r0, r6
 800b456:	f000 f853 	bl	800b500 <_isatty_r>
 800b45a:	b128      	cbz	r0, 800b468 <__smakebuf_r+0x74>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	f043 0301 	orr.w	r3, r3, #1
 800b466:	81a3      	strh	r3, [r4, #12]
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	431d      	orrs	r5, r3
 800b46c:	81a5      	strh	r5, [r4, #12]
 800b46e:	e7cd      	b.n	800b40c <__smakebuf_r+0x18>
 800b470:	0800a4a1 	.word	0x0800a4a1

0800b474 <__ascii_mbtowc>:
 800b474:	b082      	sub	sp, #8
 800b476:	b901      	cbnz	r1, 800b47a <__ascii_mbtowc+0x6>
 800b478:	a901      	add	r1, sp, #4
 800b47a:	b142      	cbz	r2, 800b48e <__ascii_mbtowc+0x1a>
 800b47c:	b14b      	cbz	r3, 800b492 <__ascii_mbtowc+0x1e>
 800b47e:	7813      	ldrb	r3, [r2, #0]
 800b480:	600b      	str	r3, [r1, #0]
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	1c10      	adds	r0, r2, #0
 800b486:	bf18      	it	ne
 800b488:	2001      	movne	r0, #1
 800b48a:	b002      	add	sp, #8
 800b48c:	4770      	bx	lr
 800b48e:	4610      	mov	r0, r2
 800b490:	e7fb      	b.n	800b48a <__ascii_mbtowc+0x16>
 800b492:	f06f 0001 	mvn.w	r0, #1
 800b496:	e7f8      	b.n	800b48a <__ascii_mbtowc+0x16>

0800b498 <__malloc_lock>:
 800b498:	4770      	bx	lr

0800b49a <__malloc_unlock>:
 800b49a:	4770      	bx	lr

0800b49c <_read_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4c07      	ldr	r4, [pc, #28]	; (800b4bc <_read_r+0x20>)
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	4608      	mov	r0, r1
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	6022      	str	r2, [r4, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f7f8 fd22 	bl	8003ef4 <_read>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_read_r+0x1e>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_read_r+0x1e>
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	2000c890 	.word	0x2000c890

0800b4c0 <__ascii_wctomb>:
 800b4c0:	b149      	cbz	r1, 800b4d6 <__ascii_wctomb+0x16>
 800b4c2:	2aff      	cmp	r2, #255	; 0xff
 800b4c4:	bf85      	ittet	hi
 800b4c6:	238a      	movhi	r3, #138	; 0x8a
 800b4c8:	6003      	strhi	r3, [r0, #0]
 800b4ca:	700a      	strbls	r2, [r1, #0]
 800b4cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4d0:	bf98      	it	ls
 800b4d2:	2001      	movls	r0, #1
 800b4d4:	4770      	bx	lr
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4770      	bx	lr
	...

0800b4dc <_fstat_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4c07      	ldr	r4, [pc, #28]	; (800b4fc <_fstat_r+0x20>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	6023      	str	r3, [r4, #0]
 800b4ea:	f7f8 fd2c 	bl	8003f46 <_fstat>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d102      	bne.n	800b4f8 <_fstat_r+0x1c>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	b103      	cbz	r3, 800b4f8 <_fstat_r+0x1c>
 800b4f6:	602b      	str	r3, [r5, #0]
 800b4f8:	bd38      	pop	{r3, r4, r5, pc}
 800b4fa:	bf00      	nop
 800b4fc:	2000c890 	.word	0x2000c890

0800b500 <_isatty_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4c06      	ldr	r4, [pc, #24]	; (800b51c <_isatty_r+0x1c>)
 800b504:	2300      	movs	r3, #0
 800b506:	4605      	mov	r5, r0
 800b508:	4608      	mov	r0, r1
 800b50a:	6023      	str	r3, [r4, #0]
 800b50c:	f7f8 fd2b 	bl	8003f66 <_isatty>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_isatty_r+0x1a>
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	b103      	cbz	r3, 800b51a <_isatty_r+0x1a>
 800b518:	602b      	str	r3, [r5, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	2000c890 	.word	0x2000c890

0800b520 <tan>:
 800b520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b522:	ec51 0b10 	vmov	r0, r1, d0
 800b526:	4a14      	ldr	r2, [pc, #80]	; (800b578 <tan+0x58>)
 800b528:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b52c:	4293      	cmp	r3, r2
 800b52e:	dc05      	bgt.n	800b53c <tan+0x1c>
 800b530:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800b570 <tan+0x50>
 800b534:	2001      	movs	r0, #1
 800b536:	f001 fc87 	bl	800ce48 <__kernel_tan>
 800b53a:	e009      	b.n	800b550 <tan+0x30>
 800b53c:	4a0f      	ldr	r2, [pc, #60]	; (800b57c <tan+0x5c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	dd09      	ble.n	800b556 <tan+0x36>
 800b542:	ee10 2a10 	vmov	r2, s0
 800b546:	460b      	mov	r3, r1
 800b548:	f7f4 fe9e 	bl	8000288 <__aeabi_dsub>
 800b54c:	ec41 0b10 	vmov	d0, r0, r1
 800b550:	b005      	add	sp, #20
 800b552:	f85d fb04 	ldr.w	pc, [sp], #4
 800b556:	4668      	mov	r0, sp
 800b558:	f000 fe92 	bl	800c280 <__ieee754_rem_pio2>
 800b55c:	0040      	lsls	r0, r0, #1
 800b55e:	f000 0002 	and.w	r0, r0, #2
 800b562:	f1c0 0001 	rsb	r0, r0, #1
 800b566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b56a:	ed9d 0b00 	vldr	d0, [sp]
 800b56e:	e7e2      	b.n	800b536 <tan+0x16>
	...
 800b578:	3fe921fb 	.word	0x3fe921fb
 800b57c:	7fefffff 	.word	0x7fefffff

0800b580 <pow>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	ed2d 8b04 	vpush	{d8-d9}
 800b588:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b85c <pow+0x2dc>
 800b58c:	b08d      	sub	sp, #52	; 0x34
 800b58e:	ec57 6b10 	vmov	r6, r7, d0
 800b592:	ec55 4b11 	vmov	r4, r5, d1
 800b596:	f000 f963 	bl	800b860 <__ieee754_pow>
 800b59a:	f999 3000 	ldrsb.w	r3, [r9]
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	eeb0 8a40 	vmov.f32	s16, s0
 800b5a6:	eef0 8a60 	vmov.f32	s17, s1
 800b5aa:	46c8      	mov	r8, r9
 800b5ac:	d05f      	beq.n	800b66e <pow+0xee>
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7f5 fab9 	bl	8000b2c <__aeabi_dcmpun>
 800b5ba:	4683      	mov	fp, r0
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d156      	bne.n	800b66e <pow+0xee>
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	463b      	mov	r3, r7
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f7f5 fab0 	bl	8000b2c <__aeabi_dcmpun>
 800b5cc:	9001      	str	r0, [sp, #4]
 800b5ce:	b1e8      	cbz	r0, 800b60c <pow+0x8c>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	f7f5 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d046      	beq.n	800b66e <pow+0xee>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	9302      	str	r3, [sp, #8]
 800b5e4:	4b96      	ldr	r3, [pc, #600]	; (800b840 <pow+0x2c0>)
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	4b96      	ldr	r3, [pc, #600]	; (800b844 <pow+0x2c4>)
 800b5ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5f4:	9b00      	ldr	r3, [sp, #0]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b5fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b600:	d033      	beq.n	800b66a <pow+0xea>
 800b602:	a802      	add	r0, sp, #8
 800b604:	f001 fe84 	bl	800d310 <matherr>
 800b608:	bb48      	cbnz	r0, 800b65e <pow+0xde>
 800b60a:	e05d      	b.n	800b6c8 <pow+0x148>
 800b60c:	f04f 0a00 	mov.w	sl, #0
 800b610:	f04f 0b00 	mov.w	fp, #0
 800b614:	4652      	mov	r2, sl
 800b616:	465b      	mov	r3, fp
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800b620:	ec4b ab19 	vmov	d9, sl, fp
 800b624:	2800      	cmp	r0, #0
 800b626:	d054      	beq.n	800b6d2 <pow+0x152>
 800b628:	4652      	mov	r2, sl
 800b62a:	465b      	mov	r3, fp
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	f7f5 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b634:	4680      	mov	r8, r0
 800b636:	b318      	cbz	r0, 800b680 <pow+0x100>
 800b638:	2301      	movs	r3, #1
 800b63a:	9302      	str	r3, [sp, #8]
 800b63c:	4b80      	ldr	r3, [pc, #512]	; (800b840 <pow+0x2c0>)
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	9b01      	ldr	r3, [sp, #4]
 800b642:	930a      	str	r3, [sp, #40]	; 0x28
 800b644:	9b00      	ldr	r3, [sp, #0]
 800b646:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b64a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b64e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0d5      	beq.n	800b602 <pow+0x82>
 800b656:	4b7b      	ldr	r3, [pc, #492]	; (800b844 <pow+0x2c4>)
 800b658:	2200      	movs	r2, #0
 800b65a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b660:	b11b      	cbz	r3, 800b66a <pow+0xea>
 800b662:	f7fd fc01 	bl	8008e68 <__errno>
 800b666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b66e:	eeb0 0a48 	vmov.f32	s0, s16
 800b672:	eef0 0a68 	vmov.f32	s1, s17
 800b676:	b00d      	add	sp, #52	; 0x34
 800b678:	ecbd 8b04 	vpop	{d8-d9}
 800b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b680:	ec45 4b10 	vmov	d0, r4, r5
 800b684:	f001 fdb5 	bl	800d1f2 <finite>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d0f0      	beq.n	800b66e <pow+0xee>
 800b68c:	4652      	mov	r2, sl
 800b68e:	465b      	mov	r3, fp
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f5 fa22 	bl	8000adc <__aeabi_dcmplt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d0e8      	beq.n	800b66e <pow+0xee>
 800b69c:	2301      	movs	r3, #1
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	4b67      	ldr	r3, [pc, #412]	; (800b840 <pow+0x2c0>)
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	f999 3000 	ldrsb.w	r3, [r9]
 800b6a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b6ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b6b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b6b4:	b913      	cbnz	r3, 800b6bc <pow+0x13c>
 800b6b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b6ba:	e7a2      	b.n	800b602 <pow+0x82>
 800b6bc:	4962      	ldr	r1, [pc, #392]	; (800b848 <pow+0x2c8>)
 800b6be:	2000      	movs	r0, #0
 800b6c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d19c      	bne.n	800b602 <pow+0x82>
 800b6c8:	f7fd fbce 	bl	8008e68 <__errno>
 800b6cc:	2321      	movs	r3, #33	; 0x21
 800b6ce:	6003      	str	r3, [r0, #0]
 800b6d0:	e7c5      	b.n	800b65e <pow+0xde>
 800b6d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b6d6:	eef0 0a68 	vmov.f32	s1, s17
 800b6da:	f001 fd8a 	bl	800d1f2 <finite>
 800b6de:	9000      	str	r0, [sp, #0]
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	f040 8081 	bne.w	800b7e8 <pow+0x268>
 800b6e6:	ec47 6b10 	vmov	d0, r6, r7
 800b6ea:	f001 fd82 	bl	800d1f2 <finite>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d07a      	beq.n	800b7e8 <pow+0x268>
 800b6f2:	ec45 4b10 	vmov	d0, r4, r5
 800b6f6:	f001 fd7c 	bl	800d1f2 <finite>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d074      	beq.n	800b7e8 <pow+0x268>
 800b6fe:	ec53 2b18 	vmov	r2, r3, d8
 800b702:	ee18 0a10 	vmov	r0, s16
 800b706:	4619      	mov	r1, r3
 800b708:	f7f5 fa10 	bl	8000b2c <__aeabi_dcmpun>
 800b70c:	f999 9000 	ldrsb.w	r9, [r9]
 800b710:	4b4b      	ldr	r3, [pc, #300]	; (800b840 <pow+0x2c0>)
 800b712:	b1b0      	cbz	r0, 800b742 <pow+0x1c2>
 800b714:	2201      	movs	r2, #1
 800b716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b71a:	9b00      	ldr	r3, [sp, #0]
 800b71c:	930a      	str	r3, [sp, #40]	; 0x28
 800b71e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b722:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b726:	f1b9 0f00 	cmp.w	r9, #0
 800b72a:	d0c4      	beq.n	800b6b6 <pow+0x136>
 800b72c:	4652      	mov	r2, sl
 800b72e:	465b      	mov	r3, fp
 800b730:	4650      	mov	r0, sl
 800b732:	4659      	mov	r1, fp
 800b734:	f7f5 f88a 	bl	800084c <__aeabi_ddiv>
 800b738:	f1b9 0f02 	cmp.w	r9, #2
 800b73c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b740:	e7c1      	b.n	800b6c6 <pow+0x146>
 800b742:	2203      	movs	r2, #3
 800b744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b748:	900a      	str	r0, [sp, #40]	; 0x28
 800b74a:	4629      	mov	r1, r5
 800b74c:	4620      	mov	r0, r4
 800b74e:	2200      	movs	r2, #0
 800b750:	4b3e      	ldr	r3, [pc, #248]	; (800b84c <pow+0x2cc>)
 800b752:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b756:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b75a:	f7f4 ff4d 	bl	80005f8 <__aeabi_dmul>
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	f1b9 0f00 	cmp.w	r9, #0
 800b766:	d124      	bne.n	800b7b2 <pow+0x232>
 800b768:	4b39      	ldr	r3, [pc, #228]	; (800b850 <pow+0x2d0>)
 800b76a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b76e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b772:	4630      	mov	r0, r6
 800b774:	4652      	mov	r2, sl
 800b776:	465b      	mov	r3, fp
 800b778:	4639      	mov	r1, r7
 800b77a:	f7f5 f9af 	bl	8000adc <__aeabi_dcmplt>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d056      	beq.n	800b830 <pow+0x2b0>
 800b782:	ec45 4b10 	vmov	d0, r4, r5
 800b786:	f001 fdcf 	bl	800d328 <rint>
 800b78a:	4622      	mov	r2, r4
 800b78c:	462b      	mov	r3, r5
 800b78e:	ec51 0b10 	vmov	r0, r1, d0
 800b792:	f7f5 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 800b796:	b920      	cbnz	r0, 800b7a2 <pow+0x222>
 800b798:	4b2e      	ldr	r3, [pc, #184]	; (800b854 <pow+0x2d4>)
 800b79a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b79e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7a2:	f998 3000 	ldrsb.w	r3, [r8]
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d142      	bne.n	800b830 <pow+0x2b0>
 800b7aa:	f7fd fb5d 	bl	8008e68 <__errno>
 800b7ae:	2322      	movs	r3, #34	; 0x22
 800b7b0:	e78d      	b.n	800b6ce <pow+0x14e>
 800b7b2:	4b29      	ldr	r3, [pc, #164]	; (800b858 <pow+0x2d8>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4652      	mov	r2, sl
 800b7be:	465b      	mov	r3, fp
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f5 f98b 	bl	8000adc <__aeabi_dcmplt>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0eb      	beq.n	800b7a2 <pow+0x222>
 800b7ca:	ec45 4b10 	vmov	d0, r4, r5
 800b7ce:	f001 fdab 	bl	800d328 <rint>
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	ec51 0b10 	vmov	r0, r1, d0
 800b7da:	f7f5 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d1df      	bne.n	800b7a2 <pow+0x222>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4b18      	ldr	r3, [pc, #96]	; (800b848 <pow+0x2c8>)
 800b7e6:	e7da      	b.n	800b79e <pow+0x21e>
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	ec51 0b18 	vmov	r0, r1, d8
 800b7f0:	f7f5 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f43f af3a 	beq.w	800b66e <pow+0xee>
 800b7fa:	ec47 6b10 	vmov	d0, r6, r7
 800b7fe:	f001 fcf8 	bl	800d1f2 <finite>
 800b802:	2800      	cmp	r0, #0
 800b804:	f43f af33 	beq.w	800b66e <pow+0xee>
 800b808:	ec45 4b10 	vmov	d0, r4, r5
 800b80c:	f001 fcf1 	bl	800d1f2 <finite>
 800b810:	2800      	cmp	r0, #0
 800b812:	f43f af2c 	beq.w	800b66e <pow+0xee>
 800b816:	2304      	movs	r3, #4
 800b818:	9302      	str	r3, [sp, #8]
 800b81a:	4b09      	ldr	r3, [pc, #36]	; (800b840 <pow+0x2c0>)
 800b81c:	9303      	str	r3, [sp, #12]
 800b81e:	2300      	movs	r3, #0
 800b820:	930a      	str	r3, [sp, #40]	; 0x28
 800b822:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b826:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b82a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b82e:	e7b8      	b.n	800b7a2 <pow+0x222>
 800b830:	a802      	add	r0, sp, #8
 800b832:	f001 fd6d 	bl	800d310 <matherr>
 800b836:	2800      	cmp	r0, #0
 800b838:	f47f af11 	bne.w	800b65e <pow+0xde>
 800b83c:	e7b5      	b.n	800b7aa <pow+0x22a>
 800b83e:	bf00      	nop
 800b840:	0800d880 	.word	0x0800d880
 800b844:	3ff00000 	.word	0x3ff00000
 800b848:	fff00000 	.word	0xfff00000
 800b84c:	3fe00000 	.word	0x3fe00000
 800b850:	47efffff 	.word	0x47efffff
 800b854:	c7efffff 	.word	0xc7efffff
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	200001dc 	.word	0x200001dc

0800b860 <__ieee754_pow>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	b091      	sub	sp, #68	; 0x44
 800b866:	ed8d 1b00 	vstr	d1, [sp]
 800b86a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b86e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b872:	ea58 0302 	orrs.w	r3, r8, r2
 800b876:	ec57 6b10 	vmov	r6, r7, d0
 800b87a:	f000 84be 	beq.w	800c1fa <__ieee754_pow+0x99a>
 800b87e:	4b7a      	ldr	r3, [pc, #488]	; (800ba68 <__ieee754_pow+0x208>)
 800b880:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b884:	429c      	cmp	r4, r3
 800b886:	463d      	mov	r5, r7
 800b888:	ee10 aa10 	vmov	sl, s0
 800b88c:	dc09      	bgt.n	800b8a2 <__ieee754_pow+0x42>
 800b88e:	d103      	bne.n	800b898 <__ieee754_pow+0x38>
 800b890:	b93e      	cbnz	r6, 800b8a2 <__ieee754_pow+0x42>
 800b892:	45a0      	cmp	r8, r4
 800b894:	dc0d      	bgt.n	800b8b2 <__ieee754_pow+0x52>
 800b896:	e001      	b.n	800b89c <__ieee754_pow+0x3c>
 800b898:	4598      	cmp	r8, r3
 800b89a:	dc02      	bgt.n	800b8a2 <__ieee754_pow+0x42>
 800b89c:	4598      	cmp	r8, r3
 800b89e:	d10e      	bne.n	800b8be <__ieee754_pow+0x5e>
 800b8a0:	b16a      	cbz	r2, 800b8be <__ieee754_pow+0x5e>
 800b8a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b8a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b8aa:	ea54 030a 	orrs.w	r3, r4, sl
 800b8ae:	f000 84a4 	beq.w	800c1fa <__ieee754_pow+0x99a>
 800b8b2:	486e      	ldr	r0, [pc, #440]	; (800ba6c <__ieee754_pow+0x20c>)
 800b8b4:	b011      	add	sp, #68	; 0x44
 800b8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	f001 bd2d 	b.w	800d318 <nan>
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	da53      	bge.n	800b96a <__ieee754_pow+0x10a>
 800b8c2:	4b6b      	ldr	r3, [pc, #428]	; (800ba70 <__ieee754_pow+0x210>)
 800b8c4:	4598      	cmp	r8, r3
 800b8c6:	dc4d      	bgt.n	800b964 <__ieee754_pow+0x104>
 800b8c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b8cc:	4598      	cmp	r8, r3
 800b8ce:	dd4c      	ble.n	800b96a <__ieee754_pow+0x10a>
 800b8d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b8d8:	2b14      	cmp	r3, #20
 800b8da:	dd26      	ble.n	800b92a <__ieee754_pow+0xca>
 800b8dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b8e0:	fa22 f103 	lsr.w	r1, r2, r3
 800b8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d13e      	bne.n	800b96a <__ieee754_pow+0x10a>
 800b8ec:	f001 0101 	and.w	r1, r1, #1
 800b8f0:	f1c1 0b02 	rsb	fp, r1, #2
 800b8f4:	2a00      	cmp	r2, #0
 800b8f6:	d15b      	bne.n	800b9b0 <__ieee754_pow+0x150>
 800b8f8:	4b5b      	ldr	r3, [pc, #364]	; (800ba68 <__ieee754_pow+0x208>)
 800b8fa:	4598      	cmp	r8, r3
 800b8fc:	d124      	bne.n	800b948 <__ieee754_pow+0xe8>
 800b8fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b902:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b906:	ea53 030a 	orrs.w	r3, r3, sl
 800b90a:	f000 8476 	beq.w	800c1fa <__ieee754_pow+0x99a>
 800b90e:	4b59      	ldr	r3, [pc, #356]	; (800ba74 <__ieee754_pow+0x214>)
 800b910:	429c      	cmp	r4, r3
 800b912:	dd2d      	ble.n	800b970 <__ieee754_pow+0x110>
 800b914:	f1b9 0f00 	cmp.w	r9, #0
 800b918:	f280 8473 	bge.w	800c202 <__ieee754_pow+0x9a2>
 800b91c:	2000      	movs	r0, #0
 800b91e:	2100      	movs	r1, #0
 800b920:	ec41 0b10 	vmov	d0, r0, r1
 800b924:	b011      	add	sp, #68	; 0x44
 800b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	d13e      	bne.n	800b9ac <__ieee754_pow+0x14c>
 800b92e:	f1c3 0314 	rsb	r3, r3, #20
 800b932:	fa48 f103 	asr.w	r1, r8, r3
 800b936:	fa01 f303 	lsl.w	r3, r1, r3
 800b93a:	4543      	cmp	r3, r8
 800b93c:	f040 8469 	bne.w	800c212 <__ieee754_pow+0x9b2>
 800b940:	f001 0101 	and.w	r1, r1, #1
 800b944:	f1c1 0b02 	rsb	fp, r1, #2
 800b948:	4b4b      	ldr	r3, [pc, #300]	; (800ba78 <__ieee754_pow+0x218>)
 800b94a:	4598      	cmp	r8, r3
 800b94c:	d118      	bne.n	800b980 <__ieee754_pow+0x120>
 800b94e:	f1b9 0f00 	cmp.w	r9, #0
 800b952:	f280 845a 	bge.w	800c20a <__ieee754_pow+0x9aa>
 800b956:	4948      	ldr	r1, [pc, #288]	; (800ba78 <__ieee754_pow+0x218>)
 800b958:	4632      	mov	r2, r6
 800b95a:	463b      	mov	r3, r7
 800b95c:	2000      	movs	r0, #0
 800b95e:	f7f4 ff75 	bl	800084c <__aeabi_ddiv>
 800b962:	e7dd      	b.n	800b920 <__ieee754_pow+0xc0>
 800b964:	f04f 0b02 	mov.w	fp, #2
 800b968:	e7c4      	b.n	800b8f4 <__ieee754_pow+0x94>
 800b96a:	f04f 0b00 	mov.w	fp, #0
 800b96e:	e7c1      	b.n	800b8f4 <__ieee754_pow+0x94>
 800b970:	f1b9 0f00 	cmp.w	r9, #0
 800b974:	dad2      	bge.n	800b91c <__ieee754_pow+0xbc>
 800b976:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b97a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b97e:	e7cf      	b.n	800b920 <__ieee754_pow+0xc0>
 800b980:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b984:	d106      	bne.n	800b994 <__ieee754_pow+0x134>
 800b986:	4632      	mov	r2, r6
 800b988:	463b      	mov	r3, r7
 800b98a:	4610      	mov	r0, r2
 800b98c:	4619      	mov	r1, r3
 800b98e:	f7f4 fe33 	bl	80005f8 <__aeabi_dmul>
 800b992:	e7c5      	b.n	800b920 <__ieee754_pow+0xc0>
 800b994:	4b39      	ldr	r3, [pc, #228]	; (800ba7c <__ieee754_pow+0x21c>)
 800b996:	4599      	cmp	r9, r3
 800b998:	d10a      	bne.n	800b9b0 <__ieee754_pow+0x150>
 800b99a:	2d00      	cmp	r5, #0
 800b99c:	db08      	blt.n	800b9b0 <__ieee754_pow+0x150>
 800b99e:	ec47 6b10 	vmov	d0, r6, r7
 800b9a2:	b011      	add	sp, #68	; 0x44
 800b9a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	f000 be5c 	b.w	800c664 <__ieee754_sqrt>
 800b9ac:	f04f 0b00 	mov.w	fp, #0
 800b9b0:	ec47 6b10 	vmov	d0, r6, r7
 800b9b4:	f001 fc14 	bl	800d1e0 <fabs>
 800b9b8:	ec51 0b10 	vmov	r0, r1, d0
 800b9bc:	f1ba 0f00 	cmp.w	sl, #0
 800b9c0:	d127      	bne.n	800ba12 <__ieee754_pow+0x1b2>
 800b9c2:	b124      	cbz	r4, 800b9ce <__ieee754_pow+0x16e>
 800b9c4:	4b2c      	ldr	r3, [pc, #176]	; (800ba78 <__ieee754_pow+0x218>)
 800b9c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d121      	bne.n	800ba12 <__ieee754_pow+0x1b2>
 800b9ce:	f1b9 0f00 	cmp.w	r9, #0
 800b9d2:	da05      	bge.n	800b9e0 <__ieee754_pow+0x180>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	2000      	movs	r0, #0
 800b9da:	4927      	ldr	r1, [pc, #156]	; (800ba78 <__ieee754_pow+0x218>)
 800b9dc:	f7f4 ff36 	bl	800084c <__aeabi_ddiv>
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	da9d      	bge.n	800b920 <__ieee754_pow+0xc0>
 800b9e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b9e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9ec:	ea54 030b 	orrs.w	r3, r4, fp
 800b9f0:	d108      	bne.n	800ba04 <__ieee754_pow+0x1a4>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f7f4 fc45 	bl	8000288 <__aeabi_dsub>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	e7ac      	b.n	800b95e <__ieee754_pow+0xfe>
 800ba04:	f1bb 0f01 	cmp.w	fp, #1
 800ba08:	d18a      	bne.n	800b920 <__ieee754_pow+0xc0>
 800ba0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba0e:	4619      	mov	r1, r3
 800ba10:	e786      	b.n	800b920 <__ieee754_pow+0xc0>
 800ba12:	0fed      	lsrs	r5, r5, #31
 800ba14:	1e6b      	subs	r3, r5, #1
 800ba16:	930d      	str	r3, [sp, #52]	; 0x34
 800ba18:	ea5b 0303 	orrs.w	r3, fp, r3
 800ba1c:	d102      	bne.n	800ba24 <__ieee754_pow+0x1c4>
 800ba1e:	4632      	mov	r2, r6
 800ba20:	463b      	mov	r3, r7
 800ba22:	e7e8      	b.n	800b9f6 <__ieee754_pow+0x196>
 800ba24:	4b16      	ldr	r3, [pc, #88]	; (800ba80 <__ieee754_pow+0x220>)
 800ba26:	4598      	cmp	r8, r3
 800ba28:	f340 80fe 	ble.w	800bc28 <__ieee754_pow+0x3c8>
 800ba2c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba30:	4598      	cmp	r8, r3
 800ba32:	dd0a      	ble.n	800ba4a <__ieee754_pow+0x1ea>
 800ba34:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <__ieee754_pow+0x214>)
 800ba36:	429c      	cmp	r4, r3
 800ba38:	dc0d      	bgt.n	800ba56 <__ieee754_pow+0x1f6>
 800ba3a:	f1b9 0f00 	cmp.w	r9, #0
 800ba3e:	f6bf af6d 	bge.w	800b91c <__ieee754_pow+0xbc>
 800ba42:	a307      	add	r3, pc, #28	; (adr r3, 800ba60 <__ieee754_pow+0x200>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	e79f      	b.n	800b98a <__ieee754_pow+0x12a>
 800ba4a:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <__ieee754_pow+0x224>)
 800ba4c:	429c      	cmp	r4, r3
 800ba4e:	ddf4      	ble.n	800ba3a <__ieee754_pow+0x1da>
 800ba50:	4b09      	ldr	r3, [pc, #36]	; (800ba78 <__ieee754_pow+0x218>)
 800ba52:	429c      	cmp	r4, r3
 800ba54:	dd18      	ble.n	800ba88 <__ieee754_pow+0x228>
 800ba56:	f1b9 0f00 	cmp.w	r9, #0
 800ba5a:	dcf2      	bgt.n	800ba42 <__ieee754_pow+0x1e2>
 800ba5c:	e75e      	b.n	800b91c <__ieee754_pow+0xbc>
 800ba5e:	bf00      	nop
 800ba60:	8800759c 	.word	0x8800759c
 800ba64:	7e37e43c 	.word	0x7e37e43c
 800ba68:	7ff00000 	.word	0x7ff00000
 800ba6c:	0800d769 	.word	0x0800d769
 800ba70:	433fffff 	.word	0x433fffff
 800ba74:	3fefffff 	.word	0x3fefffff
 800ba78:	3ff00000 	.word	0x3ff00000
 800ba7c:	3fe00000 	.word	0x3fe00000
 800ba80:	41e00000 	.word	0x41e00000
 800ba84:	3feffffe 	.word	0x3feffffe
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4b63      	ldr	r3, [pc, #396]	; (800bc18 <__ieee754_pow+0x3b8>)
 800ba8c:	f7f4 fbfc 	bl	8000288 <__aeabi_dsub>
 800ba90:	a355      	add	r3, pc, #340	; (adr r3, 800bbe8 <__ieee754_pow+0x388>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	4604      	mov	r4, r0
 800ba98:	460d      	mov	r5, r1
 800ba9a:	f7f4 fdad 	bl	80005f8 <__aeabi_dmul>
 800ba9e:	a354      	add	r3, pc, #336	; (adr r3, 800bbf0 <__ieee754_pow+0x390>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	4606      	mov	r6, r0
 800baa6:	460f      	mov	r7, r1
 800baa8:	4620      	mov	r0, r4
 800baaa:	4629      	mov	r1, r5
 800baac:	f7f4 fda4 	bl	80005f8 <__aeabi_dmul>
 800bab0:	2200      	movs	r2, #0
 800bab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bab6:	4b59      	ldr	r3, [pc, #356]	; (800bc1c <__ieee754_pow+0x3bc>)
 800bab8:	4620      	mov	r0, r4
 800baba:	4629      	mov	r1, r5
 800babc:	f7f4 fd9c 	bl	80005f8 <__aeabi_dmul>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	a14c      	add	r1, pc, #304	; (adr r1, 800bbf8 <__ieee754_pow+0x398>)
 800bac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baca:	f7f4 fbdd 	bl	8000288 <__aeabi_dsub>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	f7f4 fd91 	bl	80005f8 <__aeabi_dmul>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	2000      	movs	r0, #0
 800badc:	4950      	ldr	r1, [pc, #320]	; (800bc20 <__ieee754_pow+0x3c0>)
 800bade:	f7f4 fbd3 	bl	8000288 <__aeabi_dsub>
 800bae2:	4622      	mov	r2, r4
 800bae4:	462b      	mov	r3, r5
 800bae6:	4680      	mov	r8, r0
 800bae8:	4689      	mov	r9, r1
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fd83 	bl	80005f8 <__aeabi_dmul>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	f7f4 fd7d 	bl	80005f8 <__aeabi_dmul>
 800bafe:	a340      	add	r3, pc, #256	; (adr r3, 800bc00 <__ieee754_pow+0x3a0>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f7f4 fd78 	bl	80005f8 <__aeabi_dmul>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb10:	f7f4 fbba 	bl	8000288 <__aeabi_dsub>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	4639      	mov	r1, r7
 800bb20:	f7f4 fbb4 	bl	800028c <__adddf3>
 800bb24:	2000      	movs	r0, #0
 800bb26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb2a:	4632      	mov	r2, r6
 800bb2c:	463b      	mov	r3, r7
 800bb2e:	f7f4 fbab 	bl	8000288 <__aeabi_dsub>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 fba5 	bl	8000288 <__aeabi_dsub>
 800bb3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb40:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bb44:	4313      	orrs	r3, r2
 800bb46:	4606      	mov	r6, r0
 800bb48:	460f      	mov	r7, r1
 800bb4a:	f040 81eb 	bne.w	800bf24 <__ieee754_pow+0x6c4>
 800bb4e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bc08 <__ieee754_pow+0x3a8>
 800bb52:	e9dd 4500 	ldrd	r4, r5, [sp]
 800bb56:	2400      	movs	r4, #0
 800bb58:	4622      	mov	r2, r4
 800bb5a:	462b      	mov	r3, r5
 800bb5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb64:	f7f4 fb90 	bl	8000288 <__aeabi_dsub>
 800bb68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb6c:	f7f4 fd44 	bl	80005f8 <__aeabi_dmul>
 800bb70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb74:	4680      	mov	r8, r0
 800bb76:	4689      	mov	r9, r1
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4640      	mov	r0, r8
 800bb86:	4649      	mov	r1, r9
 800bb88:	f7f4 fb80 	bl	800028c <__adddf3>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	462b      	mov	r3, r5
 800bb90:	4680      	mov	r8, r0
 800bb92:	4689      	mov	r9, r1
 800bb94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb98:	f7f4 fd2e 	bl	80005f8 <__aeabi_dmul>
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	4602      	mov	r2, r0
 800bba4:	4649      	mov	r1, r9
 800bba6:	4640      	mov	r0, r8
 800bba8:	e9cd 4500 	strd	r4, r5, [sp]
 800bbac:	f7f4 fb6e 	bl	800028c <__adddf3>
 800bbb0:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <__ieee754_pow+0x3c4>)
 800bbb2:	4299      	cmp	r1, r3
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	468b      	mov	fp, r1
 800bbba:	f340 82f7 	ble.w	800c1ac <__ieee754_pow+0x94c>
 800bbbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bbc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bbc6:	4303      	orrs	r3, r0
 800bbc8:	f000 81ea 	beq.w	800bfa0 <__ieee754_pow+0x740>
 800bbcc:	a310      	add	r3, pc, #64	; (adr r3, 800bc10 <__ieee754_pow+0x3b0>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd6:	f7f4 fd0f 	bl	80005f8 <__aeabi_dmul>
 800bbda:	a30d      	add	r3, pc, #52	; (adr r3, 800bc10 <__ieee754_pow+0x3b0>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	e6d5      	b.n	800b98e <__ieee754_pow+0x12e>
 800bbe2:	bf00      	nop
 800bbe4:	f3af 8000 	nop.w
 800bbe8:	60000000 	.word	0x60000000
 800bbec:	3ff71547 	.word	0x3ff71547
 800bbf0:	f85ddf44 	.word	0xf85ddf44
 800bbf4:	3e54ae0b 	.word	0x3e54ae0b
 800bbf8:	55555555 	.word	0x55555555
 800bbfc:	3fd55555 	.word	0x3fd55555
 800bc00:	652b82fe 	.word	0x652b82fe
 800bc04:	3ff71547 	.word	0x3ff71547
 800bc08:	00000000 	.word	0x00000000
 800bc0c:	bff00000 	.word	0xbff00000
 800bc10:	8800759c 	.word	0x8800759c
 800bc14:	7e37e43c 	.word	0x7e37e43c
 800bc18:	3ff00000 	.word	0x3ff00000
 800bc1c:	3fd00000 	.word	0x3fd00000
 800bc20:	3fe00000 	.word	0x3fe00000
 800bc24:	408fffff 	.word	0x408fffff
 800bc28:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bc2c:	f04f 0200 	mov.w	r2, #0
 800bc30:	da05      	bge.n	800bc3e <__ieee754_pow+0x3de>
 800bc32:	4bd3      	ldr	r3, [pc, #844]	; (800bf80 <__ieee754_pow+0x720>)
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	1523      	asrs	r3, r4, #20
 800bc40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc44:	4413      	add	r3, r2
 800bc46:	9309      	str	r3, [sp, #36]	; 0x24
 800bc48:	4bce      	ldr	r3, [pc, #824]	; (800bf84 <__ieee754_pow+0x724>)
 800bc4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc52:	429c      	cmp	r4, r3
 800bc54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc58:	dd08      	ble.n	800bc6c <__ieee754_pow+0x40c>
 800bc5a:	4bcb      	ldr	r3, [pc, #812]	; (800bf88 <__ieee754_pow+0x728>)
 800bc5c:	429c      	cmp	r4, r3
 800bc5e:	f340 815e 	ble.w	800bf1e <__ieee754_pow+0x6be>
 800bc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc64:	3301      	adds	r3, #1
 800bc66:	9309      	str	r3, [sp, #36]	; 0x24
 800bc68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bc6c:	f04f 0a00 	mov.w	sl, #0
 800bc70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bc74:	930c      	str	r3, [sp, #48]	; 0x30
 800bc76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc78:	4bc4      	ldr	r3, [pc, #784]	; (800bf8c <__ieee754_pow+0x72c>)
 800bc7a:	4413      	add	r3, r2
 800bc7c:	ed93 7b00 	vldr	d7, [r3]
 800bc80:	4629      	mov	r1, r5
 800bc82:	ec53 2b17 	vmov	r2, r3, d7
 800bc86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bc8e:	f7f4 fafb 	bl	8000288 <__aeabi_dsub>
 800bc92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc9e:	f7f4 faf5 	bl	800028c <__adddf3>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	2000      	movs	r0, #0
 800bca8:	49b9      	ldr	r1, [pc, #740]	; (800bf90 <__ieee754_pow+0x730>)
 800bcaa:	f7f4 fdcf 	bl	800084c <__aeabi_ddiv>
 800bcae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	f7f4 fc9d 	bl	80005f8 <__aeabi_dmul>
 800bcbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcc2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bcc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bcca:	2300      	movs	r3, #0
 800bccc:	9302      	str	r3, [sp, #8]
 800bcce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcd2:	106d      	asrs	r5, r5, #1
 800bcd4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bcd8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bcdc:	2200      	movs	r2, #0
 800bcde:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bce2:	4640      	mov	r0, r8
 800bce4:	4649      	mov	r1, r9
 800bce6:	4614      	mov	r4, r2
 800bce8:	461d      	mov	r5, r3
 800bcea:	f7f4 fc85 	bl	80005f8 <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	f7f4 fac7 	bl	8000288 <__aeabi_dsub>
 800bcfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460f      	mov	r7, r1
 800bd02:	4620      	mov	r0, r4
 800bd04:	4629      	mov	r1, r5
 800bd06:	f7f4 fabf 	bl	8000288 <__aeabi_dsub>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd12:	f7f4 fab9 	bl	8000288 <__aeabi_dsub>
 800bd16:	4642      	mov	r2, r8
 800bd18:	464b      	mov	r3, r9
 800bd1a:	f7f4 fc6d 	bl	80005f8 <__aeabi_dmul>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	f7f4 fc5b 	bl	80005f8 <__aeabi_dmul>
 800bd42:	a37b      	add	r3, pc, #492	; (adr r3, 800bf30 <__ieee754_pow+0x6d0>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	4604      	mov	r4, r0
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	f7f4 fc54 	bl	80005f8 <__aeabi_dmul>
 800bd50:	a379      	add	r3, pc, #484	; (adr r3, 800bf38 <__ieee754_pow+0x6d8>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fa99 	bl	800028c <__adddf3>
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	462b      	mov	r3, r5
 800bd5e:	f7f4 fc4b 	bl	80005f8 <__aeabi_dmul>
 800bd62:	a377      	add	r3, pc, #476	; (adr r3, 800bf40 <__ieee754_pow+0x6e0>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fa90 	bl	800028c <__adddf3>
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	462b      	mov	r3, r5
 800bd70:	f7f4 fc42 	bl	80005f8 <__aeabi_dmul>
 800bd74:	a374      	add	r3, pc, #464	; (adr r3, 800bf48 <__ieee754_pow+0x6e8>)
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fa87 	bl	800028c <__adddf3>
 800bd7e:	4622      	mov	r2, r4
 800bd80:	462b      	mov	r3, r5
 800bd82:	f7f4 fc39 	bl	80005f8 <__aeabi_dmul>
 800bd86:	a372      	add	r3, pc, #456	; (adr r3, 800bf50 <__ieee754_pow+0x6f0>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fa7e 	bl	800028c <__adddf3>
 800bd90:	4622      	mov	r2, r4
 800bd92:	462b      	mov	r3, r5
 800bd94:	f7f4 fc30 	bl	80005f8 <__aeabi_dmul>
 800bd98:	a36f      	add	r3, pc, #444	; (adr r3, 800bf58 <__ieee754_pow+0x6f8>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fa75 	bl	800028c <__adddf3>
 800bda2:	4622      	mov	r2, r4
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	462b      	mov	r3, r5
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	f7f4 fc23 	bl	80005f8 <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	f7f4 fc1d 	bl	80005f8 <__aeabi_dmul>
 800bdbe:	4642      	mov	r2, r8
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	464b      	mov	r3, r9
 800bdc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdca:	f7f4 fa5f 	bl	800028c <__adddf3>
 800bdce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdd2:	f7f4 fc11 	bl	80005f8 <__aeabi_dmul>
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	462b      	mov	r3, r5
 800bdda:	f7f4 fa57 	bl	800028c <__adddf3>
 800bdde:	4642      	mov	r2, r8
 800bde0:	4606      	mov	r6, r0
 800bde2:	460f      	mov	r7, r1
 800bde4:	464b      	mov	r3, r9
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	f7f4 fc05 	bl	80005f8 <__aeabi_dmul>
 800bdee:	2200      	movs	r2, #0
 800bdf0:	4b68      	ldr	r3, [pc, #416]	; (800bf94 <__ieee754_pow+0x734>)
 800bdf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bdf6:	f7f4 fa49 	bl	800028c <__adddf3>
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	f7f4 fa45 	bl	800028c <__adddf3>
 800be02:	9802      	ldr	r0, [sp, #8]
 800be04:	460d      	mov	r5, r1
 800be06:	4604      	mov	r4, r0
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4640      	mov	r0, r8
 800be0e:	4649      	mov	r1, r9
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	2200      	movs	r2, #0
 800be16:	4680      	mov	r8, r0
 800be18:	4689      	mov	r9, r1
 800be1a:	4b5e      	ldr	r3, [pc, #376]	; (800bf94 <__ieee754_pow+0x734>)
 800be1c:	4620      	mov	r0, r4
 800be1e:	4629      	mov	r1, r5
 800be20:	f7f4 fa32 	bl	8000288 <__aeabi_dsub>
 800be24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be28:	f7f4 fa2e 	bl	8000288 <__aeabi_dsub>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fa28 	bl	8000288 <__aeabi_dsub>
 800be38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be3c:	f7f4 fbdc 	bl	80005f8 <__aeabi_dmul>
 800be40:	4622      	mov	r2, r4
 800be42:	4606      	mov	r6, r0
 800be44:	460f      	mov	r7, r1
 800be46:	462b      	mov	r3, r5
 800be48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be4c:	f7f4 fbd4 	bl	80005f8 <__aeabi_dmul>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4630      	mov	r0, r6
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fa18 	bl	800028c <__adddf3>
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4640      	mov	r0, r8
 800be66:	4649      	mov	r1, r9
 800be68:	f7f4 fa10 	bl	800028c <__adddf3>
 800be6c:	9802      	ldr	r0, [sp, #8]
 800be6e:	a33c      	add	r3, pc, #240	; (adr r3, 800bf60 <__ieee754_pow+0x700>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	4604      	mov	r4, r0
 800be76:	460d      	mov	r5, r1
 800be78:	f7f4 fbbe 	bl	80005f8 <__aeabi_dmul>
 800be7c:	4642      	mov	r2, r8
 800be7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be82:	464b      	mov	r3, r9
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 f9fe 	bl	8000288 <__aeabi_dsub>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 f9f8 	bl	8000288 <__aeabi_dsub>
 800be98:	a333      	add	r3, pc, #204	; (adr r3, 800bf68 <__ieee754_pow+0x708>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f7f4 fbab 	bl	80005f8 <__aeabi_dmul>
 800bea2:	a333      	add	r3, pc, #204	; (adr r3, 800bf70 <__ieee754_pow+0x710>)
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	4606      	mov	r6, r0
 800beaa:	460f      	mov	r7, r1
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 fba2 	bl	80005f8 <__aeabi_dmul>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	4630      	mov	r0, r6
 800beba:	4639      	mov	r1, r7
 800bebc:	f7f4 f9e6 	bl	800028c <__adddf3>
 800bec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bec2:	4b35      	ldr	r3, [pc, #212]	; (800bf98 <__ieee754_pow+0x738>)
 800bec4:	4413      	add	r3, r2
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7f4 f9df 	bl	800028c <__adddf3>
 800bece:	4604      	mov	r4, r0
 800bed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed2:	460d      	mov	r5, r1
 800bed4:	f7f4 fb26 	bl	8000524 <__aeabi_i2d>
 800bed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beda:	4b30      	ldr	r3, [pc, #192]	; (800bf9c <__ieee754_pow+0x73c>)
 800bedc:	4413      	add	r3, r2
 800bede:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	4622      	mov	r2, r4
 800bee8:	462b      	mov	r3, r5
 800beea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beee:	f7f4 f9cd 	bl	800028c <__adddf3>
 800bef2:	4642      	mov	r2, r8
 800bef4:	464b      	mov	r3, r9
 800bef6:	f7f4 f9c9 	bl	800028c <__adddf3>
 800befa:	4632      	mov	r2, r6
 800befc:	463b      	mov	r3, r7
 800befe:	f7f4 f9c5 	bl	800028c <__adddf3>
 800bf02:	9802      	ldr	r0, [sp, #8]
 800bf04:	4632      	mov	r2, r6
 800bf06:	463b      	mov	r3, r7
 800bf08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	4642      	mov	r2, r8
 800bf12:	464b      	mov	r3, r9
 800bf14:	f7f4 f9b8 	bl	8000288 <__aeabi_dsub>
 800bf18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf1c:	e607      	b.n	800bb2e <__ieee754_pow+0x2ce>
 800bf1e:	f04f 0a01 	mov.w	sl, #1
 800bf22:	e6a5      	b.n	800bc70 <__ieee754_pow+0x410>
 800bf24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bf78 <__ieee754_pow+0x718>
 800bf28:	e613      	b.n	800bb52 <__ieee754_pow+0x2f2>
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w
 800bf30:	4a454eef 	.word	0x4a454eef
 800bf34:	3fca7e28 	.word	0x3fca7e28
 800bf38:	93c9db65 	.word	0x93c9db65
 800bf3c:	3fcd864a 	.word	0x3fcd864a
 800bf40:	a91d4101 	.word	0xa91d4101
 800bf44:	3fd17460 	.word	0x3fd17460
 800bf48:	518f264d 	.word	0x518f264d
 800bf4c:	3fd55555 	.word	0x3fd55555
 800bf50:	db6fabff 	.word	0xdb6fabff
 800bf54:	3fdb6db6 	.word	0x3fdb6db6
 800bf58:	33333303 	.word	0x33333303
 800bf5c:	3fe33333 	.word	0x3fe33333
 800bf60:	e0000000 	.word	0xe0000000
 800bf64:	3feec709 	.word	0x3feec709
 800bf68:	dc3a03fd 	.word	0xdc3a03fd
 800bf6c:	3feec709 	.word	0x3feec709
 800bf70:	145b01f5 	.word	0x145b01f5
 800bf74:	be3e2fe0 	.word	0xbe3e2fe0
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	3ff00000 	.word	0x3ff00000
 800bf80:	43400000 	.word	0x43400000
 800bf84:	0003988e 	.word	0x0003988e
 800bf88:	000bb679 	.word	0x000bb679
 800bf8c:	0800d888 	.word	0x0800d888
 800bf90:	3ff00000 	.word	0x3ff00000
 800bf94:	40080000 	.word	0x40080000
 800bf98:	0800d8a8 	.word	0x0800d8a8
 800bf9c:	0800d898 	.word	0x0800d898
 800bfa0:	a3b4      	add	r3, pc, #720	; (adr r3, 800c274 <__ieee754_pow+0xa14>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	f7f4 f96f 	bl	800028c <__adddf3>
 800bfae:	4622      	mov	r2, r4
 800bfb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfb4:	462b      	mov	r3, r5
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 f965 	bl	8000288 <__aeabi_dsub>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfc6:	f7f4 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	f47f adfe 	bne.w	800bbcc <__ieee754_pow+0x36c>
 800bfd0:	4aa3      	ldr	r2, [pc, #652]	; (800c260 <__ieee754_pow+0xa00>)
 800bfd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	f340 810a 	ble.w	800c1f0 <__ieee754_pow+0x990>
 800bfdc:	151b      	asrs	r3, r3, #20
 800bfde:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bfe2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bfe6:	fa4a f303 	asr.w	r3, sl, r3
 800bfea:	445b      	add	r3, fp
 800bfec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bff0:	4e9c      	ldr	r6, [pc, #624]	; (800c264 <__ieee754_pow+0xa04>)
 800bff2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bff6:	4116      	asrs	r6, r2
 800bff8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bffc:	2000      	movs	r0, #0
 800bffe:	ea23 0106 	bic.w	r1, r3, r6
 800c002:	f1c2 0214 	rsb	r2, r2, #20
 800c006:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c00a:	fa4a fa02 	asr.w	sl, sl, r2
 800c00e:	f1bb 0f00 	cmp.w	fp, #0
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	bfb8      	it	lt
 800c01c:	f1ca 0a00 	rsblt	sl, sl, #0
 800c020:	f7f4 f932 	bl	8000288 <__aeabi_dsub>
 800c024:	e9cd 0100 	strd	r0, r1, [sp]
 800c028:	4642      	mov	r2, r8
 800c02a:	464b      	mov	r3, r9
 800c02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c030:	f7f4 f92c 	bl	800028c <__adddf3>
 800c034:	2000      	movs	r0, #0
 800c036:	a378      	add	r3, pc, #480	; (adr r3, 800c218 <__ieee754_pow+0x9b8>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	4604      	mov	r4, r0
 800c03e:	460d      	mov	r5, r1
 800c040:	f7f4 fada 	bl	80005f8 <__aeabi_dmul>
 800c044:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c048:	4606      	mov	r6, r0
 800c04a:	460f      	mov	r7, r1
 800c04c:	4620      	mov	r0, r4
 800c04e:	4629      	mov	r1, r5
 800c050:	f7f4 f91a 	bl	8000288 <__aeabi_dsub>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	4640      	mov	r0, r8
 800c05a:	4649      	mov	r1, r9
 800c05c:	f7f4 f914 	bl	8000288 <__aeabi_dsub>
 800c060:	a36f      	add	r3, pc, #444	; (adr r3, 800c220 <__ieee754_pow+0x9c0>)
 800c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c066:	f7f4 fac7 	bl	80005f8 <__aeabi_dmul>
 800c06a:	a36f      	add	r3, pc, #444	; (adr r3, 800c228 <__ieee754_pow+0x9c8>)
 800c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c070:	4680      	mov	r8, r0
 800c072:	4689      	mov	r9, r1
 800c074:	4620      	mov	r0, r4
 800c076:	4629      	mov	r1, r5
 800c078:	f7f4 fabe 	bl	80005f8 <__aeabi_dmul>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4640      	mov	r0, r8
 800c082:	4649      	mov	r1, r9
 800c084:	f7f4 f902 	bl	800028c <__adddf3>
 800c088:	4604      	mov	r4, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4630      	mov	r0, r6
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 f8fa 	bl	800028c <__adddf3>
 800c098:	4632      	mov	r2, r6
 800c09a:	463b      	mov	r3, r7
 800c09c:	4680      	mov	r8, r0
 800c09e:	4689      	mov	r9, r1
 800c0a0:	f7f4 f8f2 	bl	8000288 <__aeabi_dsub>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	f7f4 f8ec 	bl	8000288 <__aeabi_dsub>
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	464b      	mov	r3, r9
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	f7f4 fa9c 	bl	80005f8 <__aeabi_dmul>
 800c0c0:	a35b      	add	r3, pc, #364	; (adr r3, 800c230 <__ieee754_pow+0x9d0>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	f7f4 fa95 	bl	80005f8 <__aeabi_dmul>
 800c0ce:	a35a      	add	r3, pc, #360	; (adr r3, 800c238 <__ieee754_pow+0x9d8>)
 800c0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	4622      	mov	r2, r4
 800c0da:	462b      	mov	r3, r5
 800c0dc:	f7f4 fa8c 	bl	80005f8 <__aeabi_dmul>
 800c0e0:	a357      	add	r3, pc, #348	; (adr r3, 800c240 <__ieee754_pow+0x9e0>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f7f4 f8d1 	bl	800028c <__adddf3>
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	f7f4 fa83 	bl	80005f8 <__aeabi_dmul>
 800c0f2:	a355      	add	r3, pc, #340	; (adr r3, 800c248 <__ieee754_pow+0x9e8>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f7f4 f8c6 	bl	8000288 <__aeabi_dsub>
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	462b      	mov	r3, r5
 800c100:	f7f4 fa7a 	bl	80005f8 <__aeabi_dmul>
 800c104:	a352      	add	r3, pc, #328	; (adr r3, 800c250 <__ieee754_pow+0x9f0>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	f7f4 f8bf 	bl	800028c <__adddf3>
 800c10e:	4622      	mov	r2, r4
 800c110:	462b      	mov	r3, r5
 800c112:	f7f4 fa71 	bl	80005f8 <__aeabi_dmul>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	4640      	mov	r0, r8
 800c11c:	4649      	mov	r1, r9
 800c11e:	f7f4 f8b3 	bl	8000288 <__aeabi_dsub>
 800c122:	4604      	mov	r4, r0
 800c124:	460d      	mov	r5, r1
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fa63 	bl	80005f8 <__aeabi_dmul>
 800c132:	2200      	movs	r2, #0
 800c134:	e9cd 0100 	strd	r0, r1, [sp]
 800c138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f8a2 	bl	8000288 <__aeabi_dsub>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c14c:	f7f4 fb7e 	bl	800084c <__aeabi_ddiv>
 800c150:	4632      	mov	r2, r6
 800c152:	4604      	mov	r4, r0
 800c154:	460d      	mov	r5, r1
 800c156:	463b      	mov	r3, r7
 800c158:	4640      	mov	r0, r8
 800c15a:	4649      	mov	r1, r9
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	4632      	mov	r2, r6
 800c162:	463b      	mov	r3, r7
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4620      	mov	r0, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	f7f4 f88a 	bl	8000288 <__aeabi_dsub>
 800c174:	4642      	mov	r2, r8
 800c176:	464b      	mov	r3, r9
 800c178:	f7f4 f886 	bl	8000288 <__aeabi_dsub>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	2000      	movs	r0, #0
 800c182:	4939      	ldr	r1, [pc, #228]	; (800c268 <__ieee754_pow+0xa08>)
 800c184:	f7f4 f880 	bl	8000288 <__aeabi_dsub>
 800c188:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c18c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	da2f      	bge.n	800c1f6 <__ieee754_pow+0x996>
 800c196:	4650      	mov	r0, sl
 800c198:	ec43 2b10 	vmov	d0, r2, r3
 800c19c:	f001 f948 	bl	800d430 <scalbn>
 800c1a0:	ec51 0b10 	vmov	r0, r1, d0
 800c1a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1a8:	f7ff bbf1 	b.w	800b98e <__ieee754_pow+0x12e>
 800c1ac:	4b2f      	ldr	r3, [pc, #188]	; (800c26c <__ieee754_pow+0xa0c>)
 800c1ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1b2:	429e      	cmp	r6, r3
 800c1b4:	f77f af0c 	ble.w	800bfd0 <__ieee754_pow+0x770>
 800c1b8:	4b2d      	ldr	r3, [pc, #180]	; (800c270 <__ieee754_pow+0xa10>)
 800c1ba:	440b      	add	r3, r1
 800c1bc:	4303      	orrs	r3, r0
 800c1be:	d00b      	beq.n	800c1d8 <__ieee754_pow+0x978>
 800c1c0:	a325      	add	r3, pc, #148	; (adr r3, 800c258 <__ieee754_pow+0x9f8>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ca:	f7f4 fa15 	bl	80005f8 <__aeabi_dmul>
 800c1ce:	a322      	add	r3, pc, #136	; (adr r3, 800c258 <__ieee754_pow+0x9f8>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7ff bbdb 	b.w	800b98e <__ieee754_pow+0x12e>
 800c1d8:	4622      	mov	r2, r4
 800c1da:	462b      	mov	r3, r5
 800c1dc:	f7f4 f854 	bl	8000288 <__aeabi_dsub>
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	f7f4 fc8e 	bl	8000b04 <__aeabi_dcmpge>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	f43f aef1 	beq.w	800bfd0 <__ieee754_pow+0x770>
 800c1ee:	e7e7      	b.n	800c1c0 <__ieee754_pow+0x960>
 800c1f0:	f04f 0a00 	mov.w	sl, #0
 800c1f4:	e718      	b.n	800c028 <__ieee754_pow+0x7c8>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	e7d4      	b.n	800c1a4 <__ieee754_pow+0x944>
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	491a      	ldr	r1, [pc, #104]	; (800c268 <__ieee754_pow+0xa08>)
 800c1fe:	f7ff bb8f 	b.w	800b920 <__ieee754_pow+0xc0>
 800c202:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c206:	f7ff bb8b 	b.w	800b920 <__ieee754_pow+0xc0>
 800c20a:	4630      	mov	r0, r6
 800c20c:	4639      	mov	r1, r7
 800c20e:	f7ff bb87 	b.w	800b920 <__ieee754_pow+0xc0>
 800c212:	4693      	mov	fp, r2
 800c214:	f7ff bb98 	b.w	800b948 <__ieee754_pow+0xe8>
 800c218:	00000000 	.word	0x00000000
 800c21c:	3fe62e43 	.word	0x3fe62e43
 800c220:	fefa39ef 	.word	0xfefa39ef
 800c224:	3fe62e42 	.word	0x3fe62e42
 800c228:	0ca86c39 	.word	0x0ca86c39
 800c22c:	be205c61 	.word	0xbe205c61
 800c230:	72bea4d0 	.word	0x72bea4d0
 800c234:	3e663769 	.word	0x3e663769
 800c238:	c5d26bf1 	.word	0xc5d26bf1
 800c23c:	3ebbbd41 	.word	0x3ebbbd41
 800c240:	af25de2c 	.word	0xaf25de2c
 800c244:	3f11566a 	.word	0x3f11566a
 800c248:	16bebd93 	.word	0x16bebd93
 800c24c:	3f66c16c 	.word	0x3f66c16c
 800c250:	5555553e 	.word	0x5555553e
 800c254:	3fc55555 	.word	0x3fc55555
 800c258:	c2f8f359 	.word	0xc2f8f359
 800c25c:	01a56e1f 	.word	0x01a56e1f
 800c260:	3fe00000 	.word	0x3fe00000
 800c264:	000fffff 	.word	0x000fffff
 800c268:	3ff00000 	.word	0x3ff00000
 800c26c:	4090cbff 	.word	0x4090cbff
 800c270:	3f6f3400 	.word	0x3f6f3400
 800c274:	652b82fe 	.word	0x652b82fe
 800c278:	3c971547 	.word	0x3c971547
 800c27c:	00000000 	.word	0x00000000

0800c280 <__ieee754_rem_pio2>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	ec57 6b10 	vmov	r6, r7, d0
 800c288:	4bc3      	ldr	r3, [pc, #780]	; (800c598 <__ieee754_rem_pio2+0x318>)
 800c28a:	b08d      	sub	sp, #52	; 0x34
 800c28c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c290:	4598      	cmp	r8, r3
 800c292:	4604      	mov	r4, r0
 800c294:	9704      	str	r7, [sp, #16]
 800c296:	dc07      	bgt.n	800c2a8 <__ieee754_rem_pio2+0x28>
 800c298:	2200      	movs	r2, #0
 800c29a:	2300      	movs	r3, #0
 800c29c:	ed84 0b00 	vstr	d0, [r4]
 800c2a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	e027      	b.n	800c2f8 <__ieee754_rem_pio2+0x78>
 800c2a8:	4bbc      	ldr	r3, [pc, #752]	; (800c59c <__ieee754_rem_pio2+0x31c>)
 800c2aa:	4598      	cmp	r8, r3
 800c2ac:	dc75      	bgt.n	800c39a <__ieee754_rem_pio2+0x11a>
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	4dbb      	ldr	r5, [pc, #748]	; (800c5a0 <__ieee754_rem_pio2+0x320>)
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	ee10 0a10 	vmov	r0, s0
 800c2b8:	a3a9      	add	r3, pc, #676	; (adr r3, 800c560 <__ieee754_rem_pio2+0x2e0>)
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	4639      	mov	r1, r7
 800c2c0:	dd36      	ble.n	800c330 <__ieee754_rem_pio2+0xb0>
 800c2c2:	f7f3 ffe1 	bl	8000288 <__aeabi_dsub>
 800c2c6:	45a8      	cmp	r8, r5
 800c2c8:	4606      	mov	r6, r0
 800c2ca:	460f      	mov	r7, r1
 800c2cc:	d018      	beq.n	800c300 <__ieee754_rem_pio2+0x80>
 800c2ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800c568 <__ieee754_rem_pio2+0x2e8>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f7f3 ffd8 	bl	8000288 <__aeabi_dsub>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	e9c4 2300 	strd	r2, r3, [r4]
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	f7f3 ffd0 	bl	8000288 <__aeabi_dsub>
 800c2e8:	a39f      	add	r3, pc, #636	; (adr r3, 800c568 <__ieee754_rem_pio2+0x2e8>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f3 ffcb 	bl	8000288 <__aeabi_dsub>
 800c2f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c2f6:	2501      	movs	r5, #1
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	b00d      	add	sp, #52	; 0x34
 800c2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c300:	a39b      	add	r3, pc, #620	; (adr r3, 800c570 <__ieee754_rem_pio2+0x2f0>)
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	f7f3 ffbf 	bl	8000288 <__aeabi_dsub>
 800c30a:	a39b      	add	r3, pc, #620	; (adr r3, 800c578 <__ieee754_rem_pio2+0x2f8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	f7f3 ffb8 	bl	8000288 <__aeabi_dsub>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	e9c4 2300 	strd	r2, r3, [r4]
 800c320:	4630      	mov	r0, r6
 800c322:	4639      	mov	r1, r7
 800c324:	f7f3 ffb0 	bl	8000288 <__aeabi_dsub>
 800c328:	a393      	add	r3, pc, #588	; (adr r3, 800c578 <__ieee754_rem_pio2+0x2f8>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	e7de      	b.n	800c2ee <__ieee754_rem_pio2+0x6e>
 800c330:	f7f3 ffac 	bl	800028c <__adddf3>
 800c334:	45a8      	cmp	r8, r5
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	d016      	beq.n	800c36a <__ieee754_rem_pio2+0xea>
 800c33c:	a38a      	add	r3, pc, #552	; (adr r3, 800c568 <__ieee754_rem_pio2+0x2e8>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f3 ffa3 	bl	800028c <__adddf3>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	e9c4 2300 	strd	r2, r3, [r4]
 800c34e:	4630      	mov	r0, r6
 800c350:	4639      	mov	r1, r7
 800c352:	f7f3 ff99 	bl	8000288 <__aeabi_dsub>
 800c356:	a384      	add	r3, pc, #528	; (adr r3, 800c568 <__ieee754_rem_pio2+0x2e8>)
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	f7f3 ff96 	bl	800028c <__adddf3>
 800c360:	f04f 35ff 	mov.w	r5, #4294967295
 800c364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c368:	e7c6      	b.n	800c2f8 <__ieee754_rem_pio2+0x78>
 800c36a:	a381      	add	r3, pc, #516	; (adr r3, 800c570 <__ieee754_rem_pio2+0x2f0>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	f7f3 ff8c 	bl	800028c <__adddf3>
 800c374:	a380      	add	r3, pc, #512	; (adr r3, 800c578 <__ieee754_rem_pio2+0x2f8>)
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	4606      	mov	r6, r0
 800c37c:	460f      	mov	r7, r1
 800c37e:	f7f3 ff85 	bl	800028c <__adddf3>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	e9c4 2300 	strd	r2, r3, [r4]
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f3 ff7b 	bl	8000288 <__aeabi_dsub>
 800c392:	a379      	add	r3, pc, #484	; (adr r3, 800c578 <__ieee754_rem_pio2+0x2f8>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	e7e0      	b.n	800c35c <__ieee754_rem_pio2+0xdc>
 800c39a:	4b82      	ldr	r3, [pc, #520]	; (800c5a4 <__ieee754_rem_pio2+0x324>)
 800c39c:	4598      	cmp	r8, r3
 800c39e:	f300 80d0 	bgt.w	800c542 <__ieee754_rem_pio2+0x2c2>
 800c3a2:	f000 ff1d 	bl	800d1e0 <fabs>
 800c3a6:	ec57 6b10 	vmov	r6, r7, d0
 800c3aa:	ee10 0a10 	vmov	r0, s0
 800c3ae:	a374      	add	r3, pc, #464	; (adr r3, 800c580 <__ieee754_rem_pio2+0x300>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	f7f4 f91f 	bl	80005f8 <__aeabi_dmul>
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4b7a      	ldr	r3, [pc, #488]	; (800c5a8 <__ieee754_rem_pio2+0x328>)
 800c3be:	f7f3 ff65 	bl	800028c <__adddf3>
 800c3c2:	f7f4 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	f7f4 f8ac 	bl	8000524 <__aeabi_i2d>
 800c3cc:	a364      	add	r3, pc, #400	; (adr r3, 800c560 <__ieee754_rem_pio2+0x2e0>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d6:	f7f4 f90f 	bl	80005f8 <__aeabi_dmul>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	f7f3 ff51 	bl	8000288 <__aeabi_dsub>
 800c3e6:	a360      	add	r3, pc, #384	; (adr r3, 800c568 <__ieee754_rem_pio2+0x2e8>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	468b      	mov	fp, r1
 800c3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3f4:	f7f4 f900 	bl	80005f8 <__aeabi_dmul>
 800c3f8:	2d1f      	cmp	r5, #31
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	dc0c      	bgt.n	800c41a <__ieee754_rem_pio2+0x19a>
 800c400:	1e6a      	subs	r2, r5, #1
 800c402:	4b6a      	ldr	r3, [pc, #424]	; (800c5ac <__ieee754_rem_pio2+0x32c>)
 800c404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c408:	4543      	cmp	r3, r8
 800c40a:	d006      	beq.n	800c41a <__ieee754_rem_pio2+0x19a>
 800c40c:	4632      	mov	r2, r6
 800c40e:	463b      	mov	r3, r7
 800c410:	4650      	mov	r0, sl
 800c412:	4659      	mov	r1, fp
 800c414:	f7f3 ff38 	bl	8000288 <__aeabi_dsub>
 800c418:	e00e      	b.n	800c438 <__ieee754_rem_pio2+0x1b8>
 800c41a:	4632      	mov	r2, r6
 800c41c:	463b      	mov	r3, r7
 800c41e:	4650      	mov	r0, sl
 800c420:	4659      	mov	r1, fp
 800c422:	f7f3 ff31 	bl	8000288 <__aeabi_dsub>
 800c426:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c42a:	9305      	str	r3, [sp, #20]
 800c42c:	9a05      	ldr	r2, [sp, #20]
 800c42e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	2b10      	cmp	r3, #16
 800c436:	dc02      	bgt.n	800c43e <__ieee754_rem_pio2+0x1be>
 800c438:	e9c4 0100 	strd	r0, r1, [r4]
 800c43c:	e039      	b.n	800c4b2 <__ieee754_rem_pio2+0x232>
 800c43e:	a34c      	add	r3, pc, #304	; (adr r3, 800c570 <__ieee754_rem_pio2+0x2f0>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c448:	f7f4 f8d6 	bl	80005f8 <__aeabi_dmul>
 800c44c:	4606      	mov	r6, r0
 800c44e:	460f      	mov	r7, r1
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4650      	mov	r0, sl
 800c456:	4659      	mov	r1, fp
 800c458:	f7f3 ff16 	bl	8000288 <__aeabi_dsub>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	4680      	mov	r8, r0
 800c462:	4689      	mov	r9, r1
 800c464:	4650      	mov	r0, sl
 800c466:	4659      	mov	r1, fp
 800c468:	f7f3 ff0e 	bl	8000288 <__aeabi_dsub>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	f7f3 ff0a 	bl	8000288 <__aeabi_dsub>
 800c474:	a340      	add	r3, pc, #256	; (adr r3, 800c578 <__ieee754_rem_pio2+0x2f8>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	4606      	mov	r6, r0
 800c47c:	460f      	mov	r7, r1
 800c47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c482:	f7f4 f8b9 	bl	80005f8 <__aeabi_dmul>
 800c486:	4632      	mov	r2, r6
 800c488:	463b      	mov	r3, r7
 800c48a:	f7f3 fefd 	bl	8000288 <__aeabi_dsub>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	4640      	mov	r0, r8
 800c498:	4649      	mov	r1, r9
 800c49a:	f7f3 fef5 	bl	8000288 <__aeabi_dsub>
 800c49e:	9a05      	ldr	r2, [sp, #20]
 800c4a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	2b31      	cmp	r3, #49	; 0x31
 800c4a8:	dc20      	bgt.n	800c4ec <__ieee754_rem_pio2+0x26c>
 800c4aa:	e9c4 0100 	strd	r0, r1, [r4]
 800c4ae:	46c2      	mov	sl, r8
 800c4b0:	46cb      	mov	fp, r9
 800c4b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	4642      	mov	r2, r8
 800c4ba:	464b      	mov	r3, r9
 800c4bc:	4659      	mov	r1, fp
 800c4be:	f7f3 fee3 	bl	8000288 <__aeabi_dsub>
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	f7f3 fedf 	bl	8000288 <__aeabi_dsub>
 800c4ca:	9b04      	ldr	r3, [sp, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4d2:	f6bf af11 	bge.w	800c2f8 <__ieee754_rem_pio2+0x78>
 800c4d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c4da:	6063      	str	r3, [r4, #4]
 800c4dc:	f8c4 8000 	str.w	r8, [r4]
 800c4e0:	60a0      	str	r0, [r4, #8]
 800c4e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4e6:	60e3      	str	r3, [r4, #12]
 800c4e8:	426d      	negs	r5, r5
 800c4ea:	e705      	b.n	800c2f8 <__ieee754_rem_pio2+0x78>
 800c4ec:	a326      	add	r3, pc, #152	; (adr r3, 800c588 <__ieee754_rem_pio2+0x308>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4f6:	f7f4 f87f 	bl	80005f8 <__aeabi_dmul>
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4640      	mov	r0, r8
 800c504:	4649      	mov	r1, r9
 800c506:	f7f3 febf 	bl	8000288 <__aeabi_dsub>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4682      	mov	sl, r0
 800c510:	468b      	mov	fp, r1
 800c512:	4640      	mov	r0, r8
 800c514:	4649      	mov	r1, r9
 800c516:	f7f3 feb7 	bl	8000288 <__aeabi_dsub>
 800c51a:	4632      	mov	r2, r6
 800c51c:	463b      	mov	r3, r7
 800c51e:	f7f3 feb3 	bl	8000288 <__aeabi_dsub>
 800c522:	a31b      	add	r3, pc, #108	; (adr r3, 800c590 <__ieee754_rem_pio2+0x310>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	4606      	mov	r6, r0
 800c52a:	460f      	mov	r7, r1
 800c52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c530:	f7f4 f862 	bl	80005f8 <__aeabi_dmul>
 800c534:	4632      	mov	r2, r6
 800c536:	463b      	mov	r3, r7
 800c538:	f7f3 fea6 	bl	8000288 <__aeabi_dsub>
 800c53c:	4606      	mov	r6, r0
 800c53e:	460f      	mov	r7, r1
 800c540:	e764      	b.n	800c40c <__ieee754_rem_pio2+0x18c>
 800c542:	4b1b      	ldr	r3, [pc, #108]	; (800c5b0 <__ieee754_rem_pio2+0x330>)
 800c544:	4598      	cmp	r8, r3
 800c546:	dd35      	ble.n	800c5b4 <__ieee754_rem_pio2+0x334>
 800c548:	ee10 2a10 	vmov	r2, s0
 800c54c:	463b      	mov	r3, r7
 800c54e:	4630      	mov	r0, r6
 800c550:	4639      	mov	r1, r7
 800c552:	f7f3 fe99 	bl	8000288 <__aeabi_dsub>
 800c556:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c55a:	e9c4 0100 	strd	r0, r1, [r4]
 800c55e:	e6a1      	b.n	800c2a4 <__ieee754_rem_pio2+0x24>
 800c560:	54400000 	.word	0x54400000
 800c564:	3ff921fb 	.word	0x3ff921fb
 800c568:	1a626331 	.word	0x1a626331
 800c56c:	3dd0b461 	.word	0x3dd0b461
 800c570:	1a600000 	.word	0x1a600000
 800c574:	3dd0b461 	.word	0x3dd0b461
 800c578:	2e037073 	.word	0x2e037073
 800c57c:	3ba3198a 	.word	0x3ba3198a
 800c580:	6dc9c883 	.word	0x6dc9c883
 800c584:	3fe45f30 	.word	0x3fe45f30
 800c588:	2e000000 	.word	0x2e000000
 800c58c:	3ba3198a 	.word	0x3ba3198a
 800c590:	252049c1 	.word	0x252049c1
 800c594:	397b839a 	.word	0x397b839a
 800c598:	3fe921fb 	.word	0x3fe921fb
 800c59c:	4002d97b 	.word	0x4002d97b
 800c5a0:	3ff921fb 	.word	0x3ff921fb
 800c5a4:	413921fb 	.word	0x413921fb
 800c5a8:	3fe00000 	.word	0x3fe00000
 800c5ac:	0800d8b8 	.word	0x0800d8b8
 800c5b0:	7fefffff 	.word	0x7fefffff
 800c5b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c5b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c5bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	460f      	mov	r7, r1
 800c5c4:	f7f4 fac8 	bl	8000b58 <__aeabi_d2iz>
 800c5c8:	f7f3 ffac 	bl	8000524 <__aeabi_i2d>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	4639      	mov	r1, r7
 800c5d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c5d8:	f7f3 fe56 	bl	8000288 <__aeabi_dsub>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4b1f      	ldr	r3, [pc, #124]	; (800c65c <__ieee754_rem_pio2+0x3dc>)
 800c5e0:	f7f4 f80a 	bl	80005f8 <__aeabi_dmul>
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	f7f4 fab6 	bl	8000b58 <__aeabi_d2iz>
 800c5ec:	f7f3 ff9a 	bl	8000524 <__aeabi_i2d>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5fc:	f7f3 fe44 	bl	8000288 <__aeabi_dsub>
 800c600:	2200      	movs	r2, #0
 800c602:	4b16      	ldr	r3, [pc, #88]	; (800c65c <__ieee754_rem_pio2+0x3dc>)
 800c604:	f7f3 fff8 	bl	80005f8 <__aeabi_dmul>
 800c608:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c60c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c610:	f04f 0803 	mov.w	r8, #3
 800c614:	2600      	movs	r6, #0
 800c616:	2700      	movs	r7, #0
 800c618:	4632      	mov	r2, r6
 800c61a:	463b      	mov	r3, r7
 800c61c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c620:	f108 3aff 	add.w	sl, r8, #4294967295
 800c624:	f7f4 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 800c628:	b9b0      	cbnz	r0, 800c658 <__ieee754_rem_pio2+0x3d8>
 800c62a:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <__ieee754_rem_pio2+0x3e0>)
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	2302      	movs	r3, #2
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	462a      	mov	r2, r5
 800c634:	4643      	mov	r3, r8
 800c636:	4621      	mov	r1, r4
 800c638:	a806      	add	r0, sp, #24
 800c63a:	f000 f8c5 	bl	800c7c8 <__kernel_rem_pio2>
 800c63e:	9b04      	ldr	r3, [sp, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	4605      	mov	r5, r0
 800c644:	f6bf ae58 	bge.w	800c2f8 <__ieee754_rem_pio2+0x78>
 800c648:	6863      	ldr	r3, [r4, #4]
 800c64a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c64e:	6063      	str	r3, [r4, #4]
 800c650:	68e3      	ldr	r3, [r4, #12]
 800c652:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c656:	e746      	b.n	800c4e6 <__ieee754_rem_pio2+0x266>
 800c658:	46d0      	mov	r8, sl
 800c65a:	e7dd      	b.n	800c618 <__ieee754_rem_pio2+0x398>
 800c65c:	41700000 	.word	0x41700000
 800c660:	0800d938 	.word	0x0800d938

0800c664 <__ieee754_sqrt>:
 800c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c668:	4955      	ldr	r1, [pc, #340]	; (800c7c0 <__ieee754_sqrt+0x15c>)
 800c66a:	ec55 4b10 	vmov	r4, r5, d0
 800c66e:	43a9      	bics	r1, r5
 800c670:	462b      	mov	r3, r5
 800c672:	462a      	mov	r2, r5
 800c674:	d112      	bne.n	800c69c <__ieee754_sqrt+0x38>
 800c676:	ee10 2a10 	vmov	r2, s0
 800c67a:	ee10 0a10 	vmov	r0, s0
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ffba 	bl	80005f8 <__aeabi_dmul>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7f3 fdfe 	bl	800028c <__adddf3>
 800c690:	4604      	mov	r4, r0
 800c692:	460d      	mov	r5, r1
 800c694:	ec45 4b10 	vmov	d0, r4, r5
 800c698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	ee10 0a10 	vmov	r0, s0
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	dc0f      	bgt.n	800c6c6 <__ieee754_sqrt+0x62>
 800c6a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c6aa:	4330      	orrs	r0, r6
 800c6ac:	d0f2      	beq.n	800c694 <__ieee754_sqrt+0x30>
 800c6ae:	b155      	cbz	r5, 800c6c6 <__ieee754_sqrt+0x62>
 800c6b0:	ee10 2a10 	vmov	r2, s0
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	f7f3 fde6 	bl	8000288 <__aeabi_dsub>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	f7f4 f8c4 	bl	800084c <__aeabi_ddiv>
 800c6c4:	e7e4      	b.n	800c690 <__ieee754_sqrt+0x2c>
 800c6c6:	151b      	asrs	r3, r3, #20
 800c6c8:	d073      	beq.n	800c7b2 <__ieee754_sqrt+0x14e>
 800c6ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6ce:	07dd      	lsls	r5, r3, #31
 800c6d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c6d4:	bf48      	it	mi
 800c6d6:	0fc8      	lsrmi	r0, r1, #31
 800c6d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c6dc:	bf44      	itt	mi
 800c6de:	0049      	lslmi	r1, r1, #1
 800c6e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c6e4:	2500      	movs	r5, #0
 800c6e6:	1058      	asrs	r0, r3, #1
 800c6e8:	0fcb      	lsrs	r3, r1, #31
 800c6ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c6ee:	0049      	lsls	r1, r1, #1
 800c6f0:	2316      	movs	r3, #22
 800c6f2:	462c      	mov	r4, r5
 800c6f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c6f8:	19a7      	adds	r7, r4, r6
 800c6fa:	4297      	cmp	r7, r2
 800c6fc:	bfde      	ittt	le
 800c6fe:	19bc      	addle	r4, r7, r6
 800c700:	1bd2      	suble	r2, r2, r7
 800c702:	19ad      	addle	r5, r5, r6
 800c704:	0fcf      	lsrs	r7, r1, #31
 800c706:	3b01      	subs	r3, #1
 800c708:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c70c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c710:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c714:	d1f0      	bne.n	800c6f8 <__ieee754_sqrt+0x94>
 800c716:	f04f 0c20 	mov.w	ip, #32
 800c71a:	469e      	mov	lr, r3
 800c71c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c720:	42a2      	cmp	r2, r4
 800c722:	eb06 070e 	add.w	r7, r6, lr
 800c726:	dc02      	bgt.n	800c72e <__ieee754_sqrt+0xca>
 800c728:	d112      	bne.n	800c750 <__ieee754_sqrt+0xec>
 800c72a:	428f      	cmp	r7, r1
 800c72c:	d810      	bhi.n	800c750 <__ieee754_sqrt+0xec>
 800c72e:	2f00      	cmp	r7, #0
 800c730:	eb07 0e06 	add.w	lr, r7, r6
 800c734:	da42      	bge.n	800c7bc <__ieee754_sqrt+0x158>
 800c736:	f1be 0f00 	cmp.w	lr, #0
 800c73a:	db3f      	blt.n	800c7bc <__ieee754_sqrt+0x158>
 800c73c:	f104 0801 	add.w	r8, r4, #1
 800c740:	1b12      	subs	r2, r2, r4
 800c742:	428f      	cmp	r7, r1
 800c744:	bf88      	it	hi
 800c746:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c74a:	1bc9      	subs	r1, r1, r7
 800c74c:	4433      	add	r3, r6
 800c74e:	4644      	mov	r4, r8
 800c750:	0052      	lsls	r2, r2, #1
 800c752:	f1bc 0c01 	subs.w	ip, ip, #1
 800c756:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c75a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c75e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c762:	d1dd      	bne.n	800c720 <__ieee754_sqrt+0xbc>
 800c764:	430a      	orrs	r2, r1
 800c766:	d006      	beq.n	800c776 <__ieee754_sqrt+0x112>
 800c768:	1c5c      	adds	r4, r3, #1
 800c76a:	bf13      	iteet	ne
 800c76c:	3301      	addne	r3, #1
 800c76e:	3501      	addeq	r5, #1
 800c770:	4663      	moveq	r3, ip
 800c772:	f023 0301 	bicne.w	r3, r3, #1
 800c776:	106a      	asrs	r2, r5, #1
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	07e9      	lsls	r1, r5, #31
 800c77c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c780:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c784:	bf48      	it	mi
 800c786:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c78a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c78e:	461c      	mov	r4, r3
 800c790:	e780      	b.n	800c694 <__ieee754_sqrt+0x30>
 800c792:	0aca      	lsrs	r2, r1, #11
 800c794:	3815      	subs	r0, #21
 800c796:	0549      	lsls	r1, r1, #21
 800c798:	2a00      	cmp	r2, #0
 800c79a:	d0fa      	beq.n	800c792 <__ieee754_sqrt+0x12e>
 800c79c:	02d6      	lsls	r6, r2, #11
 800c79e:	d50a      	bpl.n	800c7b6 <__ieee754_sqrt+0x152>
 800c7a0:	f1c3 0420 	rsb	r4, r3, #32
 800c7a4:	fa21 f404 	lsr.w	r4, r1, r4
 800c7a8:	1e5d      	subs	r5, r3, #1
 800c7aa:	4099      	lsls	r1, r3
 800c7ac:	4322      	orrs	r2, r4
 800c7ae:	1b43      	subs	r3, r0, r5
 800c7b0:	e78b      	b.n	800c6ca <__ieee754_sqrt+0x66>
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	e7f0      	b.n	800c798 <__ieee754_sqrt+0x134>
 800c7b6:	0052      	lsls	r2, r2, #1
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	e7ef      	b.n	800c79c <__ieee754_sqrt+0x138>
 800c7bc:	46a0      	mov	r8, r4
 800c7be:	e7bf      	b.n	800c740 <__ieee754_sqrt+0xdc>
 800c7c0:	7ff00000 	.word	0x7ff00000
 800c7c4:	00000000 	.word	0x00000000

0800c7c8 <__kernel_rem_pio2>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	ed2d 8b02 	vpush	{d8}
 800c7d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c7d4:	1ed4      	subs	r4, r2, #3
 800c7d6:	9308      	str	r3, [sp, #32]
 800c7d8:	9101      	str	r1, [sp, #4]
 800c7da:	4bc5      	ldr	r3, [pc, #788]	; (800caf0 <__kernel_rem_pio2+0x328>)
 800c7dc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c7de:	9009      	str	r0, [sp, #36]	; 0x24
 800c7e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7e4:	9304      	str	r3, [sp, #16]
 800c7e6:	9b08      	ldr	r3, [sp, #32]
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	9307      	str	r3, [sp, #28]
 800c7ec:	2318      	movs	r3, #24
 800c7ee:	fb94 f4f3 	sdiv	r4, r4, r3
 800c7f2:	f06f 0317 	mvn.w	r3, #23
 800c7f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c7fa:	fb04 3303 	mla	r3, r4, r3, r3
 800c7fe:	eb03 0a02 	add.w	sl, r3, r2
 800c802:	9b04      	ldr	r3, [sp, #16]
 800c804:	9a07      	ldr	r2, [sp, #28]
 800c806:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cae0 <__kernel_rem_pio2+0x318>
 800c80a:	eb03 0802 	add.w	r8, r3, r2
 800c80e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c810:	1aa7      	subs	r7, r4, r2
 800c812:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c816:	ae22      	add	r6, sp, #136	; 0x88
 800c818:	2500      	movs	r5, #0
 800c81a:	4545      	cmp	r5, r8
 800c81c:	dd13      	ble.n	800c846 <__kernel_rem_pio2+0x7e>
 800c81e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800cae0 <__kernel_rem_pio2+0x318>
 800c822:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c826:	2600      	movs	r6, #0
 800c828:	9b04      	ldr	r3, [sp, #16]
 800c82a:	429e      	cmp	r6, r3
 800c82c:	dc32      	bgt.n	800c894 <__kernel_rem_pio2+0xcc>
 800c82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c830:	9302      	str	r3, [sp, #8]
 800c832:	9b08      	ldr	r3, [sp, #32]
 800c834:	199d      	adds	r5, r3, r6
 800c836:	ab22      	add	r3, sp, #136	; 0x88
 800c838:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c83c:	9306      	str	r3, [sp, #24]
 800c83e:	ec59 8b18 	vmov	r8, r9, d8
 800c842:	2700      	movs	r7, #0
 800c844:	e01f      	b.n	800c886 <__kernel_rem_pio2+0xbe>
 800c846:	42ef      	cmn	r7, r5
 800c848:	d407      	bmi.n	800c85a <__kernel_rem_pio2+0x92>
 800c84a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c84e:	f7f3 fe69 	bl	8000524 <__aeabi_i2d>
 800c852:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c856:	3501      	adds	r5, #1
 800c858:	e7df      	b.n	800c81a <__kernel_rem_pio2+0x52>
 800c85a:	ec51 0b18 	vmov	r0, r1, d8
 800c85e:	e7f8      	b.n	800c852 <__kernel_rem_pio2+0x8a>
 800c860:	9906      	ldr	r1, [sp, #24]
 800c862:	9d02      	ldr	r5, [sp, #8]
 800c864:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c868:	9106      	str	r1, [sp, #24]
 800c86a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c86e:	9502      	str	r5, [sp, #8]
 800c870:	f7f3 fec2 	bl	80005f8 <__aeabi_dmul>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4640      	mov	r0, r8
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f3 fd06 	bl	800028c <__adddf3>
 800c880:	3701      	adds	r7, #1
 800c882:	4680      	mov	r8, r0
 800c884:	4689      	mov	r9, r1
 800c886:	9b07      	ldr	r3, [sp, #28]
 800c888:	429f      	cmp	r7, r3
 800c88a:	dde9      	ble.n	800c860 <__kernel_rem_pio2+0x98>
 800c88c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c890:	3601      	adds	r6, #1
 800c892:	e7c9      	b.n	800c828 <__kernel_rem_pio2+0x60>
 800c894:	9b04      	ldr	r3, [sp, #16]
 800c896:	aa0e      	add	r2, sp, #56	; 0x38
 800c898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c89c:	930c      	str	r3, [sp, #48]	; 0x30
 800c89e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c8a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c8a4:	9c04      	ldr	r4, [sp, #16]
 800c8a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8a8:	ab9a      	add	r3, sp, #616	; 0x268
 800c8aa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c8ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c8ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c8be:	ab9a      	add	r3, sp, #616	; 0x268
 800c8c0:	445b      	add	r3, fp
 800c8c2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c8c6:	2500      	movs	r5, #0
 800c8c8:	1b63      	subs	r3, r4, r5
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	dc78      	bgt.n	800c9c0 <__kernel_rem_pio2+0x1f8>
 800c8ce:	4650      	mov	r0, sl
 800c8d0:	ec49 8b10 	vmov	d0, r8, r9
 800c8d4:	f000 fdac 	bl	800d430 <scalbn>
 800c8d8:	ec57 6b10 	vmov	r6, r7, d0
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c8e2:	ee10 0a10 	vmov	r0, s0
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	f7f3 fe86 	bl	80005f8 <__aeabi_dmul>
 800c8ec:	ec41 0b10 	vmov	d0, r0, r1
 800c8f0:	f000 fc8a 	bl	800d208 <floor>
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	ec51 0b10 	vmov	r0, r1, d0
 800c8fa:	4b7e      	ldr	r3, [pc, #504]	; (800caf4 <__kernel_rem_pio2+0x32c>)
 800c8fc:	f7f3 fe7c 	bl	80005f8 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fcbe 	bl	8000288 <__aeabi_dsub>
 800c90c:	460f      	mov	r7, r1
 800c90e:	4606      	mov	r6, r0
 800c910:	f7f4 f922 	bl	8000b58 <__aeabi_d2iz>
 800c914:	9006      	str	r0, [sp, #24]
 800c916:	f7f3 fe05 	bl	8000524 <__aeabi_i2d>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4630      	mov	r0, r6
 800c920:	4639      	mov	r1, r7
 800c922:	f7f3 fcb1 	bl	8000288 <__aeabi_dsub>
 800c926:	f1ba 0f00 	cmp.w	sl, #0
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	dd6c      	ble.n	800ca0a <__kernel_rem_pio2+0x242>
 800c930:	1e62      	subs	r2, r4, #1
 800c932:	ab0e      	add	r3, sp, #56	; 0x38
 800c934:	f1ca 0118 	rsb	r1, sl, #24
 800c938:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c93c:	9d06      	ldr	r5, [sp, #24]
 800c93e:	fa40 f301 	asr.w	r3, r0, r1
 800c942:	441d      	add	r5, r3
 800c944:	408b      	lsls	r3, r1
 800c946:	1ac0      	subs	r0, r0, r3
 800c948:	ab0e      	add	r3, sp, #56	; 0x38
 800c94a:	9506      	str	r5, [sp, #24]
 800c94c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c950:	f1ca 0317 	rsb	r3, sl, #23
 800c954:	fa40 f303 	asr.w	r3, r0, r3
 800c958:	9302      	str	r3, [sp, #8]
 800c95a:	9b02      	ldr	r3, [sp, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	dd62      	ble.n	800ca26 <__kernel_rem_pio2+0x25e>
 800c960:	9b06      	ldr	r3, [sp, #24]
 800c962:	2200      	movs	r2, #0
 800c964:	3301      	adds	r3, #1
 800c966:	9306      	str	r3, [sp, #24]
 800c968:	4615      	mov	r5, r2
 800c96a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c96e:	4294      	cmp	r4, r2
 800c970:	f300 8095 	bgt.w	800ca9e <__kernel_rem_pio2+0x2d6>
 800c974:	f1ba 0f00 	cmp.w	sl, #0
 800c978:	dd07      	ble.n	800c98a <__kernel_rem_pio2+0x1c2>
 800c97a:	f1ba 0f01 	cmp.w	sl, #1
 800c97e:	f000 80a2 	beq.w	800cac6 <__kernel_rem_pio2+0x2fe>
 800c982:	f1ba 0f02 	cmp.w	sl, #2
 800c986:	f000 80c1 	beq.w	800cb0c <__kernel_rem_pio2+0x344>
 800c98a:	9b02      	ldr	r3, [sp, #8]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d14a      	bne.n	800ca26 <__kernel_rem_pio2+0x25e>
 800c990:	4632      	mov	r2, r6
 800c992:	463b      	mov	r3, r7
 800c994:	2000      	movs	r0, #0
 800c996:	4958      	ldr	r1, [pc, #352]	; (800caf8 <__kernel_rem_pio2+0x330>)
 800c998:	f7f3 fc76 	bl	8000288 <__aeabi_dsub>
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	d040      	beq.n	800ca26 <__kernel_rem_pio2+0x25e>
 800c9a4:	4650      	mov	r0, sl
 800c9a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cae8 <__kernel_rem_pio2+0x320>
 800c9aa:	f000 fd41 	bl	800d430 <scalbn>
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	ec53 2b10 	vmov	r2, r3, d0
 800c9b6:	f7f3 fc67 	bl	8000288 <__aeabi_dsub>
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460f      	mov	r7, r1
 800c9be:	e032      	b.n	800ca26 <__kernel_rem_pio2+0x25e>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4b4e      	ldr	r3, [pc, #312]	; (800cafc <__kernel_rem_pio2+0x334>)
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	f7f4 f8c4 	bl	8000b58 <__aeabi_d2iz>
 800c9d0:	f7f3 fda8 	bl	8000524 <__aeabi_i2d>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4b4a      	ldr	r3, [pc, #296]	; (800cb00 <__kernel_rem_pio2+0x338>)
 800c9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9dc:	f7f3 fe0c 	bl	80005f8 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	f7f3 fc4e 	bl	8000288 <__aeabi_dsub>
 800c9ec:	f7f4 f8b4 	bl	8000b58 <__aeabi_d2iz>
 800c9f0:	ab0e      	add	r3, sp, #56	; 0x38
 800c9f2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c9f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9fe:	f7f3 fc45 	bl	800028c <__adddf3>
 800ca02:	3501      	adds	r5, #1
 800ca04:	4680      	mov	r8, r0
 800ca06:	4689      	mov	r9, r1
 800ca08:	e75e      	b.n	800c8c8 <__kernel_rem_pio2+0x100>
 800ca0a:	d105      	bne.n	800ca18 <__kernel_rem_pio2+0x250>
 800ca0c:	1e63      	subs	r3, r4, #1
 800ca0e:	aa0e      	add	r2, sp, #56	; 0x38
 800ca10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ca14:	15c3      	asrs	r3, r0, #23
 800ca16:	e79f      	b.n	800c958 <__kernel_rem_pio2+0x190>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4b3a      	ldr	r3, [pc, #232]	; (800cb04 <__kernel_rem_pio2+0x33c>)
 800ca1c:	f7f4 f872 	bl	8000b04 <__aeabi_dcmpge>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d139      	bne.n	800ca98 <__kernel_rem_pio2+0x2d0>
 800ca24:	9002      	str	r0, [sp, #8]
 800ca26:	2200      	movs	r2, #0
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	f7f4 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	f000 80c7 	beq.w	800cbc6 <__kernel_rem_pio2+0x3fe>
 800ca38:	1e65      	subs	r5, r4, #1
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	9904      	ldr	r1, [sp, #16]
 800ca40:	428b      	cmp	r3, r1
 800ca42:	da6a      	bge.n	800cb1a <__kernel_rem_pio2+0x352>
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	f000 8088 	beq.w	800cb5a <__kernel_rem_pio2+0x392>
 800ca4a:	ab0e      	add	r3, sp, #56	; 0x38
 800ca4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ca50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 80b4 	beq.w	800cbc2 <__kernel_rem_pio2+0x3fa>
 800ca5a:	4650      	mov	r0, sl
 800ca5c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800cae8 <__kernel_rem_pio2+0x320>
 800ca60:	f000 fce6 	bl	800d430 <scalbn>
 800ca64:	00ec      	lsls	r4, r5, #3
 800ca66:	ab72      	add	r3, sp, #456	; 0x1c8
 800ca68:	191e      	adds	r6, r3, r4
 800ca6a:	ec59 8b10 	vmov	r8, r9, d0
 800ca6e:	f106 0a08 	add.w	sl, r6, #8
 800ca72:	462f      	mov	r7, r5
 800ca74:	2f00      	cmp	r7, #0
 800ca76:	f280 80df 	bge.w	800cc38 <__kernel_rem_pio2+0x470>
 800ca7a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800cae0 <__kernel_rem_pio2+0x318>
 800ca7e:	f04f 0a00 	mov.w	sl, #0
 800ca82:	eba5 030a 	sub.w	r3, r5, sl
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f2c0 810a 	blt.w	800cca0 <__kernel_rem_pio2+0x4d8>
 800ca8c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800cb08 <__kernel_rem_pio2+0x340>
 800ca90:	ec59 8b18 	vmov	r8, r9, d8
 800ca94:	2700      	movs	r7, #0
 800ca96:	e0f5      	b.n	800cc84 <__kernel_rem_pio2+0x4bc>
 800ca98:	2302      	movs	r3, #2
 800ca9a:	9302      	str	r3, [sp, #8]
 800ca9c:	e760      	b.n	800c960 <__kernel_rem_pio2+0x198>
 800ca9e:	ab0e      	add	r3, sp, #56	; 0x38
 800caa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caa4:	b94d      	cbnz	r5, 800caba <__kernel_rem_pio2+0x2f2>
 800caa6:	b12b      	cbz	r3, 800cab4 <__kernel_rem_pio2+0x2ec>
 800caa8:	a80e      	add	r0, sp, #56	; 0x38
 800caaa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800caae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cab2:	2301      	movs	r3, #1
 800cab4:	3201      	adds	r2, #1
 800cab6:	461d      	mov	r5, r3
 800cab8:	e759      	b.n	800c96e <__kernel_rem_pio2+0x1a6>
 800caba:	a80e      	add	r0, sp, #56	; 0x38
 800cabc:	1acb      	subs	r3, r1, r3
 800cabe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cac2:	462b      	mov	r3, r5
 800cac4:	e7f6      	b.n	800cab4 <__kernel_rem_pio2+0x2ec>
 800cac6:	1e62      	subs	r2, r4, #1
 800cac8:	ab0e      	add	r3, sp, #56	; 0x38
 800caca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cace:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cad2:	a90e      	add	r1, sp, #56	; 0x38
 800cad4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cad8:	e757      	b.n	800c98a <__kernel_rem_pio2+0x1c2>
 800cada:	bf00      	nop
 800cadc:	f3af 8000 	nop.w
	...
 800caec:	3ff00000 	.word	0x3ff00000
 800caf0:	0800da80 	.word	0x0800da80
 800caf4:	40200000 	.word	0x40200000
 800caf8:	3ff00000 	.word	0x3ff00000
 800cafc:	3e700000 	.word	0x3e700000
 800cb00:	41700000 	.word	0x41700000
 800cb04:	3fe00000 	.word	0x3fe00000
 800cb08:	0800da40 	.word	0x0800da40
 800cb0c:	1e62      	subs	r2, r4, #1
 800cb0e:	ab0e      	add	r3, sp, #56	; 0x38
 800cb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cb18:	e7db      	b.n	800cad2 <__kernel_rem_pio2+0x30a>
 800cb1a:	a90e      	add	r1, sp, #56	; 0x38
 800cb1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	430a      	orrs	r2, r1
 800cb24:	e78b      	b.n	800ca3e <__kernel_rem_pio2+0x276>
 800cb26:	3301      	adds	r3, #1
 800cb28:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cb2c:	2900      	cmp	r1, #0
 800cb2e:	d0fa      	beq.n	800cb26 <__kernel_rem_pio2+0x35e>
 800cb30:	9a08      	ldr	r2, [sp, #32]
 800cb32:	4422      	add	r2, r4
 800cb34:	00d2      	lsls	r2, r2, #3
 800cb36:	a922      	add	r1, sp, #136	; 0x88
 800cb38:	18e3      	adds	r3, r4, r3
 800cb3a:	9206      	str	r2, [sp, #24]
 800cb3c:	440a      	add	r2, r1
 800cb3e:	9302      	str	r3, [sp, #8]
 800cb40:	f10b 0108 	add.w	r1, fp, #8
 800cb44:	f102 0308 	add.w	r3, r2, #8
 800cb48:	1c66      	adds	r6, r4, #1
 800cb4a:	910a      	str	r1, [sp, #40]	; 0x28
 800cb4c:	2500      	movs	r5, #0
 800cb4e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb50:	9b02      	ldr	r3, [sp, #8]
 800cb52:	42b3      	cmp	r3, r6
 800cb54:	da04      	bge.n	800cb60 <__kernel_rem_pio2+0x398>
 800cb56:	461c      	mov	r4, r3
 800cb58:	e6a6      	b.n	800c8a8 <__kernel_rem_pio2+0xe0>
 800cb5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e7e3      	b.n	800cb28 <__kernel_rem_pio2+0x360>
 800cb60:	9b06      	ldr	r3, [sp, #24]
 800cb62:	18ef      	adds	r7, r5, r3
 800cb64:	ab22      	add	r3, sp, #136	; 0x88
 800cb66:	441f      	add	r7, r3
 800cb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb6e:	f7f3 fcd9 	bl	8000524 <__aeabi_i2d>
 800cb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb74:	461c      	mov	r4, r3
 800cb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb78:	e9c7 0100 	strd	r0, r1, [r7]
 800cb7c:	eb03 0b05 	add.w	fp, r3, r5
 800cb80:	2700      	movs	r7, #0
 800cb82:	f04f 0800 	mov.w	r8, #0
 800cb86:	f04f 0900 	mov.w	r9, #0
 800cb8a:	9b07      	ldr	r3, [sp, #28]
 800cb8c:	429f      	cmp	r7, r3
 800cb8e:	dd08      	ble.n	800cba2 <__kernel_rem_pio2+0x3da>
 800cb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb92:	aa72      	add	r2, sp, #456	; 0x1c8
 800cb94:	18eb      	adds	r3, r5, r3
 800cb96:	4413      	add	r3, r2
 800cb98:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800cb9c:	3601      	adds	r6, #1
 800cb9e:	3508      	adds	r5, #8
 800cba0:	e7d6      	b.n	800cb50 <__kernel_rem_pio2+0x388>
 800cba2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cba6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cbaa:	f7f3 fd25 	bl	80005f8 <__aeabi_dmul>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7f3 fb69 	bl	800028c <__adddf3>
 800cbba:	3701      	adds	r7, #1
 800cbbc:	4680      	mov	r8, r0
 800cbbe:	4689      	mov	r9, r1
 800cbc0:	e7e3      	b.n	800cb8a <__kernel_rem_pio2+0x3c2>
 800cbc2:	3d01      	subs	r5, #1
 800cbc4:	e741      	b.n	800ca4a <__kernel_rem_pio2+0x282>
 800cbc6:	f1ca 0000 	rsb	r0, sl, #0
 800cbca:	ec47 6b10 	vmov	d0, r6, r7
 800cbce:	f000 fc2f 	bl	800d430 <scalbn>
 800cbd2:	ec57 6b10 	vmov	r6, r7, d0
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4b99      	ldr	r3, [pc, #612]	; (800ce40 <__kernel_rem_pio2+0x678>)
 800cbda:	ee10 0a10 	vmov	r0, s0
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 ff90 	bl	8000b04 <__aeabi_dcmpge>
 800cbe4:	b1f8      	cbz	r0, 800cc26 <__kernel_rem_pio2+0x45e>
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4b96      	ldr	r3, [pc, #600]	; (800ce44 <__kernel_rem_pio2+0x67c>)
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fd03 	bl	80005f8 <__aeabi_dmul>
 800cbf2:	f7f3 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800cbf6:	4680      	mov	r8, r0
 800cbf8:	f7f3 fc94 	bl	8000524 <__aeabi_i2d>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4b90      	ldr	r3, [pc, #576]	; (800ce40 <__kernel_rem_pio2+0x678>)
 800cc00:	f7f3 fcfa 	bl	80005f8 <__aeabi_dmul>
 800cc04:	460b      	mov	r3, r1
 800cc06:	4602      	mov	r2, r0
 800cc08:	4639      	mov	r1, r7
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7f3 fb3c 	bl	8000288 <__aeabi_dsub>
 800cc10:	f7f3 ffa2 	bl	8000b58 <__aeabi_d2iz>
 800cc14:	1c65      	adds	r5, r4, #1
 800cc16:	ab0e      	add	r3, sp, #56	; 0x38
 800cc18:	f10a 0a18 	add.w	sl, sl, #24
 800cc1c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc20:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cc24:	e719      	b.n	800ca5a <__kernel_rem_pio2+0x292>
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	f7f3 ff95 	bl	8000b58 <__aeabi_d2iz>
 800cc2e:	ab0e      	add	r3, sp, #56	; 0x38
 800cc30:	4625      	mov	r5, r4
 800cc32:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cc36:	e710      	b.n	800ca5a <__kernel_rem_pio2+0x292>
 800cc38:	ab0e      	add	r3, sp, #56	; 0x38
 800cc3a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cc3e:	f7f3 fc71 	bl	8000524 <__aeabi_i2d>
 800cc42:	4642      	mov	r2, r8
 800cc44:	464b      	mov	r3, r9
 800cc46:	f7f3 fcd7 	bl	80005f8 <__aeabi_dmul>
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cc50:	4b7c      	ldr	r3, [pc, #496]	; (800ce44 <__kernel_rem_pio2+0x67c>)
 800cc52:	4640      	mov	r0, r8
 800cc54:	4649      	mov	r1, r9
 800cc56:	f7f3 fccf 	bl	80005f8 <__aeabi_dmul>
 800cc5a:	3f01      	subs	r7, #1
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	4689      	mov	r9, r1
 800cc60:	e708      	b.n	800ca74 <__kernel_rem_pio2+0x2ac>
 800cc62:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800cc6e:	f7f3 fcc3 	bl	80005f8 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 fb07 	bl	800028c <__adddf3>
 800cc7e:	3701      	adds	r7, #1
 800cc80:	4680      	mov	r8, r0
 800cc82:	4689      	mov	r9, r1
 800cc84:	9b04      	ldr	r3, [sp, #16]
 800cc86:	429f      	cmp	r7, r3
 800cc88:	dc01      	bgt.n	800cc8e <__kernel_rem_pio2+0x4c6>
 800cc8a:	45ba      	cmp	sl, r7
 800cc8c:	dae9      	bge.n	800cc62 <__kernel_rem_pio2+0x49a>
 800cc8e:	ab4a      	add	r3, sp, #296	; 0x128
 800cc90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc94:	e9c3 8900 	strd	r8, r9, [r3]
 800cc98:	f10a 0a01 	add.w	sl, sl, #1
 800cc9c:	3e08      	subs	r6, #8
 800cc9e:	e6f0      	b.n	800ca82 <__kernel_rem_pio2+0x2ba>
 800cca0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800cca2:	2b03      	cmp	r3, #3
 800cca4:	d85b      	bhi.n	800cd5e <__kernel_rem_pio2+0x596>
 800cca6:	e8df f003 	tbb	[pc, r3]
 800ccaa:	264a      	.short	0x264a
 800ccac:	0226      	.short	0x0226
 800ccae:	ab9a      	add	r3, sp, #616	; 0x268
 800ccb0:	441c      	add	r4, r3
 800ccb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ccb6:	46a2      	mov	sl, r4
 800ccb8:	46ab      	mov	fp, r5
 800ccba:	f1bb 0f00 	cmp.w	fp, #0
 800ccbe:	dc6c      	bgt.n	800cd9a <__kernel_rem_pio2+0x5d2>
 800ccc0:	46a2      	mov	sl, r4
 800ccc2:	46ab      	mov	fp, r5
 800ccc4:	f1bb 0f01 	cmp.w	fp, #1
 800ccc8:	f300 8086 	bgt.w	800cdd8 <__kernel_rem_pio2+0x610>
 800cccc:	2000      	movs	r0, #0
 800ccce:	2100      	movs	r1, #0
 800ccd0:	2d01      	cmp	r5, #1
 800ccd2:	f300 80a0 	bgt.w	800ce16 <__kernel_rem_pio2+0x64e>
 800ccd6:	9b02      	ldr	r3, [sp, #8]
 800ccd8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ccdc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f040 809e 	bne.w	800ce22 <__kernel_rem_pio2+0x65a>
 800cce6:	9b01      	ldr	r3, [sp, #4]
 800cce8:	e9c3 7800 	strd	r7, r8, [r3]
 800ccec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ccf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ccf4:	e033      	b.n	800cd5e <__kernel_rem_pio2+0x596>
 800ccf6:	3408      	adds	r4, #8
 800ccf8:	ab4a      	add	r3, sp, #296	; 0x128
 800ccfa:	441c      	add	r4, r3
 800ccfc:	462e      	mov	r6, r5
 800ccfe:	2000      	movs	r0, #0
 800cd00:	2100      	movs	r1, #0
 800cd02:	2e00      	cmp	r6, #0
 800cd04:	da3a      	bge.n	800cd7c <__kernel_rem_pio2+0x5b4>
 800cd06:	9b02      	ldr	r3, [sp, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d03d      	beq.n	800cd88 <__kernel_rem_pio2+0x5c0>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd12:	9c01      	ldr	r4, [sp, #4]
 800cd14:	e9c4 2300 	strd	r2, r3, [r4]
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cd20:	f7f3 fab2 	bl	8000288 <__aeabi_dsub>
 800cd24:	ae4c      	add	r6, sp, #304	; 0x130
 800cd26:	2401      	movs	r4, #1
 800cd28:	42a5      	cmp	r5, r4
 800cd2a:	da30      	bge.n	800cd8e <__kernel_rem_pio2+0x5c6>
 800cd2c:	9b02      	ldr	r3, [sp, #8]
 800cd2e:	b113      	cbz	r3, 800cd36 <__kernel_rem_pio2+0x56e>
 800cd30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd34:	4619      	mov	r1, r3
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cd3c:	e00f      	b.n	800cd5e <__kernel_rem_pio2+0x596>
 800cd3e:	ab9a      	add	r3, sp, #616	; 0x268
 800cd40:	441c      	add	r4, r3
 800cd42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cd46:	2000      	movs	r0, #0
 800cd48:	2100      	movs	r1, #0
 800cd4a:	2d00      	cmp	r5, #0
 800cd4c:	da10      	bge.n	800cd70 <__kernel_rem_pio2+0x5a8>
 800cd4e:	9b02      	ldr	r3, [sp, #8]
 800cd50:	b113      	cbz	r3, 800cd58 <__kernel_rem_pio2+0x590>
 800cd52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd56:	4619      	mov	r1, r3
 800cd58:	9b01      	ldr	r3, [sp, #4]
 800cd5a:	e9c3 0100 	strd	r0, r1, [r3]
 800cd5e:	9b06      	ldr	r3, [sp, #24]
 800cd60:	f003 0007 	and.w	r0, r3, #7
 800cd64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cd68:	ecbd 8b02 	vpop	{d8}
 800cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd70:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd74:	f7f3 fa8a 	bl	800028c <__adddf3>
 800cd78:	3d01      	subs	r5, #1
 800cd7a:	e7e6      	b.n	800cd4a <__kernel_rem_pio2+0x582>
 800cd7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd80:	f7f3 fa84 	bl	800028c <__adddf3>
 800cd84:	3e01      	subs	r6, #1
 800cd86:	e7bc      	b.n	800cd02 <__kernel_rem_pio2+0x53a>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	e7c1      	b.n	800cd12 <__kernel_rem_pio2+0x54a>
 800cd8e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cd92:	f7f3 fa7b 	bl	800028c <__adddf3>
 800cd96:	3401      	adds	r4, #1
 800cd98:	e7c6      	b.n	800cd28 <__kernel_rem_pio2+0x560>
 800cd9a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800cd9e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cda2:	4640      	mov	r0, r8
 800cda4:	ec53 2b17 	vmov	r2, r3, d7
 800cda8:	4649      	mov	r1, r9
 800cdaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cdae:	f7f3 fa6d 	bl	800028c <__adddf3>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	460f      	mov	r7, r1
 800cdba:	4640      	mov	r0, r8
 800cdbc:	4649      	mov	r1, r9
 800cdbe:	f7f3 fa63 	bl	8000288 <__aeabi_dsub>
 800cdc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdc6:	f7f3 fa61 	bl	800028c <__adddf3>
 800cdca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdce:	e9ca 0100 	strd	r0, r1, [sl]
 800cdd2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800cdd6:	e770      	b.n	800ccba <__kernel_rem_pio2+0x4f2>
 800cdd8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800cddc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cde0:	4630      	mov	r0, r6
 800cde2:	ec53 2b17 	vmov	r2, r3, d7
 800cde6:	4639      	mov	r1, r7
 800cde8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cdec:	f7f3 fa4e 	bl	800028c <__adddf3>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	4689      	mov	r9, r1
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	f7f3 fa44 	bl	8000288 <__aeabi_dsub>
 800ce00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce04:	f7f3 fa42 	bl	800028c <__adddf3>
 800ce08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce0c:	e9ca 0100 	strd	r0, r1, [sl]
 800ce10:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ce14:	e756      	b.n	800ccc4 <__kernel_rem_pio2+0x4fc>
 800ce16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ce1a:	f7f3 fa37 	bl	800028c <__adddf3>
 800ce1e:	3d01      	subs	r5, #1
 800ce20:	e756      	b.n	800ccd0 <__kernel_rem_pio2+0x508>
 800ce22:	9b01      	ldr	r3, [sp, #4]
 800ce24:	9a01      	ldr	r2, [sp, #4]
 800ce26:	601f      	str	r7, [r3, #0]
 800ce28:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ce2c:	605c      	str	r4, [r3, #4]
 800ce2e:	609d      	str	r5, [r3, #8]
 800ce30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ce34:	60d3      	str	r3, [r2, #12]
 800ce36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce3a:	6110      	str	r0, [r2, #16]
 800ce3c:	6153      	str	r3, [r2, #20]
 800ce3e:	e78e      	b.n	800cd5e <__kernel_rem_pio2+0x596>
 800ce40:	41700000 	.word	0x41700000
 800ce44:	3e700000 	.word	0x3e700000

0800ce48 <__kernel_tan>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	ec5b ab10 	vmov	sl, fp, d0
 800ce50:	4bbf      	ldr	r3, [pc, #764]	; (800d150 <__kernel_tan+0x308>)
 800ce52:	b089      	sub	sp, #36	; 0x24
 800ce54:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800ce58:	429f      	cmp	r7, r3
 800ce5a:	ec59 8b11 	vmov	r8, r9, d1
 800ce5e:	4606      	mov	r6, r0
 800ce60:	f8cd b008 	str.w	fp, [sp, #8]
 800ce64:	dc22      	bgt.n	800ceac <__kernel_tan+0x64>
 800ce66:	ee10 0a10 	vmov	r0, s0
 800ce6a:	4659      	mov	r1, fp
 800ce6c:	f7f3 fe74 	bl	8000b58 <__aeabi_d2iz>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d145      	bne.n	800cf00 <__kernel_tan+0xb8>
 800ce74:	1c73      	adds	r3, r6, #1
 800ce76:	4652      	mov	r2, sl
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	433b      	orrs	r3, r7
 800ce7c:	d110      	bne.n	800cea0 <__kernel_tan+0x58>
 800ce7e:	ec4b ab10 	vmov	d0, sl, fp
 800ce82:	f000 f9ad 	bl	800d1e0 <fabs>
 800ce86:	49b3      	ldr	r1, [pc, #716]	; (800d154 <__kernel_tan+0x30c>)
 800ce88:	ec53 2b10 	vmov	r2, r3, d0
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	f7f3 fcdd 	bl	800084c <__aeabi_ddiv>
 800ce92:	4682      	mov	sl, r0
 800ce94:	468b      	mov	fp, r1
 800ce96:	ec4b ab10 	vmov	d0, sl, fp
 800ce9a:	b009      	add	sp, #36	; 0x24
 800ce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea0:	2e01      	cmp	r6, #1
 800cea2:	d0f8      	beq.n	800ce96 <__kernel_tan+0x4e>
 800cea4:	465b      	mov	r3, fp
 800cea6:	2000      	movs	r0, #0
 800cea8:	49ab      	ldr	r1, [pc, #684]	; (800d158 <__kernel_tan+0x310>)
 800ceaa:	e7f0      	b.n	800ce8e <__kernel_tan+0x46>
 800ceac:	4bab      	ldr	r3, [pc, #684]	; (800d15c <__kernel_tan+0x314>)
 800ceae:	429f      	cmp	r7, r3
 800ceb0:	dd26      	ble.n	800cf00 <__kernel_tan+0xb8>
 800ceb2:	9b02      	ldr	r3, [sp, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	da09      	bge.n	800cecc <__kernel_tan+0x84>
 800ceb8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cebc:	469b      	mov	fp, r3
 800cebe:	ee10 aa10 	vmov	sl, s0
 800cec2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cec6:	ee11 8a10 	vmov	r8, s2
 800ceca:	4699      	mov	r9, r3
 800cecc:	4652      	mov	r2, sl
 800cece:	465b      	mov	r3, fp
 800ced0:	a181      	add	r1, pc, #516	; (adr r1, 800d0d8 <__kernel_tan+0x290>)
 800ced2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced6:	f7f3 f9d7 	bl	8000288 <__aeabi_dsub>
 800ceda:	4642      	mov	r2, r8
 800cedc:	464b      	mov	r3, r9
 800cede:	4604      	mov	r4, r0
 800cee0:	460d      	mov	r5, r1
 800cee2:	a17f      	add	r1, pc, #508	; (adr r1, 800d0e0 <__kernel_tan+0x298>)
 800cee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cee8:	f7f3 f9ce 	bl	8000288 <__aeabi_dsub>
 800ceec:	4622      	mov	r2, r4
 800ceee:	462b      	mov	r3, r5
 800cef0:	f7f3 f9cc 	bl	800028c <__adddf3>
 800cef4:	f04f 0800 	mov.w	r8, #0
 800cef8:	4682      	mov	sl, r0
 800cefa:	468b      	mov	fp, r1
 800cefc:	f04f 0900 	mov.w	r9, #0
 800cf00:	4652      	mov	r2, sl
 800cf02:	465b      	mov	r3, fp
 800cf04:	4650      	mov	r0, sl
 800cf06:	4659      	mov	r1, fp
 800cf08:	f7f3 fb76 	bl	80005f8 <__aeabi_dmul>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	460b      	mov	r3, r1
 800cf10:	e9cd 0100 	strd	r0, r1, [sp]
 800cf14:	f7f3 fb70 	bl	80005f8 <__aeabi_dmul>
 800cf18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	460d      	mov	r5, r1
 800cf20:	4650      	mov	r0, sl
 800cf22:	4659      	mov	r1, fp
 800cf24:	f7f3 fb68 	bl	80005f8 <__aeabi_dmul>
 800cf28:	a36f      	add	r3, pc, #444	; (adr r3, 800d0e8 <__kernel_tan+0x2a0>)
 800cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf32:	4620      	mov	r0, r4
 800cf34:	4629      	mov	r1, r5
 800cf36:	f7f3 fb5f 	bl	80005f8 <__aeabi_dmul>
 800cf3a:	a36d      	add	r3, pc, #436	; (adr r3, 800d0f0 <__kernel_tan+0x2a8>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f7f3 f9a4 	bl	800028c <__adddf3>
 800cf44:	4622      	mov	r2, r4
 800cf46:	462b      	mov	r3, r5
 800cf48:	f7f3 fb56 	bl	80005f8 <__aeabi_dmul>
 800cf4c:	a36a      	add	r3, pc, #424	; (adr r3, 800d0f8 <__kernel_tan+0x2b0>)
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	f7f3 f99b 	bl	800028c <__adddf3>
 800cf56:	4622      	mov	r2, r4
 800cf58:	462b      	mov	r3, r5
 800cf5a:	f7f3 fb4d 	bl	80005f8 <__aeabi_dmul>
 800cf5e:	a368      	add	r3, pc, #416	; (adr r3, 800d100 <__kernel_tan+0x2b8>)
 800cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf64:	f7f3 f992 	bl	800028c <__adddf3>
 800cf68:	4622      	mov	r2, r4
 800cf6a:	462b      	mov	r3, r5
 800cf6c:	f7f3 fb44 	bl	80005f8 <__aeabi_dmul>
 800cf70:	a365      	add	r3, pc, #404	; (adr r3, 800d108 <__kernel_tan+0x2c0>)
 800cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf76:	f7f3 f989 	bl	800028c <__adddf3>
 800cf7a:	4622      	mov	r2, r4
 800cf7c:	462b      	mov	r3, r5
 800cf7e:	f7f3 fb3b 	bl	80005f8 <__aeabi_dmul>
 800cf82:	a363      	add	r3, pc, #396	; (adr r3, 800d110 <__kernel_tan+0x2c8>)
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	f7f3 f980 	bl	800028c <__adddf3>
 800cf8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf90:	f7f3 fb32 	bl	80005f8 <__aeabi_dmul>
 800cf94:	a360      	add	r3, pc, #384	; (adr r3, 800d118 <__kernel_tan+0x2d0>)
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fb29 	bl	80005f8 <__aeabi_dmul>
 800cfa6:	a35e      	add	r3, pc, #376	; (adr r3, 800d120 <__kernel_tan+0x2d8>)
 800cfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfac:	f7f3 f96e 	bl	800028c <__adddf3>
 800cfb0:	4622      	mov	r2, r4
 800cfb2:	462b      	mov	r3, r5
 800cfb4:	f7f3 fb20 	bl	80005f8 <__aeabi_dmul>
 800cfb8:	a35b      	add	r3, pc, #364	; (adr r3, 800d128 <__kernel_tan+0x2e0>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 f965 	bl	800028c <__adddf3>
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	462b      	mov	r3, r5
 800cfc6:	f7f3 fb17 	bl	80005f8 <__aeabi_dmul>
 800cfca:	a359      	add	r3, pc, #356	; (adr r3, 800d130 <__kernel_tan+0x2e8>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 f95c 	bl	800028c <__adddf3>
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	f7f3 fb0e 	bl	80005f8 <__aeabi_dmul>
 800cfdc:	a356      	add	r3, pc, #344	; (adr r3, 800d138 <__kernel_tan+0x2f0>)
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	f7f3 f953 	bl	800028c <__adddf3>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	462b      	mov	r3, r5
 800cfea:	f7f3 fb05 	bl	80005f8 <__aeabi_dmul>
 800cfee:	a354      	add	r3, pc, #336	; (adr r3, 800d140 <__kernel_tan+0x2f8>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f3 f94a 	bl	800028c <__adddf3>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d000:	f7f3 f944 	bl	800028c <__adddf3>
 800d004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d008:	f7f3 faf6 	bl	80005f8 <__aeabi_dmul>
 800d00c:	4642      	mov	r2, r8
 800d00e:	464b      	mov	r3, r9
 800d010:	f7f3 f93c 	bl	800028c <__adddf3>
 800d014:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d018:	f7f3 faee 	bl	80005f8 <__aeabi_dmul>
 800d01c:	4642      	mov	r2, r8
 800d01e:	464b      	mov	r3, r9
 800d020:	f7f3 f934 	bl	800028c <__adddf3>
 800d024:	a348      	add	r3, pc, #288	; (adr r3, 800d148 <__kernel_tan+0x300>)
 800d026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02a:	4604      	mov	r4, r0
 800d02c:	460d      	mov	r5, r1
 800d02e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d032:	f7f3 fae1 	bl	80005f8 <__aeabi_dmul>
 800d036:	4622      	mov	r2, r4
 800d038:	462b      	mov	r3, r5
 800d03a:	f7f3 f927 	bl	800028c <__adddf3>
 800d03e:	e9cd 0100 	strd	r0, r1, [sp]
 800d042:	460b      	mov	r3, r1
 800d044:	4602      	mov	r2, r0
 800d046:	4659      	mov	r1, fp
 800d048:	4650      	mov	r0, sl
 800d04a:	f7f3 f91f 	bl	800028c <__adddf3>
 800d04e:	4b43      	ldr	r3, [pc, #268]	; (800d15c <__kernel_tan+0x314>)
 800d050:	429f      	cmp	r7, r3
 800d052:	4604      	mov	r4, r0
 800d054:	460d      	mov	r5, r1
 800d056:	f340 8083 	ble.w	800d160 <__kernel_tan+0x318>
 800d05a:	4630      	mov	r0, r6
 800d05c:	f7f3 fa62 	bl	8000524 <__aeabi_i2d>
 800d060:	4622      	mov	r2, r4
 800d062:	4680      	mov	r8, r0
 800d064:	4689      	mov	r9, r1
 800d066:	462b      	mov	r3, r5
 800d068:	4620      	mov	r0, r4
 800d06a:	4629      	mov	r1, r5
 800d06c:	f7f3 fac4 	bl	80005f8 <__aeabi_dmul>
 800d070:	4642      	mov	r2, r8
 800d072:	4606      	mov	r6, r0
 800d074:	460f      	mov	r7, r1
 800d076:	464b      	mov	r3, r9
 800d078:	4620      	mov	r0, r4
 800d07a:	4629      	mov	r1, r5
 800d07c:	f7f3 f906 	bl	800028c <__adddf3>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4630      	mov	r0, r6
 800d086:	4639      	mov	r1, r7
 800d088:	f7f3 fbe0 	bl	800084c <__aeabi_ddiv>
 800d08c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d090:	f7f3 f8fa 	bl	8000288 <__aeabi_dsub>
 800d094:	4602      	mov	r2, r0
 800d096:	460b      	mov	r3, r1
 800d098:	4650      	mov	r0, sl
 800d09a:	4659      	mov	r1, fp
 800d09c:	f7f3 f8f4 	bl	8000288 <__aeabi_dsub>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	f7f3 f8f2 	bl	800028c <__adddf3>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	f7f3 f8ea 	bl	8000288 <__aeabi_dsub>
 800d0b4:	9b02      	ldr	r3, [sp, #8]
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	1798      	asrs	r0, r3, #30
 800d0ba:	f000 0002 	and.w	r0, r0, #2
 800d0be:	f1c0 0001 	rsb	r0, r0, #1
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	f7f3 fa2e 	bl	8000524 <__aeabi_i2d>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f7f3 fa92 	bl	80005f8 <__aeabi_dmul>
 800d0d4:	e6dd      	b.n	800ce92 <__kernel_tan+0x4a>
 800d0d6:	bf00      	nop
 800d0d8:	54442d18 	.word	0x54442d18
 800d0dc:	3fe921fb 	.word	0x3fe921fb
 800d0e0:	33145c07 	.word	0x33145c07
 800d0e4:	3c81a626 	.word	0x3c81a626
 800d0e8:	74bf7ad4 	.word	0x74bf7ad4
 800d0ec:	3efb2a70 	.word	0x3efb2a70
 800d0f0:	32f0a7e9 	.word	0x32f0a7e9
 800d0f4:	3f12b80f 	.word	0x3f12b80f
 800d0f8:	1a8d1068 	.word	0x1a8d1068
 800d0fc:	3f3026f7 	.word	0x3f3026f7
 800d100:	fee08315 	.word	0xfee08315
 800d104:	3f57dbc8 	.word	0x3f57dbc8
 800d108:	e96e8493 	.word	0xe96e8493
 800d10c:	3f8226e3 	.word	0x3f8226e3
 800d110:	1bb341fe 	.word	0x1bb341fe
 800d114:	3faba1ba 	.word	0x3faba1ba
 800d118:	db605373 	.word	0xdb605373
 800d11c:	bef375cb 	.word	0xbef375cb
 800d120:	a03792a6 	.word	0xa03792a6
 800d124:	3f147e88 	.word	0x3f147e88
 800d128:	f2f26501 	.word	0xf2f26501
 800d12c:	3f4344d8 	.word	0x3f4344d8
 800d130:	c9560328 	.word	0xc9560328
 800d134:	3f6d6d22 	.word	0x3f6d6d22
 800d138:	8406d637 	.word	0x8406d637
 800d13c:	3f9664f4 	.word	0x3f9664f4
 800d140:	1110fe7a 	.word	0x1110fe7a
 800d144:	3fc11111 	.word	0x3fc11111
 800d148:	55555563 	.word	0x55555563
 800d14c:	3fd55555 	.word	0x3fd55555
 800d150:	3e2fffff 	.word	0x3e2fffff
 800d154:	3ff00000 	.word	0x3ff00000
 800d158:	bff00000 	.word	0xbff00000
 800d15c:	3fe59427 	.word	0x3fe59427
 800d160:	2e01      	cmp	r6, #1
 800d162:	d036      	beq.n	800d1d2 <__kernel_tan+0x38a>
 800d164:	460f      	mov	r7, r1
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	2000      	movs	r0, #0
 800d16c:	491a      	ldr	r1, [pc, #104]	; (800d1d8 <__kernel_tan+0x390>)
 800d16e:	f7f3 fb6d 	bl	800084c <__aeabi_ddiv>
 800d172:	2600      	movs	r6, #0
 800d174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d178:	4652      	mov	r2, sl
 800d17a:	465b      	mov	r3, fp
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 f882 	bl	8000288 <__aeabi_dsub>
 800d184:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d190:	f7f3 f87a 	bl	8000288 <__aeabi_dsub>
 800d194:	4632      	mov	r2, r6
 800d196:	462b      	mov	r3, r5
 800d198:	f7f3 fa2e 	bl	80005f8 <__aeabi_dmul>
 800d19c:	4632      	mov	r2, r6
 800d19e:	4682      	mov	sl, r0
 800d1a0:	468b      	mov	fp, r1
 800d1a2:	462b      	mov	r3, r5
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	f7f3 fa26 	bl	80005f8 <__aeabi_dmul>
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <__kernel_tan+0x394>)
 800d1b0:	f7f3 f86c 	bl	800028c <__adddf3>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	4659      	mov	r1, fp
 800d1bc:	f7f3 f866 	bl	800028c <__adddf3>
 800d1c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1c4:	f7f3 fa18 	bl	80005f8 <__aeabi_dmul>
 800d1c8:	4632      	mov	r2, r6
 800d1ca:	462b      	mov	r3, r5
 800d1cc:	f7f3 f85e 	bl	800028c <__adddf3>
 800d1d0:	e65f      	b.n	800ce92 <__kernel_tan+0x4a>
 800d1d2:	4682      	mov	sl, r0
 800d1d4:	468b      	mov	fp, r1
 800d1d6:	e65e      	b.n	800ce96 <__kernel_tan+0x4e>
 800d1d8:	bff00000 	.word	0xbff00000
 800d1dc:	3ff00000 	.word	0x3ff00000

0800d1e0 <fabs>:
 800d1e0:	ec51 0b10 	vmov	r0, r1, d0
 800d1e4:	ee10 2a10 	vmov	r2, s0
 800d1e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1ec:	ec43 2b10 	vmov	d0, r2, r3
 800d1f0:	4770      	bx	lr

0800d1f2 <finite>:
 800d1f2:	ee10 3a90 	vmov	r3, s1
 800d1f6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d1fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d1fe:	0fc0      	lsrs	r0, r0, #31
 800d200:	4770      	bx	lr
 800d202:	0000      	movs	r0, r0
 800d204:	0000      	movs	r0, r0
	...

0800d208 <floor>:
 800d208:	ec51 0b10 	vmov	r0, r1, d0
 800d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d210:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d214:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d218:	2e13      	cmp	r6, #19
 800d21a:	460c      	mov	r4, r1
 800d21c:	ee10 5a10 	vmov	r5, s0
 800d220:	4680      	mov	r8, r0
 800d222:	dc34      	bgt.n	800d28e <floor+0x86>
 800d224:	2e00      	cmp	r6, #0
 800d226:	da16      	bge.n	800d256 <floor+0x4e>
 800d228:	a335      	add	r3, pc, #212	; (adr r3, 800d300 <floor+0xf8>)
 800d22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22e:	f7f3 f82d 	bl	800028c <__adddf3>
 800d232:	2200      	movs	r2, #0
 800d234:	2300      	movs	r3, #0
 800d236:	f7f3 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800d23a:	b148      	cbz	r0, 800d250 <floor+0x48>
 800d23c:	2c00      	cmp	r4, #0
 800d23e:	da59      	bge.n	800d2f4 <floor+0xec>
 800d240:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d244:	4a30      	ldr	r2, [pc, #192]	; (800d308 <floor+0x100>)
 800d246:	432b      	orrs	r3, r5
 800d248:	2500      	movs	r5, #0
 800d24a:	42ab      	cmp	r3, r5
 800d24c:	bf18      	it	ne
 800d24e:	4614      	movne	r4, r2
 800d250:	4621      	mov	r1, r4
 800d252:	4628      	mov	r0, r5
 800d254:	e025      	b.n	800d2a2 <floor+0x9a>
 800d256:	4f2d      	ldr	r7, [pc, #180]	; (800d30c <floor+0x104>)
 800d258:	4137      	asrs	r7, r6
 800d25a:	ea01 0307 	and.w	r3, r1, r7
 800d25e:	4303      	orrs	r3, r0
 800d260:	d01f      	beq.n	800d2a2 <floor+0x9a>
 800d262:	a327      	add	r3, pc, #156	; (adr r3, 800d300 <floor+0xf8>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	f7f3 f810 	bl	800028c <__adddf3>
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	f7f3 fc52 	bl	8000b18 <__aeabi_dcmpgt>
 800d274:	2800      	cmp	r0, #0
 800d276:	d0eb      	beq.n	800d250 <floor+0x48>
 800d278:	2c00      	cmp	r4, #0
 800d27a:	bfbe      	ittt	lt
 800d27c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d280:	fa43 f606 	asrlt.w	r6, r3, r6
 800d284:	19a4      	addlt	r4, r4, r6
 800d286:	ea24 0407 	bic.w	r4, r4, r7
 800d28a:	2500      	movs	r5, #0
 800d28c:	e7e0      	b.n	800d250 <floor+0x48>
 800d28e:	2e33      	cmp	r6, #51	; 0x33
 800d290:	dd0b      	ble.n	800d2aa <floor+0xa2>
 800d292:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d296:	d104      	bne.n	800d2a2 <floor+0x9a>
 800d298:	ee10 2a10 	vmov	r2, s0
 800d29c:	460b      	mov	r3, r1
 800d29e:	f7f2 fff5 	bl	800028c <__adddf3>
 800d2a2:	ec41 0b10 	vmov	d0, r0, r1
 800d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b2:	fa23 f707 	lsr.w	r7, r3, r7
 800d2b6:	4207      	tst	r7, r0
 800d2b8:	d0f3      	beq.n	800d2a2 <floor+0x9a>
 800d2ba:	a311      	add	r3, pc, #68	; (adr r3, 800d300 <floor+0xf8>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	f7f2 ffe4 	bl	800028c <__adddf3>
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f7f3 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d0bf      	beq.n	800d250 <floor+0x48>
 800d2d0:	2c00      	cmp	r4, #0
 800d2d2:	da02      	bge.n	800d2da <floor+0xd2>
 800d2d4:	2e14      	cmp	r6, #20
 800d2d6:	d103      	bne.n	800d2e0 <floor+0xd8>
 800d2d8:	3401      	adds	r4, #1
 800d2da:	ea25 0507 	bic.w	r5, r5, r7
 800d2de:	e7b7      	b.n	800d250 <floor+0x48>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d2e6:	fa03 f606 	lsl.w	r6, r3, r6
 800d2ea:	4435      	add	r5, r6
 800d2ec:	4545      	cmp	r5, r8
 800d2ee:	bf38      	it	cc
 800d2f0:	18e4      	addcc	r4, r4, r3
 800d2f2:	e7f2      	b.n	800d2da <floor+0xd2>
 800d2f4:	2500      	movs	r5, #0
 800d2f6:	462c      	mov	r4, r5
 800d2f8:	e7aa      	b.n	800d250 <floor+0x48>
 800d2fa:	bf00      	nop
 800d2fc:	f3af 8000 	nop.w
 800d300:	8800759c 	.word	0x8800759c
 800d304:	7e37e43c 	.word	0x7e37e43c
 800d308:	bff00000 	.word	0xbff00000
 800d30c:	000fffff 	.word	0x000fffff

0800d310 <matherr>:
 800d310:	2000      	movs	r0, #0
 800d312:	4770      	bx	lr
 800d314:	0000      	movs	r0, r0
	...

0800d318 <nan>:
 800d318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d320 <nan+0x8>
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	00000000 	.word	0x00000000
 800d324:	7ff80000 	.word	0x7ff80000

0800d328 <rint>:
 800d328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d32a:	ec51 0b10 	vmov	r0, r1, d0
 800d32e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d332:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d336:	2e13      	cmp	r6, #19
 800d338:	460b      	mov	r3, r1
 800d33a:	ee10 4a10 	vmov	r4, s0
 800d33e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d342:	dc56      	bgt.n	800d3f2 <rint+0xca>
 800d344:	2e00      	cmp	r6, #0
 800d346:	da2b      	bge.n	800d3a0 <rint+0x78>
 800d348:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d34c:	4302      	orrs	r2, r0
 800d34e:	d023      	beq.n	800d398 <rint+0x70>
 800d350:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d354:	4302      	orrs	r2, r0
 800d356:	4254      	negs	r4, r2
 800d358:	4314      	orrs	r4, r2
 800d35a:	0c4b      	lsrs	r3, r1, #17
 800d35c:	0b24      	lsrs	r4, r4, #12
 800d35e:	045b      	lsls	r3, r3, #17
 800d360:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d364:	ea44 0103 	orr.w	r1, r4, r3
 800d368:	460b      	mov	r3, r1
 800d36a:	492f      	ldr	r1, [pc, #188]	; (800d428 <rint+0x100>)
 800d36c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800d370:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d374:	4602      	mov	r2, r0
 800d376:	4639      	mov	r1, r7
 800d378:	4630      	mov	r0, r6
 800d37a:	f7f2 ff87 	bl	800028c <__adddf3>
 800d37e:	e9cd 0100 	strd	r0, r1, [sp]
 800d382:	463b      	mov	r3, r7
 800d384:	4632      	mov	r2, r6
 800d386:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d38a:	f7f2 ff7d 	bl	8000288 <__aeabi_dsub>
 800d38e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d392:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d396:	4639      	mov	r1, r7
 800d398:	ec41 0b10 	vmov	d0, r0, r1
 800d39c:	b003      	add	sp, #12
 800d39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a0:	4a22      	ldr	r2, [pc, #136]	; (800d42c <rint+0x104>)
 800d3a2:	4132      	asrs	r2, r6
 800d3a4:	ea01 0702 	and.w	r7, r1, r2
 800d3a8:	4307      	orrs	r7, r0
 800d3aa:	d0f5      	beq.n	800d398 <rint+0x70>
 800d3ac:	0852      	lsrs	r2, r2, #1
 800d3ae:	4011      	ands	r1, r2
 800d3b0:	430c      	orrs	r4, r1
 800d3b2:	d00b      	beq.n	800d3cc <rint+0xa4>
 800d3b4:	ea23 0202 	bic.w	r2, r3, r2
 800d3b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d3bc:	2e13      	cmp	r6, #19
 800d3be:	fa43 f306 	asr.w	r3, r3, r6
 800d3c2:	bf0c      	ite	eq
 800d3c4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d3c8:	2400      	movne	r4, #0
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	4916      	ldr	r1, [pc, #88]	; (800d428 <rint+0x100>)
 800d3ce:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d3d2:	4622      	mov	r2, r4
 800d3d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4629      	mov	r1, r5
 800d3dc:	f7f2 ff56 	bl	800028c <__adddf3>
 800d3e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	462b      	mov	r3, r5
 800d3e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3ec:	f7f2 ff4c 	bl	8000288 <__aeabi_dsub>
 800d3f0:	e7d2      	b.n	800d398 <rint+0x70>
 800d3f2:	2e33      	cmp	r6, #51	; 0x33
 800d3f4:	dd07      	ble.n	800d406 <rint+0xde>
 800d3f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d3fa:	d1cd      	bne.n	800d398 <rint+0x70>
 800d3fc:	ee10 2a10 	vmov	r2, s0
 800d400:	f7f2 ff44 	bl	800028c <__adddf3>
 800d404:	e7c8      	b.n	800d398 <rint+0x70>
 800d406:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800d40a:	f04f 32ff 	mov.w	r2, #4294967295
 800d40e:	40f2      	lsrs	r2, r6
 800d410:	4210      	tst	r0, r2
 800d412:	d0c1      	beq.n	800d398 <rint+0x70>
 800d414:	0852      	lsrs	r2, r2, #1
 800d416:	4210      	tst	r0, r2
 800d418:	bf1f      	itttt	ne
 800d41a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d41e:	ea20 0202 	bicne.w	r2, r0, r2
 800d422:	4134      	asrne	r4, r6
 800d424:	4314      	orrne	r4, r2
 800d426:	e7d1      	b.n	800d3cc <rint+0xa4>
 800d428:	0800da90 	.word	0x0800da90
 800d42c:	000fffff 	.word	0x000fffff

0800d430 <scalbn>:
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	ec55 4b10 	vmov	r4, r5, d0
 800d436:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d43a:	4606      	mov	r6, r0
 800d43c:	462b      	mov	r3, r5
 800d43e:	b9aa      	cbnz	r2, 800d46c <scalbn+0x3c>
 800d440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d444:	4323      	orrs	r3, r4
 800d446:	d03b      	beq.n	800d4c0 <scalbn+0x90>
 800d448:	4b31      	ldr	r3, [pc, #196]	; (800d510 <scalbn+0xe0>)
 800d44a:	4629      	mov	r1, r5
 800d44c:	2200      	movs	r2, #0
 800d44e:	ee10 0a10 	vmov	r0, s0
 800d452:	f7f3 f8d1 	bl	80005f8 <__aeabi_dmul>
 800d456:	4b2f      	ldr	r3, [pc, #188]	; (800d514 <scalbn+0xe4>)
 800d458:	429e      	cmp	r6, r3
 800d45a:	4604      	mov	r4, r0
 800d45c:	460d      	mov	r5, r1
 800d45e:	da12      	bge.n	800d486 <scalbn+0x56>
 800d460:	a327      	add	r3, pc, #156	; (adr r3, 800d500 <scalbn+0xd0>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f7f3 f8c7 	bl	80005f8 <__aeabi_dmul>
 800d46a:	e009      	b.n	800d480 <scalbn+0x50>
 800d46c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d470:	428a      	cmp	r2, r1
 800d472:	d10c      	bne.n	800d48e <scalbn+0x5e>
 800d474:	ee10 2a10 	vmov	r2, s0
 800d478:	4620      	mov	r0, r4
 800d47a:	4629      	mov	r1, r5
 800d47c:	f7f2 ff06 	bl	800028c <__adddf3>
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	e01c      	b.n	800d4c0 <scalbn+0x90>
 800d486:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d48a:	460b      	mov	r3, r1
 800d48c:	3a36      	subs	r2, #54	; 0x36
 800d48e:	4432      	add	r2, r6
 800d490:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d494:	428a      	cmp	r2, r1
 800d496:	dd0b      	ble.n	800d4b0 <scalbn+0x80>
 800d498:	ec45 4b11 	vmov	d1, r4, r5
 800d49c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d508 <scalbn+0xd8>
 800d4a0:	f000 f83c 	bl	800d51c <copysign>
 800d4a4:	a318      	add	r3, pc, #96	; (adr r3, 800d508 <scalbn+0xd8>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	ec51 0b10 	vmov	r0, r1, d0
 800d4ae:	e7da      	b.n	800d466 <scalbn+0x36>
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	dd08      	ble.n	800d4c6 <scalbn+0x96>
 800d4b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4c0:	ec45 4b10 	vmov	d0, r4, r5
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d4ca:	da0d      	bge.n	800d4e8 <scalbn+0xb8>
 800d4cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d4d0:	429e      	cmp	r6, r3
 800d4d2:	ec45 4b11 	vmov	d1, r4, r5
 800d4d6:	dce1      	bgt.n	800d49c <scalbn+0x6c>
 800d4d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d500 <scalbn+0xd0>
 800d4dc:	f000 f81e 	bl	800d51c <copysign>
 800d4e0:	a307      	add	r3, pc, #28	; (adr r3, 800d500 <scalbn+0xd0>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	e7e0      	b.n	800d4aa <scalbn+0x7a>
 800d4e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4ec:	3236      	adds	r2, #54	; 0x36
 800d4ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	4b06      	ldr	r3, [pc, #24]	; (800d518 <scalbn+0xe8>)
 800d4fe:	e7b2      	b.n	800d466 <scalbn+0x36>
 800d500:	c2f8f359 	.word	0xc2f8f359
 800d504:	01a56e1f 	.word	0x01a56e1f
 800d508:	8800759c 	.word	0x8800759c
 800d50c:	7e37e43c 	.word	0x7e37e43c
 800d510:	43500000 	.word	0x43500000
 800d514:	ffff3cb0 	.word	0xffff3cb0
 800d518:	3c900000 	.word	0x3c900000

0800d51c <copysign>:
 800d51c:	ec51 0b10 	vmov	r0, r1, d0
 800d520:	ee11 0a90 	vmov	r0, s3
 800d524:	ee10 2a10 	vmov	r2, s0
 800d528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d52c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d530:	ea41 0300 	orr.w	r3, r1, r0
 800d534:	ec43 2b10 	vmov	d0, r2, r3
 800d538:	4770      	bx	lr
	...

0800d53c <_init>:
 800d53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53e:	bf00      	nop
 800d540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d542:	bc08      	pop	{r3}
 800d544:	469e      	mov	lr, r3
 800d546:	4770      	bx	lr

0800d548 <_fini>:
 800d548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54a:	bf00      	nop
 800d54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d54e:	bc08      	pop	{r3}
 800d550:	469e      	mov	lr, r3
 800d552:	4770      	bx	lr
