
RoboTrcae_2023_TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c124  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800c2b8  0800c2b8  0001c2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b8  0800c7b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7b8  0800c7b8  0001c7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c0  0800c7c0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c0  0800c7c0  0001c7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c8c  200001e0  0800c9a4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009e6c  0800c9a4  00029e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfd7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c08  00000000  00000000  0003e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  00041df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  000433d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248ea  00000000  00000000  00044800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014cd6  00000000  00000000  000690ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf84e  00000000  00000000  0007ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d60e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f8  00000000  00000000  0014d68c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c29c 	.word	0x0800c29c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c29c 	.word	0x0800c29c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <read_byte>:
//#include <stdio.h>

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <read_byte+0x50>)
 8000fa2:	f004 fb73 	bl	800568c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&ret,1,100);
 8000fa6:	f107 010f 	add.w	r1, r7, #15
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	2201      	movs	r2, #1
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <read_byte+0x54>)
 8000fb0:	f005 fb25 	bl	80065fe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&val,1,100);
 8000fb4:	f107 010e 	add.w	r1, r7, #14
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <read_byte+0x54>)
 8000fbe:	f005 fc52 	bl	8006866 <HAL_SPI_Receive>
	CS_SET;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <read_byte+0x50>)
 8000fc8:	f004 fb60 	bl	800568c <HAL_GPIO_WritePin>

	return val;
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	20009d48 	.word	0x20009d48

08000fe0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <write_byte+0x50>)
 8001000:	f004 fb44 	bl	800568c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&ret,1,100);
 8001004:	f107 010f 	add.w	r1, r7, #15
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <write_byte+0x54>)
 800100e:	f005 faf6 	bl	80065fe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&val,1,100);
 8001012:	1db9      	adds	r1, r7, #6
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2201      	movs	r2, #1
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <write_byte+0x54>)
 800101a:	f005 faf0 	bl	80065fe <HAL_SPI_Transmit>
	CS_SET;
 800101e:	2201      	movs	r2, #1
 8001020:	2110      	movs	r1, #16
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <write_byte+0x50>)
 8001024:	f004 fb32 	bl	800568c <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020800 	.word	0x40020800
 8001034:	20009d48 	.word	0x20009d48

08001038 <IMU_init>:

uint16_t IMU_init() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ffa0 	bl	8000f88 <read_byte>
 8001048:	4603      	mov	r3, r0
 800104a:	717b      	strb	r3, [r7, #5]
	//printf("who am i -> %x\r\n", who_am_i);
	if ( who_am_i == 0xE0 ) {
 800104c:	797b      	ldrb	r3, [r7, #5]
 800104e:	2be0      	cmp	r3, #224	; 0xe0
 8001050:	d119      	bne.n	8001086 <IMU_init+0x4e>
		ret = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001056:	2101      	movs	r1, #1
 8001058:	2006      	movs	r0, #6
 800105a:	f7ff ffc1 	bl	8000fe0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800105e:	2110      	movs	r1, #16
 8001060:	2003      	movs	r0, #3
 8001062:	f7ff ffbd 	bl	8000fe0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001066:	2120      	movs	r1, #32
 8001068:	207f      	movs	r0, #127	; 0x7f
 800106a:	f7ff ffb9 	bl	8000fe0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800106e:	2106      	movs	r1, #6
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff ffb5 	bl	8000fe0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±500	01:±1000 10:±2000 11:±4000
		write_byte(0x14,0x06);	//レンジ±16g
 8001076:	2106      	movs	r1, #6
 8001078:	2014      	movs	r0, #20
 800107a:	f7ff ffb1 	bl	8000fe0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±4	01:±8 10:±16 11:±30
		write_byte(0x7F,0x00);	//USER_BANK0
 800107e:	2100      	movs	r1, #0
 8001080:	207f      	movs	r0, #127	; 0x7f
 8001082:	f7ff ffad 	bl	8000fe0 <write_byte>
	}
	return ret;
 8001086:	88fb      	ldrh	r3, [r7, #6]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <read_gyro_data>:

void read_gyro_data() {
 8001090:	b598      	push	{r3, r4, r7, lr}
 8001092:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001094:	2033      	movs	r0, #51	; 0x33
 8001096:	f7ff ff77 	bl	8000f88 <read_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21c      	sxth	r4, r3
 80010a0:	2034      	movs	r0, #52	; 0x34
 80010a2:	f7ff ff71 	bl	8000f88 <read_byte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4323      	orrs	r3, r4
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <read_gyro_data+0x64>)
 80010b0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80010b2:	2035      	movs	r0, #53	; 0x35
 80010b4:	f7ff ff68 	bl	8000f88 <read_byte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21c      	sxth	r4, r3
 80010be:	2036      	movs	r0, #54	; 0x36
 80010c0:	f7ff ff62 	bl	8000f88 <read_byte>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4323      	orrs	r3, r4
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <read_gyro_data+0x68>)
 80010ce:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80010d0:	2037      	movs	r0, #55	; 0x37
 80010d2:	f7ff ff59 	bl	8000f88 <read_byte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21c      	sxth	r4, r3
 80010dc:	2038      	movs	r0, #56	; 0x38
 80010de:	f7ff ff53 	bl	8000f88 <read_byte>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4323      	orrs	r3, r4
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <read_gyro_data+0x6c>)
 80010ec:	801a      	strh	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	bd98      	pop	{r3, r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20009810 	.word	0x20009810
 80010f8:	2000980e 	.word	0x2000980e
 80010fc:	20009808 	.word	0x20009808

08001100 <SpeedContorol_R>:

#include "speed.h"


double SpeedContorol_R(double Speed_Ref)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 500.0, IGain = 0.0, duty;
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	4c3c      	ldr	r4, [pc, #240]	; (8001200 <SpeedContorol_R+0x100>)
 8001110:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	f04f 0400 	mov.w	r4, #0
 800111c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref + SR;
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <SpeedContorol_R+0x104>)
 8001122:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001126:	461a      	mov	r2, r3
 8001128:	4623      	mov	r3, r4
 800112a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800112e:	f7ff f8ad 	bl	800028c <__adddf3>
 8001132:	4603      	mov	r3, r0
 8001134:	460c      	mov	r4, r1
 8001136:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedR_I_buff += delta_speed * TIM05 * 0.001;
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <SpeedContorol_R+0x108>)
 8001140:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001144:	f7ff fa58 	bl	80005f8 <__aeabi_dmul>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	4618      	mov	r0, r3
 800114e:	4621      	mov	r1, r4
 8001150:	a325      	add	r3, pc, #148	; (adr r3, 80011e8 <SpeedContorol_R+0xe8>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa4f 	bl	80005f8 <__aeabi_dmul>
 800115a:	4603      	mov	r3, r0
 800115c:	460c      	mov	r4, r1
 800115e:	4618      	mov	r0, r3
 8001160:	4621      	mov	r1, r4
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <SpeedContorol_R+0x10c>)
 8001164:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001168:	461a      	mov	r2, r3
 800116a:	4623      	mov	r3, r4
 800116c:	f7ff f88e 	bl	800028c <__adddf3>
 8001170:	4603      	mov	r3, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4a25      	ldr	r2, [pc, #148]	; (800120c <SpeedContorol_R+0x10c>)
 8001176:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff >= 1000000) speedR_I_buff = 1000000;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <SpeedContorol_R+0x10c>)
 800117c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001180:	a31b      	add	r3, pc, #108	; (adr r3, 80011f0 <SpeedContorol_R+0xf0>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fcbd 	bl	8000b04 <__aeabi_dcmpge>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <SpeedContorol_R+0x9c>
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <SpeedContorol_R+0x10c>)
 8001192:	a417      	add	r4, pc, #92	; (adr r4, 80011f0 <SpeedContorol_R+0xf0>)
 8001194:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001198:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedR_I_buff <= -1000000) speedR_I_buff = -1000000;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <SpeedContorol_R+0x10c>)
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	a315      	add	r3, pc, #84	; (adr r3, 80011f8 <SpeedContorol_R+0xf8>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fca2 	bl	8000af0 <__aeabi_dcmple>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <SpeedContorol_R+0xbe>
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <SpeedContorol_R+0x10c>)
 80011b4:	a410      	add	r4, pc, #64	; (adr r4, 80011f8 <SpeedContorol_R+0xf8>)
 80011b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011ba:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedR_I_buff * IGain )*/;
 80011be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 80011d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011d6:	ec44 3b17 	vmov	d7, r3, r4
}
 80011da:	eeb0 0a47 	vmov.f32	s0, s14
 80011de:	eef0 0a67 	vmov.f32	s1, s15
 80011e2:	372c      	adds	r7, #44	; 0x2c
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011ec:	3f50624d 	.word	0x3f50624d
 80011f0:	00000000 	.word	0x00000000
 80011f4:	412e8480 	.word	0x412e8480
 80011f8:	00000000 	.word	0x00000000
 80011fc:	c12e8480 	.word	0xc12e8480
 8001200:	407f4000 	.word	0x407f4000
 8001204:	20009858 	.word	0x20009858
 8001208:	3fe00000 	.word	0x3fe00000
 800120c:	20009820 	.word	0x20009820

08001210 <SpeedContorol_L>:

double SpeedContorol_L(double Speed_Ref)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af00      	add	r7, sp, #0
 8001216:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 500.0, IGain = 0.0, duty;
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	4c3c      	ldr	r4, [pc, #240]	; (8001310 <SpeedContorol_L+0x100>)
 8001220:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	f04f 0400 	mov.w	r4, #0
 800122c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double delta_speed = Speed_Ref - SL;
 8001230:	4b38      	ldr	r3, [pc, #224]	; (8001314 <SpeedContorol_L+0x104>)
 8001232:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001236:	461a      	mov	r2, r3
 8001238:	4623      	mov	r3, r4
 800123a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123e:	f7ff f823 	bl	8000288 <__aeabi_dsub>
 8001242:	4603      	mov	r3, r0
 8001244:	460c      	mov	r4, r1
 8001246:	e9c7 3404 	strd	r3, r4, [r7, #16]

	speedL_I_buff += delta_speed * TIM05 * 0.001;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <SpeedContorol_L+0x108>)
 8001250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001254:	f7ff f9d0 	bl	80005f8 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4618      	mov	r0, r3
 800125e:	4621      	mov	r1, r4
 8001260:	a325      	add	r3, pc, #148	; (adr r3, 80012f8 <SpeedContorol_L+0xe8>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	4618      	mov	r0, r3
 8001270:	4621      	mov	r1, r4
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <SpeedContorol_L+0x10c>)
 8001274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	f7ff f806 	bl	800028c <__adddf3>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <SpeedContorol_L+0x10c>)
 8001286:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff >= 1000000) speedL_I_buff = 1000000;
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <SpeedContorol_L+0x10c>)
 800128c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001290:	a31b      	add	r3, pc, #108	; (adr r3, 8001300 <SpeedContorol_L+0xf0>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fc35 	bl	8000b04 <__aeabi_dcmpge>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <SpeedContorol_L+0x9c>
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <SpeedContorol_L+0x10c>)
 80012a2:	a417      	add	r4, pc, #92	; (adr r4, 8001300 <SpeedContorol_L+0xf0>)
 80012a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012a8:	e9c2 3400 	strd	r3, r4, [r2]
	if(speedL_I_buff <= -1000000) speedL_I_buff = -1000000;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <SpeedContorol_L+0x10c>)
 80012ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b2:	a315      	add	r3, pc, #84	; (adr r3, 8001308 <SpeedContorol_L+0xf8>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff fc1a 	bl	8000af0 <__aeabi_dcmple>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <SpeedContorol_L+0xbe>
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <SpeedContorol_L+0x10c>)
 80012c4:	a410      	add	r4, pc, #64	; (adr r4, 8001308 <SpeedContorol_L+0xf8>)
 80012c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012ca:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( delta_speed * PGain ) /*+ ( speedL_I_buff * IGain )*/;
 80012ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012d6:	f7ff f98f 	bl	80005f8 <__aeabi_dmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 80012e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012e6:	ec44 3b17 	vmov	d7, r3, r4
}
 80012ea:	eeb0 0a47 	vmov.f32	s0, s14
 80012ee:	eef0 0a67 	vmov.f32	s1, s15
 80012f2:	372c      	adds	r7, #44	; 0x2c
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80012fc:	3f50624d 	.word	0x3f50624d
 8001300:	00000000 	.word	0x00000000
 8001304:	412e8480 	.word	0x412e8480
 8001308:	00000000 	.word	0x00000000
 800130c:	c12e8480 	.word	0xc12e8480
 8001310:	407f4000 	.word	0x407f4000
 8001314:	20009838 	.word	0x20009838
 8001318:	3fe00000 	.word	0x3fe00000
 800131c:	20009860 	.word	0x20009860

08001320 <StearingContorol>:

	return value;
}

double StearingContorol( double Delta )
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0b00 	vstr	d0, [r7]
	double PGain = 0.1, IGain = 0.0, DGain = 0.0, duty;
 800132a:	a461      	add	r4, pc, #388	; (adr r4, 80014b0 <StearingContorol+0x190>)
 800132c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001330:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	f04f 0400 	mov.w	r4, #0
 800133c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	f04f 0400 	mov.w	r4, #0
 8001348:	e9c7 3404 	strd	r3, r4, [r7, #16]

	stear_I_buff += Delta * TIM05 * 0.001;
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <StearingContorol+0x180>)
 8001352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001356:	f7ff f94f 	bl	80005f8 <__aeabi_dmul>
 800135a:	4603      	mov	r3, r0
 800135c:	460c      	mov	r4, r1
 800135e:	4618      	mov	r0, r3
 8001360:	4621      	mov	r1, r4
 8001362:	a349      	add	r3, pc, #292	; (adr r3, 8001488 <StearingContorol+0x168>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	4618      	mov	r0, r3
 8001372:	4621      	mov	r1, r4
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <StearingContorol+0x184>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4623      	mov	r3, r4
 800137e:	f7fe ff85 	bl	800028c <__adddf3>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <StearingContorol+0x184>)
 8001388:	e9c2 3400 	strd	r3, r4, [r2]
	if(stear_I_buff >= 1000000) stear_I_buff = 1000000;
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <StearingContorol+0x184>)
 800138e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001392:	a33f      	add	r3, pc, #252	; (adr r3, 8001490 <StearingContorol+0x170>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff fbb4 	bl	8000b04 <__aeabi_dcmpge>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <StearingContorol+0x8e>
 80013a2:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <StearingContorol+0x184>)
 80013a4:	a43a      	add	r4, pc, #232	; (adr r4, 8001490 <StearingContorol+0x170>)
 80013a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013aa:	e9c2 3400 	strd	r3, r4, [r2]
	if(stear_I_buff <= -1000000) stear_I_buff = -1000000;
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <StearingContorol+0x184>)
 80013b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b4:	a338      	add	r3, pc, #224	; (adr r3, 8001498 <StearingContorol+0x178>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff fb99 	bl	8000af0 <__aeabi_dcmple>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <StearingContorol+0xb0>
 80013c4:	4a37      	ldr	r2, [pc, #220]	; (80014a4 <StearingContorol+0x184>)
 80013c6:	a434      	add	r4, pc, #208	; (adr r4, 8001498 <StearingContorol+0x178>)
 80013c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013cc:	e9c2 3400 	strd	r3, r4, [r2]
	stear_D_buff = (stear_buff - Delta) * TIM05 * 0.001;
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <StearingContorol+0x188>)
 80013d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013da:	f7fe ff55 	bl	8000288 <__aeabi_dsub>
 80013de:	4603      	mov	r3, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	4618      	mov	r0, r3
 80013e4:	4621      	mov	r1, r4
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <StearingContorol+0x180>)
 80013ec:	f7ff f904 	bl	80005f8 <__aeabi_dmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	4618      	mov	r0, r3
 80013f6:	4621      	mov	r1, r4
 80013f8:	a323      	add	r3, pc, #140	; (adr r3, 8001488 <StearingContorol+0x168>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8fb 	bl	80005f8 <__aeabi_dmul>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <StearingContorol+0x18c>)
 8001408:	e9c2 3400 	strd	r3, r4, [r2]
	stear_buff = Delta;
 800140c:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <StearingContorol+0x188>)
 800140e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001412:	e9c2 3400 	strd	r3, r4, [r2]

	duty = ( Delta * PGain ) + ( stear_I_buff * IGain ) - ( stear_D_buff * DGain );
 8001416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800141a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141e:	f7ff f8eb 	bl	80005f8 <__aeabi_dmul>
 8001422:	4603      	mov	r3, r0
 8001424:	460c      	mov	r4, r1
 8001426:	4625      	mov	r5, r4
 8001428:	461c      	mov	r4, r3
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <StearingContorol+0x184>)
 800142c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff24 	bl	800028c <__adddf3>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	4625      	mov	r5, r4
 800144a:	461c      	mov	r4, r3
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <StearingContorol+0x18c>)
 800144e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001452:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001456:	f7ff f8cf 	bl	80005f8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe ff11 	bl	8000288 <__aeabi_dsub>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return duty;
 800146e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001472:	ec44 3b17 	vmov	d7, r3, r4
}
 8001476:	eeb0 0a47 	vmov.f32	s0, s14
 800147a:	eef0 0a67 	vmov.f32	s1, s15
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bdb0      	pop	{r4, r5, r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	d2f1a9fc 	.word	0xd2f1a9fc
 800148c:	3f50624d 	.word	0x3f50624d
 8001490:	00000000 	.word	0x00000000
 8001494:	412e8480 	.word	0x412e8480
 8001498:	00000000 	.word	0x00000000
 800149c:	c12e8480 	.word	0xc12e8480
 80014a0:	3fe00000 	.word	0x3fe00000
 80014a4:	20009868 	.word	0x20009868
 80014a8:	20009850 	.word	0x20009850
 80014ac:	20009848 	.word	0x20009848
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	3fb99999 	.word	0x3fb99999

080014b8 <z_gyro>:
 */

#include "accelerometer.h"

double z_gyro()
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	double z_gyro;
	read_gyro_data();
 80014be:	f7ff fde7 	bl	8001090 <read_gyro_data>
	z_gyro = zg;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <z_gyro+0x88>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f82b 	bl	8000524 <__aeabi_i2d>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	e9c7 3400 	strd	r3, r4, [r7]
	z_gyro = ((0.01)*(z_gyro) + (1.0 - (0.01))* (pre_zg)); // lowpath filter
 80014d6:	a316      	add	r3, pc, #88	; (adr r3, 8001530 <z_gyro+0x78>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e0:	f7ff f88a 	bl	80005f8 <__aeabi_dmul>
 80014e4:	4603      	mov	r3, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4625      	mov	r5, r4
 80014ea:	461c      	mov	r4, r3
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <z_gyro+0x8c>)
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	a311      	add	r3, pc, #68	; (adr r3, 8001538 <z_gyro+0x80>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f87e 	bl	80005f8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fec2 	bl	800028c <__adddf3>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	e9c7 3400 	strd	r3, r4, [r7]
	pre_zg = z_gyro;
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <z_gyro+0x8c>)
 8001512:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001516:	e9c2 3400 	strd	r3, r4, [r2]

	return z_gyro;
 800151a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800151e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001522:	eeb0 0a47 	vmov.f32	s0, s14
 8001526:	eef0 0a67 	vmov.f32	s1, s15
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	47ae147b 	.word	0x47ae147b
 8001534:	3f847ae1 	.word	0x3f847ae1
 8001538:	7ae147ae 	.word	0x7ae147ae
 800153c:	3fefae14 	.word	0x3fefae14
 8001540:	20009808 	.word	0x20009808
 8001544:	20009878 	.word	0x20009878

08001548 <ADCStart>:
 */

#include "analog.h"

void ADCStart()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog_, 6);
 800154c:	2206      	movs	r2, #6
 800154e:	490a      	ldr	r1, [pc, #40]	; (8001578 <ADCStart+0x30>)
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <ADCStart+0x34>)
 8001552:	f002 fe97 	bl	8004284 <HAL_ADC_Start_DMA>
	R_Min = L_Min = 1000;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ADCStart+0x38>)
 8001558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <ADCStart+0x38>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <ADCStart+0x3c>)
 8001564:	6013      	str	r3, [r2, #0]
	R_Max = L_Max = 0;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <ADCStart+0x40>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <ADCStart+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <ADCStart+0x44>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20009908 	.word	0x20009908
 800157c:	20009b18 	.word	0x20009b18
 8001580:	200098b0 	.word	0x200098b0
 8001584:	20009924 	.word	0x20009924
 8001588:	20009918 	.word	0x20009918
 800158c:	20009920 	.word	0x20009920

08001590 <adc_getValues>:

void adc_getValues()
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	if (num >= 9) num = 0;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <adc_getValues+0x7c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b08      	cmp	r3, #8
 800159a:	d902      	bls.n	80015a2 <adc_getValues+0x12>
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <adc_getValues+0x7c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
	line_L1_[num] = analog_[12];
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <adc_getValues+0x7c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1a      	ldr	r2, [pc, #104]	; (8001610 <adc_getValues+0x80>)
 80015a8:	8b11      	ldrh	r1, [r2, #24]
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <adc_getValues+0x84>)
 80015ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_L2_[num] = analog_[3];
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <adc_getValues+0x7c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <adc_getValues+0x80>)
 80015b6:	88d1      	ldrh	r1, [r2, #6]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <adc_getValues+0x88>)
 80015ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_L3_[num] = analog_[4];
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <adc_getValues+0x7c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <adc_getValues+0x80>)
 80015c4:	8911      	ldrh	r1, [r2, #8]
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <adc_getValues+0x8c>)
 80015c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R3_[num] = analog_[15];
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <adc_getValues+0x7c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <adc_getValues+0x80>)
 80015d2:	8bd1      	ldrh	r1, [r2, #30]
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <adc_getValues+0x90>)
 80015d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R2_[num] = analog_[8];
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <adc_getValues+0x7c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <adc_getValues+0x80>)
 80015e0:	8a11      	ldrh	r1, [r2, #16]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <adc_getValues+0x94>)
 80015e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	line_R1_[num] = analog_[9];
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <adc_getValues+0x7c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <adc_getValues+0x80>)
 80015ee:	8a51      	ldrh	r1, [r2, #18]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <adc_getValues+0x98>)
 80015f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	num++;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <adc_getValues+0x7c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <adc_getValues+0x7c>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000991c 	.word	0x2000991c
 8001610:	20009908 	.word	0x20009908
 8001614:	200098f4 	.word	0x200098f4
 8001618:	200098b4 	.word	0x200098b4
 800161c:	200098c8 	.word	0x200098c8
 8001620:	20009888 	.word	0x20009888
 8001624:	200098dc 	.word	0x200098dc
 8001628:	2000989c 	.word	0x2000989c

0800162c <updateValues>:

void updateValues()
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
	uint32_t tmp;
	for(int i = 0; i < 10; i++){
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	e0bb      	b.n	80017b0 <updateValues+0x184>
		for(int j = i+1; j < 10; j++){
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	e0b0      	b.n	80017a2 <updateValues+0x176>
			if(line_L1_[i] > line_L1_[j]){
 8001640:	4aaa      	ldr	r2, [pc, #680]	; (80018ec <updateValues+0x2c0>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001648:	49a8      	ldr	r1, [pc, #672]	; (80018ec <updateValues+0x2c0>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001650:	429a      	cmp	r2, r3
 8001652:	d912      	bls.n	800167a <updateValues+0x4e>
				tmp = line_L1_[i];
 8001654:	4aa5      	ldr	r2, [pc, #660]	; (80018ec <updateValues+0x2c0>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165c:	607b      	str	r3, [r7, #4]
				line_L1_[i] = line_L1_[j];
 800165e:	4aa3      	ldr	r2, [pc, #652]	; (80018ec <updateValues+0x2c0>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001666:	4aa1      	ldr	r2, [pc, #644]	; (80018ec <updateValues+0x2c0>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L1_[j] = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	b299      	uxth	r1, r3
 8001672:	4a9e      	ldr	r2, [pc, #632]	; (80018ec <updateValues+0x2c0>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_L2_[i] > line_L2_[j]){
 800167a:	4a9d      	ldr	r2, [pc, #628]	; (80018f0 <updateValues+0x2c4>)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001682:	499b      	ldr	r1, [pc, #620]	; (80018f0 <updateValues+0x2c4>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800168a:	429a      	cmp	r2, r3
 800168c:	d912      	bls.n	80016b4 <updateValues+0x88>
				tmp = line_L2_[i];
 800168e:	4a98      	ldr	r2, [pc, #608]	; (80018f0 <updateValues+0x2c4>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001696:	607b      	str	r3, [r7, #4]
				line_L2_[i] = line_L2_[j];
 8001698:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <updateValues+0x2c4>)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016a0:	4a93      	ldr	r2, [pc, #588]	; (80018f0 <updateValues+0x2c4>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L2_[j] = tmp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b299      	uxth	r1, r3
 80016ac:	4a90      	ldr	r2, [pc, #576]	; (80018f0 <updateValues+0x2c4>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_L3_[i] > line_L3_[j]){
 80016b4:	4a8f      	ldr	r2, [pc, #572]	; (80018f4 <updateValues+0x2c8>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016bc:	498d      	ldr	r1, [pc, #564]	; (80018f4 <updateValues+0x2c8>)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d912      	bls.n	80016ee <updateValues+0xc2>
				tmp = line_L3_[i];
 80016c8:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <updateValues+0x2c8>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	607b      	str	r3, [r7, #4]
				line_L3_[i] = line_L3_[j];
 80016d2:	4a88      	ldr	r2, [pc, #544]	; (80018f4 <updateValues+0x2c8>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016da:	4a86      	ldr	r2, [pc, #536]	; (80018f4 <updateValues+0x2c8>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_L3_[j] = tmp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	b299      	uxth	r1, r3
 80016e6:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <updateValues+0x2c8>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R3_[i] > line_R3_[j]){
 80016ee:	4a82      	ldr	r2, [pc, #520]	; (80018f8 <updateValues+0x2cc>)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016f6:	4980      	ldr	r1, [pc, #512]	; (80018f8 <updateValues+0x2cc>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d912      	bls.n	8001728 <updateValues+0xfc>
				tmp = line_R3_[i];
 8001702:	4a7d      	ldr	r2, [pc, #500]	; (80018f8 <updateValues+0x2cc>)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800170a:	607b      	str	r3, [r7, #4]
				line_R3_[i] = line_R3_[j];
 800170c:	4a7a      	ldr	r2, [pc, #488]	; (80018f8 <updateValues+0x2cc>)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001714:	4a78      	ldr	r2, [pc, #480]	; (80018f8 <updateValues+0x2cc>)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R3_[j] = tmp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	b299      	uxth	r1, r3
 8001720:	4a75      	ldr	r2, [pc, #468]	; (80018f8 <updateValues+0x2cc>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R2_[i] > line_R2_[j]){
 8001728:	4a74      	ldr	r2, [pc, #464]	; (80018fc <updateValues+0x2d0>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001730:	4972      	ldr	r1, [pc, #456]	; (80018fc <updateValues+0x2d0>)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001738:	429a      	cmp	r2, r3
 800173a:	d912      	bls.n	8001762 <updateValues+0x136>
				tmp = line_R2_[i];
 800173c:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <updateValues+0x2d0>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001744:	607b      	str	r3, [r7, #4]
				line_R2_[i] = line_R2_[j];
 8001746:	4a6d      	ldr	r2, [pc, #436]	; (80018fc <updateValues+0x2d0>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800174e:	4a6b      	ldr	r2, [pc, #428]	; (80018fc <updateValues+0x2d0>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R2_[j] = tmp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b299      	uxth	r1, r3
 800175a:	4a68      	ldr	r2, [pc, #416]	; (80018fc <updateValues+0x2d0>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(line_R1_[i] > line_R1_[j]){
 8001762:	4a67      	ldr	r2, [pc, #412]	; (8001900 <updateValues+0x2d4>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <updateValues+0x2d4>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001772:	429a      	cmp	r2, r3
 8001774:	d912      	bls.n	800179c <updateValues+0x170>
				tmp = line_R1_[i];
 8001776:	4a62      	ldr	r2, [pc, #392]	; (8001900 <updateValues+0x2d4>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177e:	607b      	str	r3, [r7, #4]
				line_R1_[i] = line_R1_[j];
 8001780:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <updateValues+0x2d4>)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001788:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <updateValues+0x2d4>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				line_R1_[j] = tmp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	b299      	uxth	r1, r3
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <updateValues+0x2d4>)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = i+1; j < 10; j++){
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3301      	adds	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	f77f af4b 	ble.w	8001640 <updateValues+0x14>
	for(int i = 0; i < 10; i++){
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b09      	cmp	r3, #9
 80017b4:	f77f af40 	ble.w	8001638 <updateValues+0xc>
			}

		}
	}
	Line_Sens_L = (line_L1_[4] + line_L2_[4] + line_L3_[4]) / 3;
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <updateValues+0x2c0>)
 80017ba:	891b      	ldrh	r3, [r3, #8]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <updateValues+0x2c4>)
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <updateValues+0x2c8>)
 80017c6:	8912      	ldrh	r2, [r2, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <updateValues+0x2d8>)
 80017cc:	fb82 1203 	smull	r1, r2, r2, r3
 80017d0:	17db      	asrs	r3, r3, #31
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017dc:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <updateValues+0x2dc>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
	Line_Sens_R = (line_R1_[4] + line_R2_[4] + line_R3_[4]) / 3;
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <updateValues+0x2d4>)
 80017e4:	891b      	ldrh	r3, [r3, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b44      	ldr	r3, [pc, #272]	; (80018fc <updateValues+0x2d0>)
 80017ea:	891b      	ldrh	r3, [r3, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <updateValues+0x2cc>)
 80017f0:	8912      	ldrh	r2, [r2, #8]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a43      	ldr	r2, [pc, #268]	; (8001904 <updateValues+0x2d8>)
 80017f6:	fb82 1203 	smull	r1, r2, r2, r3
 80017fa:	17db      	asrs	r3, r3, #31
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <updateValues+0x2e0>)
 8001808:	edc3 7a00 	vstr	s15, [r3]

	Line_Calib_R = ((Line_Sens_R - (double)R_Min) / (double)(R_Max - R_Min)) * 1000;
 800180c:	4b3f      	ldr	r3, [pc, #252]	; (800190c <updateValues+0x2e0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe99 	bl	8000548 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <updateValues+0x2e4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe80 	bl	8000524 <__aeabi_i2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe fd2c 	bl	8000288 <__aeabi_dsub>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	4625      	mov	r5, r4
 8001836:	461c      	mov	r4, r3
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <updateValues+0x2e8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <updateValues+0x2e4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe6e 	bl	8000524 <__aeabi_i2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fffc 	bl	800084c <__aeabi_ddiv>
 8001854:	4603      	mov	r3, r0
 8001856:	460c      	mov	r4, r1
 8001858:	4618      	mov	r0, r3
 800185a:	4621      	mov	r1, r4
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <updateValues+0x2ec>)
 8001862:	f7fe fec9 	bl	80005f8 <__aeabi_dmul>
 8001866:	4603      	mov	r3, r0
 8001868:	460c      	mov	r4, r1
 800186a:	4618      	mov	r0, r3
 800186c:	4621      	mov	r1, r4
 800186e:	f7ff f9bb 	bl	8000be8 <__aeabi_d2f>
 8001872:	4602      	mov	r2, r0
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <updateValues+0x2f0>)
 8001876:	601a      	str	r2, [r3, #0]
	Line_Calib_L = ((Line_Sens_L - (double)L_Min) / (double)(L_Max - L_Min)) * 1000;
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <updateValues+0x2dc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe63 	bl	8000548 <__aeabi_f2d>
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <updateValues+0x2f4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe4a 	bl	8000524 <__aeabi_i2d>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcf6 	bl	8000288 <__aeabi_dsub>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4625      	mov	r5, r4
 80018a2:	461c      	mov	r4, r3
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <updateValues+0x2f8>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <updateValues+0x2f4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe ffc6 	bl	800084c <__aeabi_ddiv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	4618      	mov	r0, r3
 80018c6:	4621      	mov	r1, r4
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <updateValues+0x2ec>)
 80018ce:	f7fe fe93 	bl	80005f8 <__aeabi_dmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	4618      	mov	r0, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	f7ff f985 	bl	8000be8 <__aeabi_d2f>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <updateValues+0x2fc>)
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	200098f4 	.word	0x200098f4
 80018f0:	200098b4 	.word	0x200098b4
 80018f4:	200098c8 	.word	0x200098c8
 80018f8:	20009888 	.word	0x20009888
 80018fc:	200098dc 	.word	0x200098dc
 8001900:	2000989c 	.word	0x2000989c
 8001904:	55555556 	.word	0x55555556
 8001908:	20009914 	.word	0x20009914
 800190c:	2000992c 	.word	0x2000992c
 8001910:	20009924 	.word	0x20009924
 8001914:	20009920 	.word	0x20009920
 8001918:	408f4000 	.word	0x408f4000
 800191c:	20009930 	.word	0x20009930
 8001920:	200098b0 	.word	0x200098b0
 8001924:	20009918 	.word	0x20009918
 8001928:	20009928 	.word	0x20009928

0800192c <led_num>:


#include "led.h"

void led_num(uint8_t num)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	// 1000
	if(num >= 8){
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b07      	cmp	r3, #7
 800193a:	d908      	bls.n	800194e <led_num+0x22>
		num = num - 8;
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3b08      	subs	r3, #8
 8001940:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2104      	movs	r1, #4
 8001946:	4821      	ldr	r0, [pc, #132]	; (80019cc <led_num+0xa0>)
 8001948:	f003 fea0 	bl	800568c <HAL_GPIO_WritePin>
 800194c:	e004      	b.n	8001958 <led_num+0x2c>
	}
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2104      	movs	r1, #4
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <led_num+0xa0>)
 8001954:	f003 fe9a 	bl	800568c <HAL_GPIO_WritePin>
	// 0001
	if( !(num % 2) ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <led_num+0x44>
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	4819      	ldr	r0, [pc, #100]	; (80019d0 <led_num+0xa4>)
 800196a:	f003 fe8f 	bl	800568c <HAL_GPIO_WritePin>
 800196e:	e004      	b.n	800197a <led_num+0x4e>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2101      	movs	r1, #1
 8001974:	4816      	ldr	r0, [pc, #88]	; (80019d0 <led_num+0xa4>)
 8001976:	f003 fe89 	bl	800568c <HAL_GPIO_WritePin>

	// 0010
	if( (num/2)%2 ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <led_num+0x6c>
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001990:	480f      	ldr	r0, [pc, #60]	; (80019d0 <led_num+0xa4>)
 8001992:	f003 fe7b 	bl	800568c <HAL_GPIO_WritePin>
 8001996:	e005      	b.n	80019a4 <led_num+0x78>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <led_num+0xa4>)
 80019a0:	f003 fe74 	bl	800568c <HAL_GPIO_WritePin>

	// 0100
	if( num >= 4 ) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d906      	bls.n	80019b8 <led_num+0x8c>
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <led_num+0xa4>)
 80019b2:	f003 fe6b 	bl	800568c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}
 80019b6:	e005      	b.n	80019c4 <led_num+0x98>
	else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019be:	4804      	ldr	r0, [pc, #16]	; (80019d0 <led_num+0xa4>)
 80019c0:	f003 fe64 	bl	800568c <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40020800 	.word	0x40020800

080019d4 <Trace_Init>:
 */

#include "linetrace.h"

void Trace_Init()
{
 80019d4:	b490      	push	{r4, r7}
 80019d6:	af00      	add	r7, sp, #0
	//Time = Start_Flag = 0;
	Speed_Ref = 0;
 80019d8:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <Trace_Init+0x1c>)
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f04f 0400 	mov.w	r4, #0
 80019e2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc90      	pop	{r4, r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20009840 	.word	0x20009840
 80019f4:	00000000 	.word	0x00000000

080019f8 <LineTrace>:

void LineTrace(uint8_t state, uint8_t memory)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]

	degree = Degree_S();
 8001a08:	f001 fb12 	bl	8003030 <Degree_S>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	eef0 7a60 	vmov.f32	s15, s1
 8001a14:	4bbc      	ldr	r3, [pc, #752]	; (8001d08 <LineTrace+0x310>)
 8001a16:	ed83 7b00 	vstr	d7, [r3]
	theta = (180 / M_PI) * degree;
 8001a1a:	4bbb      	ldr	r3, [pc, #748]	; (8001d08 <LineTrace+0x310>)
 8001a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a20:	a3af      	add	r3, pc, #700	; (adr r3, 8001ce0 <LineTrace+0x2e8>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fde7 	bl	80005f8 <__aeabi_dmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	4ab7      	ldr	r2, [pc, #732]	; (8001d0c <LineTrace+0x314>)
 8001a30:	e9c2 3400 	strd	r3, r4, [r2]
	Turning_Radius = 60 / tan(theta);
 8001a34:	4bb5      	ldr	r3, [pc, #724]	; (8001d0c <LineTrace+0x314>)
 8001a36:	ed93 7b00 	vldr	d7, [r3]
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	eef0 0a67 	vmov.f32	s1, s15
 8001a42:	f009 fbe5 	bl	800b210 <tan>
 8001a46:	ec54 3b10 	vmov	r3, r4, d0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	49af      	ldr	r1, [pc, #700]	; (8001d10 <LineTrace+0x318>)
 8001a54:	f7fe fefa 	bl	800084c <__aeabi_ddiv>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4aad      	ldr	r2, [pc, #692]	; (8001d14 <LineTrace+0x31c>)
 8001a5e:	e9c2 3400 	strd	r3, r4, [r2]


	Speed_input_R = SpeedContorol_R( (Turning_Radius - TREAD) * (Speed_Ref / Turning_Radius) );
 8001a62:	4bac      	ldr	r3, [pc, #688]	; (8001d14 <LineTrace+0x31c>)
 8001a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4baa      	ldr	r3, [pc, #680]	; (8001d18 <LineTrace+0x320>)
 8001a6e:	f7fe fc0b 	bl	8000288 <__aeabi_dsub>
 8001a72:	4603      	mov	r3, r0
 8001a74:	460c      	mov	r4, r1
 8001a76:	461d      	mov	r5, r3
 8001a78:	4626      	mov	r6, r4
 8001a7a:	4ba8      	ldr	r3, [pc, #672]	; (8001d1c <LineTrace+0x324>)
 8001a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a80:	4ba4      	ldr	r3, [pc, #656]	; (8001d14 <LineTrace+0x31c>)
 8001a82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	f7fe fedf 	bl	800084c <__aeabi_ddiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	4628      	mov	r0, r5
 8001a98:	4631      	mov	r1, r6
 8001a9a:	f7fe fdad 	bl	80005f8 <__aeabi_dmul>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	ec44 3b17 	vmov	d7, r3, r4
 8001aa6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aaa:	eef0 0a67 	vmov.f32	s1, s15
 8001aae:	f7ff fb27 	bl	8001100 <SpeedContorol_R>
 8001ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab6:	eef0 7a60 	vmov.f32	s15, s1
 8001aba:	4b99      	ldr	r3, [pc, #612]	; (8001d20 <LineTrace+0x328>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]
	Speed_input_L = SpeedContorol_L( (Turning_Radius + TREAD) * (Speed_Ref / Turning_Radius) );
 8001ac0:	4b94      	ldr	r3, [pc, #592]	; (8001d14 <LineTrace+0x31c>)
 8001ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b93      	ldr	r3, [pc, #588]	; (8001d18 <LineTrace+0x320>)
 8001acc:	f7fe fbde 	bl	800028c <__adddf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	4626      	mov	r6, r4
 8001ad8:	4b90      	ldr	r3, [pc, #576]	; (8001d1c <LineTrace+0x324>)
 8001ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ade:	4b8d      	ldr	r3, [pc, #564]	; (8001d14 <LineTrace+0x31c>)
 8001ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	f7fe feb0 	bl	800084c <__aeabi_ddiv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	460c      	mov	r4, r1
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	4628      	mov	r0, r5
 8001af6:	4631      	mov	r1, r6
 8001af8:	f7fe fd7e 	bl	80005f8 <__aeabi_dmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	ec44 3b17 	vmov	d7, r3, r4
 8001b04:	eeb0 0a47 	vmov.f32	s0, s14
 8001b08:	eef0 0a67 	vmov.f32	s1, s15
 8001b0c:	f7ff fb80 	bl	8001210 <SpeedContorol_L>
 8001b10:	eeb0 7a40 	vmov.f32	s14, s0
 8001b14:	eef0 7a60 	vmov.f32	s15, s1
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <LineTrace+0x32c>)
 8001b1a:	ed83 7b00 	vstr	d7, [r3]
	Stearing_input = StearingContorol( Line_Calib_R - Line_Calib_L );
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <LineTrace+0x330>)
 8001b20:	ed93 7a00 	vldr	s14, [r3]
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <LineTrace+0x334>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	ee17 0a90 	vmov	r0, s15
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4603      	mov	r3, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	ec44 3b10 	vmov	d0, r3, r4
 8001b3e:	f7ff fbef 	bl	8001320 <StearingContorol>
 8001b42:	eeb0 7a40 	vmov.f32	s14, s0
 8001b46:	eef0 7a60 	vmov.f32	s15, s1
 8001b4a:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <LineTrace+0x338>)
 8001b4c:	ed83 7b00 	vstr	d7, [r3]

	switch(state){
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80bd 	bhi.w	8001cd2 <LineTrace+0x2da>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <LineTrace+0x168>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b91 	.word	0x08001b91
 8001b68:	08001c07 	.word	0x08001c07
 8001b6c:	08001c59 	.word	0x08001c59
		case 0:
			motor_R(0);
 8001b70:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8001ce8 <LineTrace+0x2f0>
 8001b74:	f001 f918 	bl	8002da8 <motor_R>
			motor_L(0);
 8001b78:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8001ce8 <LineTrace+0x2f0>
 8001b7c:	f001 f95a 	bl	8002e34 <motor_L>
			Speed_Ref = 0;
 8001b80:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <LineTrace+0x324>)
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f04f 0400 	mov.w	r4, #0
 8001b8a:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001b8e:	e0a1      	b.n	8001cd4 <LineTrace+0x2dc>
		case 1:
			motor_R( Speed_input_R );
 8001b90:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <LineTrace+0x328>)
 8001b92:	ed93 7b00 	vldr	d7, [r3]
 8001b96:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9a:	eef0 0a67 	vmov.f32	s1, s15
 8001b9e:	f001 f903 	bl	8002da8 <motor_R>
			motor_L( Speed_input_L );
 8001ba2:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <LineTrace+0x32c>)
 8001ba4:	ed93 7b00 	vldr	d7, [r3]
 8001ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bac:	eef0 0a67 	vmov.f32	s1, s15
 8001bb0:	f001 f940 	bl	8002e34 <motor_L>
			motor_S( Stearing_input );
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <LineTrace+0x338>)
 8001bb6:	ed93 7b00 	vldr	d7, [r3]
 8001bba:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbe:	eef0 0a67 	vmov.f32	s1, s15
 8001bc2:	f001 f97d 	bl	8002ec0 <motor_S>
			Speed_Ref += 0.002;
 8001bc6:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <LineTrace+0x324>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	a348      	add	r3, pc, #288	; (adr r3, 8001cf0 <LineTrace+0x2f8>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb5b 	bl	800028c <__adddf3>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <LineTrace+0x324>)
 8001bdc:	e9c2 3400 	strd	r3, r4, [r2]
			if(Speed_Ref >= 1.8) Speed_Ref = 1.8;
 8001be0:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <LineTrace+0x324>)
 8001be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be6:	a344      	add	r3, pc, #272	; (adr r3, 8001cf8 <LineTrace+0x300>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe ff8a 	bl	8000b04 <__aeabi_dcmpge>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d100      	bne.n	8001bf8 <LineTrace+0x200>
			break;
 8001bf6:	e06d      	b.n	8001cd4 <LineTrace+0x2dc>
			if(Speed_Ref >= 1.8) Speed_Ref = 1.8;
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <LineTrace+0x324>)
 8001bfa:	a43f      	add	r4, pc, #252	; (adr r4, 8001cf8 <LineTrace+0x300>)
 8001bfc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c00:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001c04:	e066      	b.n	8001cd4 <LineTrace+0x2dc>
		case 2:
			motor_R( Speed_input_R );
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <LineTrace+0x328>)
 8001c08:	ed93 7b00 	vldr	d7, [r3]
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f001 f8c8 	bl	8002da8 <motor_R>
			motor_L( Speed_input_L );
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <LineTrace+0x32c>)
 8001c1a:	ed93 7b00 	vldr	d7, [r3]
 8001c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c22:	eef0 0a67 	vmov.f32	s1, s15
 8001c26:	f001 f905 	bl	8002e34 <motor_L>
			motor_S( Stearing_input );
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <LineTrace+0x338>)
 8001c2c:	ed93 7b00 	vldr	d7, [r3]
 8001c30:	eeb0 0a47 	vmov.f32	s0, s14
 8001c34:	eef0 0a67 	vmov.f32	s1, s15
 8001c38:	f001 f942 	bl	8002ec0 <motor_S>
			Speed_Ref = route_calculation(memory);
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 ff42 	bl	8002ac8 <route_calculation>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc6c 	bl	8000524 <__aeabi_i2d>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	460c      	mov	r4, r1
 8001c50:	4a32      	ldr	r2, [pc, #200]	; (8001d1c <LineTrace+0x324>)
 8001c52:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001c56:	e03d      	b.n	8001cd4 <LineTrace+0x2dc>
		case 3:
			motor_R( Speed_input_R );
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <LineTrace+0x328>)
 8001c5a:	ed93 7b00 	vldr	d7, [r3]
 8001c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c62:	eef0 0a67 	vmov.f32	s1, s15
 8001c66:	f001 f89f 	bl	8002da8 <motor_R>
			motor_L( Speed_input_L );
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <LineTrace+0x32c>)
 8001c6c:	ed93 7b00 	vldr	d7, [r3]
 8001c70:	eeb0 0a47 	vmov.f32	s0, s14
 8001c74:	eef0 0a67 	vmov.f32	s1, s15
 8001c78:	f001 f8dc 	bl	8002e34 <motor_L>
			motor_S( Stearing_input );
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <LineTrace+0x338>)
 8001c7e:	ed93 7b00 	vldr	d7, [r3]
 8001c82:	eeb0 0a47 	vmov.f32	s0, s14
 8001c86:	eef0 0a67 	vmov.f32	s1, s15
 8001c8a:	f001 f919 	bl	8002ec0 <motor_S>
			Speed_Ref -= 0.004;
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <LineTrace+0x324>)
 8001c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c94:	a31a      	add	r3, pc, #104	; (adr r3, 8001d00 <LineTrace+0x308>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe faf5 	bl	8000288 <__aeabi_dsub>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460c      	mov	r4, r1
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <LineTrace+0x324>)
 8001ca4:	e9c2 3400 	strd	r3, r4, [r2]
			if(Speed_Ref <= 0) Speed_Ref = 0.0;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <LineTrace+0x324>)
 8001caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f7fe ff1b 	bl	8000af0 <__aeabi_dcmple>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d100      	bne.n	8001cc2 <LineTrace+0x2ca>
			break;
 8001cc0:	e008      	b.n	8001cd4 <LineTrace+0x2dc>
			if(Speed_Ref <= 0) Speed_Ref = 0.0;
 8001cc2:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <LineTrace+0x324>)
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f04f 0400 	mov.w	r4, #0
 8001ccc:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8001cd0:	e000      	b.n	8001cd4 <LineTrace+0x2dc>
		default:
			break;
 8001cd2:	bf00      	nop
	}

}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	1a63c1f8 	.word	0x1a63c1f8
 8001ce4:	404ca5dc 	.word	0x404ca5dc
	...
 8001cf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cf4:	3f60624d 	.word	0x3f60624d
 8001cf8:	cccccccd 	.word	0xcccccccd
 8001cfc:	3ffccccc 	.word	0x3ffccccc
 8001d00:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d04:	3f70624d 	.word	0x3f70624d
 8001d08:	20009950 	.word	0x20009950
 8001d0c:	20009940 	.word	0x20009940
 8001d10:	404e0000 	.word	0x404e0000
 8001d14:	20009948 	.word	0x20009948
 8001d18:	40490000 	.word	0x40490000
 8001d1c:	20009840 	.word	0x20009840
 8001d20:	20009958 	.word	0x20009958
 8001d24:	20009960 	.word	0x20009960
 8001d28:	20009930 	.word	0x20009930
 8001d2c:	20009928 	.word	0x20009928
 8001d30:	20009938 	.word	0x20009938

08001d34 <_write>:
WRITE_DATA_SECTOR11 write_data_sector11 = {{0}};
READ_DATA_SECTOR11 read_data_sector11 = {{0}};
WRITE_DATA_SECTOR10 write_data_sector10 = {{0}};
READ_DATA_SECTOR10 read_data_sector10 = {{0}};

int _write(int file, char *ptr, int len) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	4804      	ldr	r0, [pc, #16]	; (8001d5c <_write+0x28>)
 8001d4c:	f006 f865 	bl	8007e1a <HAL_UART_Transmit>
	return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20009b70 	.word	0x20009b70

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d64:	f002 f9b6 	bl	80040d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d68:	f000 f84c 	bl	8001e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6c:	f000 fdca 	bl	8002904 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d70:	f000 fda8 	bl	80028c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d74:	f000 f8c8 	bl	8001f08 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d78:	f000 f95e 	bl	8002038 <MX_I2C1_Init>
  MX_RTC_Init();
 8001d7c:	f000 f98a 	bl	8002094 <MX_RTC_Init>
  MX_SPI1_Init();
 8001d80:	f000 f9ae 	bl	80020e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001d84:	f000 f9e2 	bl	800214c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d88:	f000 fa62 	bl	8002250 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d8c:	f000 fab4 	bl	80022f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d90:	f000 fb06 	bl	80023a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d94:	f000 fb58 	bl	8002448 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001d98:	f000 fc18 	bl	80025cc <MX_TIM8_Init>
  MX_TIM9_Init();
 8001d9c:	f000 fc98 	bl	80026d0 <MX_TIM9_Init>
  MX_TIM10_Init();
 8001da0:	f000 fcda 	bl	8002758 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001da4:	f000 fcfc 	bl	80027a0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001da8:	f000 fd1e 	bl	80027e8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001dac:	f000 fd60 	bl	8002870 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001db0:	f000 fba2 	bl	80024f8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001db4:	f000 fbd4 	bl	8002560 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <main+0x8c>)
 8001dba:	f005 f93c 	bl	8007036 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001dbe:	480c      	ldr	r0, [pc, #48]	; (8001df0 <main+0x90>)
 8001dc0:	f005 f939 	bl	8007036 <HAL_TIM_Base_Start_IT>
  init();
 8001dc4:	f001 ffac 	bl	8003d20 <init>
  // reload flash data
  loadFlash(start_address_sector11, (uint8_t*)&read_data_sector11, sizeof(READ_DATA_SECTOR11));
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <main+0x94>)
 8001dca:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8001dce:	490a      	ldr	r1, [pc, #40]	; (8001df8 <main+0x98>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 ffb1 	bl	8002d38 <loadFlash>
  loadFlash(start_address_sector10, (uint8_t*)&read_data_sector10, sizeof(READ_DATA_SECTOR10));
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <main+0x9c>)
 8001dd8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001ddc:	4908      	ldr	r1, [pc, #32]	; (8001e00 <main+0xa0>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 ffaa 	bl	8002d38 <loadFlash>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_loop();
 8001de4:	f001 ffba 	bl	8003d5c <main_loop>
 8001de8:	e7fc      	b.n	8001de4 <main+0x84>
 8001dea:	bf00      	nop
 8001dec:	20009c78 	.word	0x20009c78
 8001df0:	20009e20 	.word	0x20009e20
 8001df4:	080e0000 	.word	0x080e0000
 8001df8:	20003a3c 	.word	0x20003a3c
 8001dfc:	080c0000 	.word	0x080c0000
 8001e00:	2000853c 	.word	0x2000853c

08001e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b098      	sub	sp, #96	; 0x60
 8001e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	2230      	movs	r2, #48	; 0x30
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f006 fed5 	bl	8008bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <SystemClock_Config+0xfc>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <SystemClock_Config+0xfc>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <SystemClock_Config+0xfc>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <SystemClock_Config+0x100>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <SystemClock_Config+0x100>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <SystemClock_Config+0x100>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e6e:	2309      	movs	r3, #9
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e86:	2319      	movs	r3, #25
 8001e88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e8a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fd47 	bl	8005930 <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ea8:	f000 fe0a 	bl	8002ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	2105      	movs	r1, #5
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 ffa0 	bl	8005e10 <HAL_RCC_ClockConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001ed6:	f000 fdf3 	bl	8002ac0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eda:	2302      	movs	r3, #2
 8001edc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 f95d 	bl	80061a8 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001ef4:	f000 fde4 	bl	8002ac0 <Error_Handler>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3760      	adds	r7, #96	; 0x60
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000

08001f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <MX_ADC1_Init+0x124>)
 8001f1c:	4a44      	ldr	r2, [pc, #272]	; (8002030 <MX_ADC1_Init+0x128>)
 8001f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f20:	4b42      	ldr	r3, [pc, #264]	; (800202c <MX_ADC1_Init+0x124>)
 8001f22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <MX_ADC1_Init+0x124>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <MX_ADC1_Init+0x124>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <MX_ADC1_Init+0x124>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	; (800202c <MX_ADC1_Init+0x124>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <MX_ADC1_Init+0x124>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <MX_ADC1_Init+0x124>)
 8001f4a:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <MX_ADC1_Init+0x12c>)
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <MX_ADC1_Init+0x124>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <MX_ADC1_Init+0x124>)
 8001f56:	2206      	movs	r2, #6
 8001f58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <MX_ADC1_Init+0x124>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <MX_ADC1_Init+0x124>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f68:	4830      	ldr	r0, [pc, #192]	; (800202c <MX_ADC1_Init+0x124>)
 8001f6a:	f002 f947 	bl	80041fc <HAL_ADC_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f74:	f000 fda4 	bl	8002ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001f80:	2301      	movs	r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	4619      	mov	r1, r3
 8001f88:	4828      	ldr	r0, [pc, #160]	; (800202c <MX_ADC1_Init+0x124>)
 8001f8a:	f002 fa8b 	bl	80044a4 <HAL_ADC_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f94:	f000 fd94 	bl	8002ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4821      	ldr	r0, [pc, #132]	; (800202c <MX_ADC1_Init+0x124>)
 8001fa6:	f002 fa7d 	bl	80044a4 <HAL_ADC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001fb0:	f000 fd86 	bl	8002ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481a      	ldr	r0, [pc, #104]	; (800202c <MX_ADC1_Init+0x124>)
 8001fc2:	f002 fa6f 	bl	80044a4 <HAL_ADC_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001fcc:	f000 fd78 	bl	8002ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fd0:	2309      	movs	r3, #9
 8001fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd8:	463b      	mov	r3, r7
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4813      	ldr	r0, [pc, #76]	; (800202c <MX_ADC1_Init+0x124>)
 8001fde:	f002 fa61 	bl	80044a4 <HAL_ADC_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001fe8:	f000 fd6a 	bl	8002ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001fec:	230c      	movs	r3, #12
 8001fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <MX_ADC1_Init+0x124>)
 8001ffa:	f002 fa53 	bl	80044a4 <HAL_ADC_ConfigChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002004:	f000 fd5c 	bl	8002ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002008:	230f      	movs	r3, #15
 800200a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800200c:	2306      	movs	r3, #6
 800200e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002010:	463b      	mov	r3, r7
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_ADC1_Init+0x124>)
 8002016:	f002 fa45 	bl	80044a4 <HAL_ADC_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002020:	f000 fd4e 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20009b18 	.word	0x20009b18
 8002030:	40012000 	.word	0x40012000
 8002034:	0f000001 	.word	0x0f000001

08002038 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_I2C1_Init+0x50>)
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <MX_I2C1_Init+0x54>)
 8002040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_I2C1_Init+0x50>)
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <MX_I2C1_Init+0x58>)
 8002046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_I2C1_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_I2C1_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_I2C1_Init+0x50>)
 8002056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MX_I2C1_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_I2C1_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <MX_I2C1_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_I2C1_Init+0x50>)
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <MX_I2C1_Init+0x50>)
 8002076:	f003 fb23 	bl	80056c0 <HAL_I2C_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002080:	f000 fd1e 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200099e8 	.word	0x200099e8
 800208c:	40005400 	.word	0x40005400
 8002090:	000186a0 	.word	0x000186a0

08002094 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_RTC_Init+0x44>)
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <MX_RTC_Init+0x48>)
 800209c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_RTC_Init+0x44>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_RTC_Init+0x44>)
 80020a6:	227f      	movs	r2, #127	; 0x7f
 80020a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_RTC_Init+0x44>)
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_RTC_Init+0x44>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_RTC_Init+0x44>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_RTC_Init+0x44>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_RTC_Init+0x44>)
 80020c4:	f004 f952 	bl	800636c <HAL_RTC_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80020ce:	f000 fcf7 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20009c50 	.word	0x20009c50
 80020dc:	40002800 	.word	0x40002800

080020e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <MX_SPI1_Init+0x64>)
 80020e6:	4a18      	ldr	r2, [pc, #96]	; (8002148 <MX_SPI1_Init+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MX_SPI1_Init+0x64>)
 80020ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_SPI1_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <MX_SPI1_Init+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <MX_SPI1_Init+0x64>)
 8002100:	2202      	movs	r2, #2
 8002102:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <MX_SPI1_Init+0x64>)
 8002106:	2201      	movs	r2, #1
 8002108:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <MX_SPI1_Init+0x64>)
 800210c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002110:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_SPI1_Init+0x64>)
 8002114:	2228      	movs	r2, #40	; 0x28
 8002116:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <MX_SPI1_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_SPI1_Init+0x64>)
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <MX_SPI1_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_SPI1_Init+0x64>)
 800212c:	220a      	movs	r2, #10
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <MX_SPI1_Init+0x64>)
 8002132:	f004 fa00 	bl	8006536 <HAL_SPI_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800213c:	f000 fcc0 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20009d48 	.word	0x20009d48
 8002148:	40013000 	.word	0x40013000

0800214c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b092      	sub	sp, #72	; 0x48
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
 800216c:	615a      	str	r2, [r3, #20]
 800216e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2220      	movs	r2, #32
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f006 fd23 	bl	8008bc2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <MX_TIM1_Init+0xfc>)
 800217e:	4a33      	ldr	r2, [pc, #204]	; (800224c <MX_TIM1_Init+0x100>)
 8002180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <MX_TIM1_Init+0xfc>)
 8002184:	2253      	movs	r2, #83	; 0x53
 8002186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <MX_TIM1_Init+0xfc>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <MX_TIM1_Init+0xfc>)
 8002190:	2209      	movs	r2, #9
 8002192:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <MX_TIM1_Init+0xfc>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <MX_TIM1_Init+0xfc>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <MX_TIM1_Init+0xfc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021a6:	4828      	ldr	r0, [pc, #160]	; (8002248 <MX_TIM1_Init+0xfc>)
 80021a8:	f004 ff69 	bl	800707e <HAL_TIM_PWM_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80021b2:	f000 fc85 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021c2:	4619      	mov	r1, r3
 80021c4:	4820      	ldr	r0, [pc, #128]	; (8002248 <MX_TIM1_Init+0xfc>)
 80021c6:	f005 fcf9 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80021d0:	f000 fc76 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d4:	2360      	movs	r3, #96	; 0x60
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4813      	ldr	r0, [pc, #76]	; (8002248 <MX_TIM1_Init+0xfc>)
 80021fa:	f005 f97b 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002204:	f000 fc5c 	bl	8002ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800221c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002220:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <MX_TIM1_Init+0xfc>)
 800222c:	f005 fd42 	bl	8007cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002236:	f000 fc43 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <MX_TIM1_Init+0xfc>)
 800223c:	f001 fb18 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8002240:	bf00      	nop
 8002242:	3748      	adds	r7, #72	; 0x48
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20009cb8 	.word	0x20009cb8
 800224c:	40010000 	.word	0x40010000

08002250 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	2224      	movs	r2, #36	; 0x24
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f006 fcaf 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <MX_TIM2_Init+0xa4>)
 800226e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <MX_TIM2_Init+0xa4>)
 8002276:	2200      	movs	r2, #0
 8002278:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <MX_TIM2_Init+0xa4>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <MX_TIM2_Init+0xa4>)
 8002282:	f04f 32ff 	mov.w	r2, #4294967295
 8002286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <MX_TIM2_Init+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <MX_TIM2_Init+0xa4>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002294:	2303      	movs	r3, #3
 8002296:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ac:	2301      	movs	r3, #1
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4619      	mov	r1, r3
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_TIM2_Init+0xa4>)
 80022c0:	f004 ff46 	bl	8007150 <HAL_TIM_Encoder_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022ca:	f000 fbf9 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <MX_TIM2_Init+0xa4>)
 80022dc:	f005 fc6e 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022e6:	f000 fbeb 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	3730      	adds	r7, #48	; 0x30
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20009da0 	.word	0x20009da0

080022f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	; 0x30
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2224      	movs	r2, #36	; 0x24
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f006 fc5b 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002316:	4a21      	ldr	r2, [pc, #132]	; (800239c <MX_TIM3_Init+0xa4>)
 8002318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_TIM3_Init+0xa0>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800233a:	2303      	movs	r3, #3
 800233c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002352:	2301      	movs	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002366:	f004 fef3 	bl	8007150 <HAL_TIM_Encoder_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002370:	f000 fba6 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_TIM3_Init+0xa0>)
 8002382:	f005 fc1b 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800238c:	f000 fb98 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20009ad4 	.word	0x20009ad4
 800239c:	40000400 	.word	0x40000400

080023a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f006 fc07 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <MX_TIM4_Init+0xa0>)
 80023be:	4a21      	ldr	r2, [pc, #132]	; (8002444 <MX_TIM4_Init+0xa4>)
 80023c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_TIM4_Init+0xa0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <MX_TIM4_Init+0xa0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_TIM4_Init+0xa0>)
 80023d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_TIM4_Init+0xa0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MX_TIM4_Init+0xa0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023e2:	2303      	movs	r3, #3
 80023e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023ea:	2301      	movs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4619      	mov	r1, r3
 800240c:	480c      	ldr	r0, [pc, #48]	; (8002440 <MX_TIM4_Init+0xa0>)
 800240e:	f004 fe9f 	bl	8007150 <HAL_TIM_Encoder_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002418:	f000 fb52 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_TIM4_Init+0xa0>)
 800242a:	f005 fbc7 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002434:	f000 fb44 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	3730      	adds	r7, #48	; 0x30
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200099a8 	.word	0x200099a8
 8002444:	40000800 	.word	0x40000800

08002448 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	615a      	str	r2, [r3, #20]
 8002468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <MX_TIM5_Init+0xa8>)
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <MX_TIM5_Init+0xac>)
 800246e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 20;
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <MX_TIM5_Init+0xa8>)
 8002472:	2214      	movs	r2, #20
 8002474:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <MX_TIM5_Init+0xa8>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19;
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <MX_TIM5_Init+0xa8>)
 800247e:	2213      	movs	r2, #19
 8002480:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <MX_TIM5_Init+0xa8>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <MX_TIM5_Init+0xa8>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800248e:	4818      	ldr	r0, [pc, #96]	; (80024f0 <MX_TIM5_Init+0xa8>)
 8002490:	f004 fdf5 	bl	800707e <HAL_TIM_PWM_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800249a:	f000 fb11 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024a6:	f107 0320 	add.w	r3, r7, #32
 80024aa:	4619      	mov	r1, r3
 80024ac:	4810      	ldr	r0, [pc, #64]	; (80024f0 <MX_TIM5_Init+0xa8>)
 80024ae:	f005 fb85 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80024b8:	f000 fb02 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024bc:	2360      	movs	r3, #96	; 0x60
 80024be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4807      	ldr	r0, [pc, #28]	; (80024f0 <MX_TIM5_Init+0xa8>)
 80024d4:	f005 f80e 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80024de:	f000 faef 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024e2:	4803      	ldr	r0, [pc, #12]	; (80024f0 <MX_TIM5_Init+0xa8>)
 80024e4:	f001 f9c4 	bl	8003870 <HAL_TIM_MspPostInit>

}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20009a94 	.word	0x20009a94
 80024f4:	40000c00 	.word	0x40000c00

080024f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fe:	463b      	mov	r3, r7
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_TIM6_Init+0x60>)
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <MX_TIM6_Init+0x64>)
 800250a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_TIM6_Init+0x60>)
 800250e:	2253      	movs	r2, #83	; 0x53
 8002510:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_TIM6_Init+0x60>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_TIM6_Init+0x60>)
 800251a:	2231      	movs	r2, #49	; 0x31
 800251c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_TIM6_Init+0x60>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <MX_TIM6_Init+0x60>)
 8002526:	f004 fd5b 	bl	8006fe0 <HAL_TIM_Base_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002530:	f000 fac6 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_TIM6_Init+0x60>)
 8002542:	f005 fb3b 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800254c:	f000 fab8 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20009c78 	.word	0x20009c78
 800255c:	40001000 	.word	0x40001000

08002560 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002566:	463b      	mov	r3, r7
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <MX_TIM7_Init+0x68>)
 8002572:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002576:	2253      	movs	r2, #83	; 0x53
 8002578:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_TIM7_Init+0x64>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002582:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002586:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_TIM7_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800258e:	480d      	ldr	r0, [pc, #52]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002590:	f004 fd26 	bl	8006fe0 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800259a:	f000 fa91 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025a6:	463b      	mov	r3, r7
 80025a8:	4619      	mov	r1, r3
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <MX_TIM7_Init+0x64>)
 80025ac:	f005 fb06 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80025b6:	f000 fa83 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20009e20 	.word	0x20009e20
 80025c8:	40001400 	.word	0x40001400

080025cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b092      	sub	sp, #72	; 0x48
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
 80025ec:	615a      	str	r2, [r3, #20]
 80025ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2220      	movs	r2, #32
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f006 fae3 	bl	8008bc2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025fc:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <MX_TIM8_Init+0xfc>)
 80025fe:	4a33      	ldr	r2, [pc, #204]	; (80026cc <MX_TIM8_Init+0x100>)
 8002600:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <MX_TIM8_Init+0xfc>)
 8002604:	2253      	movs	r2, #83	; 0x53
 8002606:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <MX_TIM8_Init+0xfc>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9;
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <MX_TIM8_Init+0xfc>)
 8002610:	2209      	movs	r2, #9
 8002612:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <MX_TIM8_Init+0xfc>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <MX_TIM8_Init+0xfc>)
 800261c:	2200      	movs	r2, #0
 800261e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <MX_TIM8_Init+0xfc>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002626:	4828      	ldr	r0, [pc, #160]	; (80026c8 <MX_TIM8_Init+0xfc>)
 8002628:	f004 fd29 	bl	800707e <HAL_TIM_PWM_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8002632:	f000 fa45 	bl	8002ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800263e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002642:	4619      	mov	r1, r3
 8002644:	4820      	ldr	r0, [pc, #128]	; (80026c8 <MX_TIM8_Init+0xfc>)
 8002646:	f005 fab9 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002650:	f000 fa36 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002654:	2360      	movs	r3, #96	; 0x60
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002660:	2300      	movs	r3, #0
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002674:	2200      	movs	r2, #0
 8002676:	4619      	mov	r1, r3
 8002678:	4813      	ldr	r0, [pc, #76]	; (80026c8 <MX_TIM8_Init+0xfc>)
 800267a:	f004 ff3b 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8002684:	f000 fa1c 	bl	8002ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800269c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <MX_TIM8_Init+0xfc>)
 80026ac:	f005 fb02 	bl	8007cb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80026b6:	f000 fa03 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026ba:	4803      	ldr	r0, [pc, #12]	; (80026c8 <MX_TIM8_Init+0xfc>)
 80026bc:	f001 f8d8 	bl	8003870 <HAL_TIM_MspPostInit>

}
 80026c0:	bf00      	nop
 80026c2:	3748      	adds	r7, #72	; 0x48
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20009968 	.word	0x20009968
 80026cc:	40010400 	.word	0x40010400

080026d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
 80026e4:	615a      	str	r2, [r3, #20]
 80026e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_TIM9_Init+0x80>)
 80026ea:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <MX_TIM9_Init+0x84>)
 80026ec:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <MX_TIM9_Init+0x80>)
 80026f0:	2253      	movs	r2, #83	; 0x53
 80026f2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <MX_TIM9_Init+0x80>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <MX_TIM9_Init+0x80>)
 80026fc:	2213      	movs	r2, #19
 80026fe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <MX_TIM9_Init+0x80>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <MX_TIM9_Init+0x80>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800270c:	4810      	ldr	r0, [pc, #64]	; (8002750 <MX_TIM9_Init+0x80>)
 800270e:	f004 fcb6 	bl	800707e <HAL_TIM_PWM_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8002718:	f000 f9d2 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271c:	2360      	movs	r3, #96	; 0x60
 800271e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM9_Init+0x80>)
 8002734:	f004 fede 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 800273e:	f000 f9bf 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM9_Init+0x80>)
 8002744:	f001 f894 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20009cfc 	.word	0x20009cfc
 8002754:	40014000 	.word	0x40014000

08002758 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_TIM10_Init+0x40>)
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <MX_TIM10_Init+0x44>)
 8002760:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_TIM10_Init+0x40>)
 8002764:	2200      	movs	r2, #0
 8002766:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_TIM10_Init+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <MX_TIM10_Init+0x40>)
 8002770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002774:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_TIM10_Init+0x40>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_TIM10_Init+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_TIM10_Init+0x40>)
 8002784:	f004 fc2c 	bl	8006fe0 <HAL_TIM_Base_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800278e:	f000 f997 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20009a3c 	.word	0x20009a3c
 800279c:	40014400 	.word	0x40014400

080027a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027a6:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <MX_TIM11_Init+0x44>)
 80027a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027bc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80027ca:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_TIM11_Init+0x40>)
 80027cc:	f004 fc08 	bl	8006fe0 <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80027d6:	f000 f973 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20009bb0 	.word	0x20009bb0
 80027e4:	40014800 	.word	0x40014800

080027e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
 80027fc:	615a      	str	r2, [r3, #20]
 80027fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <MX_TIM12_Init+0x80>)
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <MX_TIM12_Init+0x84>)
 8002804:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <MX_TIM12_Init+0x80>)
 8002808:	2229      	movs	r2, #41	; 0x29
 800280a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <MX_TIM12_Init+0x80>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 19;
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <MX_TIM12_Init+0x80>)
 8002814:	2213      	movs	r2, #19
 8002816:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <MX_TIM12_Init+0x80>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_TIM12_Init+0x80>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <MX_TIM12_Init+0x80>)
 8002826:	f004 fc2a 	bl	800707e <HAL_TIM_PWM_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002830:	f000 f946 	bl	8002ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002834:	2360      	movs	r3, #96	; 0x60
 8002836:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2200      	movs	r2, #0
 8002848:	4619      	mov	r1, r3
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <MX_TIM12_Init+0x80>)
 800284c:	f004 fe52 	bl	80074f4 <HAL_TIM_PWM_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002856:	f000 f933 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800285a:	4803      	ldr	r0, [pc, #12]	; (8002868 <MX_TIM12_Init+0x80>)
 800285c:	f001 f808 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20009de0 	.word	0x20009de0
 800286c:	40001800 	.word	0x40001800

08002870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_USART1_UART_Init+0x50>)
 8002878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800287c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <MX_USART1_UART_Init+0x4c>)
 80028a8:	f005 fa6a 	bl	8007d80 <HAL_UART_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028b2:	f000 f905 	bl	8002ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20009b70 	.word	0x20009b70
 80028c0:	40011000 	.word	0x40011000

080028c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_DMA_Init+0x3c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <MX_DMA_Init+0x3c>)
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_DMA_Init+0x3c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2038      	movs	r0, #56	; 0x38
 80028ec:	f002 f955 	bl	8004b9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028f0:	2038      	movs	r0, #56	; 0x38
 80028f2:	f002 f96e 	bl	8004bd2 <HAL_NVIC_EnableIRQ>

}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <MX_GPIO_Init+0x174>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <MX_GPIO_Init+0x174>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a47      	ldr	r2, [pc, #284]	; (8002a78 <MX_GPIO_Init+0x174>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a39      	ldr	r2, [pc, #228]	; (8002a78 <MX_GPIO_Init+0x174>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <MX_GPIO_Init+0x174>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	f242 2118 	movw	r1, #8728	; 0x2218
 80029ac:	4833      	ldr	r0, [pc, #204]	; (8002a7c <MX_GPIO_Init+0x178>)
 80029ae:	f002 fe6d 	bl	800568c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b8:	4831      	ldr	r0, [pc, #196]	; (8002a80 <MX_GPIO_Init+0x17c>)
 80029ba:	f002 fe67 	bl	800568c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c4:	482f      	ldr	r0, [pc, #188]	; (8002a84 <MX_GPIO_Init+0x180>)
 80029c6:	f002 fe61 	bl	800568c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9;
 80029ca:	f242 2318 	movw	r3, #8728	; 0x2218
 80029ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d0:	2301      	movs	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4826      	ldr	r0, [pc, #152]	; (8002a7c <MX_GPIO_Init+0x178>)
 80029e4:	f002 fca0 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC0 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
 80029e8:	f645 4301 	movw	r3, #23553	; 0x5c01
 80029ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	481f      	ldr	r0, [pc, #124]	; (8002a7c <MX_GPIO_Init+0x178>)
 80029fe:	f002 fc93 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002a02:	f640 4304 	movw	r3, #3076	; 0xc04
 8002a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	481a      	ldr	r0, [pc, #104]	; (8002a80 <MX_GPIO_Init+0x17c>)
 8002a18:	f002 fc86 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4812      	ldr	r0, [pc, #72]	; (8002a80 <MX_GPIO_Init+0x17c>)
 8002a36:	f002 fc77 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a40:	2301      	movs	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4619      	mov	r1, r3
 8002a52:	480c      	ldr	r0, [pc, #48]	; (8002a84 <MX_GPIO_Init+0x180>)
 8002a54:	f002 fc68 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4807      	ldr	r0, [pc, #28]	; (8002a88 <MX_GPIO_Init+0x184>)
 8002a6c:	f002 fc5c 	bl	8005328 <HAL_GPIO_Init>

}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020c00 	.word	0x40020c00

08002a8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		PeriodElapsed_005ms();
 8002a9e:	f001 fac1 	bl	8004024 <PeriodElapsed_005ms>
	}
	//TIM5
	if (htim->Instance == TIM7)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		PeriodElapsed_05ms();
 8002aac:	f001 fac0 	bl	8004030 <PeriodElapsed_05ms>
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40001000 	.word	0x40001000
 8002abc:	40001400 	.word	0x40001400

08002ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <Error_Handler+0x6>

08002ac8 <route_calculation>:
 */

#include "memory.h"

double route_calculation(uint8_t flag)
{
 8002ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
	milage += ((-SR + SL) / 2) * TIM05; // mm
 8002ad4:	4b8c      	ldr	r3, [pc, #560]	; (8002d08 <route_calculation+0x240>)
 8002ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ada:	4b8c      	ldr	r3, [pc, #560]	; (8002d0c <route_calculation+0x244>)
 8002adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4623      	mov	r3, r4
 8002ae4:	f7fd fbd0 	bl	8000288 <__aeabi_dsub>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	4618      	mov	r0, r3
 8002aee:	4621      	mov	r1, r4
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af8:	f7fd fea8 	bl	800084c <__aeabi_ddiv>
 8002afc:	4603      	mov	r3, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	4618      	mov	r0, r3
 8002b02:	4621      	mov	r1, r4
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <route_calculation+0x248>)
 8002b0a:	f7fd fd75 	bl	80005f8 <__aeabi_dmul>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	4618      	mov	r0, r3
 8002b14:	4621      	mov	r1, r4
 8002b16:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <route_calculation+0x24c>)
 8002b18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	f7fd fbb4 	bl	800028c <__adddf3>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	4a7a      	ldr	r2, [pc, #488]	; (8002d14 <route_calculation+0x24c>)
 8002b2a:	e9c2 3400 	strd	r3, r4, [r2]
	gyro = (z_gyro() / 16.4) * M_PI / 180;
 8002b2e:	f7fe fcc3 	bl	80014b8 <z_gyro>
 8002b32:	ec51 0b10 	vmov	r0, r1, d0
 8002b36:	a36e      	add	r3, pc, #440	; (adr r3, 8002cf0 <route_calculation+0x228>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fe86 	bl	800084c <__aeabi_ddiv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	4618      	mov	r0, r3
 8002b46:	4621      	mov	r1, r4
 8002b48:	a36b      	add	r3, pc, #428	; (adr r3, 8002cf8 <route_calculation+0x230>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd53 	bl	80005f8 <__aeabi_dmul>
 8002b52:	4603      	mov	r3, r0
 8002b54:	460c      	mov	r4, r1
 8002b56:	4618      	mov	r0, r3
 8002b58:	4621      	mov	r1, r4
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b6e      	ldr	r3, [pc, #440]	; (8002d18 <route_calculation+0x250>)
 8002b60:	f7fd fe74 	bl	800084c <__aeabi_ddiv>
 8002b64:	4603      	mov	r3, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <route_calculation+0x254>)
 8002b6a:	e9c2 3400 	strd	r3, r4, [r2]
	scoretime += TIM05;
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <route_calculation+0x258>)
 8002b70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <route_calculation+0x248>)
 8002b7a:	f7fd fb87 	bl	800028c <__adddf3>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	460c      	mov	r4, r1
 8002b82:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <route_calculation+0x258>)
 8002b84:	e9c2 3400 	strd	r3, r4, [r2]

	switch(flag){
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d01d      	beq.n	8002bca <route_calculation+0x102>
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	f000 8098 	beq.w	8002cc4 <route_calculation+0x1fc>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 809a 	bne.w	8002cce <route_calculation+0x206>
	 case 0:
		 milage = data_num = scoretime = 0;
 8002b9a:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <route_calculation+0x258>)
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f04f 0400 	mov.w	r4, #0
 8002ba4:	e9c2 3400 	strd	r3, r4, [r2]
 8002ba8:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <route_calculation+0x25c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <route_calculation+0x25c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcb6 	bl	8000524 <__aeabi_i2d>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <route_calculation+0x24c>)
 8002bbe:	e9c2 3400 	strd	r3, r4, [r2]
		 return MIN_SPEED;
 8002bc2:	a44f      	add	r4, pc, #316	; (adr r4, 8002d00 <route_calculation+0x238>)
 8002bc4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002bc8:	e085      	b.n	8002cd6 <route_calculation+0x20e>
		 break;
	 case 1:
		 if(milage / 50 >= data_num){
 8002bca:	4b52      	ldr	r3, [pc, #328]	; (8002d14 <route_calculation+0x24c>)
 8002bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <route_calculation+0x260>)
 8002bd6:	f7fd fe39 	bl	800084c <__aeabi_ddiv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	4698      	mov	r8, r3
 8002be0:	46a1      	mov	r9, r4
 8002be2:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <route_calculation+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc9c 	bl	8000524 <__aeabi_i2d>
 8002bec:	4603      	mov	r3, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	f7fd ff84 	bl	8000b04 <__aeabi_dcmpge>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d05c      	beq.n	8002cbc <route_calculation+0x1f4>
			 write_data_sector11.Omega[data_num] = gyro * 1000;
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <route_calculation+0x254>)
 8002c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <route_calculation+0x264>)
 8002c0e:	f7fd fcf3 	bl	80005f8 <__aeabi_dmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	460c      	mov	r4, r1
 8002c16:	4619      	mov	r1, r3
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <route_calculation+0x25c>)
 8002c1c:	681c      	ldr	r4, [r3, #0]
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4611      	mov	r1, r2
 8002c22:	f7fd ff99 	bl	8000b58 <__aeabi_d2iz>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <route_calculation+0x268>)
 8002c2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			 write_data_sector11.speed_R[data_num] = -SR * 1000;
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <route_calculation+0x244>)
 8002c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c34:	461d      	mov	r5, r3
 8002c36:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <route_calculation+0x264>)
 8002c40:	4628      	mov	r0, r5
 8002c42:	4631      	mov	r1, r6
 8002c44:	f7fd fcd8 	bl	80005f8 <__aeabi_dmul>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4622      	mov	r2, r4
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <route_calculation+0x25c>)
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	f7fd ffa6 	bl	8000ba8 <__aeabi_d2uiz>
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <route_calculation+0x268>)
 8002c60:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
 8002c64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 write_data_sector11.speed_R[data_num] = SL * 1000;
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <route_calculation+0x240>)
 8002c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <route_calculation+0x264>)
 8002c74:	f7fd fcc0 	bl	80005f8 <__aeabi_dmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4622      	mov	r2, r4
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <route_calculation+0x25c>)
 8002c82:	681c      	ldr	r4, [r3, #0]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	f7fd ff8e 	bl	8000ba8 <__aeabi_d2uiz>
 8002c8c:	4601      	mov	r1, r0
 8002c8e:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <route_calculation+0x268>)
 8002c90:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
 8002c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 write_data_sector10.time[data_num] = scoretime;
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <route_calculation+0x258>)
 8002c9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <route_calculation+0x25c>)
 8002ca0:	6815      	ldr	r5, [r2, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	f7fd ff7f 	bl	8000ba8 <__aeabi_d2uiz>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <route_calculation+0x26c>)
 8002cae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
			 data_num++;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <route_calculation+0x25c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <route_calculation+0x25c>)
 8002cba:	6013      	str	r3, [r2, #0]
		 }
		 return MIN_SPEED;
 8002cbc:	a410      	add	r4, pc, #64	; (adr r4, 8002d00 <route_calculation+0x238>)
 8002cbe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cc2:	e008      	b.n	8002cd6 <route_calculation+0x20e>
		 break;
	 case 2:
		 return 0;
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	e003      	b.n	8002cd6 <route_calculation+0x20e>
		 break;
	 default:
		 return 0;
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	f04f 0400 	mov.w	r4, #0
 8002cd6:	ec44 3b17 	vmov	d7, r3, r4
		 break;
	}
}
 8002cda:	eeb0 0a47 	vmov.f32	s0, s14
 8002cde:	eef0 0a67 	vmov.f32	s1, s15
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cea:	bf00      	nop
 8002cec:	f3af 8000 	nop.w
 8002cf0:	66666666 	.word	0x66666666
 8002cf4:	40306666 	.word	0x40306666
 8002cf8:	54442d18 	.word	0x54442d18
 8002cfc:	400921fb 	.word	0x400921fb
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	3ffccccc 	.word	0x3ffccccc
 8002d08:	20009838 	.word	0x20009838
 8002d0c:	20009858 	.word	0x20009858
 8002d10:	3fe00000 	.word	0x3fe00000
 8002d14:	20009d40 	.word	0x20009d40
 8002d18:	40668000 	.word	0x40668000
 8002d1c:	20009b68 	.word	0x20009b68
 8002d20:	20009a88 	.word	0x20009a88
 8002d24:	20009c74 	.word	0x20009c74
 8002d28:	40490000 	.word	0x40490000
 8002d2c:	408f4000 	.word	0x408f4000
 8002d30:	200001fc 	.word	0x200001fc
 8002d34:	2000727c 	.word	0x2000727c

08002d38 <loadFlash>:
	HAL_FLASH_Lock();
}

// load Data from Flash
void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint8_t*)address, size);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68b8      	ldr	r0, [r7, #8]
 8002d4c:	f005 ff2e 	bl	8008bac <memcpy>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <MotorStart>:
#include "macro.h"

#include <math.h>

void MotorStart()
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <MotorStart+0x38>)
 8002d60:	f004 f9b8 	bl	80070d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002d64:	2100      	movs	r1, #0
 8002d66:	480b      	ldr	r0, [pc, #44]	; (8002d94 <MotorStart+0x3c>)
 8002d68:	f004 f9b4 	bl	80070d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	480a      	ldr	r0, [pc, #40]	; (8002d98 <MotorStart+0x40>)
 8002d70:	f004 f9b0 	bl	80070d4 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002d74:	213c      	movs	r1, #60	; 0x3c
 8002d76:	4809      	ldr	r0, [pc, #36]	; (8002d9c <MotorStart+0x44>)
 8002d78:	f004 fa7c 	bl	8007274 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002d7c:	213c      	movs	r1, #60	; 0x3c
 8002d7e:	4808      	ldr	r0, [pc, #32]	; (8002da0 <MotorStart+0x48>)
 8002d80:	f004 fa78 	bl	8007274 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8002d84:	213c      	movs	r1, #60	; 0x3c
 8002d86:	4807      	ldr	r0, [pc, #28]	; (8002da4 <MotorStart+0x4c>)
 8002d88:	f004 fa74 	bl	8007274 <HAL_TIM_Encoder_Start>
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20009cb8 	.word	0x20009cb8
 8002d94:	20009968 	.word	0x20009968
 8002d98:	20009a94 	.word	0x20009a94
 8002d9c:	20009da0 	.word	0x20009da0
 8002da0:	20009ad4 	.word	0x20009ad4
 8002da4:	200099a8 	.word	0x200099a8

08002da8 <motor_R>:

void motor_R( double duty )
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc2:	f7fd fe8b 	bl	8000adc <__aeabi_dcmplt>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <motor_R+0x46>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dd2:	4816      	ldr	r0, [pc, #88]	; (8002e2c <motor_R+0x84>)
 8002dd4:	f002 fc5a 	bl	800568c <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 8002dd8:	683c      	ldr	r4, [r7, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002de0:	4620      	mov	r0, r4
 8002de2:	4629      	mov	r1, r5
 8002de4:	f7fd feb8 	bl	8000b58 <__aeabi_d2iz>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e016      	b.n	8002e1c <motor_R+0x74>
	}
	else if( duty >= 0 ){
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dfa:	f7fd fe83 	bl	8000b04 <__aeabi_dcmpge>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <motor_R+0x74>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002e04:	2200      	movs	r2, #0
 8002e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0a:	4808      	ldr	r0, [pc, #32]	; (8002e2c <motor_R+0x84>)
 8002e0c:	f002 fc3e 	bl	800568c <HAL_GPIO_WritePin>
		countorperiod = duty;
 8002e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e14:	f7fd fea0 	bl	8000b58 <__aeabi_d2iz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, countorperiod);
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <motor_R+0x88>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	20009cb8 	.word	0x20009cb8

08002e34 <motor_L>:

void motor_L( double duty )
{
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e4e:	f7fd fe45 	bl	8000adc <__aeabi_dcmplt>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <motor_L+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e5e:	4816      	ldr	r0, [pc, #88]	; (8002eb8 <motor_L+0x84>)
 8002e60:	f002 fc14 	bl	800568c <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 8002e64:	683c      	ldr	r4, [r7, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7fd fe72 	bl	8000b58 <__aeabi_d2iz>
 8002e74:	4603      	mov	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e016      	b.n	8002ea8 <motor_L+0x74>
	}
	else if( duty >= 0 ){
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e86:	f7fd fe3d 	bl	8000b04 <__aeabi_dcmpge>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <motor_L+0x74>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002e90:	2201      	movs	r2, #1
 8002e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <motor_L+0x84>)
 8002e98:	f002 fbf8 	bl	800568c <HAL_GPIO_WritePin>
		countorperiod = duty;
 8002e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea0:	f7fd fe5a 	bl	8000b58 <__aeabi_d2iz>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, countorperiod);
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <motor_L+0x88>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb8:	40020400 	.word	0x40020400
 8002ebc:	20009968 	.word	0x20009968

08002ec0 <motor_S>:

void motor_S( double duty )
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	ed87 0b00 	vstr	d0, [r7]
	int countorperiod = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
	if( duty < 0 ){
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eda:	f7fd fdff 	bl	8000adc <__aeabi_dcmplt>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00f      	beq.n	8002f04 <motor_S+0x44>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	4815      	ldr	r0, [pc, #84]	; (8002f40 <motor_S+0x80>)
 8002eea:	f002 fbcf 	bl	800568c <HAL_GPIO_WritePin>
		countorperiod = duty * -1;
 8002eee:	683c      	ldr	r4, [r7, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f7fd fe2d 	bl	8000b58 <__aeabi_d2iz>
 8002efe:	4603      	mov	r3, r0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e015      	b.n	8002f30 <motor_S+0x70>
	}
	else if( duty >= 0 ){
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f10:	f7fd fdf8 	bl	8000b04 <__aeabi_dcmpge>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <motor_S+0x70>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2108      	movs	r1, #8
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <motor_S+0x80>)
 8002f20:	f002 fbb4 	bl	800568c <HAL_GPIO_WritePin>
		countorperiod = duty;
 8002f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f28:	f7fd fe16 	bl	8000b58 <__aeabi_d2iz>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, countorperiod);
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <motor_S+0x84>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f40:	40020800 	.word	0x40020800
 8002f44:	20009a94 	.word	0x20009a94

08002f48 <Speed_R>:


// v = r * 2pi * (3/40960) * (dC/dt)
// m/s
double Speed_R()
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
	int Encoder = (TIM2 -> CNT) - 212483647;
 8002f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <Speed_R+0x68>)
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
	TIM2 -> CNT = 212483647;
 8002f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <Speed_R+0x6c>)
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7fd fade 	bl	8000524 <__aeabi_i2d>
 8002f68:	a30f      	add	r3, pc, #60	; (adr r3, 8002fa8 <Speed_R+0x60>)
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f7fd fb43 	bl	80005f8 <__aeabi_dmul>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	4618      	mov	r0, r3
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <Speed_R+0x70>)
 8002f80:	f7fd fc64 	bl	800084c <__aeabi_ddiv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 8002f8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f90:	ec44 3b17 	vmov	d7, r3, r4
}
 8002f94:	eeb0 0a47 	vmov.f32	s0, s14
 8002f98:	eef0 0a67 	vmov.f32	s1, s15
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	2b31f6cc 	.word	0x2b31f6cc
 8002fac:	40716302 	.word	0x40716302
 8002fb0:	f355c1c1 	.word	0xf355c1c1
 8002fb4:	0caa3e3f 	.word	0x0caa3e3f
 8002fb8:	40d40000 	.word	0x40d40000
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <Speed_L>:

double Speed_L()
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
	int Encoder = (TIM3 -> CNT) - 32767;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <Speed_L+0x68>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002fce:	3b7f      	subs	r3, #127	; 0x7f
 8002fd0:	60fb      	str	r3, [r7, #12]
	TIM3 -> CNT = 32767;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <Speed_L+0x68>)
 8002fd4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
	double speed = (7. * TIRE * M_PI * (double)Encoder) / (40960. * TIM05);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7fd faa2 	bl	8000524 <__aeabi_i2d>
 8002fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8003020 <Speed_L+0x60>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fb07 	bl	80005f8 <__aeabi_dmul>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <Speed_L+0x6c>)
 8002ff8:	f7fd fc28 	bl	800084c <__aeabi_ddiv>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	e9c7 3400 	strd	r3, r4, [r7]
	return speed;
 8003004:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003008:	ec44 3b17 	vmov	d7, r3, r4
}
 800300c:	eeb0 0a47 	vmov.f32	s0, s14
 8003010:	eef0 0a67 	vmov.f32	s1, s15
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	f3af 8000 	nop.w
 8003020:	2b31f6cc 	.word	0x2b31f6cc
 8003024:	40716302 	.word	0x40716302
 8003028:	40000400 	.word	0x40000400
 800302c:	40d40000 	.word	0x40d40000

08003030 <Degree_S>:

double Degree_S()
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
	int initial_degree_value = 32767;
 8003036:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800303a:	60fb      	str	r3, [r7, #12]
	int Encoder = (TIM4 -> CNT) - initial_degree_value;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <Degree_S+0x54>)
 800303e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	60bb      	str	r3, [r7, #8]
	double degree = 360 * (Encoder / 65535);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <Degree_S+0x58>)
 800304a:	fb82 1203 	smull	r1, r2, r2, r3
 800304e:	441a      	add	r2, r3
 8003050:	13d2      	asrs	r2, r2, #15
 8003052:	17db      	asrs	r3, r3, #31
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fa60 	bl	8000524 <__aeabi_i2d>
 8003064:	4603      	mov	r3, r0
 8003066:	460c      	mov	r4, r1
 8003068:	e9c7 3400 	strd	r3, r4, [r7]
	return degree;
 800306c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003070:	ec44 3b17 	vmov	d7, r3, r4
}
 8003074:	eeb0 0a47 	vmov.f32	s0, s14
 8003078:	eef0 0a67 	vmov.f32	s1, s15
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	bf00      	nop
 8003084:	40000800 	.word	0x40000800
 8003088:	80008001 	.word	0x80008001

0800308c <stop_init>:
 */

#include "side_sensor.h"

void stop_init()
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	side_r_time = side_l_time = 0;
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <stop_init+0x38>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <stop_init+0x38>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <stop_init+0x3c>)
 800309c:	6013      	str	r3, [r2, #0]
	side_r_flag = side_l_flag = 0;
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <stop_init+0x40>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <stop_init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <stop_init+0x44>)
 80030aa:	6013      	str	r3, [r2, #0]
	side_r_count = 0;
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <stop_init+0x48>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
	Crossing_Flag = 0;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <stop_init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20009cf8 	.word	0x20009cf8
 80030c8:	20009e60 	.word	0x20009e60
 80030cc:	20009a80 	.word	0x20009a80
 80030d0:	20009b60 	.word	0x20009b60
 80030d4:	20009c70 	.word	0x20009c70
 80030d8:	20009818 	.word	0x20009818

080030dc <start_stop>:

int start_stop()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) side_r_flag = 1;
 80030e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e4:	4846      	ldr	r0, [pc, #280]	; (8003200 <start_stop+0x124>)
 80030e6:	f002 fab9 	bl	800565c <HAL_GPIO_ReadPin>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d103      	bne.n	80030f8 <start_stop+0x1c>
 80030f0:	4b44      	ldr	r3, [pc, #272]	; (8003204 <start_stop+0x128>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00a      	b.n	800310e <start_stop+0x32>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) != 0) side_r_flag = 0;
 80030f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030fc:	4840      	ldr	r0, [pc, #256]	; (8003200 <start_stop+0x124>)
 80030fe:	f002 faad 	bl	800565c <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <start_stop+0x32>
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <start_stop+0x128>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) side_l_flag = 1;
 800310e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003112:	483d      	ldr	r0, [pc, #244]	; (8003208 <start_stop+0x12c>)
 8003114:	f002 faa2 	bl	800565c <HAL_GPIO_ReadPin>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <start_stop+0x4a>
 800311e:	4b3b      	ldr	r3, [pc, #236]	; (800320c <start_stop+0x130>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e00a      	b.n	800313c <start_stop+0x60>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) != 0) side_l_flag = 0;
 8003126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800312a:	4835      	ldr	r0, [pc, #212]	; (8003200 <start_stop+0x124>)
 800312c:	f002 fa96 	bl	800565c <HAL_GPIO_ReadPin>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <start_stop+0x60>
 8003136:	4b35      	ldr	r3, [pc, #212]	; (800320c <start_stop+0x130>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

	if(side_r_flag) side_r_time++;
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <start_stop+0x128>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <start_stop+0x72>
 8003144:	4b32      	ldr	r3, [pc, #200]	; (8003210 <start_stop+0x134>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a31      	ldr	r2, [pc, #196]	; (8003210 <start_stop+0x134>)
 800314c:	6013      	str	r3, [r2, #0]
	if(side_l_flag) side_l_time++;
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <start_stop+0x130>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <start_stop+0x84>
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <start_stop+0x138>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <start_stop+0x138>)
 800315e:	6013      	str	r3, [r2, #0]

	if(!side_r_flag && !side_l_flag){
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <start_stop+0x128>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d13c      	bne.n	80031e2 <start_stop+0x106>
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <start_stop+0x130>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d138      	bne.n	80031e2 <start_stop+0x106>
		if( side_r_time - side_l_time >= 20 ) side_r_count += 1;
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <start_stop+0x134>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <start_stop+0x138>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b13      	cmp	r3, #19
 800317c:	dd05      	ble.n	800318a <start_stop+0xae>
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <start_stop+0x13c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a24      	ldr	r2, [pc, #144]	; (8003218 <start_stop+0x13c>)
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e024      	b.n	80031d4 <start_stop+0xf8>
		else if( side_l_time - side_r_time >= 20);
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <start_stop+0x138>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <start_stop+0x134>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b13      	cmp	r3, #19
 8003196:	dc1d      	bgt.n	80031d4 <start_stop+0xf8>
		else if( abs(side_l_time - side_r_time) < 15 && abs(side_l_time - side_r_time) > 0 ) Crossing_Flag++;
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <start_stop+0x138>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <start_stop+0x134>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f113 0f0e 	cmn.w	r3, #14
 80031a6:	db15      	blt.n	80031d4 <start_stop+0xf8>
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <start_stop+0x138>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <start_stop+0x134>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b0e      	cmp	r3, #14
 80031b4:	dc0e      	bgt.n	80031d4 <start_stop+0xf8>
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <start_stop+0x138>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <start_stop+0x134>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bfb8      	it	lt
 80031c4:	425b      	neglt	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dd04      	ble.n	80031d4 <start_stop+0xf8>
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <start_stop+0x140>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	4a12      	ldr	r2, [pc, #72]	; (800321c <start_stop+0x140>)
 80031d2:	6013      	str	r3, [r2, #0]
		side_r_time = side_l_time = 0;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <start_stop+0x138>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <start_stop+0x138>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <start_stop+0x134>)
 80031e0:	6013      	str	r3, [r2, #0]
	}

	if(side_r_count >= 2) return 2;
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <start_stop+0x13c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	dd01      	ble.n	80031ee <start_stop+0x112>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e006      	b.n	80031fc <start_stop+0x120>
	else if(side_r_count >= 1) return 1;
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <start_stop+0x13c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	dd01      	ble.n	80031fa <start_stop+0x11e>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <start_stop+0x120>
	else return 0;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40020000 	.word	0x40020000
 8003204:	20009b60 	.word	0x20009b60
 8003208:	40020800 	.word	0x40020800
 800320c:	20009a80 	.word	0x20009a80
 8003210:	20009e60 	.word	0x20009e60
 8003214:	20009cf8 	.word	0x20009cf8
 8003218:	20009c70 	.word	0x20009c70
 800321c:	20009818 	.word	0x20009818

08003220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_MspInit+0x4c>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <HAL_MspInit+0x4c>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_MspInit+0x4c>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_MspInit+0x4c>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <HAL_MspInit+0x4c>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_MspInit+0x4c>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800

08003270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a49      	ldr	r2, [pc, #292]	; (80033b4 <HAL_ADC_MspInit+0x144>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f040 808c 	bne.w	80033ac <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	4a46      	ldr	r2, [pc, #280]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6453      	str	r3, [r2, #68]	; 0x44
 80032a4:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6313      	str	r3, [r2, #48]	; 0x30
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4a38      	ldr	r2, [pc, #224]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6313      	str	r3, [r2, #48]	; 0x30
 80032dc:	4b36      	ldr	r3, [pc, #216]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4a31      	ldr	r2, [pc, #196]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	6313      	str	r3, [r2, #48]	; 0x30
 80032f8:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <HAL_ADC_MspInit+0x148>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8003304:	2326      	movs	r3, #38	; 0x26
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003308:	2303      	movs	r3, #3
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	4829      	ldr	r0, [pc, #164]	; (80033bc <HAL_ADC_MspInit+0x14c>)
 8003318:	f002 f806 	bl	8005328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800331c:	2318      	movs	r3, #24
 800331e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003320:	2303      	movs	r3, #3
 8003322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	4619      	mov	r1, r3
 800332e:	4824      	ldr	r0, [pc, #144]	; (80033c0 <HAL_ADC_MspInit+0x150>)
 8003330:	f001 fffa 	bl	8005328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003334:	2303      	movs	r3, #3
 8003336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003338:	2303      	movs	r3, #3
 800333a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	481f      	ldr	r0, [pc, #124]	; (80033c4 <HAL_ADC_MspInit+0x154>)
 8003348:	f001 ffee 	bl	8005328 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800334c:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <HAL_ADC_MspInit+0x15c>)
 8003350:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 8003354:	2200      	movs	r2, #0
 8003356:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 8003360:	2200      	movs	r2, #0
 8003362:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 8003366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 800336e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003372:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 8003376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800337a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 800337e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 8003386:	2200      	movs	r2, #0
 8003388:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 800338c:	2200      	movs	r2, #0
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003390:	480d      	ldr	r0, [pc, #52]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 8003392:	f001 fc39 	bl	8004c08 <HAL_DMA_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800339c:	f7ff fb90 	bl	8002ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <HAL_ADC_MspInit+0x158>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033ac:	bf00      	nop
 80033ae:	3730      	adds	r7, #48	; 0x30
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40012000 	.word	0x40012000
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	20009bf0 	.word	0x20009bf0
 80033cc:	40026410 	.word	0x40026410

080033d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_I2C_MspInit+0x84>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d12c      	bne.n	800344c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_I2C_MspInit+0x88>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <HAL_I2C_MspInit+0x88>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_I2C_MspInit+0x88>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800340e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003414:	2312      	movs	r3, #18
 8003416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003418:	2301      	movs	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	2303      	movs	r3, #3
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003420:	2304      	movs	r3, #4
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	4619      	mov	r1, r3
 800342a:	480c      	ldr	r0, [pc, #48]	; (800345c <HAL_I2C_MspInit+0x8c>)
 800342c:	f001 ff7c 	bl	8005328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_I2C_MspInit+0x88>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_I2C_MspInit+0x88>)
 800343a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800343e:	6413      	str	r3, [r2, #64]	; 0x40
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_I2C_MspInit+0x88>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800344c:	bf00      	nop
 800344e:	3728      	adds	r7, #40	; 0x28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40005400 	.word	0x40005400
 8003458:	40023800 	.word	0x40023800
 800345c:	40020400 	.word	0x40020400

08003460 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a05      	ldr	r2, [pc, #20]	; (8003484 <HAL_RTC_MspInit+0x24>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d102      	bne.n	8003478 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RTC_MspInit+0x28>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40002800 	.word	0x40002800
 8003488:	42470e3c 	.word	0x42470e3c

0800348c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_SPI_MspInit+0x84>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d12b      	bne.n	8003506 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a10      	ldr	r2, [pc, #64]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034e6:	23e0      	movs	r3, #224	; 0xe0
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f2:	2303      	movs	r3, #3
 80034f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034f6:	2305      	movs	r3, #5
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <HAL_SPI_MspInit+0x8c>)
 8003502:	f001 ff11 	bl	8005328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003506:	bf00      	nop
 8003508:	3728      	adds	r7, #40	; 0x28
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40013000 	.word	0x40013000
 8003514:	40023800 	.word	0x40023800
 8003518:	40020000 	.word	0x40020000

0800351c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_TIM_PWM_MspInit+0xf8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d116      	bne.n	800355c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4a38      	ldr	r2, [pc, #224]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	2018      	movs	r0, #24
 8003550:	f001 fb23 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003554:	2018      	movs	r0, #24
 8003556:	f001 fb3c 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800355a:	e056      	b.n	800360a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM5)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_TIM_PWM_MspInit+0x100>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b28      	ldr	r3, [pc, #160]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	69bb      	ldr	r3, [r7, #24]
}
 8003582:	e042      	b.n	800360a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM8)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a25      	ldr	r2, [pc, #148]	; (8003620 <HAL_TIM_PWM_MspInit+0x104>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a20      	ldr	r2, [pc, #128]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	697b      	ldr	r3, [r7, #20]
}
 80035aa:	e02e      	b.n	800360a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM9)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_TIM_PWM_MspInit+0x108>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d116      	bne.n	80035e4 <HAL_TIM_PWM_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a16      	ldr	r2, [pc, #88]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2018      	movs	r0, #24
 80035d8:	f001 fadf 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80035dc:	2018      	movs	r0, #24
 80035de:	f001 faf8 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
}
 80035e2:	e012      	b.n	800360a <HAL_TIM_PWM_MspInit+0xee>
  else if(htim_pwm->Instance==TIM12)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_TIM_PWM_MspInit+0x10c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10d      	bne.n	800360a <HAL_TIM_PWM_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_TIM_PWM_MspInit+0xfc>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40023800 	.word	0x40023800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40001800 	.word	0x40001800

0800362c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	; 0x38
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d12d      	bne.n	80036aa <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a48      	ldr	r2, [pc, #288]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b46      	ldr	r3, [pc, #280]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	4b42      	ldr	r3, [pc, #264]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a41      	ldr	r2, [pc, #260]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8003686:	f248 0302 	movw	r3, #32770	; 0x8002
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003698:	2301      	movs	r3, #1
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	4836      	ldr	r0, [pc, #216]	; (800377c <HAL_TIM_Encoder_MspInit+0x150>)
 80036a4:	f001 fe40 	bl	8005328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036a8:	e062      	b.n	8003770 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_TIM_Encoder_MspInit+0x154>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d12c      	bne.n	800370e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	6413      	str	r3, [r2, #64]	; 0x40
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	6313      	str	r3, [r2, #48]	; 0x30
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036ec:	2330      	movs	r3, #48	; 0x30
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036fc:	2302      	movs	r3, #2
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003704:	4619      	mov	r1, r3
 8003706:	481f      	ldr	r0, [pc, #124]	; (8003784 <HAL_TIM_Encoder_MspInit+0x158>)
 8003708:	f001 fe0e 	bl	8005328 <HAL_GPIO_Init>
}
 800370c:	e030      	b.n	8003770 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d12b      	bne.n	8003770 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	6413      	str	r3, [r2, #64]	; 0x40
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	6313      	str	r3, [r2, #48]	; 0x30
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_TIM_Encoder_MspInit+0x14c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003750:	23c0      	movs	r3, #192	; 0xc0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003760:	2302      	movs	r3, #2
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003768:	4619      	mov	r1, r3
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <HAL_TIM_Encoder_MspInit+0x158>)
 800376c:	f001 fddc 	bl	8005328 <HAL_GPIO_Init>
}
 8003770:	bf00      	nop
 8003772:	3738      	adds	r7, #56	; 0x38
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40023800 	.word	0x40023800
 800377c:	40020000 	.word	0x40020000
 8003780:	40000400 	.word	0x40000400
 8003784:	40020400 	.word	0x40020400
 8003788:	40000800 	.word	0x40000800

0800378c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a30      	ldr	r2, [pc, #192]	; (800385c <HAL_TIM_Base_MspInit+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d116      	bne.n	80037cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	2036      	movs	r0, #54	; 0x36
 80037c0:	f001 f9eb 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037c4:	2036      	movs	r0, #54	; 0x36
 80037c6:	f001 fa04 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80037ca:	e042      	b.n	8003852 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <HAL_TIM_Base_MspInit+0xd8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d116      	bne.n	8003804 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 80037e0:	f043 0320 	orr.w	r3, r3, #32
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2100      	movs	r1, #0
 80037f6:	2037      	movs	r0, #55	; 0x37
 80037f8:	f001 f9cf 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80037fc:	2037      	movs	r0, #55	; 0x37
 80037fe:	f001 f9e8 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
}
 8003802:	e026      	b.n	8003852 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM10)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_TIM_Base_MspInit+0xdc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10e      	bne.n	800382c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
}
 800382a:	e012      	b.n	8003852 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM11)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0e      	ldr	r2, [pc, #56]	; (800386c <HAL_TIM_Base_MspInit+0xe0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_TIM_Base_MspInit+0xd4>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40001000 	.word	0x40001000
 8003860:	40023800 	.word	0x40023800
 8003864:	40001400 	.word	0x40001400
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800

08003870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 031c 	add.w	r3, r7, #28
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_TIM_MspPostInit+0x18c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d11f      	bne.n	80038d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	4b5a      	ldr	r3, [pc, #360]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a59      	ldr	r2, [pc, #356]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b57      	ldr	r3, [pc, #348]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80038ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	2300      	movs	r3, #0
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038c0:	2301      	movs	r3, #1
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f107 031c 	add.w	r3, r7, #28
 80038c8:	4619      	mov	r1, r3
 80038ca:	484e      	ldr	r0, [pc, #312]	; (8003a04 <HAL_TIM_MspPostInit+0x194>)
 80038cc:	f001 fd2c 	bl	8005328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80038d0:	e08f      	b.n	80039f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_TIM_MspPostInit+0x198>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d11e      	bne.n	800391a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4a46      	ldr	r2, [pc, #280]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6313      	str	r3, [r2, #48]	; 0x30
 80038ec:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038f8:	2301      	movs	r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003904:	2300      	movs	r3, #0
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003908:	2302      	movs	r3, #2
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	f107 031c 	add.w	r3, r7, #28
 8003910:	4619      	mov	r1, r3
 8003912:	483c      	ldr	r0, [pc, #240]	; (8003a04 <HAL_TIM_MspPostInit+0x194>)
 8003914:	f001 fd08 	bl	8005328 <HAL_GPIO_Init>
}
 8003918:	e06b      	b.n	80039f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a3b      	ldr	r2, [pc, #236]	; (8003a0c <HAL_TIM_MspPostInit+0x19c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d11e      	bne.n	8003962 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4a34      	ldr	r2, [pc, #208]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6313      	str	r3, [r2, #48]	; 0x30
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003940:	2340      	movs	r3, #64	; 0x40
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003950:	2303      	movs	r3, #3
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	482d      	ldr	r0, [pc, #180]	; (8003a10 <HAL_TIM_MspPostInit+0x1a0>)
 800395c:	f001 fce4 	bl	8005328 <HAL_GPIO_Init>
}
 8003960:	e047      	b.n	80039f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM9)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_TIM_MspPostInit+0x1a4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d11e      	bne.n	80039aa <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6313      	str	r3, [r2, #48]	; 0x30
 800397c:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003988:	2304      	movs	r3, #4
 800398a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	2300      	movs	r3, #0
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003998:	2303      	movs	r3, #3
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399c:	f107 031c 	add.w	r3, r7, #28
 80039a0:	4619      	mov	r1, r3
 80039a2:	4818      	ldr	r0, [pc, #96]	; (8003a04 <HAL_TIM_MspPostInit+0x194>)
 80039a4:	f001 fcc0 	bl	8005328 <HAL_GPIO_Init>
}
 80039a8:	e023      	b.n	80039f2 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM12)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_TIM_MspPostInit+0x1a8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d11e      	bne.n	80039f2 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	6313      	str	r3, [r2, #48]	; 0x30
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_TIM_MspPostInit+0x190>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80039d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80039e2:	2309      	movs	r3, #9
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	480b      	ldr	r0, [pc, #44]	; (8003a1c <HAL_TIM_MspPostInit+0x1ac>)
 80039ee:	f001 fc9b 	bl	8005328 <HAL_GPIO_Init>
}
 80039f2:	bf00      	nop
 80039f4:	3730      	adds	r7, #48	; 0x30
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40001800 	.word	0x40001800
 8003a1c:	40020400 	.word	0x40020400

08003a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_UART_MspInit+0x94>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d134      	bne.n	8003aac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <HAL_UART_MspInit+0x98>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_UART_MspInit+0x98>)
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	6453      	str	r3, [r2, #68]	; 0x44
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_UART_MspInit+0x98>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_UART_MspInit+0x98>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_UART_MspInit+0x98>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_UART_MspInit+0x98>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4619      	mov	r1, r3
 8003a96:	4809      	ldr	r0, [pc, #36]	; (8003abc <HAL_UART_MspInit+0x9c>)
 8003a98:	f001 fc46 	bl	8005328 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	2025      	movs	r0, #37	; 0x25
 8003aa2:	f001 f87a 	bl	8004b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aa6:	2025      	movs	r0, #37	; 0x25
 8003aa8:	f001 f893 	bl	8004bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003aac:	bf00      	nop
 8003aae:	3728      	adds	r7, #40	; 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40020000 	.word	0x40020000

08003ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <NMI_Handler+0x4>

08003ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aca:	e7fe      	b.n	8003aca <HardFault_Handler+0x4>

08003acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <MemManage_Handler+0x4>

08003ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad6:	e7fe      	b.n	8003ad6 <BusFault_Handler+0x4>

08003ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <UsageFault_Handler+0x4>

08003ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b0c:	f000 fb34 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b18:	4803      	ldr	r0, [pc, #12]	; (8003b28 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003b1a:	f003 fbe2 	bl	80072e2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003b1e:	4803      	ldr	r0, [pc, #12]	; (8003b2c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003b20:	f003 fbdf 	bl	80072e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20009cb8 	.word	0x20009cb8
 8003b2c:	20009cfc 	.word	0x20009cfc

08003b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b34:	4802      	ldr	r0, [pc, #8]	; (8003b40 <USART1_IRQHandler+0x10>)
 8003b36:	f004 fa09 	bl	8007f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20009b70 	.word	0x20009b70

08003b44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b48:	4802      	ldr	r0, [pc, #8]	; (8003b54 <TIM6_DAC_IRQHandler+0x10>)
 8003b4a:	f003 fbca 	bl	80072e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20009c78 	.word	0x20009c78

08003b58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b5c:	4802      	ldr	r0, [pc, #8]	; (8003b68 <TIM7_IRQHandler+0x10>)
 8003b5e:	f003 fbc0 	bl	80072e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20009e20 	.word	0x20009e20

08003b6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b70:	4802      	ldr	r0, [pc, #8]	; (8003b7c <DMA2_Stream0_IRQHandler+0x10>)
 8003b72:	f001 f971 	bl	8004e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20009bf0 	.word	0x20009bf0

08003b80 <switch_get>:
 */

#include "switch.h"

uint16_t switch_get()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
	uint16_t value = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	80fb      	strh	r3, [r7, #6]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) value |= 0x01;
 8003b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b8e:	4814      	ldr	r0, [pc, #80]	; (8003be0 <switch_get+0x60>)
 8003b90:	f001 fd64 	bl	800565c <HAL_GPIO_ReadPin>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <switch_get+0x24>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	80fb      	strh	r3, [r7, #6]
 8003ba2:	e017      	b.n	8003bd4 <switch_get+0x54>
	else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)) value |= 0x02;
 8003ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ba8:	480d      	ldr	r0, [pc, #52]	; (8003be0 <switch_get+0x60>)
 8003baa:	f001 fd57 	bl	800565c <HAL_GPIO_ReadPin>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <switch_get+0x3e>
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	f043 0302 	orr.w	r3, r3, #2
 8003bba:	80fb      	strh	r3, [r7, #6]
 8003bbc:	e00a      	b.n	8003bd4 <switch_get+0x54>
	else if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) value |= 0x03;
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	4807      	ldr	r0, [pc, #28]	; (8003be0 <switch_get+0x60>)
 8003bc2:	f001 fd4b 	bl	800565c <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <switch_get+0x54>
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	f043 0303 	orr.w	r3, r3, #3
 8003bd2:	80fb      	strh	r3, [r7, #6]
	else value |= 0x00;

	return value;
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40020400 	.word	0x40020400

08003be4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e00a      	b.n	8003c0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bf6:	f3af 8000 	nop.w
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	60ba      	str	r2, [r7, #8]
 8003c02:	b2ca      	uxtb	r2, r1
 8003c04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dbf0      	blt.n	8003bf6 <_read+0x12>
	}

return len;
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
	return -1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c46:	605a      	str	r2, [r3, #4]
	return 0;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_isatty>:

int _isatty(int file)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
	return 0;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <_sbrk+0x5c>)
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <_sbrk+0x60>)
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <_sbrk+0x64>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <_sbrk+0x64>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <_sbrk+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d207      	bcs.n	8003cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb8:	f004 ff4e 	bl	8008b58 <__errno>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e009      	b.n	8003cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <_sbrk+0x64>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <_sbrk+0x64>)
 8003cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20020000 	.word	0x20020000
 8003ce8:	00000400 	.word	0x00000400
 8003cec:	200097fc 	.word	0x200097fc
 8003cf0:	20009e70 	.word	0x20009e70

08003cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <SystemInit+0x28>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <SystemInit+0x28>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <SystemInit+0x28>)
 8003d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <init>:
 */

#include "wrapper.h"

void init()
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	IMU_init();
 8003d24:	f7fd f988 	bl	8001038 <IMU_init>
	ADCStart();
 8003d28:	f7fd fc0e 	bl	8001548 <ADCStart>
	MotorStart();
 8003d2c:	f7ff f814 	bl	8002d58 <MotorStart>
	Trace_Init();
 8003d30:	f7fd fe50 	bl	80019d4 <Trace_Init>
	stop_init();
 8003d34:	f7ff f9aa 	bl	800308c <stop_init>
	LineTrace_Flag = 0;
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <init+0x30>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
	Start_Flag = 0;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <init+0x34>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
	Mode_Flag = 0;
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <init+0x38>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20009a7c 	.word	0x20009a7c
 8003d54:	20009b15 	.word	0x20009b15
 8003d58:	20009a7d 	.word	0x20009a7d

08003d5c <main_loop>:

void main_loop()
{
 8003d5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af04      	add	r7, sp, #16

	while(1){
		LineTrace_Flag = 0;
 8003d64:	4ba2      	ldr	r3, [pc, #648]	; (8003ff0 <main_loop+0x294>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
		if( switch_get() == SW_1 ){
 8003d6a:	f7ff ff09 	bl	8003b80 <switch_get>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <main_loop+0x26>
			Mode_Flag--;
 8003d74:	4b9f      	ldr	r3, [pc, #636]	; (8003ff4 <main_loop+0x298>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b9d      	ldr	r3, [pc, #628]	; (8003ff4 <main_loop+0x298>)
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e017      	b.n	8003db2 <main_loop+0x56>
			if(Mode_Flag < 0) Mode_Flag = 9;
		}
		else if( switch_get() == SW_2 ){
 8003d82:	f7ff fefd 	bl	8003b80 <switch_get>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d10d      	bne.n	8003da8 <main_loop+0x4c>
			Mode_Flag++;
 8003d8c:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <main_loop+0x298>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b97      	ldr	r3, [pc, #604]	; (8003ff4 <main_loop+0x298>)
 8003d96:	701a      	strb	r2, [r3, #0]
			if(Mode_Flag > 9) Mode_Flag = 0;
 8003d98:	4b96      	ldr	r3, [pc, #600]	; (8003ff4 <main_loop+0x298>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b09      	cmp	r3, #9
 8003d9e:	d908      	bls.n	8003db2 <main_loop+0x56>
 8003da0:	4b94      	ldr	r3, [pc, #592]	; (8003ff4 <main_loop+0x298>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e004      	b.n	8003db2 <main_loop+0x56>
		}
		else if( switch_get() == SW_3 ) break;
 8003da8:	f7ff feea 	bl	8003b80 <switch_get>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d071      	beq.n	8003e96 <main_loop+0x13a>

		switch(Mode_Flag){
 8003db2:	4b90      	ldr	r3, [pc, #576]	; (8003ff4 <main_loop+0x298>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b09      	cmp	r3, #9
 8003db8:	d868      	bhi.n	8003e8c <main_loop+0x130>
 8003dba:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <main_loop+0x64>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003e2b 	.word	0x08003e2b
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003e55 	.word	0x08003e55
 8003dd0:	08003e5d 	.word	0x08003e5d
 8003dd4:	08003e65 	.word	0x08003e65
 8003dd8:	08003e6d 	.word	0x08003e6d
 8003ddc:	08003e75 	.word	0x08003e75
 8003de0:	08003e7d 	.word	0x08003e7d
 8003de4:	08003e85 	.word	0x08003e85
			case 0:
				led_num(0);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fd fd9f 	bl	800192c <led_num>
				printf("ADC_L -> %f,	ADC_R -> %f,	DEG_S -> %f\r\n", Line_Calib_L, Line_Calib_R, Degree_S());
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <main_loop+0x29c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fba8 	bl	8000548 <__aeabi_f2d>
 8003df8:	4680      	mov	r8, r0
 8003dfa:	4689      	mov	r9, r1
 8003dfc:	4b7f      	ldr	r3, [pc, #508]	; (8003ffc <main_loop+0x2a0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc fba1 	bl	8000548 <__aeabi_f2d>
 8003e06:	4604      	mov	r4, r0
 8003e08:	460d      	mov	r5, r1
 8003e0a:	f7ff f911 	bl	8003030 <Degree_S>
 8003e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e12:	eef0 7a60 	vmov.f32	s15, s1
 8003e16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e1a:	e9cd 4500 	strd	r4, r5, [sp]
 8003e1e:	4642      	mov	r2, r8
 8003e20:	464b      	mov	r3, r9
 8003e22:	4877      	ldr	r0, [pc, #476]	; (8004000 <main_loop+0x2a4>)
 8003e24:	f005 fb32 	bl	800948c <iprintf>
				break;
 8003e28:	e031      	b.n	8003e8e <main_loop+0x132>
			case 1:
				led_num(1);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7fd fd7e 	bl	800192c <led_num>
				printf("Speed_L -> %f,	Speed_R -> %f\r\n", SL, SR);
 8003e30:	4b74      	ldr	r3, [pc, #464]	; (8004004 <main_loop+0x2a8>)
 8003e32:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003e36:	4b74      	ldr	r3, [pc, #464]	; (8004008 <main_loop+0x2ac>)
 8003e38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e3c:	e9cd 3400 	strd	r3, r4, [sp]
 8003e40:	4613      	mov	r3, r2
 8003e42:	460a      	mov	r2, r1
 8003e44:	4871      	ldr	r0, [pc, #452]	; (800400c <main_loop+0x2b0>)
 8003e46:	f005 fb21 	bl	800948c <iprintf>
				break;
 8003e4a:	e020      	b.n	8003e8e <main_loop+0x132>
			case 2:
				// Run only
				led_num(2);
 8003e4c:	2002      	movs	r0, #2
 8003e4e:	f7fd fd6d 	bl	800192c <led_num>
				break;
 8003e52:	e01c      	b.n	8003e8e <main_loop+0x132>
			case 3:
				// Run & data flash
				led_num(3);
 8003e54:	2003      	movs	r0, #3
 8003e56:	f7fd fd69 	bl	800192c <led_num>
				break;
 8003e5a:	e018      	b.n	8003e8e <main_loop+0x132>
			case 4:
				// Speed Control speed1
				led_num(4);
 8003e5c:	2004      	movs	r0, #4
 8003e5e:	f7fd fd65 	bl	800192c <led_num>
				break;
 8003e62:	e014      	b.n	8003e8e <main_loop+0x132>
			case 5:
				// Speed Control speed2
				led_num(5);
 8003e64:	2005      	movs	r0, #5
 8003e66:	f7fd fd61 	bl	800192c <led_num>
				break;
 8003e6a:	e010      	b.n	8003e8e <main_loop+0x132>
			case 6:
				// Speed Control speed3
				led_num(6);
 8003e6c:	2006      	movs	r0, #6
 8003e6e:	f7fd fd5d 	bl	800192c <led_num>
				break;
 8003e72:	e00c      	b.n	8003e8e <main_loop+0x132>
			case 7:
				// Speed Control speed4
				led_num(7);
 8003e74:	2007      	movs	r0, #7
 8003e76:	f7fd fd59 	bl	800192c <led_num>
				break;
 8003e7a:	e008      	b.n	8003e8e <main_loop+0x132>
			case 8:
				// Speed Control speed5
				led_num(8);
 8003e7c:	2008      	movs	r0, #8
 8003e7e:	f7fd fd55 	bl	800192c <led_num>
				break;
 8003e82:	e004      	b.n	8003e8e <main_loop+0x132>
			case 9:
				// Auto Run
				led_num(9);
 8003e84:	2009      	movs	r0, #9
 8003e86:	f7fd fd51 	bl	800192c <led_num>
				break;
 8003e8a:	e000      	b.n	8003e8e <main_loop+0x132>
			default:
				break;
 8003e8c:	bf00      	nop
		}

		HAL_Delay(100);
 8003e8e:	2064      	movs	r0, #100	; 0x64
 8003e90:	f000 f992 	bl	80041b8 <HAL_Delay>
		LineTrace_Flag = 0;
 8003e94:	e766      	b.n	8003d64 <main_loop+0x8>
		else if( switch_get() == SW_3 ) break;
 8003e96:	bf00      	nop
	}

	HAL_Delay(500);
 8003e98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e9c:	f000 f98c 	bl	80041b8 <HAL_Delay>

	//LineTrace
	while(1){
		if(Mode_Flag == 9) break;
 8003ea0:	4b54      	ldr	r3, [pc, #336]	; (8003ff4 <main_loop+0x298>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	f000 8099 	beq.w	8003fdc <main_loop+0x280>
		Start_Flag = start_stop();
 8003eaa:	f7ff f917 	bl	80030dc <start_stop>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b57      	ldr	r3, [pc, #348]	; (8004010 <main_loop+0x2b4>)
 8003eb4:	701a      	strb	r2, [r3, #0]

		switch(State_Flag){
 8003eb6:	4b57      	ldr	r3, [pc, #348]	; (8004014 <main_loop+0x2b8>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	3b02      	subs	r3, #2
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d860      	bhi.n	8003f82 <main_loop+0x226>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <main_loop+0x16c>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ee5 	.word	0x08003ee5
 8003ecc:	08003ef3 	.word	0x08003ef3
 8003ed0:	08003f01 	.word	0x08003f01
 8003ed4:	08003f1b 	.word	0x08003f1b
 8003ed8:	08003f35 	.word	0x08003f35
 8003edc:	08003f4f 	.word	0x08003f4f
 8003ee0:	08003f69 	.word	0x08003f69
			case 2:
				// Run only
				led_num(2);
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f7fd fd21 	bl	800192c <led_num>
				Memory_Flag = 0;
 8003eea:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <main_loop+0x2bc>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
				break;
 8003ef0:	e04b      	b.n	8003f8a <main_loop+0x22e>
			case 3:
				// Run & data flash
				led_num(3);
 8003ef2:	2003      	movs	r0, #3
 8003ef4:	f7fd fd1a 	bl	800192c <led_num>
				Memory_Flag = 1;
 8003ef8:	4b47      	ldr	r3, [pc, #284]	; (8004018 <main_loop+0x2bc>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
				break;
 8003efe:	e044      	b.n	8003f8a <main_loop+0x22e>
			case 4:
				// Speed Control speed1
				led_num(4);
 8003f00:	2004      	movs	r0, #4
 8003f02:	f7fd fd13 	bl	800192c <led_num>
				Memory_Flag = 2;
 8003f06:	4b44      	ldr	r3, [pc, #272]	; (8004018 <main_loop+0x2bc>)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8003f0c:	4a43      	ldr	r2, [pc, #268]	; (800401c <main_loop+0x2c0>)
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	4c43      	ldr	r4, [pc, #268]	; (8004020 <main_loop+0x2c4>)
 8003f14:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8003f18:	e037      	b.n	8003f8a <main_loop+0x22e>
			case 5:
				// Speed Control speed2
				led_num(5);
 8003f1a:	2005      	movs	r0, #5
 8003f1c:	f7fd fd06 	bl	800192c <led_num>
				Memory_Flag = 2;
 8003f20:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <main_loop+0x2bc>)
 8003f22:	2202      	movs	r2, #2
 8003f24:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8003f26:	4a3d      	ldr	r2, [pc, #244]	; (800401c <main_loop+0x2c0>)
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	4c3c      	ldr	r4, [pc, #240]	; (8004020 <main_loop+0x2c4>)
 8003f2e:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8003f32:	e02a      	b.n	8003f8a <main_loop+0x22e>
			case 6:
				// Speed Control speed3
				led_num(6);
 8003f34:	2006      	movs	r0, #6
 8003f36:	f7fd fcf9 	bl	800192c <led_num>
				Memory_Flag = 2;
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <main_loop+0x2bc>)
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8003f40:	4a36      	ldr	r2, [pc, #216]	; (800401c <main_loop+0x2c0>)
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	4c36      	ldr	r4, [pc, #216]	; (8004020 <main_loop+0x2c4>)
 8003f48:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8003f4c:	e01d      	b.n	8003f8a <main_loop+0x22e>
			case 7:
				// Speed Control speed4
				led_num(7);
 8003f4e:	2007      	movs	r0, #7
 8003f50:	f7fd fcec 	bl	800192c <led_num>
				Memory_Flag = 2;
 8003f54:	4b30      	ldr	r3, [pc, #192]	; (8004018 <main_loop+0x2bc>)
 8003f56:	2202      	movs	r2, #2
 8003f58:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8003f5a:	4a30      	ldr	r2, [pc, #192]	; (800401c <main_loop+0x2c0>)
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	4c2f      	ldr	r4, [pc, #188]	; (8004020 <main_loop+0x2c4>)
 8003f62:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8003f66:	e010      	b.n	8003f8a <main_loop+0x22e>
			case 8:
				// Speed Control speed5
				led_num(8);
 8003f68:	2008      	movs	r0, #8
 8003f6a:	f7fd fcdf 	bl	800192c <led_num>
				Memory_Flag = 2;
 8003f6e:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <main_loop+0x2bc>)
 8003f70:	2202      	movs	r2, #2
 8003f72:	701a      	strb	r2, [r3, #0]
				Max_Speed = 2.5;
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <main_loop+0x2c0>)
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	4c29      	ldr	r4, [pc, #164]	; (8004020 <main_loop+0x2c4>)
 8003f7c:	e9c2 3400 	strd	r3, r4, [r2]
				break;
 8003f80:	e003      	b.n	8003f8a <main_loop+0x22e>
			default:
				LineTrace_Flag = 0;
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <main_loop+0x294>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
				break;
 8003f88:	bf00      	nop
		}
		if( Start_Flag == 0 ) LineTrace_Flag = 1;
 8003f8a:	4b21      	ldr	r3, [pc, #132]	; (8004010 <main_loop+0x2b4>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <main_loop+0x23e>
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <main_loop+0x294>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e01c      	b.n	8003fd4 <main_loop+0x278>
		else if( Start_Flag == 1 ) LineTrace_Flag = 2;
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <main_loop+0x2b4>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d103      	bne.n	8003faa <main_loop+0x24e>
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <main_loop+0x294>)
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e014      	b.n	8003fd4 <main_loop+0x278>
		else if( Start_Flag == 2 ){
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <main_loop+0x2b4>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d110      	bne.n	8003fd4 <main_loop+0x278>
			LineTrace_Flag = 3;
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <main_loop+0x294>)
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	701a      	strb	r2, [r3, #0]
			Trace_Init();
 8003fb8:	f7fd fd0c 	bl	80019d4 <Trace_Init>
			stop_init();
 8003fbc:	f7ff f866 	bl	800308c <stop_init>
			Start_Flag = 0;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <main_loop+0x2b4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
			Mode_Flag = 0;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <main_loop+0x298>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
			// data write
			led_num(15);
 8003fcc:	200f      	movs	r0, #15
 8003fce:	f7fd fcad 	bl	800192c <led_num>
			if(Memory_Flag == 1){

			}
			break;
 8003fd2:	e004      	b.n	8003fde <main_loop+0x282>
		}
		HAL_Delay(0.5);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 f8ef 	bl	80041b8 <HAL_Delay>
		if(Mode_Flag == 9) break;
 8003fda:	e761      	b.n	8003ea0 <main_loop+0x144>
 8003fdc:	bf00      	nop
	}

	HAL_Delay(500);
 8003fde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fe2:	f000 f8e9 	bl	80041b8 <HAL_Delay>

}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fee:	bf00      	nop
 8003ff0:	20009a7c 	.word	0x20009a7c
 8003ff4:	20009a7d 	.word	0x20009a7d
 8003ff8:	20009928 	.word	0x20009928
 8003ffc:	20009930 	.word	0x20009930
 8004000:	0800c2b8 	.word	0x0800c2b8
 8004004:	20009838 	.word	0x20009838
 8004008:	20009858 	.word	0x20009858
 800400c:	0800c2e0 	.word	0x0800c2e0
 8004010:	20009b15 	.word	0x20009b15
 8004014:	20009a90 	.word	0x20009a90
 8004018:	20009b14 	.word	0x20009b14
 800401c:	20009830 	.word	0x20009830
 8004020:	40040000 	.word	0x40040000

08004024 <PeriodElapsed_005ms>:

void PeriodElapsed_005ms()
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
	adc_getValues();
 8004028:	f7fd fab2 	bl	8001590 <adc_getValues>
}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}

08004030 <PeriodElapsed_05ms>:


void PeriodElapsed_05ms()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
	updateValues();
 8004034:	f7fd fafa 	bl	800162c <updateValues>
	LineTrace( LineTrace_Flag , Memory_Flag);
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <PeriodElapsed_05ms+0x40>)
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <PeriodElapsed_05ms+0x44>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7fd fcd8 	bl	80019f8 <LineTrace>
	SR = Speed_R();
 8004048:	f7fe ff7e 	bl	8002f48 <Speed_R>
 800404c:	eeb0 7a40 	vmov.f32	s14, s0
 8004050:	eef0 7a60 	vmov.f32	s15, s1
 8004054:	4b08      	ldr	r3, [pc, #32]	; (8004078 <PeriodElapsed_05ms+0x48>)
 8004056:	ed83 7b00 	vstr	d7, [r3]
	SL = Speed_L();
 800405a:	f7fe ffb1 	bl	8002fc0 <Speed_L>
 800405e:	eeb0 7a40 	vmov.f32	s14, s0
 8004062:	eef0 7a60 	vmov.f32	s15, s1
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <PeriodElapsed_05ms+0x4c>)
 8004068:	ed83 7b00 	vstr	d7, [r3]
}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20009a7c 	.word	0x20009a7c
 8004074:	20009b14 	.word	0x20009b14
 8004078:	20009858 	.word	0x20009858
 800407c:	20009838 	.word	0x20009838

08004080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004086:	e003      	b.n	8004090 <LoopCopyDataInit>

08004088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800408a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800408c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800408e:	3104      	adds	r1, #4

08004090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004090:	480b      	ldr	r0, [pc, #44]	; (80040c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004098:	d3f6      	bcc.n	8004088 <CopyDataInit>
  ldr  r2, =_sbss
 800409a:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800409c:	e002      	b.n	80040a4 <LoopFillZerobss>

0800409e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800409e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80040a0:	f842 3b04 	str.w	r3, [r2], #4

080040a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80040a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040a8:	d3f9      	bcc.n	800409e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040aa:	f7ff fe23 	bl	8003cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ae:	f004 fd59 	bl	8008b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040b2:	f7fd fe55 	bl	8001d60 <main>
  bx  lr    
 80040b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80040b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80040bc:	0800c7c8 	.word	0x0800c7c8
  ldr  r0, =_sdata
 80040c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040c4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80040c8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80040cc:	20009e6c 	.word	0x20009e6c

080040d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040d0:	e7fe      	b.n	80040d0 <ADC_IRQHandler>
	...

080040d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_Init+0x40>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <HAL_Init+0x40>)
 80040de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_Init+0x40>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_Init+0x40>)
 80040ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_Init+0x40>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_Init+0x40>)
 80040f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fc:	2003      	movs	r0, #3
 80040fe:	f000 fd41 	bl	8004b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004102:	2000      	movs	r0, #0
 8004104:	f000 f808 	bl	8004118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004108:	f7ff f88a 	bl	8003220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023c00 	.word	0x40023c00

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_InitTick+0x54>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_InitTick+0x58>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fd59 	bl	8004bee <HAL_SYSTICK_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00e      	b.n	8004164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d80a      	bhi.n	8004162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800414c:	2200      	movs	r2, #0
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f000 fd21 	bl	8004b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_InitTick+0x5c>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000000 	.word	0x20000000
 8004170:	20000008 	.word	0x20000008
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_IncTick+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_IncTick+0x24>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_IncTick+0x24>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000008 	.word	0x20000008
 800419c:	20009e64 	.word	0x20009e64

080041a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return uwTick;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_GetTick+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20009e64 	.word	0x20009e64

080041b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff ffee 	bl	80041a0 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d005      	beq.n	80041de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_Delay+0x40>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041de:	bf00      	nop
 80041e0:	f7ff ffde 	bl	80041a0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d8f7      	bhi.n	80041e0 <HAL_Delay+0x28>
  {
  }
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000008 	.word	0x20000008

080041fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e033      	b.n	800427a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff f828 	bl	8003270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d118      	bne.n	800426c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004242:	f023 0302 	bic.w	r3, r3, #2
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa4a 	bl	80046e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
 800426a:	e001      	b.n	8004270 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_Start_DMA+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0cc      	b.n	800443c <HAL_ADC_Start_DMA+0x1b8>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d018      	beq.n	80042ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042c8:	4b5e      	ldr	r3, [pc, #376]	; (8004444 <HAL_ADC_Start_DMA+0x1c0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <HAL_ADC_Start_DMA+0x1c4>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9a      	lsrs	r2, r3, #18
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80042dc:	e002      	b.n	80042e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f9      	bne.n	80042de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 80a0 	bne.w	800443a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004324:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d106      	bne.n	8004348 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f023 0206 	bic.w	r2, r3, #6
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
 8004346:	e002      	b.n	800434e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_ADC_Start_DMA+0x1c8>)
 8004358:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <HAL_ADC_Start_DMA+0x1cc>)
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <HAL_ADC_Start_DMA+0x1d0>)
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	4a3a      	ldr	r2, [pc, #232]	; (8004458 <HAL_ADC_Start_DMA+0x1d4>)
 8004370:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800437a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800438a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	334c      	adds	r3, #76	; 0x4c
 80043a6:	4619      	mov	r1, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f000 fcda 	bl	8004d64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d12a      	bne.n	8004412 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <HAL_ADC_Start_DMA+0x1d8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d015      	beq.n	80043f2 <HAL_ADC_Start_DMA+0x16e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_ADC_Start_DMA+0x1dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_Start_DMA+0x158>
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_ADC_Start_DMA+0x1c8>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a20      	ldr	r2, [pc, #128]	; (8004464 <HAL_ADC_Start_DMA+0x1e0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d129      	bne.n	800443a <HAL_ADC_Start_DMA+0x1b6>
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_ADC_Start_DMA+0x1c8>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2b0f      	cmp	r3, #15
 80043f0:	d823      	bhi.n	800443a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11c      	bne.n	800443a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	e013      	b.n	800443a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a11      	ldr	r2, [pc, #68]	; (800445c <HAL_ADC_Start_DMA+0x1d8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10e      	bne.n	800443a <HAL_ADC_Start_DMA+0x1b6>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004438:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000000 	.word	0x20000000
 8004448:	431bde83 	.word	0x431bde83
 800444c:	40012300 	.word	0x40012300
 8004450:	080048e1 	.word	0x080048e1
 8004454:	0800499b 	.word	0x0800499b
 8004458:	080049b7 	.word	0x080049b7
 800445c:	40012000 	.word	0x40012000
 8004460:	40012100 	.word	0x40012100
 8004464:	40012200 	.word	0x40012200

08004468 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x1c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e105      	b.n	80046cc <HAL_ADC_ConfigChannel+0x228>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b09      	cmp	r3, #9
 80044ce:	d925      	bls.n	800451c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68d9      	ldr	r1, [r3, #12]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	3b1e      	subs	r3, #30
 80044e6:	2207      	movs	r2, #7
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43da      	mvns	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	400a      	ands	r2, r1
 80044f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68d9      	ldr	r1, [r3, #12]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	4618      	mov	r0, r3
 8004508:	4603      	mov	r3, r0
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4403      	add	r3, r0
 800450e:	3b1e      	subs	r3, #30
 8004510:	409a      	lsls	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	e022      	b.n	8004562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6919      	ldr	r1, [r3, #16]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	4613      	mov	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4413      	add	r3, r2
 8004530:	2207      	movs	r2, #7
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	400a      	ands	r2, r1
 800453e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6919      	ldr	r1, [r3, #16]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	4618      	mov	r0, r3
 8004552:	4603      	mov	r3, r0
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4403      	add	r3, r0
 8004558:	409a      	lsls	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b06      	cmp	r3, #6
 8004568:	d824      	bhi.n	80045b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3b05      	subs	r3, #5
 800457c:	221f      	movs	r2, #31
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	400a      	ands	r2, r1
 800458a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	4618      	mov	r0, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	3b05      	subs	r3, #5
 80045a6:	fa00 f203 	lsl.w	r2, r0, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34
 80045b2:	e04c      	b.n	800464e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b0c      	cmp	r3, #12
 80045ba:	d824      	bhi.n	8004606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	3b23      	subs	r3, #35	; 0x23
 80045ce:	221f      	movs	r2, #31
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43da      	mvns	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	400a      	ands	r2, r1
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4618      	mov	r0, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	3b23      	subs	r3, #35	; 0x23
 80045f8:	fa00 f203 	lsl.w	r2, r0, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
 8004604:	e023      	b.n	800464e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	3b41      	subs	r3, #65	; 0x41
 8004618:	221f      	movs	r2, #31
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	400a      	ands	r2, r1
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	4618      	mov	r0, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	3b41      	subs	r3, #65	; 0x41
 8004642:	fa00 f203 	lsl.w	r2, r0, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800464e:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <HAL_ADC_ConfigChannel+0x234>)
 8004650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a21      	ldr	r2, [pc, #132]	; (80046dc <HAL_ADC_ConfigChannel+0x238>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d109      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1cc>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b12      	cmp	r3, #18
 8004662:	d105      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_ADC_ConfigChannel+0x238>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d123      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x21e>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b10      	cmp	r3, #16
 8004680:	d003      	beq.n	800468a <HAL_ADC_ConfigChannel+0x1e6>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b11      	cmp	r3, #17
 8004688:	d11b      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b10      	cmp	r3, #16
 800469c:	d111      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_ADC_ConfigChannel+0x23c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <HAL_ADC_ConfigChannel+0x240>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	0c9a      	lsrs	r2, r3, #18
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046b4:	e002      	b.n	80046bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f9      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40012300 	.word	0x40012300
 80046dc:	40012000 	.word	0x40012000
 80046e0:	20000000 	.word	0x20000000
 80046e4:	431bde83 	.word	0x431bde83

080046e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046f0:	4b79      	ldr	r3, [pc, #484]	; (80048d8 <ADC_Init+0x1f0>)
 80046f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	4a58      	ldr	r2, [pc, #352]	; (80048dc <ADC_Init+0x1f4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d022      	beq.n	80047c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800478e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	e00f      	b.n	80047e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0202 	bic.w	r2, r2, #2
 80047f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7e1b      	ldrb	r3, [r3, #24]
 8004800:	005a      	lsls	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01b      	beq.n	800484c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004822:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004832:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	3b01      	subs	r3, #1
 8004840:	035a      	lsls	r2, r3, #13
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	e007      	b.n	800485c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	3b01      	subs	r3, #1
 8004878:	051a      	lsls	r2, r3, #20
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6899      	ldr	r1, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800489e:	025a      	lsls	r2, r3, #9
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	029a      	lsls	r2, r3, #10
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40012300 	.word	0x40012300
 80048dc:	0f000001 	.word	0x0f000001

080048e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d13c      	bne.n	8004974 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d12b      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004918:	2b00      	cmp	r3, #0
 800491a:	d127      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004934:	2b00      	cmp	r3, #0
 8004936:	d119      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0220 	bic.w	r2, r2, #32
 8004946:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fd7b 	bl	8004468 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004972:	e00e      	b.n	8004992 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fd85 	bl	8004490 <HAL_ADC_ErrorCallback>
}
 8004986:	e004      	b.n	8004992 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd67 	bl	800447c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fd5a 	bl	8004490 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049f4:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <__NVIC_SetPriorityGrouping+0x44>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a16:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <__NVIC_SetPriorityGrouping+0x44>)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	60d3      	str	r3, [r2, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <__NVIC_GetPriorityGrouping+0x18>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0307 	and.w	r3, r3, #7
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db0b      	blt.n	8004a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4907      	ldr	r1, [pc, #28]	; (8004a80 <__NVIC_EnableIRQ+0x38>)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2001      	movs	r0, #1
 8004a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e100 	.word	0xe000e100

08004a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	db0a      	blt.n	8004aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <__NVIC_SetPriority+0x4c>)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	0112      	lsls	r2, r2, #4
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004aac:	e00a      	b.n	8004ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4908      	ldr	r1, [pc, #32]	; (8004ad4 <__NVIC_SetPriority+0x50>)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3b04      	subs	r3, #4
 8004abc:	0112      	lsls	r2, r2, #4
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	761a      	strb	r2, [r3, #24]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	e000e100 	.word	0xe000e100
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f1c3 0307 	rsb	r3, r3, #7
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	bf28      	it	cs
 8004af6:	2304      	movcs	r3, #4
 8004af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3304      	adds	r3, #4
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d902      	bls.n	8004b08 <NVIC_EncodePriority+0x30>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3b03      	subs	r3, #3
 8004b06:	e000      	b.n	8004b0a <NVIC_EncodePriority+0x32>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b20:	f04f 31ff 	mov.w	r1, #4294967295
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	43d9      	mvns	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	4313      	orrs	r3, r2
         );
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3724      	adds	r7, #36	; 0x24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b50:	d301      	bcc.n	8004b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b52:	2301      	movs	r3, #1
 8004b54:	e00f      	b.n	8004b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b56:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <SysTick_Config+0x40>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b5e:	210f      	movs	r1, #15
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	f7ff ff8e 	bl	8004a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <SysTick_Config+0x40>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <SysTick_Config+0x40>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010

08004b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff29 	bl	80049e4 <__NVIC_SetPriorityGrouping>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bac:	f7ff ff3e 	bl	8004a2c <__NVIC_GetPriorityGrouping>
 8004bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	6978      	ldr	r0, [r7, #20]
 8004bb8:	f7ff ff8e 	bl	8004ad8 <NVIC_EncodePriority>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff5d 	bl	8004a84 <__NVIC_SetPriority>
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff31 	bl	8004a48 <__NVIC_EnableIRQ>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff ffa2 	bl	8004b40 <SysTick_Config>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7ff fac4 	bl	80041a0 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e099      	b.n	8004d58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c44:	e00f      	b.n	8004c66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c46:	f7ff faab 	bl	80041a0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d908      	bls.n	8004c66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e078      	b.n	8004d58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e8      	bne.n	8004c46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <HAL_DMA_Init+0x158>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d107      	bne.n	8004cd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d117      	bne.n	8004d2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fa91 	bl	8005234 <DMA_CheckFifoParam>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d26:	2301      	movs	r3, #1
 8004d28:	e016      	b.n	8004d58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa48 	bl	80051c8 <DMA_CalcBaseAndBitshift>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	223f      	movs	r2, #63	; 0x3f
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	f010803f 	.word	0xf010803f

08004d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_Start_IT+0x26>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e040      	b.n	8004e0c <HAL_DMA_Start_IT+0xa8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12f      	bne.n	8004dfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f9da 	bl	800516c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0216 	orr.w	r2, r2, #22
 8004dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e005      	b.n	8004e0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
 8004e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d004      	beq.n	8004e32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2280      	movs	r2, #128	; 0x80
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e00c      	b.n	8004e4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2205      	movs	r2, #5
 8004e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e64:	4b92      	ldr	r3, [pc, #584]	; (80050b0 <HAL_DMA_IRQHandler+0x258>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a92      	ldr	r2, [pc, #584]	; (80050b4 <HAL_DMA_IRQHandler+0x25c>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	2208      	movs	r2, #8
 8004e84:	409a      	lsls	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01a      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2201      	movs	r2, #1
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f043 0202 	orr.w	r2, r3, #2
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	2204      	movs	r2, #4
 8004f00:	409a      	lsls	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	2210      	movs	r2, #16
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d043      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d03c      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	2210      	movs	r2, #16
 8004f54:	409a      	lsls	r2, r3
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d018      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d024      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
 8004f86:	e01f      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e016      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d107      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0208 	bic.w	r2, r2, #8
 8004fb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fcc:	2220      	movs	r2, #32
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 808e 	beq.w	80050f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fee:	2220      	movs	r2, #32
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d136      	bne.n	8005070 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0216 	bic.w	r2, r2, #22
 8005010:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005020:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_DMA_IRQHandler+0x1da>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0208 	bic.w	r2, r2, #8
 8005040:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	223f      	movs	r2, #63	; 0x3f
 8005048:	409a      	lsls	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	2b00      	cmp	r3, #0
 8005064:	d07d      	beq.n	8005162 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
        }
        return;
 800506e:	e078      	b.n	8005162 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01c      	beq.n	80050b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d108      	bne.n	800509e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	2b00      	cmp	r3, #0
 8005092:	d030      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
 800509c:	e02b      	b.n	80050f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d027      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4798      	blx	r3
 80050ae:	e022      	b.n	80050f6 <HAL_DMA_IRQHandler+0x29e>
 80050b0:	20000000 	.word	0x20000000
 80050b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0210 	bic.w	r2, r2, #16
 80050d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d032      	beq.n	8005164 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d022      	beq.n	8005150 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2205      	movs	r2, #5
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	3301      	adds	r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	429a      	cmp	r2, r3
 800512c:	d307      	bcc.n	800513e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f2      	bne.n	8005122 <HAL_DMA_IRQHandler+0x2ca>
 800513c:	e000      	b.n	8005140 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800513e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
 8005160:	e000      	b.n	8005164 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005162:	bf00      	nop
    }
  }
}
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop

0800516c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005188:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d108      	bne.n	80051ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051aa:	e007      	b.n	80051bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3b10      	subs	r3, #16
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <DMA_CalcBaseAndBitshift+0x64>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051e2:	4a13      	ldr	r2, [pc, #76]	; (8005230 <DMA_CalcBaseAndBitshift+0x68>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d909      	bls.n	800520a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	1d1a      	adds	r2, r3, #4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	659a      	str	r2, [r3, #88]	; 0x58
 8005208:	e007      	b.n	800521a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	aaaaaaab 	.word	0xaaaaaaab
 8005230:	0800c318 	.word	0x0800c318

08005234 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11f      	bne.n	800528e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b03      	cmp	r3, #3
 8005252:	d855      	bhi.n	8005300 <DMA_CheckFifoParam+0xcc>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <DMA_CheckFifoParam+0x28>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800527f 	.word	0x0800527f
 8005264:	0800526d 	.word	0x0800526d
 8005268:	08005301 	.word	0x08005301
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d045      	beq.n	8005304 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527c:	e042      	b.n	8005304 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005286:	d13f      	bne.n	8005308 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528c:	e03c      	b.n	8005308 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005296:	d121      	bne.n	80052dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d836      	bhi.n	800530c <DMA_CheckFifoParam+0xd8>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <DMA_CheckFifoParam+0x70>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052bb 	.word	0x080052bb
 80052ac:	080052b5 	.word	0x080052b5
 80052b0:	080052cd 	.word	0x080052cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e02f      	b.n	800531a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d024      	beq.n	8005310 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ca:	e021      	b.n	8005310 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052d4:	d11e      	bne.n	8005314 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052da:	e01b      	b.n	8005314 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d902      	bls.n	80052e8 <DMA_CheckFifoParam+0xb4>
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d003      	beq.n	80052ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052e6:	e018      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
      break;
 80052ec:	e015      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00e      	beq.n	8005318 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
      break;
 80052fe:	e00b      	b.n	8005318 <DMA_CheckFifoParam+0xe4>
      break;
 8005300:	bf00      	nop
 8005302:	e00a      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;
 8005304:	bf00      	nop
 8005306:	e008      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;
 8005308:	bf00      	nop
 800530a:	e006      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;
 800530c:	bf00      	nop
 800530e:	e004      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;
 8005310:	bf00      	nop
 8005312:	e002      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;   
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <DMA_CheckFifoParam+0xe6>
      break;
 8005318:	bf00      	nop
    }
  } 
  
  return status; 
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005328:	b480      	push	{r7}
 800532a:	b089      	sub	sp, #36	; 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e16b      	b.n	800561c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005344:	2201      	movs	r2, #1
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	429a      	cmp	r2, r3
 800535e:	f040 815a 	bne.w	8005616 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d00b      	beq.n	8005382 <HAL_GPIO_Init+0x5a>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d007      	beq.n	8005382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005376:	2b11      	cmp	r3, #17
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b12      	cmp	r3, #18
 8005380:	d130      	bne.n	80053e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	2203      	movs	r2, #3
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053b8:	2201      	movs	r2, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 0201 	and.w	r2, r3, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	2203      	movs	r2, #3
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0xfc>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b12      	cmp	r3, #18
 8005422:	d123      	bne.n	800546c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	08da      	lsrs	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3208      	adds	r2, #8
 800542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	220f      	movs	r2, #15
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	08da      	lsrs	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3208      	adds	r2, #8
 8005466:	69b9      	ldr	r1, [r7, #24]
 8005468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	2203      	movs	r2, #3
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 0203 	and.w	r2, r3, #3
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80b4 	beq.w	8005616 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	4b5f      	ldr	r3, [pc, #380]	; (8005630 <HAL_GPIO_Init+0x308>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	4a5e      	ldr	r2, [pc, #376]	; (8005630 <HAL_GPIO_Init+0x308>)
 80054b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054bc:	6453      	str	r3, [r2, #68]	; 0x44
 80054be:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <HAL_GPIO_Init+0x308>)
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ca:	4a5a      	ldr	r2, [pc, #360]	; (8005634 <HAL_GPIO_Init+0x30c>)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	089b      	lsrs	r3, r3, #2
 80054d0:	3302      	adds	r3, #2
 80054d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	220f      	movs	r2, #15
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a51      	ldr	r2, [pc, #324]	; (8005638 <HAL_GPIO_Init+0x310>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02b      	beq.n	800554e <HAL_GPIO_Init+0x226>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a50      	ldr	r2, [pc, #320]	; (800563c <HAL_GPIO_Init+0x314>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d025      	beq.n	800554a <HAL_GPIO_Init+0x222>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a4f      	ldr	r2, [pc, #316]	; (8005640 <HAL_GPIO_Init+0x318>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01f      	beq.n	8005546 <HAL_GPIO_Init+0x21e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a4e      	ldr	r2, [pc, #312]	; (8005644 <HAL_GPIO_Init+0x31c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d019      	beq.n	8005542 <HAL_GPIO_Init+0x21a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a4d      	ldr	r2, [pc, #308]	; (8005648 <HAL_GPIO_Init+0x320>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_GPIO_Init+0x216>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a4c      	ldr	r2, [pc, #304]	; (800564c <HAL_GPIO_Init+0x324>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00d      	beq.n	800553a <HAL_GPIO_Init+0x212>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a4b      	ldr	r2, [pc, #300]	; (8005650 <HAL_GPIO_Init+0x328>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <HAL_GPIO_Init+0x20e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a4a      	ldr	r2, [pc, #296]	; (8005654 <HAL_GPIO_Init+0x32c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d101      	bne.n	8005532 <HAL_GPIO_Init+0x20a>
 800552e:	2307      	movs	r3, #7
 8005530:	e00e      	b.n	8005550 <HAL_GPIO_Init+0x228>
 8005532:	2308      	movs	r3, #8
 8005534:	e00c      	b.n	8005550 <HAL_GPIO_Init+0x228>
 8005536:	2306      	movs	r3, #6
 8005538:	e00a      	b.n	8005550 <HAL_GPIO_Init+0x228>
 800553a:	2305      	movs	r3, #5
 800553c:	e008      	b.n	8005550 <HAL_GPIO_Init+0x228>
 800553e:	2304      	movs	r3, #4
 8005540:	e006      	b.n	8005550 <HAL_GPIO_Init+0x228>
 8005542:	2303      	movs	r3, #3
 8005544:	e004      	b.n	8005550 <HAL_GPIO_Init+0x228>
 8005546:	2302      	movs	r3, #2
 8005548:	e002      	b.n	8005550 <HAL_GPIO_Init+0x228>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_GPIO_Init+0x228>
 800554e:	2300      	movs	r3, #0
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	f002 0203 	and.w	r2, r2, #3
 8005556:	0092      	lsls	r2, r2, #2
 8005558:	4093      	lsls	r3, r2
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005560:	4934      	ldr	r1, [pc, #208]	; (8005634 <HAL_GPIO_Init+0x30c>)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	089b      	lsrs	r3, r3, #2
 8005566:	3302      	adds	r3, #2
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800556e:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <HAL_GPIO_Init+0x330>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005592:	4a31      	ldr	r2, [pc, #196]	; (8005658 <HAL_GPIO_Init+0x330>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005598:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <HAL_GPIO_Init+0x330>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055bc:	4a26      	ldr	r2, [pc, #152]	; (8005658 <HAL_GPIO_Init+0x330>)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <HAL_GPIO_Init+0x330>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055e6:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <HAL_GPIO_Init+0x330>)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <HAL_GPIO_Init+0x330>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	43db      	mvns	r3, r3
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005610:	4a11      	ldr	r2, [pc, #68]	; (8005658 <HAL_GPIO_Init+0x330>)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	f67f ae90 	bls.w	8005344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005624:	bf00      	nop
 8005626:	3724      	adds	r7, #36	; 0x24
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40023800 	.word	0x40023800
 8005634:	40013800 	.word	0x40013800
 8005638:	40020000 	.word	0x40020000
 800563c:	40020400 	.word	0x40020400
 8005640:	40020800 	.word	0x40020800
 8005644:	40020c00 	.word	0x40020c00
 8005648:	40021000 	.word	0x40021000
 800564c:	40021400 	.word	0x40021400
 8005650:	40021800 	.word	0x40021800
 8005654:	40021c00 	.word	0x40021c00
 8005658:	40013c00 	.word	0x40013c00

0800565c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	887b      	ldrh	r3, [r7, #2]
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
 8005678:	e001      	b.n	800567e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	807b      	strh	r3, [r7, #2]
 8005698:	4613      	mov	r3, r2
 800569a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800569c:	787b      	ldrb	r3, [r7, #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056a2:	887a      	ldrh	r2, [r7, #2]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056a8:	e003      	b.n	80056b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056aa:	887b      	ldrh	r3, [r7, #2]
 80056ac:	041a      	lsls	r2, r3, #16
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	619a      	str	r2, [r3, #24]
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e11f      	b.n	8005912 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd fe72 	bl	80033d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2224      	movs	r2, #36	; 0x24
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005724:	f000 fd18 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8005728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4a7b      	ldr	r2, [pc, #492]	; (800591c <HAL_I2C_Init+0x25c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d807      	bhi.n	8005744 <HAL_I2C_Init+0x84>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a7a      	ldr	r2, [pc, #488]	; (8005920 <HAL_I2C_Init+0x260>)
 8005738:	4293      	cmp	r3, r2
 800573a:	bf94      	ite	ls
 800573c:	2301      	movls	r3, #1
 800573e:	2300      	movhi	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e006      	b.n	8005752 <HAL_I2C_Init+0x92>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a77      	ldr	r2, [pc, #476]	; (8005924 <HAL_I2C_Init+0x264>)
 8005748:	4293      	cmp	r3, r2
 800574a:	bf94      	ite	ls
 800574c:	2301      	movls	r3, #1
 800574e:	2300      	movhi	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e0db      	b.n	8005912 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a72      	ldr	r2, [pc, #456]	; (8005928 <HAL_I2C_Init+0x268>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	0c9b      	lsrs	r3, r3, #18
 8005764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a64      	ldr	r2, [pc, #400]	; (800591c <HAL_I2C_Init+0x25c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d802      	bhi.n	8005794 <HAL_I2C_Init+0xd4>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3301      	adds	r3, #1
 8005792:	e009      	b.n	80057a8 <HAL_I2C_Init+0xe8>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	4a63      	ldr	r2, [pc, #396]	; (800592c <HAL_I2C_Init+0x26c>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	099b      	lsrs	r3, r3, #6
 80057a6:	3301      	adds	r3, #1
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4956      	ldr	r1, [pc, #344]	; (800591c <HAL_I2C_Init+0x25c>)
 80057c4:	428b      	cmp	r3, r1
 80057c6:	d80d      	bhi.n	80057e4 <HAL_I2C_Init+0x124>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1e59      	subs	r1, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057dc:	2b04      	cmp	r3, #4
 80057de:	bf38      	it	cc
 80057e0:	2304      	movcc	r3, #4
 80057e2:	e04f      	b.n	8005884 <HAL_I2C_Init+0x1c4>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d111      	bne.n	8005810 <HAL_I2C_Init+0x150>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1e58      	subs	r0, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	440b      	add	r3, r1
 80057fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80057fe:	3301      	adds	r3, #1
 8005800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005804:	2b00      	cmp	r3, #0
 8005806:	bf0c      	ite	eq
 8005808:	2301      	moveq	r3, #1
 800580a:	2300      	movne	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e012      	b.n	8005836 <HAL_I2C_Init+0x176>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1e58      	subs	r0, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	0099      	lsls	r1, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	fbb0 f3f3 	udiv	r3, r0, r3
 8005826:	3301      	adds	r3, #1
 8005828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Init+0x17e>
 800583a:	2301      	movs	r3, #1
 800583c:	e022      	b.n	8005884 <HAL_I2C_Init+0x1c4>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10e      	bne.n	8005864 <HAL_I2C_Init+0x1a4>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1e58      	subs	r0, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	440b      	add	r3, r1
 8005854:	fbb0 f3f3 	udiv	r3, r0, r3
 8005858:	3301      	adds	r3, #1
 800585a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005862:	e00f      	b.n	8005884 <HAL_I2C_Init+0x1c4>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1e58      	subs	r0, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	0099      	lsls	r1, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	fbb0 f3f3 	udiv	r3, r0, r3
 800587a:	3301      	adds	r3, #1
 800587c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	6809      	ldr	r1, [r1, #0]
 8005888:	4313      	orrs	r3, r2
 800588a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6911      	ldr	r1, [r2, #16]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68d2      	ldr	r2, [r2, #12]
 80058be:	4311      	orrs	r1, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	000186a0 	.word	0x000186a0
 8005920:	001e847f 	.word	0x001e847f
 8005924:	003d08ff 	.word	0x003d08ff
 8005928:	431bde83 	.word	0x431bde83
 800592c:	10624dd3 	.word	0x10624dd3

08005930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e25b      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d075      	beq.n	8005a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800594e:	4ba3      	ldr	r3, [pc, #652]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b04      	cmp	r3, #4
 8005958:	d00c      	beq.n	8005974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595a:	4ba0      	ldr	r3, [pc, #640]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005962:	2b08      	cmp	r3, #8
 8005964:	d112      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005966:	4b9d      	ldr	r3, [pc, #628]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005972:	d10b      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	4b99      	ldr	r3, [pc, #612]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05b      	beq.n	8005a38 <HAL_RCC_OscConfig+0x108>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d157      	bne.n	8005a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e236      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_OscConfig+0x74>
 8005996:	4b91      	ldr	r3, [pc, #580]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a90      	ldr	r2, [pc, #576]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e01d      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x98>
 80059ae:	4b8b      	ldr	r3, [pc, #556]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a8a      	ldr	r2, [pc, #552]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a87      	ldr	r2, [pc, #540]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059c8:	4b84      	ldr	r3, [pc, #528]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a83      	ldr	r2, [pc, #524]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a80      	ldr	r2, [pc, #512]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 80059da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d013      	beq.n	8005a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fe fbda 	bl	80041a0 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fe fbd6 	bl	80041a0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e1fb      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b76      	ldr	r3, [pc, #472]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0xc0>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fe fbc6 	bl	80041a0 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fe fbc2 	bl	80041a0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	; 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e1e7      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2a:	4b6c      	ldr	r3, [pc, #432]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0xe8>
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d063      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a46:	4b65      	ldr	r3, [pc, #404]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a52:	4b62      	ldr	r3, [pc, #392]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d11c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5e:	4b5f      	ldr	r3, [pc, #380]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d116      	bne.n	8005a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6a:	4b5c      	ldr	r3, [pc, #368]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_RCC_OscConfig+0x152>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e1bb      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a82:	4b56      	ldr	r3, [pc, #344]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4952      	ldr	r1, [pc, #328]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a96:	e03a      	b.n	8005b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa0:	4b4f      	ldr	r3, [pc, #316]	; (8005be0 <HAL_RCC_OscConfig+0x2b0>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fe fb7b 	bl	80041a0 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aae:	f7fe fb77 	bl	80041a0 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e19c      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac0:	4b46      	ldr	r3, [pc, #280]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	4b43      	ldr	r3, [pc, #268]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	4940      	ldr	r1, [pc, #256]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	600b      	str	r3, [r1, #0]
 8005ae0:	e015      	b.n	8005b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <HAL_RCC_OscConfig+0x2b0>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fe fb5a 	bl	80041a0 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af0:	f7fe fb56 	bl	80041a0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e17b      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b02:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d030      	beq.n	8005b7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_RCC_OscConfig+0x2b4>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fe fb3a 	bl	80041a0 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fe fb36 	bl	80041a0 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e15b      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x200>
 8005b4e:	e015      	b.n	8005b7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b50:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <HAL_RCC_OscConfig+0x2b4>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b56:	f7fe fb23 	bl	80041a0 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7fe fb1f 	bl	80041a0 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e144      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b70:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a0 	beq.w	8005cca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10f      	bne.n	8005bba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <HAL_RCC_OscConfig+0x2ac>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_OscConfig+0x2b8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d121      	bne.n	8005c0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <HAL_RCC_OscConfig+0x2b8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <HAL_RCC_OscConfig+0x2b8>)
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd2:	f7fe fae5 	bl	80041a0 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd8:	e011      	b.n	8005bfe <HAL_RCC_OscConfig+0x2ce>
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	42470000 	.word	0x42470000
 8005be4:	42470e80 	.word	0x42470e80
 8005be8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bec:	f7fe fad8 	bl	80041a0 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0fd      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfe:	4b81      	ldr	r3, [pc, #516]	; (8005e04 <HAL_RCC_OscConfig+0x4d4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d106      	bne.n	8005c20 <HAL_RCC_OscConfig+0x2f0>
 8005c12:	4b7d      	ldr	r3, [pc, #500]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a7c      	ldr	r2, [pc, #496]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1e:	e01c      	b.n	8005c5a <HAL_RCC_OscConfig+0x32a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b05      	cmp	r3, #5
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCC_OscConfig+0x312>
 8005c28:	4b77      	ldr	r3, [pc, #476]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	4a76      	ldr	r2, [pc, #472]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c2e:	f043 0304 	orr.w	r3, r3, #4
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
 8005c34:	4b74      	ldr	r3, [pc, #464]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	4a73      	ldr	r2, [pc, #460]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c40:	e00b      	b.n	8005c5a <HAL_RCC_OscConfig+0x32a>
 8005c42:	4b71      	ldr	r3, [pc, #452]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	4a70      	ldr	r2, [pc, #448]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4e:	4b6e      	ldr	r3, [pc, #440]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a6d      	ldr	r2, [pc, #436]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d015      	beq.n	8005c8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c62:	f7fe fa9d 	bl	80041a0 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c68:	e00a      	b.n	8005c80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c6a:	f7fe fa99 	bl	80041a0 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e0bc      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c80:	4b61      	ldr	r3, [pc, #388]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0ee      	beq.n	8005c6a <HAL_RCC_OscConfig+0x33a>
 8005c8c:	e014      	b.n	8005cb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8e:	f7fe fa87 	bl	80041a0 <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c94:	e00a      	b.n	8005cac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c96:	f7fe fa83 	bl	80041a0 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0a6      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cac:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1ee      	bne.n	8005c96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d105      	bne.n	8005cca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cbe:	4b52      	ldr	r3, [pc, #328]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	4a51      	ldr	r2, [pc, #324]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8092 	beq.w	8005df8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cd4:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 030c 	and.w	r3, r3, #12
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d05c      	beq.n	8005d9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d141      	bne.n	8005d6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce8:	4b48      	ldr	r3, [pc, #288]	; (8005e0c <HAL_RCC_OscConfig+0x4dc>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cee:	f7fe fa57 	bl	80041a0 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf6:	f7fe fa53 	bl	80041a0 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e078      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d08:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f0      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	019b      	lsls	r3, r3, #6
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	4933      	ldr	r1, [pc, #204]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d3e:	4b33      	ldr	r3, [pc, #204]	; (8005e0c <HAL_RCC_OscConfig+0x4dc>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fe fa2c 	bl	80041a0 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fe fa28 	bl	80041a0 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e04d      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x41c>
 8005d6a:	e045      	b.n	8005df8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_RCC_OscConfig+0x4dc>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d72:	f7fe fa15 	bl	80041a0 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d7a:	f7fe fa11 	bl	80041a0 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e036      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f0      	bne.n	8005d7a <HAL_RCC_OscConfig+0x44a>
 8005d98:	e02e      	b.n	8005df8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e029      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005da6:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <HAL_RCC_OscConfig+0x4d8>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11c      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d115      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dce:	4013      	ands	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d106      	bne.n	8005df4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40007000 	.word	0x40007000
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	42470060 	.word	0x42470060

08005e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0cc      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e24:	4b68      	ldr	r3, [pc, #416]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90c      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b65      	ldr	r3, [pc, #404]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b63      	ldr	r3, [pc, #396]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0b8      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e64:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a58      	ldr	r2, [pc, #352]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e7c:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a52      	ldr	r2, [pc, #328]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e88:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	494d      	ldr	r1, [pc, #308]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d044      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d119      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e07f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ece:	4b3f      	ldr	r3, [pc, #252]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e06f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ede:	4b3b      	ldr	r3, [pc, #236]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e067      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eee:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f023 0203 	bic.w	r2, r3, #3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4934      	ldr	r1, [pc, #208]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f00:	f7fe f94e 	bl	80041a0 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	e00a      	b.n	8005f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f08:	f7fe f94a 	bl	80041a0 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e04f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 020c 	and.w	r2, r3, #12
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d1eb      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d20c      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b22      	ldr	r3, [pc, #136]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e032      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4916      	ldr	r1, [pc, #88]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	490e      	ldr	r1, [pc, #56]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f96:	f000 f821 	bl	8005fdc <HAL_RCC_GetSysClockFreq>
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa8:	5cd3      	ldrb	r3, [r2, r3]
 8005faa:	fa21 f303 	lsr.w	r3, r1, r3
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe f8ae 	bl	8004118 <HAL_InitTick>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40023c00 	.word	0x40023c00
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	0800c300 	.word	0x0800c300
 8005fd4:	20000000 	.word	0x20000000
 8005fd8:	20000004 	.word	0x20000004

08005fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	2300      	movs	r3, #0
 8005fec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ff2:	4b50      	ldr	r3, [pc, #320]	; (8006134 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d007      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x32>
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d008      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x38>
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 808d 	bne.w	8006122 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006008:	4b4b      	ldr	r3, [pc, #300]	; (8006138 <HAL_RCC_GetSysClockFreq+0x15c>)
 800600a:	60bb      	str	r3, [r7, #8]
       break;
 800600c:	e08c      	b.n	8006128 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800600e:	4b4b      	ldr	r3, [pc, #300]	; (800613c <HAL_RCC_GetSysClockFreq+0x160>)
 8006010:	60bb      	str	r3, [r7, #8]
      break;
 8006012:	e089      	b.n	8006128 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006014:	4b47      	ldr	r3, [pc, #284]	; (8006134 <HAL_RCC_GetSysClockFreq+0x158>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800601e:	4b45      	ldr	r3, [pc, #276]	; (8006134 <HAL_RCC_GetSysClockFreq+0x158>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d023      	beq.n	8006072 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800602a:	4b42      	ldr	r3, [pc, #264]	; (8006134 <HAL_RCC_GetSysClockFreq+0x158>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	099b      	lsrs	r3, r3, #6
 8006030:	f04f 0400 	mov.w	r4, #0
 8006034:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	ea03 0501 	and.w	r5, r3, r1
 8006040:	ea04 0602 	and.w	r6, r4, r2
 8006044:	4a3d      	ldr	r2, [pc, #244]	; (800613c <HAL_RCC_GetSysClockFreq+0x160>)
 8006046:	fb02 f106 	mul.w	r1, r2, r6
 800604a:	2200      	movs	r2, #0
 800604c:	fb02 f205 	mul.w	r2, r2, r5
 8006050:	440a      	add	r2, r1
 8006052:	493a      	ldr	r1, [pc, #232]	; (800613c <HAL_RCC_GetSysClockFreq+0x160>)
 8006054:	fba5 0101 	umull	r0, r1, r5, r1
 8006058:	1853      	adds	r3, r2, r1
 800605a:	4619      	mov	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f04f 0400 	mov.w	r4, #0
 8006062:	461a      	mov	r2, r3
 8006064:	4623      	mov	r3, r4
 8006066:	f7fa fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800606a:	4603      	mov	r3, r0
 800606c:	460c      	mov	r4, r1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e049      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006072:	4b30      	ldr	r3, [pc, #192]	; (8006134 <HAL_RCC_GetSysClockFreq+0x158>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	f04f 0400 	mov.w	r4, #0
 800607c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	ea03 0501 	and.w	r5, r3, r1
 8006088:	ea04 0602 	and.w	r6, r4, r2
 800608c:	4629      	mov	r1, r5
 800608e:	4632      	mov	r2, r6
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	f04f 0400 	mov.w	r4, #0
 8006098:	0154      	lsls	r4, r2, #5
 800609a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800609e:	014b      	lsls	r3, r1, #5
 80060a0:	4619      	mov	r1, r3
 80060a2:	4622      	mov	r2, r4
 80060a4:	1b49      	subs	r1, r1, r5
 80060a6:	eb62 0206 	sbc.w	r2, r2, r6
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	0194      	lsls	r4, r2, #6
 80060b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060b8:	018b      	lsls	r3, r1, #6
 80060ba:	1a5b      	subs	r3, r3, r1
 80060bc:	eb64 0402 	sbc.w	r4, r4, r2
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	00e2      	lsls	r2, r4, #3
 80060ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060ce:	00d9      	lsls	r1, r3, #3
 80060d0:	460b      	mov	r3, r1
 80060d2:	4614      	mov	r4, r2
 80060d4:	195b      	adds	r3, r3, r5
 80060d6:	eb44 0406 	adc.w	r4, r4, r6
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	02a2      	lsls	r2, r4, #10
 80060e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060e8:	0299      	lsls	r1, r3, #10
 80060ea:	460b      	mov	r3, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	4621      	mov	r1, r4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	f7fa fdc4 	bl	8000c88 <__aeabi_uldivmod>
 8006100:	4603      	mov	r3, r0
 8006102:	460c      	mov	r4, r1
 8006104:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006106:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_RCC_GetSysClockFreq+0x158>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	3301      	adds	r3, #1
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	60bb      	str	r3, [r7, #8]
      break;
 8006120:	e002      	b.n	8006128 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006124:	60bb      	str	r3, [r7, #8]
      break;
 8006126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006128:	68bb      	ldr	r3, [r7, #8]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	bf00      	nop
 8006134:	40023800 	.word	0x40023800
 8006138:	00f42400 	.word	0x00f42400
 800613c:	017d7840 	.word	0x017d7840

08006140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <HAL_RCC_GetHCLKFreq+0x14>)
 8006146:	681b      	ldr	r3, [r3, #0]
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000000 	.word	0x20000000

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800615c:	f7ff fff0 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8006160:	4601      	mov	r1, r0
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	0a9b      	lsrs	r3, r3, #10
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4a03      	ldr	r2, [pc, #12]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 800616e:	5cd3      	ldrb	r3, [r2, r3]
 8006170:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	0800c310 	.word	0x0800c310

08006180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006184:	f7ff ffdc 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8006188:	4601      	mov	r1, r0
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0b5b      	lsrs	r3, r3, #13
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4a03      	ldr	r2, [pc, #12]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006196:	5cd3      	ldrb	r3, [r2, r3]
 8006198:	fa21 f303 	lsr.w	r3, r1, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40023800 	.word	0x40023800
 80061a4:	0800c310 	.word	0x0800c310

080061a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d035      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061d0:	4b62      	ldr	r3, [pc, #392]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061d6:	f7fd ffe3 	bl	80041a0 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061dc:	e008      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061de:	f7fd ffdf 	bl	80041a0 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0b0      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061f0:	4b5b      	ldr	r3, [pc, #364]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f0      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	019a      	lsls	r2, r3, #6
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	071b      	lsls	r3, r3, #28
 8006208:	4955      	ldr	r1, [pc, #340]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006210:	4b52      	ldr	r3, [pc, #328]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006216:	f7fd ffc3 	bl	80041a0 <HAL_GetTick>
 800621a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800621e:	f7fd ffbf 	bl	80041a0 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e090      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006230:	4b4b      	ldr	r3, [pc, #300]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8083 	beq.w	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	4b44      	ldr	r3, [pc, #272]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	4a43      	ldr	r2, [pc, #268]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6413      	str	r3, [r2, #64]	; 0x40
 800625a:	4b41      	ldr	r3, [pc, #260]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a3e      	ldr	r2, [pc, #248]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006272:	f7fd ff95 	bl	80041a0 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006278:	e008      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800627a:	f7fd ff91 	bl	80041a0 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e062      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800628c:	4b35      	ldr	r3, [pc, #212]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006298:	4b31      	ldr	r3, [pc, #196]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d02f      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d028      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b6:	4b2a      	ldr	r3, [pc, #168]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062c0:	4b29      	ldr	r3, [pc, #164]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062c6:	4b28      	ldr	r3, [pc, #160]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062cc:	4a24      	ldr	r2, [pc, #144]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062d2:	4b23      	ldr	r3, [pc, #140]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d114      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062de:	f7fd ff5f 	bl	80041a0 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e4:	e00a      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e6:	f7fd ff5b 	bl	80041a0 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e02a      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fc:	4b18      	ldr	r3, [pc, #96]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ee      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006314:	d10d      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632a:	490d      	ldr	r1, [pc, #52]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800632c:	4313      	orrs	r3, r2
 800632e:	608b      	str	r3, [r1, #8]
 8006330:	e005      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4a0a      	ldr	r2, [pc, #40]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800633c:	6093      	str	r3, [r2, #8]
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800634a:	4905      	ldr	r1, [pc, #20]	; (8006360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	42470068 	.word	0x42470068
 8006360:	40023800 	.word	0x40023800
 8006364:	40007000 	.word	0x40007000
 8006368:	42470e40 	.word	0x42470e40

0800636c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e083      	b.n	8006486 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	7f5b      	ldrb	r3, [r3, #29]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fd f866 	bl	8003460 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	22ca      	movs	r2, #202	; 0xca
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2253      	movs	r2, #83	; 0x53
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f897 	bl	80064de <RTC_EnterInitMode>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	22ff      	movs	r2, #255	; 0xff
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2204      	movs	r2, #4
 80063c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e05e      	b.n	8006486 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063da:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	68d2      	ldr	r2, [r2, #12]
 8006402:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6919      	ldr	r1, [r3, #16]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	041a      	lsls	r2, r3, #16
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006426:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10e      	bne.n	8006454 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f829 	bl	800648e <HAL_RTC_WaitForSynchro>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	22ff      	movs	r2, #255	; 0xff
 8006448:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2204      	movs	r2, #4
 800644e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e018      	b.n	8006486 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	22ff      	movs	r2, #255	; 0xff
 800647c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064aa:	f7fd fe79 	bl	80041a0 <HAL_GetTick>
 80064ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80064b0:	e009      	b.n	80064c6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064b2:	f7fd fe75 	bl	80041a0 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064c0:	d901      	bls.n	80064c6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e007      	b.n	80064d6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0ee      	beq.n	80064b2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d119      	bne.n	800652c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006502:	f7fd fe4d 	bl	80041a0 <HAL_GetTick>
 8006506:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006508:	e009      	b.n	800651e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800650a:	f7fd fe49 	bl	80041a0 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006518:	d901      	bls.n	800651e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e007      	b.n	800652e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ee      	beq.n	800650a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e056      	b.n	80065f6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc ff92 	bl	800348c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	ea42 0103 	orr.w	r1, r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0104 	and.w	r1, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b088      	sub	sp, #32
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_SPI_Transmit+0x22>
 800661c:	2302      	movs	r3, #2
 800661e:	e11e      	b.n	800685e <HAL_SPI_Transmit+0x260>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006628:	f7fd fdba 	bl	80041a0 <HAL_GetTick>
 800662c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d002      	beq.n	8006644 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800663e:	2302      	movs	r3, #2
 8006640:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006642:	e103      	b.n	800684c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_SPI_Transmit+0x52>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006654:	e0fa      	b.n	800684c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2203      	movs	r2, #3
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669c:	d107      	bne.n	80066ae <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	d007      	beq.n	80066cc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d4:	d14b      	bne.n	800676e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Transmit+0xe6>
 80066de:	8afb      	ldrh	r3, [r7, #22]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d13e      	bne.n	8006762 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	881a      	ldrh	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006708:	e02b      	b.n	8006762 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b02      	cmp	r3, #2
 8006716:	d112      	bne.n	800673e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	881a      	ldrh	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	1c9a      	adds	r2, r3, #2
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	86da      	strh	r2, [r3, #54]	; 0x36
 800673c:	e011      	b.n	8006762 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800673e:	f7fd fd2f 	bl	80041a0 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d803      	bhi.n	8006756 <HAL_SPI_Transmit+0x158>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006754:	d102      	bne.n	800675c <HAL_SPI_Transmit+0x15e>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006760:	e074      	b.n	800684c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ce      	bne.n	800670a <HAL_SPI_Transmit+0x10c>
 800676c:	e04c      	b.n	8006808 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_SPI_Transmit+0x17e>
 8006776:	8afb      	ldrh	r3, [r7, #22]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d140      	bne.n	80067fe <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	7812      	ldrb	r2, [r2, #0]
 8006788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067a2:	e02c      	b.n	80067fe <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d113      	bne.n	80067da <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80067d8:	e011      	b.n	80067fe <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067da:	f7fd fce1 	bl	80041a0 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d803      	bhi.n	80067f2 <HAL_SPI_Transmit+0x1f4>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Transmit+0x1fa>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067fc:	e026      	b.n	800684c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1cd      	bne.n	80067a4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fba5 	bl	8006f5c <SPI_EndRxTxTransaction>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e000      	b.n	800684c <HAL_SPI_Transmit+0x24e>
  }

error:
 800684a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800685c:	7ffb      	ldrb	r3, [r7, #31]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b088      	sub	sp, #32
 800686a:	af02      	add	r7, sp, #8
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	603b      	str	r3, [r7, #0]
 8006872:	4613      	mov	r3, r2
 8006874:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006882:	d112      	bne.n	80068aa <HAL_SPI_Receive+0x44>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10e      	bne.n	80068aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2204      	movs	r2, #4
 8006890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4613      	mov	r3, r2
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f8e9 	bl	8006a78 <HAL_SPI_TransmitReceive>
 80068a6:	4603      	mov	r3, r0
 80068a8:	e0e2      	b.n	8006a70 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_SPI_Receive+0x52>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0db      	b.n	8006a70 <HAL_SPI_Receive+0x20a>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c0:	f7fd fc6e 	bl	80041a0 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d002      	beq.n	80068d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
 80068d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068d6:	e0c2      	b.n	8006a5e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_Receive+0x7e>
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068e8:	e0b9      	b.n	8006a5e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2204      	movs	r2, #4
 80068ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	88fa      	ldrh	r2, [r7, #6]
 8006908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d107      	bne.n	8006942 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006940:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d007      	beq.n	8006960 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d162      	bne.n	8006a2e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006968:	e02e      	b.n	80069c8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d115      	bne.n	80069a4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f103 020c 	add.w	r2, r3, #12
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069a2:	e011      	b.n	80069c8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a4:	f7fd fbfc 	bl	80041a0 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d803      	bhi.n	80069bc <HAL_SPI_Receive+0x156>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d102      	bne.n	80069c2 <HAL_SPI_Receive+0x15c>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069c6:	e04a      	b.n	8006a5e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1cb      	bne.n	800696a <HAL_SPI_Receive+0x104>
 80069d2:	e031      	b.n	8006a38 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d113      	bne.n	8006a0a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	b292      	uxth	r2, r2
 80069ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	1c9a      	adds	r2, r3, #2
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a08:	e011      	b.n	8006a2e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0a:	f7fd fbc9 	bl	80041a0 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d803      	bhi.n	8006a22 <HAL_SPI_Receive+0x1bc>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d102      	bne.n	8006a28 <HAL_SPI_Receive+0x1c2>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a2c:	e017      	b.n	8006a5e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1cd      	bne.n	80069d4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fa27 	bl	8006e90 <SPI_EndRxTransaction>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]
 8006a5a:	e000      	b.n	8006a5e <HAL_SPI_Receive+0x1f8>
  }

error :
 8006a5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08c      	sub	sp, #48	; 0x30
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a86:	2301      	movs	r3, #1
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x26>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e18a      	b.n	8006db4 <HAL_SPI_TransmitReceive+0x33c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aa6:	f7fd fb7b 	bl	80041a0 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006abc:	887b      	ldrh	r3, [r7, #2]
 8006abe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d00f      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x70>
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d107      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x68>
 8006ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d003      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ae6:	e15b      	b.n	8006da0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_SPI_TransmitReceive+0x82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_SPI_TransmitReceive+0x82>
 8006af4:	887b      	ldrh	r3, [r7, #2]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b00:	e14e      	b.n	8006da0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d003      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2205      	movs	r2, #5
 8006b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	887a      	ldrh	r2, [r7, #2]
 8006b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	887a      	ldrh	r2, [r7, #2]
 8006b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	887a      	ldrh	r2, [r7, #2]
 8006b38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	887a      	ldrh	r2, [r7, #2]
 8006b3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d007      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b72:	d178      	bne.n	8006c66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x10a>
 8006b7c:	8b7b      	ldrh	r3, [r7, #26]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d166      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	881a      	ldrh	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	1c9a      	adds	r2, r3, #2
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba6:	e053      	b.n	8006c50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d11b      	bne.n	8006bee <HAL_SPI_TransmitReceive+0x176>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d016      	beq.n	8006bee <HAL_SPI_TransmitReceive+0x176>
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d113      	bne.n	8006bee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	881a      	ldrh	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	1c9a      	adds	r2, r3, #2
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d119      	bne.n	8006c30 <HAL_SPI_TransmitReceive+0x1b8>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d014      	beq.n	8006c30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	b292      	uxth	r2, r2
 8006c12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c30:	f7fd fab6 	bl	80041a0 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d807      	bhi.n	8006c50 <HAL_SPI_TransmitReceive+0x1d8>
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d003      	beq.n	8006c50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c4e:	e0a7      	b.n	8006da0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1a6      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x130>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1a1      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x130>
 8006c64:	e07c      	b.n	8006d60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0x1fc>
 8006c6e:	8b7b      	ldrh	r3, [r7, #26]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d16b      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	7812      	ldrb	r2, [r2, #0]
 8006c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c9a:	e057      	b.n	8006d4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d11c      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x26c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d017      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x26c>
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d114      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d119      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x2ae>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d014      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d22:	2301      	movs	r3, #1
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d26:	f7fd fa3b 	bl	80041a0 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d803      	bhi.n	8006d3e <HAL_SPI_TransmitReceive+0x2c6>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d102      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x2cc>
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d4a:	e029      	b.n	8006da0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1a2      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x224>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d19d      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f8f9 	bl	8006f5c <SPI_EndRxTxTransaction>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d7c:	e010      	b.n	8006da0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	e000      	b.n	8006da0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006d9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006db0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3730      	adds	r7, #48	; 0x30
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dcc:	e04c      	b.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d048      	beq.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006dd6:	f7fd f9e3 	bl	80041a0 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d902      	bls.n	8006dec <SPI_WaitFlagStateUntilTimeout+0x30>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d13d      	bne.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e04:	d111      	bne.n	8006e2a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e0e:	d004      	beq.n	8006e1a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d107      	bne.n	8006e2a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	d10f      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e00f      	b.n	8006e88 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d1a3      	bne.n	8006dce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea4:	d111      	bne.n	8006eca <SPI_EndRxTransaction+0x3a>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eae:	d004      	beq.n	8006eba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb8:	d107      	bne.n	8006eca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed2:	d12a      	bne.n	8006f2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006edc:	d012      	beq.n	8006f04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2180      	movs	r1, #128	; 0x80
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff ff67 	bl	8006dbc <SPI_WaitFlagStateUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d02d      	beq.n	8006f50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	f043 0220 	orr.w	r2, r3, #32
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e026      	b.n	8006f52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7ff ff54 	bl	8006dbc <SPI_WaitFlagStateUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01a      	beq.n	8006f50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e013      	b.n	8006f52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	2101      	movs	r1, #1
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f7ff ff41 	bl	8006dbc <SPI_WaitFlagStateUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f44:	f043 0220 	orr.w	r2, r3, #32
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e000      	b.n	8006f52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <SPI_EndRxTxTransaction+0x7c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <SPI_EndRxTxTransaction+0x80>)
 8006f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f72:	0d5b      	lsrs	r3, r3, #21
 8006f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f78:	fb02 f303 	mul.w	r3, r2, r3
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f86:	d112      	bne.n	8006fae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2180      	movs	r1, #128	; 0x80
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff ff12 	bl	8006dbc <SPI_WaitFlagStateUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d016      	beq.n	8006fcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	f043 0220 	orr.w	r2, r3, #32
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00f      	b.n	8006fce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc4:	2b80      	cmp	r3, #128	; 0x80
 8006fc6:	d0f2      	beq.n	8006fae <SPI_EndRxTxTransaction+0x52>
 8006fc8:	e000      	b.n	8006fcc <SPI_EndRxTxTransaction+0x70>
        break;
 8006fca:	bf00      	nop
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000000 	.word	0x20000000
 8006fdc:	165e9f81 	.word	0x165e9f81

08006fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e01d      	b.n	800702e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fc fbc0 	bl	800378c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f000 fb56 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0201 	orr.w	r2, r2, #1
 800704c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b06      	cmp	r3, #6
 800705e:	d007      	beq.n	8007070 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e01d      	b.n	80070cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fc fa39 	bl	800351c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f000 fb07 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2201      	movs	r2, #1
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fd42 	bl	8007b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a15      	ldr	r2, [pc, #84]	; (8007148 <HAL_TIM_PWM_Start+0x74>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <HAL_TIM_PWM_Start+0x2c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a14      	ldr	r2, [pc, #80]	; (800714c <HAL_TIM_PWM_Start+0x78>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d101      	bne.n	8007104 <HAL_TIM_PWM_Start+0x30>
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <HAL_TIM_PWM_Start+0x32>
 8007104:	2300      	movs	r3, #0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b06      	cmp	r3, #6
 800712a:	d007      	beq.n	800713c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400

08007150 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e083      	b.n	800726c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fc fa57 	bl	800362c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f000 fa93 	bl	80076d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	4313      	orrs	r3, r2
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071f0:	f023 030c 	bic.w	r3, r3, #12
 80071f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	4313      	orrs	r3, r2
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	011a      	lsls	r2, r3, #4
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	031b      	lsls	r3, r3, #12
 8007220:	4313      	orrs	r3, r2
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	4313      	orrs	r3, r2
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_TIM_Encoder_Start+0x16>
 8007284:	2b04      	cmp	r3, #4
 8007286:	d008      	beq.n	800729a <HAL_TIM_Encoder_Start+0x26>
 8007288:	e00f      	b.n	80072aa <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2201      	movs	r2, #1
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fc6c 	bl	8007b70 <TIM_CCxChannelCmd>
      break;
 8007298:	e016      	b.n	80072c8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2201      	movs	r2, #1
 80072a0:	2104      	movs	r1, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fc64 	bl	8007b70 <TIM_CCxChannelCmd>
      break;
 80072a8:	e00e      	b.n	80072c8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fc5c 	bl	8007b70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2201      	movs	r2, #1
 80072be:	2104      	movs	r1, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fc55 	bl	8007b70 <TIM_CCxChannelCmd>
      break;
 80072c6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d122      	bne.n	800733e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b02      	cmp	r3, #2
 8007304:	d11b      	bne.n	800733e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f06f 0202 	mvn.w	r2, #2
 800730e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f9b5 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 800732a:	e005      	b.n	8007338 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9a7 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9b8 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d122      	bne.n	8007392 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b04      	cmp	r3, #4
 8007358:	d11b      	bne.n	8007392 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0204 	mvn.w	r2, #4
 8007362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f98b 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 800737e:	e005      	b.n	800738c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f97d 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f98e 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b08      	cmp	r3, #8
 800739e:	d122      	bne.n	80073e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d11b      	bne.n	80073e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0208 	mvn.w	r2, #8
 80073b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2204      	movs	r2, #4
 80073bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f961 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 80073d2:	e005      	b.n	80073e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f953 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f964 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d122      	bne.n	800743a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d11b      	bne.n	800743a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f06f 0210 	mvn.w	r2, #16
 800740a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2208      	movs	r2, #8
 8007410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f937 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 8007426:	e005      	b.n	8007434 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f929 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f93a 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	d10e      	bne.n	8007466 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d107      	bne.n	8007466 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f06f 0201 	mvn.w	r2, #1
 800745e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fb fb13 	bl	8002a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d10e      	bne.n	8007492 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747e:	2b80      	cmp	r3, #128	; 0x80
 8007480:	d107      	bne.n	8007492 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800748a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc6d 	bl	8007d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d10e      	bne.n	80074be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074aa:	2b40      	cmp	r3, #64	; 0x40
 80074ac:	d107      	bne.n	80074be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8ff 	bl	80076bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d10e      	bne.n	80074ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d107      	bne.n	80074ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f06f 0220 	mvn.w	r2, #32
 80074e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc37 	bl	8007d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800750a:	2302      	movs	r3, #2
 800750c:	e0b4      	b.n	8007678 <HAL_TIM_PWM_ConfigChannel+0x184>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	f200 809f 	bhi.w	8007664 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007561 	.word	0x08007561
 8007530:	08007665 	.word	0x08007665
 8007534:	08007665 	.word	0x08007665
 8007538:	08007665 	.word	0x08007665
 800753c:	080075a1 	.word	0x080075a1
 8007540:	08007665 	.word	0x08007665
 8007544:	08007665 	.word	0x08007665
 8007548:	08007665 	.word	0x08007665
 800754c:	080075e3 	.word	0x080075e3
 8007550:	08007665 	.word	0x08007665
 8007554:	08007665 	.word	0x08007665
 8007558:	08007665 	.word	0x08007665
 800755c:	08007623 	.word	0x08007623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f952 	bl	8007810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	619a      	str	r2, [r3, #24]
      break;
 800759e:	e062      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f9a2 	bl	80078f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6999      	ldr	r1, [r3, #24]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	619a      	str	r2, [r3, #24]
      break;
 80075e0:	e041      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 f9f7 	bl	80079dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0208 	orr.w	r2, r2, #8
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0204 	bic.w	r2, r2, #4
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	61da      	str	r2, [r3, #28]
      break;
 8007620:	e021      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fa4b 	bl	8007ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69d9      	ldr	r1, [r3, #28]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	021a      	lsls	r2, r3, #8
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	61da      	str	r2, [r3, #28]
      break;
 8007662:	e000      	b.n	8007666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007664:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a40      	ldr	r2, [pc, #256]	; (80077e4 <TIM_Base_SetConfig+0x114>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d013      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d00f      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3d      	ldr	r2, [pc, #244]	; (80077e8 <TIM_Base_SetConfig+0x118>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00b      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a3c      	ldr	r2, [pc, #240]	; (80077ec <TIM_Base_SetConfig+0x11c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d007      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3b      	ldr	r2, [pc, #236]	; (80077f0 <TIM_Base_SetConfig+0x120>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3a      	ldr	r2, [pc, #232]	; (80077f4 <TIM_Base_SetConfig+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2f      	ldr	r2, [pc, #188]	; (80077e4 <TIM_Base_SetConfig+0x114>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d02b      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007730:	d027      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2c      	ldr	r2, [pc, #176]	; (80077e8 <TIM_Base_SetConfig+0x118>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d023      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2b      	ldr	r2, [pc, #172]	; (80077ec <TIM_Base_SetConfig+0x11c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01f      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2a      	ldr	r2, [pc, #168]	; (80077f0 <TIM_Base_SetConfig+0x120>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01b      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a29      	ldr	r2, [pc, #164]	; (80077f4 <TIM_Base_SetConfig+0x124>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d017      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a28      	ldr	r2, [pc, #160]	; (80077f8 <TIM_Base_SetConfig+0x128>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <TIM_Base_SetConfig+0x12c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00f      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a26      	ldr	r2, [pc, #152]	; (8007800 <TIM_Base_SetConfig+0x130>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00b      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a25      	ldr	r2, [pc, #148]	; (8007804 <TIM_Base_SetConfig+0x134>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d007      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a24      	ldr	r2, [pc, #144]	; (8007808 <TIM_Base_SetConfig+0x138>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a23      	ldr	r2, [pc, #140]	; (800780c <TIM_Base_SetConfig+0x13c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d108      	bne.n	8007794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a0a      	ldr	r2, [pc, #40]	; (80077e4 <TIM_Base_SetConfig+0x114>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_Base_SetConfig+0xf8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <TIM_Base_SetConfig+0x124>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d103      	bne.n	80077d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	615a      	str	r2, [r3, #20]
}
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40010000 	.word	0x40010000
 80077e8:	40000400 	.word	0x40000400
 80077ec:	40000800 	.word	0x40000800
 80077f0:	40000c00 	.word	0x40000c00
 80077f4:	40010400 	.word	0x40010400
 80077f8:	40014000 	.word	0x40014000
 80077fc:	40014400 	.word	0x40014400
 8007800:	40014800 	.word	0x40014800
 8007804:	40001800 	.word	0x40001800
 8007808:	40001c00 	.word	0x40001c00
 800780c:	40002000 	.word	0x40002000

08007810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f023 0201 	bic.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 0302 	bic.w	r3, r3, #2
 8007858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <TIM_OC1_SetConfig+0xd8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC1_SetConfig+0x64>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1f      	ldr	r2, [pc, #124]	; (80078ec <TIM_OC1_SetConfig+0xdc>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d10c      	bne.n	800788e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0308 	bic.w	r3, r3, #8
 800787a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <TIM_OC1_SetConfig+0xd8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d003      	beq.n	800789e <TIM_OC1_SetConfig+0x8e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a14      	ldr	r2, [pc, #80]	; (80078ec <TIM_OC1_SetConfig+0xdc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d111      	bne.n	80078c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	621a      	str	r2, [r3, #32]
}
 80078dc:	bf00      	nop
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	40010000 	.word	0x40010000
 80078ec:	40010400 	.word	0x40010400

080078f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0210 	bic.w	r2, r3, #16
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <TIM_OC2_SetConfig+0xe4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_OC2_SetConfig+0x68>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <TIM_OC2_SetConfig+0xe8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d10d      	bne.n	8007974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800795e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a17      	ldr	r2, [pc, #92]	; (80079d4 <TIM_OC2_SetConfig+0xe4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d003      	beq.n	8007984 <TIM_OC2_SetConfig+0x94>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a16      	ldr	r2, [pc, #88]	; (80079d8 <TIM_OC2_SetConfig+0xe8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d113      	bne.n	80079ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800798a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010000 	.word	0x40010000
 80079d8:	40010400 	.word	0x40010400

080079dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a21      	ldr	r2, [pc, #132]	; (8007abc <TIM_OC3_SetConfig+0xe0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d003      	beq.n	8007a42 <TIM_OC3_SetConfig+0x66>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <TIM_OC3_SetConfig+0xe4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10d      	bne.n	8007a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a16      	ldr	r2, [pc, #88]	; (8007abc <TIM_OC3_SetConfig+0xe0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC3_SetConfig+0x92>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <TIM_OC3_SetConfig+0xe4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d113      	bne.n	8007a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	621a      	str	r2, [r3, #32]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40010400 	.word	0x40010400

08007ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	031b      	lsls	r3, r3, #12
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a12      	ldr	r2, [pc, #72]	; (8007b68 <TIM_OC4_SetConfig+0xa4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC4_SetConfig+0x68>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <TIM_OC4_SetConfig+0xa8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d109      	bne.n	8007b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	019b      	lsls	r3, r3, #6
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	621a      	str	r2, [r3, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	40010000 	.word	0x40010000
 8007b6c:	40010400 	.word	0x40010400

08007b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 031f 	and.w	r3, r3, #31
 8007b82:	2201      	movs	r2, #1
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1a      	ldr	r2, [r3, #32]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	43db      	mvns	r3, r3
 8007b92:	401a      	ands	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a1a      	ldr	r2, [r3, #32]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e05a      	b.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d022      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c20:	d01d      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1d      	ldr	r2, [pc, #116]	; (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d018      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1b      	ldr	r2, [pc, #108]	; (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d00e      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d009      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a17      	ldr	r2, [pc, #92]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d004      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d10c      	bne.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40000400 	.word	0x40000400
 8007ca0:	40000800 	.word	0x40000800
 8007ca4:	40000c00 	.word	0x40000c00
 8007ca8:	40010400 	.word	0x40010400
 8007cac:	40014000 	.word	0x40014000
 8007cb0:	40001800 	.word	0x40001800

08007cb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e03d      	b.n	8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e03f      	b.n	8007e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fb fe3a 	bl	8003a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2224      	movs	r2, #36	; 0x24
 8007db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fb4b 	bl	8008460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	695a      	ldr	r2, [r3, #20]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b088      	sub	sp, #32
 8007e1e:	af02      	add	r7, sp, #8
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	603b      	str	r3, [r7, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	f040 8083 	bne.w	8007f42 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <HAL_UART_Transmit+0x2e>
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e07b      	b.n	8007f44 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Transmit+0x40>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e074      	b.n	8007f44 <HAL_UART_Transmit+0x12a>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2221      	movs	r2, #33	; 0x21
 8007e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007e70:	f7fc f996 	bl	80041a0 <HAL_GetTick>
 8007e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	88fa      	ldrh	r2, [r7, #6]
 8007e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	88fa      	ldrh	r2, [r7, #6]
 8007e80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007e8a:	e042      	b.n	8007f12 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea2:	d122      	bne.n	8007eea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2180      	movs	r1, #128	; 0x80
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f96a 	bl	8008188 <UART_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e042      	b.n	8007f44 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	3302      	adds	r3, #2
 8007ede:	60bb      	str	r3, [r7, #8]
 8007ee0:	e017      	b.n	8007f12 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60bb      	str	r3, [r7, #8]
 8007ee8:	e013      	b.n	8007f12 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2180      	movs	r1, #128	; 0x80
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 f947 	bl	8008188 <UART_WaitOnFlagUntilTimeout>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e01f      	b.n	8007f44 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	60ba      	str	r2, [r7, #8]
 8007f0a:	781a      	ldrb	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1b7      	bne.n	8007e8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2140      	movs	r1, #64	; 0x40
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f92e 	bl	8008188 <UART_WaitOnFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e006      	b.n	8007f44 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e000      	b.n	8007f44 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
  }
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <HAL_UART_IRQHandler+0x52>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9e0 	bl	800835c <UART_Receive_IT>
      return;
 8007f9c:	e0d1      	b.n	8008142 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80b0 	beq.w	8008106 <HAL_UART_IRQHandler+0x1ba>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d105      	bne.n	8007fbc <HAL_UART_IRQHandler+0x70>
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 80a5 	beq.w	8008106 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <HAL_UART_IRQHandler+0x90>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd4:	f043 0201 	orr.w	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <HAL_UART_IRQHandler+0xb0>
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff4:	f043 0202 	orr.w	r2, r3, #2
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <HAL_UART_IRQHandler+0xd0>
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008014:	f043 0204 	orr.w	r2, r3, #4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00f      	beq.n	8008046 <HAL_UART_IRQHandler+0xfa>
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d104      	bne.n	800803a <HAL_UART_IRQHandler+0xee>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	f043 0208 	orr.w	r2, r3, #8
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d078      	beq.n	8008140 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <HAL_UART_IRQHandler+0x11c>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f97a 	bl	800835c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <HAL_UART_IRQHandler+0x144>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d031      	beq.n	80080f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8c3 	bl	800821c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d123      	bne.n	80080ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d013      	beq.n	80080e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	4a21      	ldr	r2, [pc, #132]	; (8008148 <HAL_UART_IRQHandler+0x1fc>)
 80080c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fc fea3 	bl	8004e14 <HAL_DMA_Abort_IT>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d016      	beq.n	8008102 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080de:	4610      	mov	r0, r2
 80080e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e2:	e00e      	b.n	8008102 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f845 	bl	8008174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ea:	e00a      	b.n	8008102 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f841 	bl	8008174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f2:	e006      	b.n	8008102 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f83d 	bl	8008174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008100:	e01e      	b.n	8008140 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008102:	bf00      	nop
    return;
 8008104:	e01c      	b.n	8008140 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	2b00      	cmp	r3, #0
 800810e:	d008      	beq.n	8008122 <HAL_UART_IRQHandler+0x1d6>
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8b0 	bl	8008280 <UART_Transmit_IT>
    return;
 8008120:	e00f      	b.n	8008142 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <HAL_UART_IRQHandler+0x1f6>
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f8f8 	bl	800832c <UART_EndTransmit_IT>
    return;
 800813c:	bf00      	nop
 800813e:	e000      	b.n	8008142 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008140:	bf00      	nop
  }
}
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	08008259 	.word	0x08008259

0800814c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	4613      	mov	r3, r2
 8008196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008198:	e02c      	b.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d028      	beq.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80081a8:	f7fb fffa 	bl	80041a0 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d21d      	bcs.n	80081f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695a      	ldr	r2, [r3, #20]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e00f      	b.n	8008214 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4013      	ands	r3, r2
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	429a      	cmp	r2, r3
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	429a      	cmp	r2, r3
 8008210:	d0c3      	beq.n	800819a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008232:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff ff7e 	bl	8008174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b21      	cmp	r3, #33	; 0x21
 8008292:	d144      	bne.n	800831e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829c:	d11a      	bne.n	80082d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	1c9a      	adds	r2, r3, #2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	621a      	str	r2, [r3, #32]
 80082c6:	e00e      	b.n	80082e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]
 80082d2:	e008      	b.n	80082e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	1c59      	adds	r1, r3, #1
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6211      	str	r1, [r2, #32]
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10f      	bne.n	800831a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008308:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008318:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008342:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff fefd 	bl	800814c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b22      	cmp	r3, #34	; 0x22
 800836e:	d171      	bne.n	8008454 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008378:	d123      	bne.n	80083c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10e      	bne.n	80083a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	1c9a      	adds	r2, r3, #2
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28
 80083a4:	e029      	b.n	80083fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
 80083c0:	e01b      	b.n	80083fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6858      	ldr	r0, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	1c59      	adds	r1, r3, #1
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6291      	str	r1, [r2, #40]	; 0x28
 80083da:	b2c2      	uxtb	r2, r0
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e00c      	b.n	80083fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	1c58      	adds	r0, r3, #1
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	6288      	str	r0, [r1, #40]	; 0x28
 80083f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29b      	uxth	r3, r3
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4619      	mov	r1, r3
 8008408:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800840a:	2b00      	cmp	r3, #0
 800840c:	d120      	bne.n	8008450 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0220 	bic.w	r2, r2, #32
 800841c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800842c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fe8a 	bl	8008160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	e002      	b.n	8008456 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80084a2:	f023 030c 	bic.w	r3, r3, #12
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6812      	ldr	r2, [r2, #0]
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	430b      	orrs	r3, r1
 80084ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ce:	f040 818b 	bne.w	80087e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4ac1      	ldr	r2, [pc, #772]	; (80087dc <UART_SetConfig+0x37c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d005      	beq.n	80084e8 <UART_SetConfig+0x88>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4abf      	ldr	r2, [pc, #764]	; (80087e0 <UART_SetConfig+0x380>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f040 80bd 	bne.w	8008662 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084e8:	f7fd fe4a 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 80084ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	461d      	mov	r5, r3
 80084f2:	f04f 0600 	mov.w	r6, #0
 80084f6:	46a8      	mov	r8, r5
 80084f8:	46b1      	mov	r9, r6
 80084fa:	eb18 0308 	adds.w	r3, r8, r8
 80084fe:	eb49 0409 	adc.w	r4, r9, r9
 8008502:	4698      	mov	r8, r3
 8008504:	46a1      	mov	r9, r4
 8008506:	eb18 0805 	adds.w	r8, r8, r5
 800850a:	eb49 0906 	adc.w	r9, r9, r6
 800850e:	f04f 0100 	mov.w	r1, #0
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800851a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800851e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008522:	4688      	mov	r8, r1
 8008524:	4691      	mov	r9, r2
 8008526:	eb18 0005 	adds.w	r0, r8, r5
 800852a:	eb49 0106 	adc.w	r1, r9, r6
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	461d      	mov	r5, r3
 8008534:	f04f 0600 	mov.w	r6, #0
 8008538:	196b      	adds	r3, r5, r5
 800853a:	eb46 0406 	adc.w	r4, r6, r6
 800853e:	461a      	mov	r2, r3
 8008540:	4623      	mov	r3, r4
 8008542:	f7f8 fba1 	bl	8000c88 <__aeabi_uldivmod>
 8008546:	4603      	mov	r3, r0
 8008548:	460c      	mov	r4, r1
 800854a:	461a      	mov	r2, r3
 800854c:	4ba5      	ldr	r3, [pc, #660]	; (80087e4 <UART_SetConfig+0x384>)
 800854e:	fba3 2302 	umull	r2, r3, r3, r2
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	461d      	mov	r5, r3
 800855c:	f04f 0600 	mov.w	r6, #0
 8008560:	46a9      	mov	r9, r5
 8008562:	46b2      	mov	sl, r6
 8008564:	eb19 0309 	adds.w	r3, r9, r9
 8008568:	eb4a 040a 	adc.w	r4, sl, sl
 800856c:	4699      	mov	r9, r3
 800856e:	46a2      	mov	sl, r4
 8008570:	eb19 0905 	adds.w	r9, r9, r5
 8008574:	eb4a 0a06 	adc.w	sl, sl, r6
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008584:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008588:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800858c:	4689      	mov	r9, r1
 800858e:	4692      	mov	sl, r2
 8008590:	eb19 0005 	adds.w	r0, r9, r5
 8008594:	eb4a 0106 	adc.w	r1, sl, r6
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	461d      	mov	r5, r3
 800859e:	f04f 0600 	mov.w	r6, #0
 80085a2:	196b      	adds	r3, r5, r5
 80085a4:	eb46 0406 	adc.w	r4, r6, r6
 80085a8:	461a      	mov	r2, r3
 80085aa:	4623      	mov	r3, r4
 80085ac:	f7f8 fb6c 	bl	8000c88 <__aeabi_uldivmod>
 80085b0:	4603      	mov	r3, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b8b      	ldr	r3, [pc, #556]	; (80087e4 <UART_SetConfig+0x384>)
 80085b8:	fba3 1302 	umull	r1, r3, r3, r2
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	2164      	movs	r1, #100	; 0x64
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	3332      	adds	r3, #50	; 0x32
 80085ca:	4a86      	ldr	r2, [pc, #536]	; (80087e4 <UART_SetConfig+0x384>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085d8:	4498      	add	r8, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	461d      	mov	r5, r3
 80085de:	f04f 0600 	mov.w	r6, #0
 80085e2:	46a9      	mov	r9, r5
 80085e4:	46b2      	mov	sl, r6
 80085e6:	eb19 0309 	adds.w	r3, r9, r9
 80085ea:	eb4a 040a 	adc.w	r4, sl, sl
 80085ee:	4699      	mov	r9, r3
 80085f0:	46a2      	mov	sl, r4
 80085f2:	eb19 0905 	adds.w	r9, r9, r5
 80085f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80085fa:	f04f 0100 	mov.w	r1, #0
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800860a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800860e:	4689      	mov	r9, r1
 8008610:	4692      	mov	sl, r2
 8008612:	eb19 0005 	adds.w	r0, r9, r5
 8008616:	eb4a 0106 	adc.w	r1, sl, r6
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	461d      	mov	r5, r3
 8008620:	f04f 0600 	mov.w	r6, #0
 8008624:	196b      	adds	r3, r5, r5
 8008626:	eb46 0406 	adc.w	r4, r6, r6
 800862a:	461a      	mov	r2, r3
 800862c:	4623      	mov	r3, r4
 800862e:	f7f8 fb2b 	bl	8000c88 <__aeabi_uldivmod>
 8008632:	4603      	mov	r3, r0
 8008634:	460c      	mov	r4, r1
 8008636:	461a      	mov	r2, r3
 8008638:	4b6a      	ldr	r3, [pc, #424]	; (80087e4 <UART_SetConfig+0x384>)
 800863a:	fba3 1302 	umull	r1, r3, r3, r2
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	2164      	movs	r1, #100	; 0x64
 8008642:	fb01 f303 	mul.w	r3, r1, r3
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	3332      	adds	r3, #50	; 0x32
 800864c:	4a65      	ldr	r2, [pc, #404]	; (80087e4 <UART_SetConfig+0x384>)
 800864e:	fba2 2303 	umull	r2, r3, r2, r3
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	f003 0207 	and.w	r2, r3, #7
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4442      	add	r2, r8
 800865e:	609a      	str	r2, [r3, #8]
 8008660:	e26f      	b.n	8008b42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008662:	f7fd fd79 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8008666:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	461d      	mov	r5, r3
 800866c:	f04f 0600 	mov.w	r6, #0
 8008670:	46a8      	mov	r8, r5
 8008672:	46b1      	mov	r9, r6
 8008674:	eb18 0308 	adds.w	r3, r8, r8
 8008678:	eb49 0409 	adc.w	r4, r9, r9
 800867c:	4698      	mov	r8, r3
 800867e:	46a1      	mov	r9, r4
 8008680:	eb18 0805 	adds.w	r8, r8, r5
 8008684:	eb49 0906 	adc.w	r9, r9, r6
 8008688:	f04f 0100 	mov.w	r1, #0
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008694:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008698:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800869c:	4688      	mov	r8, r1
 800869e:	4691      	mov	r9, r2
 80086a0:	eb18 0005 	adds.w	r0, r8, r5
 80086a4:	eb49 0106 	adc.w	r1, r9, r6
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	461d      	mov	r5, r3
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	196b      	adds	r3, r5, r5
 80086b4:	eb46 0406 	adc.w	r4, r6, r6
 80086b8:	461a      	mov	r2, r3
 80086ba:	4623      	mov	r3, r4
 80086bc:	f7f8 fae4 	bl	8000c88 <__aeabi_uldivmod>
 80086c0:	4603      	mov	r3, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b47      	ldr	r3, [pc, #284]	; (80087e4 <UART_SetConfig+0x384>)
 80086c8:	fba3 2302 	umull	r2, r3, r3, r2
 80086cc:	095b      	lsrs	r3, r3, #5
 80086ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	461d      	mov	r5, r3
 80086d6:	f04f 0600 	mov.w	r6, #0
 80086da:	46a9      	mov	r9, r5
 80086dc:	46b2      	mov	sl, r6
 80086de:	eb19 0309 	adds.w	r3, r9, r9
 80086e2:	eb4a 040a 	adc.w	r4, sl, sl
 80086e6:	4699      	mov	r9, r3
 80086e8:	46a2      	mov	sl, r4
 80086ea:	eb19 0905 	adds.w	r9, r9, r5
 80086ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80086f2:	f04f 0100 	mov.w	r1, #0
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008702:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008706:	4689      	mov	r9, r1
 8008708:	4692      	mov	sl, r2
 800870a:	eb19 0005 	adds.w	r0, r9, r5
 800870e:	eb4a 0106 	adc.w	r1, sl, r6
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	461d      	mov	r5, r3
 8008718:	f04f 0600 	mov.w	r6, #0
 800871c:	196b      	adds	r3, r5, r5
 800871e:	eb46 0406 	adc.w	r4, r6, r6
 8008722:	461a      	mov	r2, r3
 8008724:	4623      	mov	r3, r4
 8008726:	f7f8 faaf 	bl	8000c88 <__aeabi_uldivmod>
 800872a:	4603      	mov	r3, r0
 800872c:	460c      	mov	r4, r1
 800872e:	461a      	mov	r2, r3
 8008730:	4b2c      	ldr	r3, [pc, #176]	; (80087e4 <UART_SetConfig+0x384>)
 8008732:	fba3 1302 	umull	r1, r3, r3, r2
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	2164      	movs	r1, #100	; 0x64
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	3332      	adds	r3, #50	; 0x32
 8008744:	4a27      	ldr	r2, [pc, #156]	; (80087e4 <UART_SetConfig+0x384>)
 8008746:	fba2 2303 	umull	r2, r3, r2, r3
 800874a:	095b      	lsrs	r3, r3, #5
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008752:	4498      	add	r8, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	461d      	mov	r5, r3
 8008758:	f04f 0600 	mov.w	r6, #0
 800875c:	46a9      	mov	r9, r5
 800875e:	46b2      	mov	sl, r6
 8008760:	eb19 0309 	adds.w	r3, r9, r9
 8008764:	eb4a 040a 	adc.w	r4, sl, sl
 8008768:	4699      	mov	r9, r3
 800876a:	46a2      	mov	sl, r4
 800876c:	eb19 0905 	adds.w	r9, r9, r5
 8008770:	eb4a 0a06 	adc.w	sl, sl, r6
 8008774:	f04f 0100 	mov.w	r1, #0
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008780:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008784:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008788:	4689      	mov	r9, r1
 800878a:	4692      	mov	sl, r2
 800878c:	eb19 0005 	adds.w	r0, r9, r5
 8008790:	eb4a 0106 	adc.w	r1, sl, r6
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	461d      	mov	r5, r3
 800879a:	f04f 0600 	mov.w	r6, #0
 800879e:	196b      	adds	r3, r5, r5
 80087a0:	eb46 0406 	adc.w	r4, r6, r6
 80087a4:	461a      	mov	r2, r3
 80087a6:	4623      	mov	r3, r4
 80087a8:	f7f8 fa6e 	bl	8000c88 <__aeabi_uldivmod>
 80087ac:	4603      	mov	r3, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	461a      	mov	r2, r3
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <UART_SetConfig+0x384>)
 80087b4:	fba3 1302 	umull	r1, r3, r3, r2
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	2164      	movs	r1, #100	; 0x64
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	3332      	adds	r3, #50	; 0x32
 80087c6:	4a07      	ldr	r2, [pc, #28]	; (80087e4 <UART_SetConfig+0x384>)
 80087c8:	fba2 2303 	umull	r2, r3, r2, r3
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	f003 0207 	and.w	r2, r3, #7
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4442      	add	r2, r8
 80087d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80087da:	e1b2      	b.n	8008b42 <UART_SetConfig+0x6e2>
 80087dc:	40011000 	.word	0x40011000
 80087e0:	40011400 	.word	0x40011400
 80087e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4ad7      	ldr	r2, [pc, #860]	; (8008b4c <UART_SetConfig+0x6ec>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d005      	beq.n	80087fe <UART_SetConfig+0x39e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4ad6      	ldr	r2, [pc, #856]	; (8008b50 <UART_SetConfig+0x6f0>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	f040 80d1 	bne.w	80089a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80087fe:	f7fd fcbf 	bl	8006180 <HAL_RCC_GetPCLK2Freq>
 8008802:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	469a      	mov	sl, r3
 8008808:	f04f 0b00 	mov.w	fp, #0
 800880c:	46d0      	mov	r8, sl
 800880e:	46d9      	mov	r9, fp
 8008810:	eb18 0308 	adds.w	r3, r8, r8
 8008814:	eb49 0409 	adc.w	r4, r9, r9
 8008818:	4698      	mov	r8, r3
 800881a:	46a1      	mov	r9, r4
 800881c:	eb18 080a 	adds.w	r8, r8, sl
 8008820:	eb49 090b 	adc.w	r9, r9, fp
 8008824:	f04f 0100 	mov.w	r1, #0
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008830:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008834:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008838:	4688      	mov	r8, r1
 800883a:	4691      	mov	r9, r2
 800883c:	eb1a 0508 	adds.w	r5, sl, r8
 8008840:	eb4b 0609 	adc.w	r6, fp, r9
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4619      	mov	r1, r3
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	f04f 0400 	mov.w	r4, #0
 8008856:	0094      	lsls	r4, r2, #2
 8008858:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800885c:	008b      	lsls	r3, r1, #2
 800885e:	461a      	mov	r2, r3
 8008860:	4623      	mov	r3, r4
 8008862:	4628      	mov	r0, r5
 8008864:	4631      	mov	r1, r6
 8008866:	f7f8 fa0f 	bl	8000c88 <__aeabi_uldivmod>
 800886a:	4603      	mov	r3, r0
 800886c:	460c      	mov	r4, r1
 800886e:	461a      	mov	r2, r3
 8008870:	4bb8      	ldr	r3, [pc, #736]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008872:	fba3 2302 	umull	r2, r3, r3, r2
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	469b      	mov	fp, r3
 8008880:	f04f 0c00 	mov.w	ip, #0
 8008884:	46d9      	mov	r9, fp
 8008886:	46e2      	mov	sl, ip
 8008888:	eb19 0309 	adds.w	r3, r9, r9
 800888c:	eb4a 040a 	adc.w	r4, sl, sl
 8008890:	4699      	mov	r9, r3
 8008892:	46a2      	mov	sl, r4
 8008894:	eb19 090b 	adds.w	r9, r9, fp
 8008898:	eb4a 0a0c 	adc.w	sl, sl, ip
 800889c:	f04f 0100 	mov.w	r1, #0
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088b0:	4689      	mov	r9, r1
 80088b2:	4692      	mov	sl, r2
 80088b4:	eb1b 0509 	adds.w	r5, fp, r9
 80088b8:	eb4c 060a 	adc.w	r6, ip, sl
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4619      	mov	r1, r3
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	f04f 0300 	mov.w	r3, #0
 80088ca:	f04f 0400 	mov.w	r4, #0
 80088ce:	0094      	lsls	r4, r2, #2
 80088d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088d4:	008b      	lsls	r3, r1, #2
 80088d6:	461a      	mov	r2, r3
 80088d8:	4623      	mov	r3, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	4631      	mov	r1, r6
 80088de:	f7f8 f9d3 	bl	8000c88 <__aeabi_uldivmod>
 80088e2:	4603      	mov	r3, r0
 80088e4:	460c      	mov	r4, r1
 80088e6:	461a      	mov	r2, r3
 80088e8:	4b9a      	ldr	r3, [pc, #616]	; (8008b54 <UART_SetConfig+0x6f4>)
 80088ea:	fba3 1302 	umull	r1, r3, r3, r2
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	2164      	movs	r1, #100	; 0x64
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	3332      	adds	r3, #50	; 0x32
 80088fc:	4a95      	ldr	r2, [pc, #596]	; (8008b54 <UART_SetConfig+0x6f4>)
 80088fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008908:	4498      	add	r8, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	469b      	mov	fp, r3
 800890e:	f04f 0c00 	mov.w	ip, #0
 8008912:	46d9      	mov	r9, fp
 8008914:	46e2      	mov	sl, ip
 8008916:	eb19 0309 	adds.w	r3, r9, r9
 800891a:	eb4a 040a 	adc.w	r4, sl, sl
 800891e:	4699      	mov	r9, r3
 8008920:	46a2      	mov	sl, r4
 8008922:	eb19 090b 	adds.w	r9, r9, fp
 8008926:	eb4a 0a0c 	adc.w	sl, sl, ip
 800892a:	f04f 0100 	mov.w	r1, #0
 800892e:	f04f 0200 	mov.w	r2, #0
 8008932:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008936:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800893a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800893e:	4689      	mov	r9, r1
 8008940:	4692      	mov	sl, r2
 8008942:	eb1b 0509 	adds.w	r5, fp, r9
 8008946:	eb4c 060a 	adc.w	r6, ip, sl
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4619      	mov	r1, r3
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	f04f 0400 	mov.w	r4, #0
 800895c:	0094      	lsls	r4, r2, #2
 800895e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008962:	008b      	lsls	r3, r1, #2
 8008964:	461a      	mov	r2, r3
 8008966:	4623      	mov	r3, r4
 8008968:	4628      	mov	r0, r5
 800896a:	4631      	mov	r1, r6
 800896c:	f7f8 f98c 	bl	8000c88 <__aeabi_uldivmod>
 8008970:	4603      	mov	r3, r0
 8008972:	460c      	mov	r4, r1
 8008974:	461a      	mov	r2, r3
 8008976:	4b77      	ldr	r3, [pc, #476]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008978:	fba3 1302 	umull	r1, r3, r3, r2
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	2164      	movs	r1, #100	; 0x64
 8008980:	fb01 f303 	mul.w	r3, r1, r3
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	3332      	adds	r3, #50	; 0x32
 800898a:	4a72      	ldr	r2, [pc, #456]	; (8008b54 <UART_SetConfig+0x6f4>)
 800898c:	fba2 2303 	umull	r2, r3, r2, r3
 8008990:	095b      	lsrs	r3, r3, #5
 8008992:	f003 020f 	and.w	r2, r3, #15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4442      	add	r2, r8
 800899c:	609a      	str	r2, [r3, #8]
 800899e:	e0d0      	b.n	8008b42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80089a0:	f7fd fbda 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 80089a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	469a      	mov	sl, r3
 80089aa:	f04f 0b00 	mov.w	fp, #0
 80089ae:	46d0      	mov	r8, sl
 80089b0:	46d9      	mov	r9, fp
 80089b2:	eb18 0308 	adds.w	r3, r8, r8
 80089b6:	eb49 0409 	adc.w	r4, r9, r9
 80089ba:	4698      	mov	r8, r3
 80089bc:	46a1      	mov	r9, r4
 80089be:	eb18 080a 	adds.w	r8, r8, sl
 80089c2:	eb49 090b 	adc.w	r9, r9, fp
 80089c6:	f04f 0100 	mov.w	r1, #0
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80089da:	4688      	mov	r8, r1
 80089dc:	4691      	mov	r9, r2
 80089de:	eb1a 0508 	adds.w	r5, sl, r8
 80089e2:	eb4b 0609 	adc.w	r6, fp, r9
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	4619      	mov	r1, r3
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	f04f 0400 	mov.w	r4, #0
 80089f8:	0094      	lsls	r4, r2, #2
 80089fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089fe:	008b      	lsls	r3, r1, #2
 8008a00:	461a      	mov	r2, r3
 8008a02:	4623      	mov	r3, r4
 8008a04:	4628      	mov	r0, r5
 8008a06:	4631      	mov	r1, r6
 8008a08:	f7f8 f93e 	bl	8000c88 <__aeabi_uldivmod>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	461a      	mov	r2, r3
 8008a12:	4b50      	ldr	r3, [pc, #320]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008a14:	fba3 2302 	umull	r2, r3, r3, r2
 8008a18:	095b      	lsrs	r3, r3, #5
 8008a1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	469b      	mov	fp, r3
 8008a22:	f04f 0c00 	mov.w	ip, #0
 8008a26:	46d9      	mov	r9, fp
 8008a28:	46e2      	mov	sl, ip
 8008a2a:	eb19 0309 	adds.w	r3, r9, r9
 8008a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8008a32:	4699      	mov	r9, r3
 8008a34:	46a2      	mov	sl, r4
 8008a36:	eb19 090b 	adds.w	r9, r9, fp
 8008a3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a3e:	f04f 0100 	mov.w	r1, #0
 8008a42:	f04f 0200 	mov.w	r2, #0
 8008a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a52:	4689      	mov	r9, r1
 8008a54:	4692      	mov	sl, r2
 8008a56:	eb1b 0509 	adds.w	r5, fp, r9
 8008a5a:	eb4c 060a 	adc.w	r6, ip, sl
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4619      	mov	r1, r3
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	f04f 0400 	mov.w	r4, #0
 8008a70:	0094      	lsls	r4, r2, #2
 8008a72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a76:	008b      	lsls	r3, r1, #2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	4631      	mov	r1, r6
 8008a80:	f7f8 f902 	bl	8000c88 <__aeabi_uldivmod>
 8008a84:	4603      	mov	r3, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4b32      	ldr	r3, [pc, #200]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a90:	095b      	lsrs	r3, r3, #5
 8008a92:	2164      	movs	r1, #100	; 0x64
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	3332      	adds	r3, #50	; 0x32
 8008a9e:	4a2d      	ldr	r2, [pc, #180]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aaa:	4498      	add	r8, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	469b      	mov	fp, r3
 8008ab0:	f04f 0c00 	mov.w	ip, #0
 8008ab4:	46d9      	mov	r9, fp
 8008ab6:	46e2      	mov	sl, ip
 8008ab8:	eb19 0309 	adds.w	r3, r9, r9
 8008abc:	eb4a 040a 	adc.w	r4, sl, sl
 8008ac0:	4699      	mov	r9, r3
 8008ac2:	46a2      	mov	sl, r4
 8008ac4:	eb19 090b 	adds.w	r9, r9, fp
 8008ac8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008acc:	f04f 0100 	mov.w	r1, #0
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008adc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ae0:	4689      	mov	r9, r1
 8008ae2:	4692      	mov	sl, r2
 8008ae4:	eb1b 0509 	adds.w	r5, fp, r9
 8008ae8:	eb4c 060a 	adc.w	r6, ip, sl
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4619      	mov	r1, r3
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	f04f 0400 	mov.w	r4, #0
 8008afe:	0094      	lsls	r4, r2, #2
 8008b00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b04:	008b      	lsls	r3, r1, #2
 8008b06:	461a      	mov	r2, r3
 8008b08:	4623      	mov	r3, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	f7f8 f8bb 	bl	8000c88 <__aeabi_uldivmod>
 8008b12:	4603      	mov	r3, r0
 8008b14:	460c      	mov	r4, r1
 8008b16:	461a      	mov	r2, r3
 8008b18:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	2164      	movs	r1, #100	; 0x64
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	3332      	adds	r3, #50	; 0x32
 8008b2c:	4a09      	ldr	r2, [pc, #36]	; (8008b54 <UART_SetConfig+0x6f4>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	f003 020f 	and.w	r2, r3, #15
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4442      	add	r2, r8
 8008b3e:	609a      	str	r2, [r3, #8]
}
 8008b40:	e7ff      	b.n	8008b42 <UART_SetConfig+0x6e2>
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	40011000 	.word	0x40011000
 8008b50:	40011400 	.word	0x40011400
 8008b54:	51eb851f 	.word	0x51eb851f

08008b58 <__errno>:
 8008b58:	4b01      	ldr	r3, [pc, #4]	; (8008b60 <__errno+0x8>)
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	2000000c 	.word	0x2000000c

08008b64 <__libc_init_array>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	4e0d      	ldr	r6, [pc, #52]	; (8008b9c <__libc_init_array+0x38>)
 8008b68:	4c0d      	ldr	r4, [pc, #52]	; (8008ba0 <__libc_init_array+0x3c>)
 8008b6a:	1ba4      	subs	r4, r4, r6
 8008b6c:	10a4      	asrs	r4, r4, #2
 8008b6e:	2500      	movs	r5, #0
 8008b70:	42a5      	cmp	r5, r4
 8008b72:	d109      	bne.n	8008b88 <__libc_init_array+0x24>
 8008b74:	4e0b      	ldr	r6, [pc, #44]	; (8008ba4 <__libc_init_array+0x40>)
 8008b76:	4c0c      	ldr	r4, [pc, #48]	; (8008ba8 <__libc_init_array+0x44>)
 8008b78:	f003 fb90 	bl	800c29c <_init>
 8008b7c:	1ba4      	subs	r4, r4, r6
 8008b7e:	10a4      	asrs	r4, r4, #2
 8008b80:	2500      	movs	r5, #0
 8008b82:	42a5      	cmp	r5, r4
 8008b84:	d105      	bne.n	8008b92 <__libc_init_array+0x2e>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b8c:	4798      	blx	r3
 8008b8e:	3501      	adds	r5, #1
 8008b90:	e7ee      	b.n	8008b70 <__libc_init_array+0xc>
 8008b92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b96:	4798      	blx	r3
 8008b98:	3501      	adds	r5, #1
 8008b9a:	e7f2      	b.n	8008b82 <__libc_init_array+0x1e>
 8008b9c:	0800c7c0 	.word	0x0800c7c0
 8008ba0:	0800c7c0 	.word	0x0800c7c0
 8008ba4:	0800c7c0 	.word	0x0800c7c0
 8008ba8:	0800c7c4 	.word	0x0800c7c4

08008bac <memcpy>:
 8008bac:	b510      	push	{r4, lr}
 8008bae:	1e43      	subs	r3, r0, #1
 8008bb0:	440a      	add	r2, r1
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	d100      	bne.n	8008bb8 <memcpy+0xc>
 8008bb6:	bd10      	pop	{r4, pc}
 8008bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc0:	e7f7      	b.n	8008bb2 <memcpy+0x6>

08008bc2 <memset>:
 8008bc2:	4402      	add	r2, r0
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d100      	bne.n	8008bcc <memset+0xa>
 8008bca:	4770      	bx	lr
 8008bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd0:	e7f9      	b.n	8008bc6 <memset+0x4>

08008bd2 <__cvt>:
 8008bd2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd6:	ec55 4b10 	vmov	r4, r5, d0
 8008bda:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008bdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	460e      	mov	r6, r1
 8008be4:	4691      	mov	r9, r2
 8008be6:	4619      	mov	r1, r3
 8008be8:	bfb8      	it	lt
 8008bea:	4622      	movlt	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	f027 0720 	bic.w	r7, r7, #32
 8008bf2:	bfbb      	ittet	lt
 8008bf4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008bf8:	461d      	movlt	r5, r3
 8008bfa:	2300      	movge	r3, #0
 8008bfc:	232d      	movlt	r3, #45	; 0x2d
 8008bfe:	bfb8      	it	lt
 8008c00:	4614      	movlt	r4, r2
 8008c02:	2f46      	cmp	r7, #70	; 0x46
 8008c04:	700b      	strb	r3, [r1, #0]
 8008c06:	d004      	beq.n	8008c12 <__cvt+0x40>
 8008c08:	2f45      	cmp	r7, #69	; 0x45
 8008c0a:	d100      	bne.n	8008c0e <__cvt+0x3c>
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	2102      	movs	r1, #2
 8008c10:	e000      	b.n	8008c14 <__cvt+0x42>
 8008c12:	2103      	movs	r1, #3
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	ab02      	add	r3, sp, #8
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	4653      	mov	r3, sl
 8008c20:	ec45 4b10 	vmov	d0, r4, r5
 8008c24:	f000 fcd8 	bl	80095d8 <_dtoa_r>
 8008c28:	2f47      	cmp	r7, #71	; 0x47
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	d102      	bne.n	8008c34 <__cvt+0x62>
 8008c2e:	f019 0f01 	tst.w	r9, #1
 8008c32:	d026      	beq.n	8008c82 <__cvt+0xb0>
 8008c34:	2f46      	cmp	r7, #70	; 0x46
 8008c36:	eb08 0906 	add.w	r9, r8, r6
 8008c3a:	d111      	bne.n	8008c60 <__cvt+0x8e>
 8008c3c:	f898 3000 	ldrb.w	r3, [r8]
 8008c40:	2b30      	cmp	r3, #48	; 0x30
 8008c42:	d10a      	bne.n	8008c5a <__cvt+0x88>
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c50:	b918      	cbnz	r0, 8008c5a <__cvt+0x88>
 8008c52:	f1c6 0601 	rsb	r6, r6, #1
 8008c56:	f8ca 6000 	str.w	r6, [sl]
 8008c5a:	f8da 3000 	ldr.w	r3, [sl]
 8008c5e:	4499      	add	r9, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	2300      	movs	r3, #0
 8008c64:	4620      	mov	r0, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7f7 ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c6c:	b938      	cbnz	r0, 8008c7e <__cvt+0xac>
 8008c6e:	2230      	movs	r2, #48	; 0x30
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	454b      	cmp	r3, r9
 8008c74:	d205      	bcs.n	8008c82 <__cvt+0xb0>
 8008c76:	1c59      	adds	r1, r3, #1
 8008c78:	9103      	str	r1, [sp, #12]
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e7f8      	b.n	8008c70 <__cvt+0x9e>
 8008c7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c82:	9b03      	ldr	r3, [sp, #12]
 8008c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c86:	eba3 0308 	sub.w	r3, r3, r8
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	b004      	add	sp, #16
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008c94 <__exponent>:
 8008c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c96:	2900      	cmp	r1, #0
 8008c98:	4604      	mov	r4, r0
 8008c9a:	bfba      	itte	lt
 8008c9c:	4249      	neglt	r1, r1
 8008c9e:	232d      	movlt	r3, #45	; 0x2d
 8008ca0:	232b      	movge	r3, #43	; 0x2b
 8008ca2:	2909      	cmp	r1, #9
 8008ca4:	f804 2b02 	strb.w	r2, [r4], #2
 8008ca8:	7043      	strb	r3, [r0, #1]
 8008caa:	dd20      	ble.n	8008cee <__exponent+0x5a>
 8008cac:	f10d 0307 	add.w	r3, sp, #7
 8008cb0:	461f      	mov	r7, r3
 8008cb2:	260a      	movs	r6, #10
 8008cb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008cb8:	fb06 1115 	mls	r1, r6, r5, r1
 8008cbc:	3130      	adds	r1, #48	; 0x30
 8008cbe:	2d09      	cmp	r5, #9
 8008cc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cc4:	f103 32ff 	add.w	r2, r3, #4294967295
 8008cc8:	4629      	mov	r1, r5
 8008cca:	dc09      	bgt.n	8008ce0 <__exponent+0x4c>
 8008ccc:	3130      	adds	r1, #48	; 0x30
 8008cce:	3b02      	subs	r3, #2
 8008cd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008cd4:	42bb      	cmp	r3, r7
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	d304      	bcc.n	8008ce4 <__exponent+0x50>
 8008cda:	1a10      	subs	r0, r2, r0
 8008cdc:	b003      	add	sp, #12
 8008cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	e7e7      	b.n	8008cb4 <__exponent+0x20>
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	f804 2b01 	strb.w	r2, [r4], #1
 8008cec:	e7f2      	b.n	8008cd4 <__exponent+0x40>
 8008cee:	2330      	movs	r3, #48	; 0x30
 8008cf0:	4419      	add	r1, r3
 8008cf2:	7083      	strb	r3, [r0, #2]
 8008cf4:	1d02      	adds	r2, r0, #4
 8008cf6:	70c1      	strb	r1, [r0, #3]
 8008cf8:	e7ef      	b.n	8008cda <__exponent+0x46>
	...

08008cfc <_printf_float>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	b08d      	sub	sp, #52	; 0x34
 8008d02:	460c      	mov	r4, r1
 8008d04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008d08:	4616      	mov	r6, r2
 8008d0a:	461f      	mov	r7, r3
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	f001 fae5 	bl	800a2dc <_localeconv_r>
 8008d12:	6803      	ldr	r3, [r0, #0]
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f7 fa5a 	bl	80001d0 <strlen>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d20:	f8d8 3000 	ldr.w	r3, [r8]
 8008d24:	9005      	str	r0, [sp, #20]
 8008d26:	3307      	adds	r3, #7
 8008d28:	f023 0307 	bic.w	r3, r3, #7
 8008d2c:	f103 0208 	add.w	r2, r3, #8
 8008d30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d34:	f8d4 b000 	ldr.w	fp, [r4]
 8008d38:	f8c8 2000 	str.w	r2, [r8]
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d44:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d4c:	9307      	str	r3, [sp, #28]
 8008d4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	4ba7      	ldr	r3, [pc, #668]	; (8008ff4 <_printf_float+0x2f8>)
 8008d58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d5c:	f7f7 fee6 	bl	8000b2c <__aeabi_dcmpun>
 8008d60:	bb70      	cbnz	r0, 8008dc0 <_printf_float+0xc4>
 8008d62:	f04f 32ff 	mov.w	r2, #4294967295
 8008d66:	4ba3      	ldr	r3, [pc, #652]	; (8008ff4 <_printf_float+0x2f8>)
 8008d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d6c:	f7f7 fec0 	bl	8000af0 <__aeabi_dcmple>
 8008d70:	bb30      	cbnz	r0, 8008dc0 <_printf_float+0xc4>
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	f7f7 feaf 	bl	8000adc <__aeabi_dcmplt>
 8008d7e:	b110      	cbz	r0, 8008d86 <_printf_float+0x8a>
 8008d80:	232d      	movs	r3, #45	; 0x2d
 8008d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d86:	4a9c      	ldr	r2, [pc, #624]	; (8008ff8 <_printf_float+0x2fc>)
 8008d88:	4b9c      	ldr	r3, [pc, #624]	; (8008ffc <_printf_float+0x300>)
 8008d8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008d8e:	bf8c      	ite	hi
 8008d90:	4690      	movhi	r8, r2
 8008d92:	4698      	movls	r8, r3
 8008d94:	2303      	movs	r3, #3
 8008d96:	f02b 0204 	bic.w	r2, fp, #4
 8008d9a:	6123      	str	r3, [r4, #16]
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	f04f 0900 	mov.w	r9, #0
 8008da2:	9700      	str	r7, [sp, #0]
 8008da4:	4633      	mov	r3, r6
 8008da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008da8:	4621      	mov	r1, r4
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 f9e6 	bl	800917c <_printf_common>
 8008db0:	3001      	adds	r0, #1
 8008db2:	f040 808d 	bne.w	8008ed0 <_printf_float+0x1d4>
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	b00d      	add	sp, #52	; 0x34
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	464b      	mov	r3, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 feb0 	bl	8000b2c <__aeabi_dcmpun>
 8008dcc:	b110      	cbz	r0, 8008dd4 <_printf_float+0xd8>
 8008dce:	4a8c      	ldr	r2, [pc, #560]	; (8009000 <_printf_float+0x304>)
 8008dd0:	4b8c      	ldr	r3, [pc, #560]	; (8009004 <_printf_float+0x308>)
 8008dd2:	e7da      	b.n	8008d8a <_printf_float+0x8e>
 8008dd4:	6861      	ldr	r1, [r4, #4]
 8008dd6:	1c4b      	adds	r3, r1, #1
 8008dd8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008ddc:	a80a      	add	r0, sp, #40	; 0x28
 8008dde:	d13e      	bne.n	8008e5e <_printf_float+0x162>
 8008de0:	2306      	movs	r3, #6
 8008de2:	6063      	str	r3, [r4, #4]
 8008de4:	2300      	movs	r3, #0
 8008de6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008dea:	ab09      	add	r3, sp, #36	; 0x24
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	ec49 8b10 	vmov	d0, r8, r9
 8008df2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	f8cd a004 	str.w	sl, [sp, #4]
 8008dfc:	6861      	ldr	r1, [r4, #4]
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f7ff fee7 	bl	8008bd2 <__cvt>
 8008e04:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008e08:	2b47      	cmp	r3, #71	; 0x47
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	d109      	bne.n	8008e22 <_printf_float+0x126>
 8008e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e10:	1cd8      	adds	r0, r3, #3
 8008e12:	db02      	blt.n	8008e1a <_printf_float+0x11e>
 8008e14:	6862      	ldr	r2, [r4, #4]
 8008e16:	4293      	cmp	r3, r2
 8008e18:	dd47      	ble.n	8008eaa <_printf_float+0x1ae>
 8008e1a:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e1e:	fa5f fa8a 	uxtb.w	sl, sl
 8008e22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e28:	d824      	bhi.n	8008e74 <_printf_float+0x178>
 8008e2a:	3901      	subs	r1, #1
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e32:	9109      	str	r1, [sp, #36]	; 0x24
 8008e34:	f7ff ff2e 	bl	8008c94 <__exponent>
 8008e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e3a:	1813      	adds	r3, r2, r0
 8008e3c:	2a01      	cmp	r2, #1
 8008e3e:	4681      	mov	r9, r0
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	dc02      	bgt.n	8008e4a <_printf_float+0x14e>
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	07d1      	lsls	r1, r2, #31
 8008e48:	d501      	bpl.n	8008e4e <_printf_float+0x152>
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	6123      	str	r3, [r4, #16]
 8008e4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0a5      	beq.n	8008da2 <_printf_float+0xa6>
 8008e56:	232d      	movs	r3, #45	; 0x2d
 8008e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e5c:	e7a1      	b.n	8008da2 <_printf_float+0xa6>
 8008e5e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008e62:	f000 8177 	beq.w	8009154 <_printf_float+0x458>
 8008e66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008e6a:	d1bb      	bne.n	8008de4 <_printf_float+0xe8>
 8008e6c:	2900      	cmp	r1, #0
 8008e6e:	d1b9      	bne.n	8008de4 <_printf_float+0xe8>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7b6      	b.n	8008de2 <_printf_float+0xe6>
 8008e74:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008e78:	d119      	bne.n	8008eae <_printf_float+0x1b2>
 8008e7a:	2900      	cmp	r1, #0
 8008e7c:	6863      	ldr	r3, [r4, #4]
 8008e7e:	dd0c      	ble.n	8008e9a <_printf_float+0x19e>
 8008e80:	6121      	str	r1, [r4, #16]
 8008e82:	b913      	cbnz	r3, 8008e8a <_printf_float+0x18e>
 8008e84:	6822      	ldr	r2, [r4, #0]
 8008e86:	07d2      	lsls	r2, r2, #31
 8008e88:	d502      	bpl.n	8008e90 <_printf_float+0x194>
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	440b      	add	r3, r1
 8008e8e:	6123      	str	r3, [r4, #16]
 8008e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e92:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e94:	f04f 0900 	mov.w	r9, #0
 8008e98:	e7d9      	b.n	8008e4e <_printf_float+0x152>
 8008e9a:	b913      	cbnz	r3, 8008ea2 <_printf_float+0x1a6>
 8008e9c:	6822      	ldr	r2, [r4, #0]
 8008e9e:	07d0      	lsls	r0, r2, #31
 8008ea0:	d501      	bpl.n	8008ea6 <_printf_float+0x1aa>
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	e7f3      	b.n	8008e8e <_printf_float+0x192>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e7f1      	b.n	8008e8e <_printf_float+0x192>
 8008eaa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008eae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	db05      	blt.n	8008ec2 <_printf_float+0x1c6>
 8008eb6:	6822      	ldr	r2, [r4, #0]
 8008eb8:	6123      	str	r3, [r4, #16]
 8008eba:	07d1      	lsls	r1, r2, #31
 8008ebc:	d5e8      	bpl.n	8008e90 <_printf_float+0x194>
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	e7e5      	b.n	8008e8e <_printf_float+0x192>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bfd4      	ite	le
 8008ec6:	f1c3 0302 	rsble	r3, r3, #2
 8008eca:	2301      	movgt	r3, #1
 8008ecc:	4413      	add	r3, r2
 8008ece:	e7de      	b.n	8008e8e <_printf_float+0x192>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	055a      	lsls	r2, r3, #21
 8008ed4:	d407      	bmi.n	8008ee6 <_printf_float+0x1ea>
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	4642      	mov	r2, r8
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d12b      	bne.n	8008f3c <_printf_float+0x240>
 8008ee4:	e767      	b.n	8008db6 <_printf_float+0xba>
 8008ee6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008eea:	f240 80dc 	bls.w	80090a6 <_printf_float+0x3aa>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ef6:	f7f7 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d033      	beq.n	8008f66 <_printf_float+0x26a>
 8008efe:	2301      	movs	r3, #1
 8008f00:	4a41      	ldr	r2, [pc, #260]	; (8009008 <_printf_float+0x30c>)
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b8      	blx	r7
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f43f af54 	beq.w	8008db6 <_printf_float+0xba>
 8008f0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f12:	429a      	cmp	r2, r3
 8008f14:	db02      	blt.n	8008f1c <_printf_float+0x220>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	07d8      	lsls	r0, r3, #31
 8008f1a:	d50f      	bpl.n	8008f3c <_printf_float+0x240>
 8008f1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f20:	4631      	mov	r1, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	f43f af45 	beq.w	8008db6 <_printf_float+0xba>
 8008f2c:	f04f 0800 	mov.w	r8, #0
 8008f30:	f104 091a 	add.w	r9, r4, #26
 8008f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f36:	3b01      	subs	r3, #1
 8008f38:	4543      	cmp	r3, r8
 8008f3a:	dc09      	bgt.n	8008f50 <_printf_float+0x254>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	079b      	lsls	r3, r3, #30
 8008f40:	f100 8103 	bmi.w	800914a <_printf_float+0x44e>
 8008f44:	68e0      	ldr	r0, [r4, #12]
 8008f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f48:	4298      	cmp	r0, r3
 8008f4a:	bfb8      	it	lt
 8008f4c:	4618      	movlt	r0, r3
 8008f4e:	e734      	b.n	8008dba <_printf_float+0xbe>
 8008f50:	2301      	movs	r3, #1
 8008f52:	464a      	mov	r2, r9
 8008f54:	4631      	mov	r1, r6
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f43f af2b 	beq.w	8008db6 <_printf_float+0xba>
 8008f60:	f108 0801 	add.w	r8, r8, #1
 8008f64:	e7e6      	b.n	8008f34 <_printf_float+0x238>
 8008f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dc2b      	bgt.n	8008fc4 <_printf_float+0x2c8>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	4a26      	ldr	r2, [pc, #152]	; (8009008 <_printf_float+0x30c>)
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	f43f af1d 	beq.w	8008db6 <_printf_float+0xba>
 8008f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7e:	b923      	cbnz	r3, 8008f8a <_printf_float+0x28e>
 8008f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f82:	b913      	cbnz	r3, 8008f8a <_printf_float+0x28e>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	07d9      	lsls	r1, r3, #31
 8008f88:	d5d8      	bpl.n	8008f3c <_printf_float+0x240>
 8008f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f af0e 	beq.w	8008db6 <_printf_float+0xba>
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	f104 0a1a 	add.w	sl, r4, #26
 8008fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa4:	425b      	negs	r3, r3
 8008fa6:	454b      	cmp	r3, r9
 8008fa8:	dc01      	bgt.n	8008fae <_printf_float+0x2b2>
 8008faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fac:	e794      	b.n	8008ed8 <_printf_float+0x1dc>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f43f aefc 	beq.w	8008db6 <_printf_float+0xba>
 8008fbe:	f109 0901 	add.w	r9, r9, #1
 8008fc2:	e7ee      	b.n	8008fa2 <_printf_float+0x2a6>
 8008fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	bfa8      	it	ge
 8008fcc:	461a      	movge	r2, r3
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	4691      	mov	r9, r2
 8008fd2:	dd07      	ble.n	8008fe4 <_printf_float+0x2e8>
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4642      	mov	r2, r8
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f aee9 	beq.w	8008db6 <_printf_float+0xba>
 8008fe4:	f104 031a 	add.w	r3, r4, #26
 8008fe8:	f04f 0b00 	mov.w	fp, #0
 8008fec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ff0:	9306      	str	r3, [sp, #24]
 8008ff2:	e015      	b.n	8009020 <_printf_float+0x324>
 8008ff4:	7fefffff 	.word	0x7fefffff
 8008ff8:	0800c328 	.word	0x0800c328
 8008ffc:	0800c324 	.word	0x0800c324
 8009000:	0800c330 	.word	0x0800c330
 8009004:	0800c32c 	.word	0x0800c32c
 8009008:	0800c334 	.word	0x0800c334
 800900c:	2301      	movs	r3, #1
 800900e:	9a06      	ldr	r2, [sp, #24]
 8009010:	4631      	mov	r1, r6
 8009012:	4628      	mov	r0, r5
 8009014:	47b8      	blx	r7
 8009016:	3001      	adds	r0, #1
 8009018:	f43f aecd 	beq.w	8008db6 <_printf_float+0xba>
 800901c:	f10b 0b01 	add.w	fp, fp, #1
 8009020:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009024:	ebaa 0309 	sub.w	r3, sl, r9
 8009028:	455b      	cmp	r3, fp
 800902a:	dcef      	bgt.n	800900c <_printf_float+0x310>
 800902c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009030:	429a      	cmp	r2, r3
 8009032:	44d0      	add	r8, sl
 8009034:	db15      	blt.n	8009062 <_printf_float+0x366>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	07da      	lsls	r2, r3, #31
 800903a:	d412      	bmi.n	8009062 <_printf_float+0x366>
 800903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009040:	eba3 020a 	sub.w	r2, r3, sl
 8009044:	eba3 0a01 	sub.w	sl, r3, r1
 8009048:	4592      	cmp	sl, r2
 800904a:	bfa8      	it	ge
 800904c:	4692      	movge	sl, r2
 800904e:	f1ba 0f00 	cmp.w	sl, #0
 8009052:	dc0e      	bgt.n	8009072 <_printf_float+0x376>
 8009054:	f04f 0800 	mov.w	r8, #0
 8009058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800905c:	f104 091a 	add.w	r9, r4, #26
 8009060:	e019      	b.n	8009096 <_printf_float+0x39a>
 8009062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	d1e5      	bne.n	800903c <_printf_float+0x340>
 8009070:	e6a1      	b.n	8008db6 <_printf_float+0xba>
 8009072:	4653      	mov	r3, sl
 8009074:	4642      	mov	r2, r8
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	d1e9      	bne.n	8009054 <_printf_float+0x358>
 8009080:	e699      	b.n	8008db6 <_printf_float+0xba>
 8009082:	2301      	movs	r3, #1
 8009084:	464a      	mov	r2, r9
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae92 	beq.w	8008db6 <_printf_float+0xba>
 8009092:	f108 0801 	add.w	r8, r8, #1
 8009096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	eba3 030a 	sub.w	r3, r3, sl
 80090a0:	4543      	cmp	r3, r8
 80090a2:	dcee      	bgt.n	8009082 <_printf_float+0x386>
 80090a4:	e74a      	b.n	8008f3c <_printf_float+0x240>
 80090a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a8:	2a01      	cmp	r2, #1
 80090aa:	dc01      	bgt.n	80090b0 <_printf_float+0x3b4>
 80090ac:	07db      	lsls	r3, r3, #31
 80090ae:	d53a      	bpl.n	8009126 <_printf_float+0x42a>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4642      	mov	r2, r8
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	47b8      	blx	r7
 80090ba:	3001      	adds	r0, #1
 80090bc:	f43f ae7b 	beq.w	8008db6 <_printf_float+0xba>
 80090c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090c4:	4631      	mov	r1, r6
 80090c6:	4628      	mov	r0, r5
 80090c8:	47b8      	blx	r7
 80090ca:	3001      	adds	r0, #1
 80090cc:	f108 0801 	add.w	r8, r8, #1
 80090d0:	f43f ae71 	beq.w	8008db6 <_printf_float+0xba>
 80090d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d6:	2200      	movs	r2, #0
 80090d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80090dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090e0:	2300      	movs	r3, #0
 80090e2:	f7f7 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e6:	b9c8      	cbnz	r0, 800911c <_printf_float+0x420>
 80090e8:	4653      	mov	r3, sl
 80090ea:	4642      	mov	r2, r8
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	d10e      	bne.n	8009114 <_printf_float+0x418>
 80090f6:	e65e      	b.n	8008db6 <_printf_float+0xba>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4652      	mov	r2, sl
 80090fc:	4631      	mov	r1, r6
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	f43f ae57 	beq.w	8008db6 <_printf_float+0xba>
 8009108:	f108 0801 	add.w	r8, r8, #1
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	3b01      	subs	r3, #1
 8009110:	4543      	cmp	r3, r8
 8009112:	dcf1      	bgt.n	80090f8 <_printf_float+0x3fc>
 8009114:	464b      	mov	r3, r9
 8009116:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800911a:	e6de      	b.n	8008eda <_printf_float+0x1de>
 800911c:	f04f 0800 	mov.w	r8, #0
 8009120:	f104 0a1a 	add.w	sl, r4, #26
 8009124:	e7f2      	b.n	800910c <_printf_float+0x410>
 8009126:	2301      	movs	r3, #1
 8009128:	e7df      	b.n	80090ea <_printf_float+0x3ee>
 800912a:	2301      	movs	r3, #1
 800912c:	464a      	mov	r2, r9
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f ae3e 	beq.w	8008db6 <_printf_float+0xba>
 800913a:	f108 0801 	add.w	r8, r8, #1
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009142:	1a9b      	subs	r3, r3, r2
 8009144:	4543      	cmp	r3, r8
 8009146:	dcf0      	bgt.n	800912a <_printf_float+0x42e>
 8009148:	e6fc      	b.n	8008f44 <_printf_float+0x248>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	f104 0919 	add.w	r9, r4, #25
 8009152:	e7f4      	b.n	800913e <_printf_float+0x442>
 8009154:	2900      	cmp	r1, #0
 8009156:	f43f ae8b 	beq.w	8008e70 <_printf_float+0x174>
 800915a:	2300      	movs	r3, #0
 800915c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009160:	ab09      	add	r3, sp, #36	; 0x24
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	ec49 8b10 	vmov	d0, r8, r9
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	f8cd a004 	str.w	sl, [sp, #4]
 800916e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009172:	4628      	mov	r0, r5
 8009174:	f7ff fd2d 	bl	8008bd2 <__cvt>
 8009178:	4680      	mov	r8, r0
 800917a:	e648      	b.n	8008e0e <_printf_float+0x112>

0800917c <_printf_common>:
 800917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009180:	4691      	mov	r9, r2
 8009182:	461f      	mov	r7, r3
 8009184:	688a      	ldr	r2, [r1, #8]
 8009186:	690b      	ldr	r3, [r1, #16]
 8009188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800918c:	4293      	cmp	r3, r2
 800918e:	bfb8      	it	lt
 8009190:	4613      	movlt	r3, r2
 8009192:	f8c9 3000 	str.w	r3, [r9]
 8009196:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800919a:	4606      	mov	r6, r0
 800919c:	460c      	mov	r4, r1
 800919e:	b112      	cbz	r2, 80091a6 <_printf_common+0x2a>
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c9 3000 	str.w	r3, [r9]
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	0699      	lsls	r1, r3, #26
 80091aa:	bf42      	ittt	mi
 80091ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80091b0:	3302      	addmi	r3, #2
 80091b2:	f8c9 3000 	strmi.w	r3, [r9]
 80091b6:	6825      	ldr	r5, [r4, #0]
 80091b8:	f015 0506 	ands.w	r5, r5, #6
 80091bc:	d107      	bne.n	80091ce <_printf_common+0x52>
 80091be:	f104 0a19 	add.w	sl, r4, #25
 80091c2:	68e3      	ldr	r3, [r4, #12]
 80091c4:	f8d9 2000 	ldr.w	r2, [r9]
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	42ab      	cmp	r3, r5
 80091cc:	dc28      	bgt.n	8009220 <_printf_common+0xa4>
 80091ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	3300      	adds	r3, #0
 80091d6:	bf18      	it	ne
 80091d8:	2301      	movne	r3, #1
 80091da:	0692      	lsls	r2, r2, #26
 80091dc:	d42d      	bmi.n	800923a <_printf_common+0xbe>
 80091de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e2:	4639      	mov	r1, r7
 80091e4:	4630      	mov	r0, r6
 80091e6:	47c0      	blx	r8
 80091e8:	3001      	adds	r0, #1
 80091ea:	d020      	beq.n	800922e <_printf_common+0xb2>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	68e5      	ldr	r5, [r4, #12]
 80091f0:	f8d9 2000 	ldr.w	r2, [r9]
 80091f4:	f003 0306 	and.w	r3, r3, #6
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	bf08      	it	eq
 80091fc:	1aad      	subeq	r5, r5, r2
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	6922      	ldr	r2, [r4, #16]
 8009202:	bf0c      	ite	eq
 8009204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009208:	2500      	movne	r5, #0
 800920a:	4293      	cmp	r3, r2
 800920c:	bfc4      	itt	gt
 800920e:	1a9b      	subgt	r3, r3, r2
 8009210:	18ed      	addgt	r5, r5, r3
 8009212:	f04f 0900 	mov.w	r9, #0
 8009216:	341a      	adds	r4, #26
 8009218:	454d      	cmp	r5, r9
 800921a:	d11a      	bne.n	8009252 <_printf_common+0xd6>
 800921c:	2000      	movs	r0, #0
 800921e:	e008      	b.n	8009232 <_printf_common+0xb6>
 8009220:	2301      	movs	r3, #1
 8009222:	4652      	mov	r2, sl
 8009224:	4639      	mov	r1, r7
 8009226:	4630      	mov	r0, r6
 8009228:	47c0      	blx	r8
 800922a:	3001      	adds	r0, #1
 800922c:	d103      	bne.n	8009236 <_printf_common+0xba>
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009236:	3501      	adds	r5, #1
 8009238:	e7c3      	b.n	80091c2 <_printf_common+0x46>
 800923a:	18e1      	adds	r1, r4, r3
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	2030      	movs	r0, #48	; 0x30
 8009240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009244:	4422      	add	r2, r4
 8009246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800924a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800924e:	3302      	adds	r3, #2
 8009250:	e7c5      	b.n	80091de <_printf_common+0x62>
 8009252:	2301      	movs	r3, #1
 8009254:	4622      	mov	r2, r4
 8009256:	4639      	mov	r1, r7
 8009258:	4630      	mov	r0, r6
 800925a:	47c0      	blx	r8
 800925c:	3001      	adds	r0, #1
 800925e:	d0e6      	beq.n	800922e <_printf_common+0xb2>
 8009260:	f109 0901 	add.w	r9, r9, #1
 8009264:	e7d8      	b.n	8009218 <_printf_common+0x9c>
	...

08009268 <_printf_i>:
 8009268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800926c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009270:	460c      	mov	r4, r1
 8009272:	7e09      	ldrb	r1, [r1, #24]
 8009274:	b085      	sub	sp, #20
 8009276:	296e      	cmp	r1, #110	; 0x6e
 8009278:	4617      	mov	r7, r2
 800927a:	4606      	mov	r6, r0
 800927c:	4698      	mov	r8, r3
 800927e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009280:	f000 80b3 	beq.w	80093ea <_printf_i+0x182>
 8009284:	d822      	bhi.n	80092cc <_printf_i+0x64>
 8009286:	2963      	cmp	r1, #99	; 0x63
 8009288:	d036      	beq.n	80092f8 <_printf_i+0x90>
 800928a:	d80a      	bhi.n	80092a2 <_printf_i+0x3a>
 800928c:	2900      	cmp	r1, #0
 800928e:	f000 80b9 	beq.w	8009404 <_printf_i+0x19c>
 8009292:	2958      	cmp	r1, #88	; 0x58
 8009294:	f000 8083 	beq.w	800939e <_printf_i+0x136>
 8009298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800929c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80092a0:	e032      	b.n	8009308 <_printf_i+0xa0>
 80092a2:	2964      	cmp	r1, #100	; 0x64
 80092a4:	d001      	beq.n	80092aa <_printf_i+0x42>
 80092a6:	2969      	cmp	r1, #105	; 0x69
 80092a8:	d1f6      	bne.n	8009298 <_printf_i+0x30>
 80092aa:	6820      	ldr	r0, [r4, #0]
 80092ac:	6813      	ldr	r3, [r2, #0]
 80092ae:	0605      	lsls	r5, r0, #24
 80092b0:	f103 0104 	add.w	r1, r3, #4
 80092b4:	d52a      	bpl.n	800930c <_printf_i+0xa4>
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6011      	str	r1, [r2, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da03      	bge.n	80092c6 <_printf_i+0x5e>
 80092be:	222d      	movs	r2, #45	; 0x2d
 80092c0:	425b      	negs	r3, r3
 80092c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80092c6:	486f      	ldr	r0, [pc, #444]	; (8009484 <_printf_i+0x21c>)
 80092c8:	220a      	movs	r2, #10
 80092ca:	e039      	b.n	8009340 <_printf_i+0xd8>
 80092cc:	2973      	cmp	r1, #115	; 0x73
 80092ce:	f000 809d 	beq.w	800940c <_printf_i+0x1a4>
 80092d2:	d808      	bhi.n	80092e6 <_printf_i+0x7e>
 80092d4:	296f      	cmp	r1, #111	; 0x6f
 80092d6:	d020      	beq.n	800931a <_printf_i+0xb2>
 80092d8:	2970      	cmp	r1, #112	; 0x70
 80092da:	d1dd      	bne.n	8009298 <_printf_i+0x30>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	f043 0320 	orr.w	r3, r3, #32
 80092e2:	6023      	str	r3, [r4, #0]
 80092e4:	e003      	b.n	80092ee <_printf_i+0x86>
 80092e6:	2975      	cmp	r1, #117	; 0x75
 80092e8:	d017      	beq.n	800931a <_printf_i+0xb2>
 80092ea:	2978      	cmp	r1, #120	; 0x78
 80092ec:	d1d4      	bne.n	8009298 <_printf_i+0x30>
 80092ee:	2378      	movs	r3, #120	; 0x78
 80092f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092f4:	4864      	ldr	r0, [pc, #400]	; (8009488 <_printf_i+0x220>)
 80092f6:	e055      	b.n	80093a4 <_printf_i+0x13c>
 80092f8:	6813      	ldr	r3, [r2, #0]
 80092fa:	1d19      	adds	r1, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6011      	str	r1, [r2, #0]
 8009300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009308:	2301      	movs	r3, #1
 800930a:	e08c      	b.n	8009426 <_printf_i+0x1be>
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6011      	str	r1, [r2, #0]
 8009310:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009314:	bf18      	it	ne
 8009316:	b21b      	sxthne	r3, r3
 8009318:	e7cf      	b.n	80092ba <_printf_i+0x52>
 800931a:	6813      	ldr	r3, [r2, #0]
 800931c:	6825      	ldr	r5, [r4, #0]
 800931e:	1d18      	adds	r0, r3, #4
 8009320:	6010      	str	r0, [r2, #0]
 8009322:	0628      	lsls	r0, r5, #24
 8009324:	d501      	bpl.n	800932a <_printf_i+0xc2>
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	e002      	b.n	8009330 <_printf_i+0xc8>
 800932a:	0668      	lsls	r0, r5, #25
 800932c:	d5fb      	bpl.n	8009326 <_printf_i+0xbe>
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	4854      	ldr	r0, [pc, #336]	; (8009484 <_printf_i+0x21c>)
 8009332:	296f      	cmp	r1, #111	; 0x6f
 8009334:	bf14      	ite	ne
 8009336:	220a      	movne	r2, #10
 8009338:	2208      	moveq	r2, #8
 800933a:	2100      	movs	r1, #0
 800933c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009340:	6865      	ldr	r5, [r4, #4]
 8009342:	60a5      	str	r5, [r4, #8]
 8009344:	2d00      	cmp	r5, #0
 8009346:	f2c0 8095 	blt.w	8009474 <_printf_i+0x20c>
 800934a:	6821      	ldr	r1, [r4, #0]
 800934c:	f021 0104 	bic.w	r1, r1, #4
 8009350:	6021      	str	r1, [r4, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d13d      	bne.n	80093d2 <_printf_i+0x16a>
 8009356:	2d00      	cmp	r5, #0
 8009358:	f040 808e 	bne.w	8009478 <_printf_i+0x210>
 800935c:	4665      	mov	r5, ip
 800935e:	2a08      	cmp	r2, #8
 8009360:	d10b      	bne.n	800937a <_printf_i+0x112>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	07db      	lsls	r3, r3, #31
 8009366:	d508      	bpl.n	800937a <_printf_i+0x112>
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	6862      	ldr	r2, [r4, #4]
 800936c:	429a      	cmp	r2, r3
 800936e:	bfde      	ittt	le
 8009370:	2330      	movle	r3, #48	; 0x30
 8009372:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800937a:	ebac 0305 	sub.w	r3, ip, r5
 800937e:	6123      	str	r3, [r4, #16]
 8009380:	f8cd 8000 	str.w	r8, [sp]
 8009384:	463b      	mov	r3, r7
 8009386:	aa03      	add	r2, sp, #12
 8009388:	4621      	mov	r1, r4
 800938a:	4630      	mov	r0, r6
 800938c:	f7ff fef6 	bl	800917c <_printf_common>
 8009390:	3001      	adds	r0, #1
 8009392:	d14d      	bne.n	8009430 <_printf_i+0x1c8>
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	b005      	add	sp, #20
 800939a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800939e:	4839      	ldr	r0, [pc, #228]	; (8009484 <_printf_i+0x21c>)
 80093a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80093a4:	6813      	ldr	r3, [r2, #0]
 80093a6:	6821      	ldr	r1, [r4, #0]
 80093a8:	1d1d      	adds	r5, r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6015      	str	r5, [r2, #0]
 80093ae:	060a      	lsls	r2, r1, #24
 80093b0:	d50b      	bpl.n	80093ca <_printf_i+0x162>
 80093b2:	07ca      	lsls	r2, r1, #31
 80093b4:	bf44      	itt	mi
 80093b6:	f041 0120 	orrmi.w	r1, r1, #32
 80093ba:	6021      	strmi	r1, [r4, #0]
 80093bc:	b91b      	cbnz	r3, 80093c6 <_printf_i+0x15e>
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	f022 0220 	bic.w	r2, r2, #32
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	2210      	movs	r2, #16
 80093c8:	e7b7      	b.n	800933a <_printf_i+0xd2>
 80093ca:	064d      	lsls	r5, r1, #25
 80093cc:	bf48      	it	mi
 80093ce:	b29b      	uxthmi	r3, r3
 80093d0:	e7ef      	b.n	80093b2 <_printf_i+0x14a>
 80093d2:	4665      	mov	r5, ip
 80093d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093d8:	fb02 3311 	mls	r3, r2, r1, r3
 80093dc:	5cc3      	ldrb	r3, [r0, r3]
 80093de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093e2:	460b      	mov	r3, r1
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d1f5      	bne.n	80093d4 <_printf_i+0x16c>
 80093e8:	e7b9      	b.n	800935e <_printf_i+0xf6>
 80093ea:	6813      	ldr	r3, [r2, #0]
 80093ec:	6825      	ldr	r5, [r4, #0]
 80093ee:	6961      	ldr	r1, [r4, #20]
 80093f0:	1d18      	adds	r0, r3, #4
 80093f2:	6010      	str	r0, [r2, #0]
 80093f4:	0628      	lsls	r0, r5, #24
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	d501      	bpl.n	80093fe <_printf_i+0x196>
 80093fa:	6019      	str	r1, [r3, #0]
 80093fc:	e002      	b.n	8009404 <_printf_i+0x19c>
 80093fe:	066a      	lsls	r2, r5, #25
 8009400:	d5fb      	bpl.n	80093fa <_printf_i+0x192>
 8009402:	8019      	strh	r1, [r3, #0]
 8009404:	2300      	movs	r3, #0
 8009406:	6123      	str	r3, [r4, #16]
 8009408:	4665      	mov	r5, ip
 800940a:	e7b9      	b.n	8009380 <_printf_i+0x118>
 800940c:	6813      	ldr	r3, [r2, #0]
 800940e:	1d19      	adds	r1, r3, #4
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	681d      	ldr	r5, [r3, #0]
 8009414:	6862      	ldr	r2, [r4, #4]
 8009416:	2100      	movs	r1, #0
 8009418:	4628      	mov	r0, r5
 800941a:	f7f6 fee1 	bl	80001e0 <memchr>
 800941e:	b108      	cbz	r0, 8009424 <_printf_i+0x1bc>
 8009420:	1b40      	subs	r0, r0, r5
 8009422:	6060      	str	r0, [r4, #4]
 8009424:	6863      	ldr	r3, [r4, #4]
 8009426:	6123      	str	r3, [r4, #16]
 8009428:	2300      	movs	r3, #0
 800942a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800942e:	e7a7      	b.n	8009380 <_printf_i+0x118>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	462a      	mov	r2, r5
 8009434:	4639      	mov	r1, r7
 8009436:	4630      	mov	r0, r6
 8009438:	47c0      	blx	r8
 800943a:	3001      	adds	r0, #1
 800943c:	d0aa      	beq.n	8009394 <_printf_i+0x12c>
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	079b      	lsls	r3, r3, #30
 8009442:	d413      	bmi.n	800946c <_printf_i+0x204>
 8009444:	68e0      	ldr	r0, [r4, #12]
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	4298      	cmp	r0, r3
 800944a:	bfb8      	it	lt
 800944c:	4618      	movlt	r0, r3
 800944e:	e7a3      	b.n	8009398 <_printf_i+0x130>
 8009450:	2301      	movs	r3, #1
 8009452:	464a      	mov	r2, r9
 8009454:	4639      	mov	r1, r7
 8009456:	4630      	mov	r0, r6
 8009458:	47c0      	blx	r8
 800945a:	3001      	adds	r0, #1
 800945c:	d09a      	beq.n	8009394 <_printf_i+0x12c>
 800945e:	3501      	adds	r5, #1
 8009460:	68e3      	ldr	r3, [r4, #12]
 8009462:	9a03      	ldr	r2, [sp, #12]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	42ab      	cmp	r3, r5
 8009468:	dcf2      	bgt.n	8009450 <_printf_i+0x1e8>
 800946a:	e7eb      	b.n	8009444 <_printf_i+0x1dc>
 800946c:	2500      	movs	r5, #0
 800946e:	f104 0919 	add.w	r9, r4, #25
 8009472:	e7f5      	b.n	8009460 <_printf_i+0x1f8>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1ac      	bne.n	80093d2 <_printf_i+0x16a>
 8009478:	7803      	ldrb	r3, [r0, #0]
 800947a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800947e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009482:	e76c      	b.n	800935e <_printf_i+0xf6>
 8009484:	0800c336 	.word	0x0800c336
 8009488:	0800c347 	.word	0x0800c347

0800948c <iprintf>:
 800948c:	b40f      	push	{r0, r1, r2, r3}
 800948e:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <iprintf+0x2c>)
 8009490:	b513      	push	{r0, r1, r4, lr}
 8009492:	681c      	ldr	r4, [r3, #0]
 8009494:	b124      	cbz	r4, 80094a0 <iprintf+0x14>
 8009496:	69a3      	ldr	r3, [r4, #24]
 8009498:	b913      	cbnz	r3, 80094a0 <iprintf+0x14>
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fe94 	bl	800a1c8 <__sinit>
 80094a0:	ab05      	add	r3, sp, #20
 80094a2:	9a04      	ldr	r2, [sp, #16]
 80094a4:	68a1      	ldr	r1, [r4, #8]
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	4620      	mov	r0, r4
 80094aa:	f001 fae9 	bl	800aa80 <_vfiprintf_r>
 80094ae:	b002      	add	sp, #8
 80094b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b4:	b004      	add	sp, #16
 80094b6:	4770      	bx	lr
 80094b8:	2000000c 	.word	0x2000000c

080094bc <quorem>:
 80094bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	6903      	ldr	r3, [r0, #16]
 80094c2:	690c      	ldr	r4, [r1, #16]
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	4680      	mov	r8, r0
 80094c8:	f2c0 8082 	blt.w	80095d0 <quorem+0x114>
 80094cc:	3c01      	subs	r4, #1
 80094ce:	f101 0714 	add.w	r7, r1, #20
 80094d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80094d6:	f100 0614 	add.w	r6, r0, #20
 80094da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80094de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80094e2:	eb06 030c 	add.w	r3, r6, ip
 80094e6:	3501      	adds	r5, #1
 80094e8:	eb07 090c 	add.w	r9, r7, ip
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80094f2:	b395      	cbz	r5, 800955a <quorem+0x9e>
 80094f4:	f04f 0a00 	mov.w	sl, #0
 80094f8:	4638      	mov	r0, r7
 80094fa:	46b6      	mov	lr, r6
 80094fc:	46d3      	mov	fp, sl
 80094fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8009502:	b293      	uxth	r3, r2
 8009504:	fb05 a303 	mla	r3, r5, r3, sl
 8009508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800950c:	b29b      	uxth	r3, r3
 800950e:	ebab 0303 	sub.w	r3, fp, r3
 8009512:	0c12      	lsrs	r2, r2, #16
 8009514:	f8de b000 	ldr.w	fp, [lr]
 8009518:	fb05 a202 	mla	r2, r5, r2, sl
 800951c:	fa13 f38b 	uxtah	r3, r3, fp
 8009520:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009524:	fa1f fb82 	uxth.w	fp, r2
 8009528:	f8de 2000 	ldr.w	r2, [lr]
 800952c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009534:	b29b      	uxth	r3, r3
 8009536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953a:	4581      	cmp	r9, r0
 800953c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009540:	f84e 3b04 	str.w	r3, [lr], #4
 8009544:	d2db      	bcs.n	80094fe <quorem+0x42>
 8009546:	f856 300c 	ldr.w	r3, [r6, ip]
 800954a:	b933      	cbnz	r3, 800955a <quorem+0x9e>
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	3b04      	subs	r3, #4
 8009550:	429e      	cmp	r6, r3
 8009552:	461a      	mov	r2, r3
 8009554:	d330      	bcc.n	80095b8 <quorem+0xfc>
 8009556:	f8c8 4010 	str.w	r4, [r8, #16]
 800955a:	4640      	mov	r0, r8
 800955c:	f001 f8ea 	bl	800a734 <__mcmp>
 8009560:	2800      	cmp	r0, #0
 8009562:	db25      	blt.n	80095b0 <quorem+0xf4>
 8009564:	3501      	adds	r5, #1
 8009566:	4630      	mov	r0, r6
 8009568:	f04f 0c00 	mov.w	ip, #0
 800956c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009570:	f8d0 e000 	ldr.w	lr, [r0]
 8009574:	b293      	uxth	r3, r2
 8009576:	ebac 0303 	sub.w	r3, ip, r3
 800957a:	0c12      	lsrs	r2, r2, #16
 800957c:	fa13 f38e 	uxtah	r3, r3, lr
 8009580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009588:	b29b      	uxth	r3, r3
 800958a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800958e:	45b9      	cmp	r9, r7
 8009590:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009594:	f840 3b04 	str.w	r3, [r0], #4
 8009598:	d2e8      	bcs.n	800956c <quorem+0xb0>
 800959a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800959e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80095a2:	b92a      	cbnz	r2, 80095b0 <quorem+0xf4>
 80095a4:	3b04      	subs	r3, #4
 80095a6:	429e      	cmp	r6, r3
 80095a8:	461a      	mov	r2, r3
 80095aa:	d30b      	bcc.n	80095c4 <quorem+0x108>
 80095ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80095b0:	4628      	mov	r0, r5
 80095b2:	b003      	add	sp, #12
 80095b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	3b04      	subs	r3, #4
 80095bc:	2a00      	cmp	r2, #0
 80095be:	d1ca      	bne.n	8009556 <quorem+0x9a>
 80095c0:	3c01      	subs	r4, #1
 80095c2:	e7c5      	b.n	8009550 <quorem+0x94>
 80095c4:	6812      	ldr	r2, [r2, #0]
 80095c6:	3b04      	subs	r3, #4
 80095c8:	2a00      	cmp	r2, #0
 80095ca:	d1ef      	bne.n	80095ac <quorem+0xf0>
 80095cc:	3c01      	subs	r4, #1
 80095ce:	e7ea      	b.n	80095a6 <quorem+0xea>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7ee      	b.n	80095b2 <quorem+0xf6>
 80095d4:	0000      	movs	r0, r0
	...

080095d8 <_dtoa_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ec57 6b10 	vmov	r6, r7, d0
 80095e0:	b097      	sub	sp, #92	; 0x5c
 80095e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095e4:	9106      	str	r1, [sp, #24]
 80095e6:	4604      	mov	r4, r0
 80095e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80095ea:	9312      	str	r3, [sp, #72]	; 0x48
 80095ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095f0:	e9cd 6700 	strd	r6, r7, [sp]
 80095f4:	b93d      	cbnz	r5, 8009606 <_dtoa_r+0x2e>
 80095f6:	2010      	movs	r0, #16
 80095f8:	f000 fe7e 	bl	800a2f8 <malloc>
 80095fc:	6260      	str	r0, [r4, #36]	; 0x24
 80095fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009602:	6005      	str	r5, [r0, #0]
 8009604:	60c5      	str	r5, [r0, #12]
 8009606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009608:	6819      	ldr	r1, [r3, #0]
 800960a:	b151      	cbz	r1, 8009622 <_dtoa_r+0x4a>
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	604a      	str	r2, [r1, #4]
 8009610:	2301      	movs	r3, #1
 8009612:	4093      	lsls	r3, r2
 8009614:	608b      	str	r3, [r1, #8]
 8009616:	4620      	mov	r0, r4
 8009618:	f000 feaa 	bl	800a370 <_Bfree>
 800961c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	1e3b      	subs	r3, r7, #0
 8009624:	bfbb      	ittet	lt
 8009626:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800962a:	9301      	strlt	r3, [sp, #4]
 800962c:	2300      	movge	r3, #0
 800962e:	2201      	movlt	r2, #1
 8009630:	bfac      	ite	ge
 8009632:	f8c8 3000 	strge.w	r3, [r8]
 8009636:	f8c8 2000 	strlt.w	r2, [r8]
 800963a:	4baf      	ldr	r3, [pc, #700]	; (80098f8 <_dtoa_r+0x320>)
 800963c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009640:	ea33 0308 	bics.w	r3, r3, r8
 8009644:	d114      	bne.n	8009670 <_dtoa_r+0x98>
 8009646:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009648:	f242 730f 	movw	r3, #9999	; 0x270f
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	b923      	cbnz	r3, 800965c <_dtoa_r+0x84>
 8009652:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009656:	2800      	cmp	r0, #0
 8009658:	f000 8542 	beq.w	800a0e0 <_dtoa_r+0xb08>
 800965c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800965e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800990c <_dtoa_r+0x334>
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 8544 	beq.w	800a0f0 <_dtoa_r+0xb18>
 8009668:	f10b 0303 	add.w	r3, fp, #3
 800966c:	f000 bd3e 	b.w	800a0ec <_dtoa_r+0xb14>
 8009670:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009674:	2200      	movs	r2, #0
 8009676:	2300      	movs	r3, #0
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009680:	4681      	mov	r9, r0
 8009682:	b168      	cbz	r0, 80096a0 <_dtoa_r+0xc8>
 8009684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009686:	2301      	movs	r3, #1
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 8524 	beq.w	800a0da <_dtoa_r+0xb02>
 8009692:	4b9a      	ldr	r3, [pc, #616]	; (80098fc <_dtoa_r+0x324>)
 8009694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009696:	f103 3bff 	add.w	fp, r3, #4294967295
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	f000 bd28 	b.w	800a0f0 <_dtoa_r+0xb18>
 80096a0:	aa14      	add	r2, sp, #80	; 0x50
 80096a2:	a915      	add	r1, sp, #84	; 0x54
 80096a4:	ec47 6b10 	vmov	d0, r6, r7
 80096a8:	4620      	mov	r0, r4
 80096aa:	f001 f8ba 	bl	800a822 <__d2b>
 80096ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096b2:	9004      	str	r0, [sp, #16]
 80096b4:	2d00      	cmp	r5, #0
 80096b6:	d07c      	beq.n	80097b2 <_dtoa_r+0x1da>
 80096b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80096c0:	46b2      	mov	sl, r6
 80096c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80096c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80096ce:	2200      	movs	r2, #0
 80096d0:	4b8b      	ldr	r3, [pc, #556]	; (8009900 <_dtoa_r+0x328>)
 80096d2:	4650      	mov	r0, sl
 80096d4:	4659      	mov	r1, fp
 80096d6:	f7f6 fdd7 	bl	8000288 <__aeabi_dsub>
 80096da:	a381      	add	r3, pc, #516	; (adr r3, 80098e0 <_dtoa_r+0x308>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f6 ff8a 	bl	80005f8 <__aeabi_dmul>
 80096e4:	a380      	add	r3, pc, #512	; (adr r3, 80098e8 <_dtoa_r+0x310>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fdcf 	bl	800028c <__adddf3>
 80096ee:	4606      	mov	r6, r0
 80096f0:	4628      	mov	r0, r5
 80096f2:	460f      	mov	r7, r1
 80096f4:	f7f6 ff16 	bl	8000524 <__aeabi_i2d>
 80096f8:	a37d      	add	r3, pc, #500	; (adr r3, 80098f0 <_dtoa_r+0x318>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	f7f7 fa21 	bl	8000b58 <__aeabi_d2iz>
 8009716:	2200      	movs	r2, #0
 8009718:	4682      	mov	sl, r0
 800971a:	2300      	movs	r3, #0
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8009724:	b148      	cbz	r0, 800973a <_dtoa_r+0x162>
 8009726:	4650      	mov	r0, sl
 8009728:	f7f6 fefc 	bl	8000524 <__aeabi_i2d>
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	f7f7 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009734:	b908      	cbnz	r0, 800973a <_dtoa_r+0x162>
 8009736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800973a:	f1ba 0f16 	cmp.w	sl, #22
 800973e:	d859      	bhi.n	80097f4 <_dtoa_r+0x21c>
 8009740:	4970      	ldr	r1, [pc, #448]	; (8009904 <_dtoa_r+0x32c>)
 8009742:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800974a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974e:	f7f7 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 8009752:	2800      	cmp	r0, #0
 8009754:	d050      	beq.n	80097f8 <_dtoa_r+0x220>
 8009756:	f10a 3aff 	add.w	sl, sl, #4294967295
 800975a:	2300      	movs	r3, #0
 800975c:	930f      	str	r3, [sp, #60]	; 0x3c
 800975e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009760:	1b5d      	subs	r5, r3, r5
 8009762:	f1b5 0801 	subs.w	r8, r5, #1
 8009766:	bf49      	itett	mi
 8009768:	f1c5 0301 	rsbmi	r3, r5, #1
 800976c:	2300      	movpl	r3, #0
 800976e:	9305      	strmi	r3, [sp, #20]
 8009770:	f04f 0800 	movmi.w	r8, #0
 8009774:	bf58      	it	pl
 8009776:	9305      	strpl	r3, [sp, #20]
 8009778:	f1ba 0f00 	cmp.w	sl, #0
 800977c:	db3e      	blt.n	80097fc <_dtoa_r+0x224>
 800977e:	2300      	movs	r3, #0
 8009780:	44d0      	add	r8, sl
 8009782:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	9b06      	ldr	r3, [sp, #24]
 800978a:	2b09      	cmp	r3, #9
 800978c:	f200 8090 	bhi.w	80098b0 <_dtoa_r+0x2d8>
 8009790:	2b05      	cmp	r3, #5
 8009792:	bfc4      	itt	gt
 8009794:	3b04      	subgt	r3, #4
 8009796:	9306      	strgt	r3, [sp, #24]
 8009798:	9b06      	ldr	r3, [sp, #24]
 800979a:	f1a3 0302 	sub.w	r3, r3, #2
 800979e:	bfcc      	ite	gt
 80097a0:	2500      	movgt	r5, #0
 80097a2:	2501      	movle	r5, #1
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	f200 808f 	bhi.w	80098c8 <_dtoa_r+0x2f0>
 80097aa:	e8df f003 	tbb	[pc, r3]
 80097ae:	7f7d      	.short	0x7f7d
 80097b0:	7131      	.short	0x7131
 80097b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80097b6:	441d      	add	r5, r3
 80097b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80097bc:	2820      	cmp	r0, #32
 80097be:	dd13      	ble.n	80097e8 <_dtoa_r+0x210>
 80097c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80097c4:	9b00      	ldr	r3, [sp, #0]
 80097c6:	fa08 f800 	lsl.w	r8, r8, r0
 80097ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80097ce:	fa23 f000 	lsr.w	r0, r3, r0
 80097d2:	ea48 0000 	orr.w	r0, r8, r0
 80097d6:	f7f6 fe95 	bl	8000504 <__aeabi_ui2d>
 80097da:	2301      	movs	r3, #1
 80097dc:	4682      	mov	sl, r0
 80097de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80097e2:	3d01      	subs	r5, #1
 80097e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80097e6:	e772      	b.n	80096ce <_dtoa_r+0xf6>
 80097e8:	9b00      	ldr	r3, [sp, #0]
 80097ea:	f1c0 0020 	rsb	r0, r0, #32
 80097ee:	fa03 f000 	lsl.w	r0, r3, r0
 80097f2:	e7f0      	b.n	80097d6 <_dtoa_r+0x1fe>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e7b1      	b.n	800975c <_dtoa_r+0x184>
 80097f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80097fa:	e7b0      	b.n	800975e <_dtoa_r+0x186>
 80097fc:	9b05      	ldr	r3, [sp, #20]
 80097fe:	eba3 030a 	sub.w	r3, r3, sl
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	f1ca 0300 	rsb	r3, sl, #0
 8009808:	9307      	str	r3, [sp, #28]
 800980a:	2300      	movs	r3, #0
 800980c:	930e      	str	r3, [sp, #56]	; 0x38
 800980e:	e7bb      	b.n	8009788 <_dtoa_r+0x1b0>
 8009810:	2301      	movs	r3, #1
 8009812:	930a      	str	r3, [sp, #40]	; 0x28
 8009814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	dd59      	ble.n	80098ce <_dtoa_r+0x2f6>
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	4699      	mov	r9, r3
 800981e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009820:	2200      	movs	r2, #0
 8009822:	6072      	str	r2, [r6, #4]
 8009824:	2204      	movs	r2, #4
 8009826:	f102 0014 	add.w	r0, r2, #20
 800982a:	4298      	cmp	r0, r3
 800982c:	6871      	ldr	r1, [r6, #4]
 800982e:	d953      	bls.n	80098d8 <_dtoa_r+0x300>
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fd69 	bl	800a308 <_Balloc>
 8009836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009838:	6030      	str	r0, [r6, #0]
 800983a:	f1b9 0f0e 	cmp.w	r9, #14
 800983e:	f8d3 b000 	ldr.w	fp, [r3]
 8009842:	f200 80e6 	bhi.w	8009a12 <_dtoa_r+0x43a>
 8009846:	2d00      	cmp	r5, #0
 8009848:	f000 80e3 	beq.w	8009a12 <_dtoa_r+0x43a>
 800984c:	ed9d 7b00 	vldr	d7, [sp]
 8009850:	f1ba 0f00 	cmp.w	sl, #0
 8009854:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009858:	dd74      	ble.n	8009944 <_dtoa_r+0x36c>
 800985a:	4a2a      	ldr	r2, [pc, #168]	; (8009904 <_dtoa_r+0x32c>)
 800985c:	f00a 030f 	and.w	r3, sl, #15
 8009860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009864:	ed93 7b00 	vldr	d7, [r3]
 8009868:	ea4f 162a 	mov.w	r6, sl, asr #4
 800986c:	06f0      	lsls	r0, r6, #27
 800986e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009872:	d565      	bpl.n	8009940 <_dtoa_r+0x368>
 8009874:	4b24      	ldr	r3, [pc, #144]	; (8009908 <_dtoa_r+0x330>)
 8009876:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800987a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800987e:	f7f6 ffe5 	bl	800084c <__aeabi_ddiv>
 8009882:	e9cd 0100 	strd	r0, r1, [sp]
 8009886:	f006 060f 	and.w	r6, r6, #15
 800988a:	2503      	movs	r5, #3
 800988c:	4f1e      	ldr	r7, [pc, #120]	; (8009908 <_dtoa_r+0x330>)
 800988e:	e04c      	b.n	800992a <_dtoa_r+0x352>
 8009890:	2301      	movs	r3, #1
 8009892:	930a      	str	r3, [sp, #40]	; 0x28
 8009894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009896:	4453      	add	r3, sl
 8009898:	f103 0901 	add.w	r9, r3, #1
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	464b      	mov	r3, r9
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	bfb8      	it	lt
 80098a4:	2301      	movlt	r3, #1
 80098a6:	e7ba      	b.n	800981e <_dtoa_r+0x246>
 80098a8:	2300      	movs	r3, #0
 80098aa:	e7b2      	b.n	8009812 <_dtoa_r+0x23a>
 80098ac:	2300      	movs	r3, #0
 80098ae:	e7f0      	b.n	8009892 <_dtoa_r+0x2ba>
 80098b0:	2501      	movs	r5, #1
 80098b2:	2300      	movs	r3, #0
 80098b4:	9306      	str	r3, [sp, #24]
 80098b6:	950a      	str	r5, [sp, #40]	; 0x28
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	4699      	mov	r9, r3
 80098c0:	2200      	movs	r2, #0
 80098c2:	2312      	movs	r3, #18
 80098c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80098c6:	e7aa      	b.n	800981e <_dtoa_r+0x246>
 80098c8:	2301      	movs	r3, #1
 80098ca:	930a      	str	r3, [sp, #40]	; 0x28
 80098cc:	e7f4      	b.n	80098b8 <_dtoa_r+0x2e0>
 80098ce:	2301      	movs	r3, #1
 80098d0:	9302      	str	r3, [sp, #8]
 80098d2:	4699      	mov	r9, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	e7f5      	b.n	80098c4 <_dtoa_r+0x2ec>
 80098d8:	3101      	adds	r1, #1
 80098da:	6071      	str	r1, [r6, #4]
 80098dc:	0052      	lsls	r2, r2, #1
 80098de:	e7a2      	b.n	8009826 <_dtoa_r+0x24e>
 80098e0:	636f4361 	.word	0x636f4361
 80098e4:	3fd287a7 	.word	0x3fd287a7
 80098e8:	8b60c8b3 	.word	0x8b60c8b3
 80098ec:	3fc68a28 	.word	0x3fc68a28
 80098f0:	509f79fb 	.word	0x509f79fb
 80098f4:	3fd34413 	.word	0x3fd34413
 80098f8:	7ff00000 	.word	0x7ff00000
 80098fc:	0800c335 	.word	0x0800c335
 8009900:	3ff80000 	.word	0x3ff80000
 8009904:	0800c3f0 	.word	0x0800c3f0
 8009908:	0800c3c8 	.word	0x0800c3c8
 800990c:	0800c361 	.word	0x0800c361
 8009910:	07f1      	lsls	r1, r6, #31
 8009912:	d508      	bpl.n	8009926 <_dtoa_r+0x34e>
 8009914:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991c:	f7f6 fe6c 	bl	80005f8 <__aeabi_dmul>
 8009920:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009924:	3501      	adds	r5, #1
 8009926:	1076      	asrs	r6, r6, #1
 8009928:	3708      	adds	r7, #8
 800992a:	2e00      	cmp	r6, #0
 800992c:	d1f0      	bne.n	8009910 <_dtoa_r+0x338>
 800992e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009936:	f7f6 ff89 	bl	800084c <__aeabi_ddiv>
 800993a:	e9cd 0100 	strd	r0, r1, [sp]
 800993e:	e01a      	b.n	8009976 <_dtoa_r+0x39e>
 8009940:	2502      	movs	r5, #2
 8009942:	e7a3      	b.n	800988c <_dtoa_r+0x2b4>
 8009944:	f000 80a0 	beq.w	8009a88 <_dtoa_r+0x4b0>
 8009948:	f1ca 0600 	rsb	r6, sl, #0
 800994c:	4b9f      	ldr	r3, [pc, #636]	; (8009bcc <_dtoa_r+0x5f4>)
 800994e:	4fa0      	ldr	r7, [pc, #640]	; (8009bd0 <_dtoa_r+0x5f8>)
 8009950:	f006 020f 	and.w	r2, r6, #15
 8009954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009960:	f7f6 fe4a 	bl	80005f8 <__aeabi_dmul>
 8009964:	e9cd 0100 	strd	r0, r1, [sp]
 8009968:	1136      	asrs	r6, r6, #4
 800996a:	2300      	movs	r3, #0
 800996c:	2502      	movs	r5, #2
 800996e:	2e00      	cmp	r6, #0
 8009970:	d17f      	bne.n	8009a72 <_dtoa_r+0x49a>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e1      	bne.n	800993a <_dtoa_r+0x362>
 8009976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 8087 	beq.w	8009a8c <_dtoa_r+0x4b4>
 800997e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009982:	2200      	movs	r2, #0
 8009984:	4b93      	ldr	r3, [pc, #588]	; (8009bd4 <_dtoa_r+0x5fc>)
 8009986:	4630      	mov	r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	f7f7 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800998e:	2800      	cmp	r0, #0
 8009990:	d07c      	beq.n	8009a8c <_dtoa_r+0x4b4>
 8009992:	f1b9 0f00 	cmp.w	r9, #0
 8009996:	d079      	beq.n	8009a8c <_dtoa_r+0x4b4>
 8009998:	9b02      	ldr	r3, [sp, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	dd35      	ble.n	8009a0a <_dtoa_r+0x432>
 800999e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80099a2:	9308      	str	r3, [sp, #32]
 80099a4:	4639      	mov	r1, r7
 80099a6:	2200      	movs	r2, #0
 80099a8:	4b8b      	ldr	r3, [pc, #556]	; (8009bd8 <_dtoa_r+0x600>)
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7f6 fe24 	bl	80005f8 <__aeabi_dmul>
 80099b0:	e9cd 0100 	strd	r0, r1, [sp]
 80099b4:	9f02      	ldr	r7, [sp, #8]
 80099b6:	3501      	adds	r5, #1
 80099b8:	4628      	mov	r0, r5
 80099ba:	f7f6 fdb3 	bl	8000524 <__aeabi_i2d>
 80099be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c2:	f7f6 fe19 	bl	80005f8 <__aeabi_dmul>
 80099c6:	2200      	movs	r2, #0
 80099c8:	4b84      	ldr	r3, [pc, #528]	; (8009bdc <_dtoa_r+0x604>)
 80099ca:	f7f6 fc5f 	bl	800028c <__adddf3>
 80099ce:	4605      	mov	r5, r0
 80099d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80099d4:	2f00      	cmp	r7, #0
 80099d6:	d15d      	bne.n	8009a94 <_dtoa_r+0x4bc>
 80099d8:	2200      	movs	r2, #0
 80099da:	4b81      	ldr	r3, [pc, #516]	; (8009be0 <_dtoa_r+0x608>)
 80099dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e0:	f7f6 fc52 	bl	8000288 <__aeabi_dsub>
 80099e4:	462a      	mov	r2, r5
 80099e6:	4633      	mov	r3, r6
 80099e8:	e9cd 0100 	strd	r0, r1, [sp]
 80099ec:	f7f7 f894 	bl	8000b18 <__aeabi_dcmpgt>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f040 8288 	bne.w	8009f06 <_dtoa_r+0x92e>
 80099f6:	462a      	mov	r2, r5
 80099f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80099fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a00:	f7f7 f86c 	bl	8000adc <__aeabi_dcmplt>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f040 827c 	bne.w	8009f02 <_dtoa_r+0x92a>
 8009a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8009a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f2c0 8150 	blt.w	8009cba <_dtoa_r+0x6e2>
 8009a1a:	f1ba 0f0e 	cmp.w	sl, #14
 8009a1e:	f300 814c 	bgt.w	8009cba <_dtoa_r+0x6e2>
 8009a22:	4b6a      	ldr	r3, [pc, #424]	; (8009bcc <_dtoa_r+0x5f4>)
 8009a24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a28:	ed93 7b00 	vldr	d7, [r3]
 8009a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a34:	f280 80d8 	bge.w	8009be8 <_dtoa_r+0x610>
 8009a38:	f1b9 0f00 	cmp.w	r9, #0
 8009a3c:	f300 80d4 	bgt.w	8009be8 <_dtoa_r+0x610>
 8009a40:	f040 825e 	bne.w	8009f00 <_dtoa_r+0x928>
 8009a44:	2200      	movs	r2, #0
 8009a46:	4b66      	ldr	r3, [pc, #408]	; (8009be0 <_dtoa_r+0x608>)
 8009a48:	ec51 0b17 	vmov	r0, r1, d7
 8009a4c:	f7f6 fdd4 	bl	80005f8 <__aeabi_dmul>
 8009a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a54:	f7f7 f856 	bl	8000b04 <__aeabi_dcmpge>
 8009a58:	464f      	mov	r7, r9
 8009a5a:	464e      	mov	r6, r9
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f040 8234 	bne.w	8009eca <_dtoa_r+0x8f2>
 8009a62:	2331      	movs	r3, #49	; 0x31
 8009a64:	f10b 0501 	add.w	r5, fp, #1
 8009a68:	f88b 3000 	strb.w	r3, [fp]
 8009a6c:	f10a 0a01 	add.w	sl, sl, #1
 8009a70:	e22f      	b.n	8009ed2 <_dtoa_r+0x8fa>
 8009a72:	07f2      	lsls	r2, r6, #31
 8009a74:	d505      	bpl.n	8009a82 <_dtoa_r+0x4aa>
 8009a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7a:	f7f6 fdbd 	bl	80005f8 <__aeabi_dmul>
 8009a7e:	3501      	adds	r5, #1
 8009a80:	2301      	movs	r3, #1
 8009a82:	1076      	asrs	r6, r6, #1
 8009a84:	3708      	adds	r7, #8
 8009a86:	e772      	b.n	800996e <_dtoa_r+0x396>
 8009a88:	2502      	movs	r5, #2
 8009a8a:	e774      	b.n	8009976 <_dtoa_r+0x39e>
 8009a8c:	f8cd a020 	str.w	sl, [sp, #32]
 8009a90:	464f      	mov	r7, r9
 8009a92:	e791      	b.n	80099b8 <_dtoa_r+0x3e0>
 8009a94:	4b4d      	ldr	r3, [pc, #308]	; (8009bcc <_dtoa_r+0x5f4>)
 8009a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d047      	beq.n	8009b34 <_dtoa_r+0x55c>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	494e      	ldr	r1, [pc, #312]	; (8009be4 <_dtoa_r+0x60c>)
 8009aac:	f7f6 fece 	bl	800084c <__aeabi_ddiv>
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	4633      	mov	r3, r6
 8009ab4:	f7f6 fbe8 	bl	8000288 <__aeabi_dsub>
 8009ab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009abc:	465d      	mov	r5, fp
 8009abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ac2:	f7f7 f849 	bl	8000b58 <__aeabi_d2iz>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	f7f6 fd2c 	bl	8000524 <__aeabi_i2d>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ad4:	f7f6 fbd8 	bl	8000288 <__aeabi_dsub>
 8009ad8:	3630      	adds	r6, #48	; 0x30
 8009ada:	f805 6b01 	strb.w	r6, [r5], #1
 8009ade:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8009ae6:	f7f6 fff9 	bl	8000adc <__aeabi_dcmplt>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d163      	bne.n	8009bb6 <_dtoa_r+0x5de>
 8009aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af2:	2000      	movs	r0, #0
 8009af4:	4937      	ldr	r1, [pc, #220]	; (8009bd4 <_dtoa_r+0x5fc>)
 8009af6:	f7f6 fbc7 	bl	8000288 <__aeabi_dsub>
 8009afa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009afe:	f7f6 ffed 	bl	8000adc <__aeabi_dcmplt>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f040 80b7 	bne.w	8009c76 <_dtoa_r+0x69e>
 8009b08:	eba5 030b 	sub.w	r3, r5, fp
 8009b0c:	429f      	cmp	r7, r3
 8009b0e:	f77f af7c 	ble.w	8009a0a <_dtoa_r+0x432>
 8009b12:	2200      	movs	r2, #0
 8009b14:	4b30      	ldr	r3, [pc, #192]	; (8009bd8 <_dtoa_r+0x600>)
 8009b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b1a:	f7f6 fd6d 	bl	80005f8 <__aeabi_dmul>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b24:	4b2c      	ldr	r3, [pc, #176]	; (8009bd8 <_dtoa_r+0x600>)
 8009b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b2a:	f7f6 fd65 	bl	80005f8 <__aeabi_dmul>
 8009b2e:	e9cd 0100 	strd	r0, r1, [sp]
 8009b32:	e7c4      	b.n	8009abe <_dtoa_r+0x4e6>
 8009b34:	462a      	mov	r2, r5
 8009b36:	4633      	mov	r3, r6
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b40:	eb0b 0507 	add.w	r5, fp, r7
 8009b44:	465e      	mov	r6, fp
 8009b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b4a:	f7f7 f805 	bl	8000b58 <__aeabi_d2iz>
 8009b4e:	4607      	mov	r7, r0
 8009b50:	f7f6 fce8 	bl	8000524 <__aeabi_i2d>
 8009b54:	3730      	adds	r7, #48	; 0x30
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b5e:	f7f6 fb93 	bl	8000288 <__aeabi_dsub>
 8009b62:	f806 7b01 	strb.w	r7, [r6], #1
 8009b66:	42ae      	cmp	r6, r5
 8009b68:	e9cd 0100 	strd	r0, r1, [sp]
 8009b6c:	f04f 0200 	mov.w	r2, #0
 8009b70:	d126      	bne.n	8009bc0 <_dtoa_r+0x5e8>
 8009b72:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <_dtoa_r+0x60c>)
 8009b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b78:	f7f6 fb88 	bl	800028c <__adddf3>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b84:	f7f6 ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d174      	bne.n	8009c76 <_dtoa_r+0x69e>
 8009b8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b90:	2000      	movs	r0, #0
 8009b92:	4914      	ldr	r1, [pc, #80]	; (8009be4 <_dtoa_r+0x60c>)
 8009b94:	f7f6 fb78 	bl	8000288 <__aeabi_dsub>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ba0:	f7f6 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	f43f af30 	beq.w	8009a0a <_dtoa_r+0x432>
 8009baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bae:	2b30      	cmp	r3, #48	; 0x30
 8009bb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009bb4:	d002      	beq.n	8009bbc <_dtoa_r+0x5e4>
 8009bb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009bba:	e04a      	b.n	8009c52 <_dtoa_r+0x67a>
 8009bbc:	4615      	mov	r5, r2
 8009bbe:	e7f4      	b.n	8009baa <_dtoa_r+0x5d2>
 8009bc0:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <_dtoa_r+0x600>)
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8009bca:	e7bc      	b.n	8009b46 <_dtoa_r+0x56e>
 8009bcc:	0800c3f0 	.word	0x0800c3f0
 8009bd0:	0800c3c8 	.word	0x0800c3c8
 8009bd4:	3ff00000 	.word	0x3ff00000
 8009bd8:	40240000 	.word	0x40240000
 8009bdc:	401c0000 	.word	0x401c0000
 8009be0:	40140000 	.word	0x40140000
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bec:	465d      	mov	r5, fp
 8009bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	f7f6 fe29 	bl	800084c <__aeabi_ddiv>
 8009bfa:	f7f6 ffad 	bl	8000b58 <__aeabi_d2iz>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	f7f6 fc90 	bl	8000524 <__aeabi_i2d>
 8009c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c08:	f7f6 fcf6 	bl	80005f8 <__aeabi_dmul>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009c18:	f7f6 fb36 	bl	8000288 <__aeabi_dsub>
 8009c1c:	f805 6b01 	strb.w	r6, [r5], #1
 8009c20:	eba5 060b 	sub.w	r6, r5, fp
 8009c24:	45b1      	cmp	r9, r6
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	d139      	bne.n	8009ca0 <_dtoa_r+0x6c8>
 8009c2c:	f7f6 fb2e 	bl	800028c <__adddf3>
 8009c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	f7f6 ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 8009c3c:	b9c8      	cbnz	r0, 8009c72 <_dtoa_r+0x69a>
 8009c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c42:	4630      	mov	r0, r6
 8009c44:	4639      	mov	r1, r7
 8009c46:	f7f6 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c4a:	b110      	cbz	r0, 8009c52 <_dtoa_r+0x67a>
 8009c4c:	f018 0f01 	tst.w	r8, #1
 8009c50:	d10f      	bne.n	8009c72 <_dtoa_r+0x69a>
 8009c52:	9904      	ldr	r1, [sp, #16]
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fb8b 	bl	800a370 <_Bfree>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c5e:	702b      	strb	r3, [r5, #0]
 8009c60:	f10a 0301 	add.w	r3, sl, #1
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 8241 	beq.w	800a0f0 <_dtoa_r+0xb18>
 8009c6e:	601d      	str	r5, [r3, #0]
 8009c70:	e23e      	b.n	800a0f0 <_dtoa_r+0xb18>
 8009c72:	f8cd a020 	str.w	sl, [sp, #32]
 8009c76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c7a:	2a39      	cmp	r2, #57	; 0x39
 8009c7c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009c80:	d108      	bne.n	8009c94 <_dtoa_r+0x6bc>
 8009c82:	459b      	cmp	fp, r3
 8009c84:	d10a      	bne.n	8009c9c <_dtoa_r+0x6c4>
 8009c86:	9b08      	ldr	r3, [sp, #32]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	9308      	str	r3, [sp, #32]
 8009c8c:	2330      	movs	r3, #48	; 0x30
 8009c8e:	f88b 3000 	strb.w	r3, [fp]
 8009c92:	465b      	mov	r3, fp
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	3201      	adds	r2, #1
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e78c      	b.n	8009bb6 <_dtoa_r+0x5de>
 8009c9c:	461d      	mov	r5, r3
 8009c9e:	e7ea      	b.n	8009c76 <_dtoa_r+0x69e>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	4b9b      	ldr	r3, [pc, #620]	; (8009f10 <_dtoa_r+0x938>)
 8009ca4:	f7f6 fca8 	bl	80005f8 <__aeabi_dmul>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2300      	movs	r3, #0
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	f7f6 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d09a      	beq.n	8009bee <_dtoa_r+0x616>
 8009cb8:	e7cb      	b.n	8009c52 <_dtoa_r+0x67a>
 8009cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	f000 808b 	beq.w	8009dd8 <_dtoa_r+0x800>
 8009cc2:	9a06      	ldr	r2, [sp, #24]
 8009cc4:	2a01      	cmp	r2, #1
 8009cc6:	dc6e      	bgt.n	8009da6 <_dtoa_r+0x7ce>
 8009cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cca:	2a00      	cmp	r2, #0
 8009ccc:	d067      	beq.n	8009d9e <_dtoa_r+0x7c6>
 8009cce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cd2:	9f07      	ldr	r7, [sp, #28]
 8009cd4:	9d05      	ldr	r5, [sp, #20]
 8009cd6:	9a05      	ldr	r2, [sp, #20]
 8009cd8:	2101      	movs	r1, #1
 8009cda:	441a      	add	r2, r3
 8009cdc:	4620      	mov	r0, r4
 8009cde:	9205      	str	r2, [sp, #20]
 8009ce0:	4498      	add	r8, r3
 8009ce2:	f000 fbe5 	bl	800a4b0 <__i2b>
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	dd0c      	ble.n	8009d06 <_dtoa_r+0x72e>
 8009cec:	f1b8 0f00 	cmp.w	r8, #0
 8009cf0:	dd09      	ble.n	8009d06 <_dtoa_r+0x72e>
 8009cf2:	4545      	cmp	r5, r8
 8009cf4:	9a05      	ldr	r2, [sp, #20]
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	bfa8      	it	ge
 8009cfa:	4643      	movge	r3, r8
 8009cfc:	1ad2      	subs	r2, r2, r3
 8009cfe:	9205      	str	r2, [sp, #20]
 8009d00:	1aed      	subs	r5, r5, r3
 8009d02:	eba8 0803 	sub.w	r8, r8, r3
 8009d06:	9b07      	ldr	r3, [sp, #28]
 8009d08:	b1eb      	cbz	r3, 8009d46 <_dtoa_r+0x76e>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d067      	beq.n	8009de0 <_dtoa_r+0x808>
 8009d10:	b18f      	cbz	r7, 8009d36 <_dtoa_r+0x75e>
 8009d12:	4631      	mov	r1, r6
 8009d14:	463a      	mov	r2, r7
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 fc6a 	bl	800a5f0 <__pow5mult>
 8009d1c:	9a04      	ldr	r2, [sp, #16]
 8009d1e:	4601      	mov	r1, r0
 8009d20:	4606      	mov	r6, r0
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 fbcd 	bl	800a4c2 <__multiply>
 8009d28:	9904      	ldr	r1, [sp, #16]
 8009d2a:	9008      	str	r0, [sp, #32]
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fb1f 	bl	800a370 <_Bfree>
 8009d32:	9b08      	ldr	r3, [sp, #32]
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9b07      	ldr	r3, [sp, #28]
 8009d38:	1bda      	subs	r2, r3, r7
 8009d3a:	d004      	beq.n	8009d46 <_dtoa_r+0x76e>
 8009d3c:	9904      	ldr	r1, [sp, #16]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 fc56 	bl	800a5f0 <__pow5mult>
 8009d44:	9004      	str	r0, [sp, #16]
 8009d46:	2101      	movs	r1, #1
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fbb1 	bl	800a4b0 <__i2b>
 8009d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d50:	4607      	mov	r7, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 81d0 	beq.w	800a0f8 <_dtoa_r+0xb20>
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 fc47 	bl	800a5f0 <__pow5mult>
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	4607      	mov	r7, r0
 8009d68:	dc40      	bgt.n	8009dec <_dtoa_r+0x814>
 8009d6a:	9b00      	ldr	r3, [sp, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d139      	bne.n	8009de4 <_dtoa_r+0x80c>
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d136      	bne.n	8009de8 <_dtoa_r+0x810>
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d80:	0d1b      	lsrs	r3, r3, #20
 8009d82:	051b      	lsls	r3, r3, #20
 8009d84:	b12b      	cbz	r3, 8009d92 <_dtoa_r+0x7ba>
 8009d86:	9b05      	ldr	r3, [sp, #20]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	f108 0801 	add.w	r8, r8, #1
 8009d90:	2301      	movs	r3, #1
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d12a      	bne.n	8009df0 <_dtoa_r+0x818>
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	e030      	b.n	8009e00 <_dtoa_r+0x828>
 8009d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009da4:	e795      	b.n	8009cd2 <_dtoa_r+0x6fa>
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	f109 37ff 	add.w	r7, r9, #4294967295
 8009dac:	42bb      	cmp	r3, r7
 8009dae:	bfbf      	itttt	lt
 8009db0:	9b07      	ldrlt	r3, [sp, #28]
 8009db2:	9707      	strlt	r7, [sp, #28]
 8009db4:	1afa      	sublt	r2, r7, r3
 8009db6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009db8:	bfbb      	ittet	lt
 8009dba:	189b      	addlt	r3, r3, r2
 8009dbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009dbe:	1bdf      	subge	r7, r3, r7
 8009dc0:	2700      	movlt	r7, #0
 8009dc2:	f1b9 0f00 	cmp.w	r9, #0
 8009dc6:	bfb5      	itete	lt
 8009dc8:	9b05      	ldrlt	r3, [sp, #20]
 8009dca:	9d05      	ldrge	r5, [sp, #20]
 8009dcc:	eba3 0509 	sublt.w	r5, r3, r9
 8009dd0:	464b      	movge	r3, r9
 8009dd2:	bfb8      	it	lt
 8009dd4:	2300      	movlt	r3, #0
 8009dd6:	e77e      	b.n	8009cd6 <_dtoa_r+0x6fe>
 8009dd8:	9f07      	ldr	r7, [sp, #28]
 8009dda:	9d05      	ldr	r5, [sp, #20]
 8009ddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009dde:	e783      	b.n	8009ce8 <_dtoa_r+0x710>
 8009de0:	9a07      	ldr	r2, [sp, #28]
 8009de2:	e7ab      	b.n	8009d3c <_dtoa_r+0x764>
 8009de4:	2300      	movs	r3, #0
 8009de6:	e7d4      	b.n	8009d92 <_dtoa_r+0x7ba>
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	e7d2      	b.n	8009d92 <_dtoa_r+0x7ba>
 8009dec:	2300      	movs	r3, #0
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009df6:	6918      	ldr	r0, [r3, #16]
 8009df8:	f000 fb0c 	bl	800a414 <__hi0bits>
 8009dfc:	f1c0 0020 	rsb	r0, r0, #32
 8009e00:	4440      	add	r0, r8
 8009e02:	f010 001f 	ands.w	r0, r0, #31
 8009e06:	d047      	beq.n	8009e98 <_dtoa_r+0x8c0>
 8009e08:	f1c0 0320 	rsb	r3, r0, #32
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	dd3b      	ble.n	8009e88 <_dtoa_r+0x8b0>
 8009e10:	9b05      	ldr	r3, [sp, #20]
 8009e12:	f1c0 001c 	rsb	r0, r0, #28
 8009e16:	4403      	add	r3, r0
 8009e18:	9305      	str	r3, [sp, #20]
 8009e1a:	4405      	add	r5, r0
 8009e1c:	4480      	add	r8, r0
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dd05      	ble.n	8009e30 <_dtoa_r+0x858>
 8009e24:	461a      	mov	r2, r3
 8009e26:	9904      	ldr	r1, [sp, #16]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 fc2f 	bl	800a68c <__lshift>
 8009e2e:	9004      	str	r0, [sp, #16]
 8009e30:	f1b8 0f00 	cmp.w	r8, #0
 8009e34:	dd05      	ble.n	8009e42 <_dtoa_r+0x86a>
 8009e36:	4639      	mov	r1, r7
 8009e38:	4642      	mov	r2, r8
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 fc26 	bl	800a68c <__lshift>
 8009e40:	4607      	mov	r7, r0
 8009e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e44:	b353      	cbz	r3, 8009e9c <_dtoa_r+0x8c4>
 8009e46:	4639      	mov	r1, r7
 8009e48:	9804      	ldr	r0, [sp, #16]
 8009e4a:	f000 fc73 	bl	800a734 <__mcmp>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	da24      	bge.n	8009e9c <_dtoa_r+0x8c4>
 8009e52:	2300      	movs	r3, #0
 8009e54:	220a      	movs	r2, #10
 8009e56:	9904      	ldr	r1, [sp, #16]
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 faa0 	bl	800a39e <__multadd>
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e60:	9004      	str	r0, [sp, #16]
 8009e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 814d 	beq.w	800a106 <_dtoa_r+0xb2e>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4631      	mov	r1, r6
 8009e70:	220a      	movs	r2, #10
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fa93 	bl	800a39e <__multadd>
 8009e78:	9b02      	ldr	r3, [sp, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	dc4f      	bgt.n	8009f20 <_dtoa_r+0x948>
 8009e80:	9b06      	ldr	r3, [sp, #24]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	dd4c      	ble.n	8009f20 <_dtoa_r+0x948>
 8009e86:	e011      	b.n	8009eac <_dtoa_r+0x8d4>
 8009e88:	d0c9      	beq.n	8009e1e <_dtoa_r+0x846>
 8009e8a:	9a05      	ldr	r2, [sp, #20]
 8009e8c:	331c      	adds	r3, #28
 8009e8e:	441a      	add	r2, r3
 8009e90:	9205      	str	r2, [sp, #20]
 8009e92:	441d      	add	r5, r3
 8009e94:	4498      	add	r8, r3
 8009e96:	e7c2      	b.n	8009e1e <_dtoa_r+0x846>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	e7f6      	b.n	8009e8a <_dtoa_r+0x8b2>
 8009e9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ea0:	dc38      	bgt.n	8009f14 <_dtoa_r+0x93c>
 8009ea2:	9b06      	ldr	r3, [sp, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	dd35      	ble.n	8009f14 <_dtoa_r+0x93c>
 8009ea8:	f8cd 9008 	str.w	r9, [sp, #8]
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	b963      	cbnz	r3, 8009eca <_dtoa_r+0x8f2>
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	2205      	movs	r2, #5
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fa72 	bl	800a39e <__multadd>
 8009eba:	4601      	mov	r1, r0
 8009ebc:	4607      	mov	r7, r0
 8009ebe:	9804      	ldr	r0, [sp, #16]
 8009ec0:	f000 fc38 	bl	800a734 <__mcmp>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f73f adcc 	bgt.w	8009a62 <_dtoa_r+0x48a>
 8009eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ecc:	465d      	mov	r5, fp
 8009ece:	ea6f 0a03 	mvn.w	sl, r3
 8009ed2:	f04f 0900 	mov.w	r9, #0
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 fa49 	bl	800a370 <_Bfree>
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	f43f aeb7 	beq.w	8009c52 <_dtoa_r+0x67a>
 8009ee4:	f1b9 0f00 	cmp.w	r9, #0
 8009ee8:	d005      	beq.n	8009ef6 <_dtoa_r+0x91e>
 8009eea:	45b1      	cmp	r9, r6
 8009eec:	d003      	beq.n	8009ef6 <_dtoa_r+0x91e>
 8009eee:	4649      	mov	r1, r9
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 fa3d 	bl	800a370 <_Bfree>
 8009ef6:	4631      	mov	r1, r6
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fa39 	bl	800a370 <_Bfree>
 8009efe:	e6a8      	b.n	8009c52 <_dtoa_r+0x67a>
 8009f00:	2700      	movs	r7, #0
 8009f02:	463e      	mov	r6, r7
 8009f04:	e7e1      	b.n	8009eca <_dtoa_r+0x8f2>
 8009f06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009f0a:	463e      	mov	r6, r7
 8009f0c:	e5a9      	b.n	8009a62 <_dtoa_r+0x48a>
 8009f0e:	bf00      	nop
 8009f10:	40240000 	.word	0x40240000
 8009f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f16:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 80fa 	beq.w	800a114 <_dtoa_r+0xb3c>
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	dd05      	ble.n	8009f30 <_dtoa_r+0x958>
 8009f24:	4631      	mov	r1, r6
 8009f26:	462a      	mov	r2, r5
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fbaf 	bl	800a68c <__lshift>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	9b07      	ldr	r3, [sp, #28]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d04c      	beq.n	8009fd0 <_dtoa_r+0x9f8>
 8009f36:	6871      	ldr	r1, [r6, #4]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 f9e5 	bl	800a308 <_Balloc>
 8009f3e:	6932      	ldr	r2, [r6, #16]
 8009f40:	3202      	adds	r2, #2
 8009f42:	4605      	mov	r5, r0
 8009f44:	0092      	lsls	r2, r2, #2
 8009f46:	f106 010c 	add.w	r1, r6, #12
 8009f4a:	300c      	adds	r0, #12
 8009f4c:	f7fe fe2e 	bl	8008bac <memcpy>
 8009f50:	2201      	movs	r2, #1
 8009f52:	4629      	mov	r1, r5
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 fb99 	bl	800a68c <__lshift>
 8009f5a:	9b00      	ldr	r3, [sp, #0]
 8009f5c:	f8cd b014 	str.w	fp, [sp, #20]
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	46b1      	mov	r9, r6
 8009f66:	9307      	str	r3, [sp, #28]
 8009f68:	4606      	mov	r6, r0
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	9804      	ldr	r0, [sp, #16]
 8009f6e:	f7ff faa5 	bl	80094bc <quorem>
 8009f72:	4649      	mov	r1, r9
 8009f74:	4605      	mov	r5, r0
 8009f76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f7a:	9804      	ldr	r0, [sp, #16]
 8009f7c:	f000 fbda 	bl	800a734 <__mcmp>
 8009f80:	4632      	mov	r2, r6
 8009f82:	9000      	str	r0, [sp, #0]
 8009f84:	4639      	mov	r1, r7
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fbee 	bl	800a768 <__mdiff>
 8009f8c:	68c3      	ldr	r3, [r0, #12]
 8009f8e:	4602      	mov	r2, r0
 8009f90:	bb03      	cbnz	r3, 8009fd4 <_dtoa_r+0x9fc>
 8009f92:	4601      	mov	r1, r0
 8009f94:	9008      	str	r0, [sp, #32]
 8009f96:	9804      	ldr	r0, [sp, #16]
 8009f98:	f000 fbcc 	bl	800a734 <__mcmp>
 8009f9c:	9a08      	ldr	r2, [sp, #32]
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	9308      	str	r3, [sp, #32]
 8009fa6:	f000 f9e3 	bl	800a370 <_Bfree>
 8009faa:	9b08      	ldr	r3, [sp, #32]
 8009fac:	b9a3      	cbnz	r3, 8009fd8 <_dtoa_r+0xa00>
 8009fae:	9a06      	ldr	r2, [sp, #24]
 8009fb0:	b992      	cbnz	r2, 8009fd8 <_dtoa_r+0xa00>
 8009fb2:	9a07      	ldr	r2, [sp, #28]
 8009fb4:	b982      	cbnz	r2, 8009fd8 <_dtoa_r+0xa00>
 8009fb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009fba:	d029      	beq.n	800a010 <_dtoa_r+0xa38>
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dd01      	ble.n	8009fc6 <_dtoa_r+0x9ee>
 8009fc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009fc6:	9b05      	ldr	r3, [sp, #20]
 8009fc8:	1c5d      	adds	r5, r3, #1
 8009fca:	f883 8000 	strb.w	r8, [r3]
 8009fce:	e782      	b.n	8009ed6 <_dtoa_r+0x8fe>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	e7c2      	b.n	8009f5a <_dtoa_r+0x982>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e7e3      	b.n	8009fa0 <_dtoa_r+0x9c8>
 8009fd8:	9a00      	ldr	r2, [sp, #0]
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	db04      	blt.n	8009fe8 <_dtoa_r+0xa10>
 8009fde:	d125      	bne.n	800a02c <_dtoa_r+0xa54>
 8009fe0:	9a06      	ldr	r2, [sp, #24]
 8009fe2:	bb1a      	cbnz	r2, 800a02c <_dtoa_r+0xa54>
 8009fe4:	9a07      	ldr	r2, [sp, #28]
 8009fe6:	bb0a      	cbnz	r2, 800a02c <_dtoa_r+0xa54>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	ddec      	ble.n	8009fc6 <_dtoa_r+0x9ee>
 8009fec:	2201      	movs	r2, #1
 8009fee:	9904      	ldr	r1, [sp, #16]
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fb4b 	bl	800a68c <__lshift>
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	9004      	str	r0, [sp, #16]
 8009ffa:	f000 fb9b 	bl	800a734 <__mcmp>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	dc03      	bgt.n	800a00a <_dtoa_r+0xa32>
 800a002:	d1e0      	bne.n	8009fc6 <_dtoa_r+0x9ee>
 800a004:	f018 0f01 	tst.w	r8, #1
 800a008:	d0dd      	beq.n	8009fc6 <_dtoa_r+0x9ee>
 800a00a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a00e:	d1d8      	bne.n	8009fc2 <_dtoa_r+0x9ea>
 800a010:	9b05      	ldr	r3, [sp, #20]
 800a012:	9a05      	ldr	r2, [sp, #20]
 800a014:	1c5d      	adds	r5, r3, #1
 800a016:	2339      	movs	r3, #57	; 0x39
 800a018:	7013      	strb	r3, [r2, #0]
 800a01a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a01e:	2b39      	cmp	r3, #57	; 0x39
 800a020:	f105 32ff 	add.w	r2, r5, #4294967295
 800a024:	d04f      	beq.n	800a0c6 <_dtoa_r+0xaee>
 800a026:	3301      	adds	r3, #1
 800a028:	7013      	strb	r3, [r2, #0]
 800a02a:	e754      	b.n	8009ed6 <_dtoa_r+0x8fe>
 800a02c:	9a05      	ldr	r2, [sp, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f102 0501 	add.w	r5, r2, #1
 800a034:	dd06      	ble.n	800a044 <_dtoa_r+0xa6c>
 800a036:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a03a:	d0e9      	beq.n	800a010 <_dtoa_r+0xa38>
 800a03c:	f108 0801 	add.w	r8, r8, #1
 800a040:	9b05      	ldr	r3, [sp, #20]
 800a042:	e7c2      	b.n	8009fca <_dtoa_r+0x9f2>
 800a044:	9a02      	ldr	r2, [sp, #8]
 800a046:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a04a:	eba5 030b 	sub.w	r3, r5, fp
 800a04e:	4293      	cmp	r3, r2
 800a050:	d021      	beq.n	800a096 <_dtoa_r+0xabe>
 800a052:	2300      	movs	r3, #0
 800a054:	220a      	movs	r2, #10
 800a056:	9904      	ldr	r1, [sp, #16]
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 f9a0 	bl	800a39e <__multadd>
 800a05e:	45b1      	cmp	r9, r6
 800a060:	9004      	str	r0, [sp, #16]
 800a062:	f04f 0300 	mov.w	r3, #0
 800a066:	f04f 020a 	mov.w	r2, #10
 800a06a:	4649      	mov	r1, r9
 800a06c:	4620      	mov	r0, r4
 800a06e:	d105      	bne.n	800a07c <_dtoa_r+0xaa4>
 800a070:	f000 f995 	bl	800a39e <__multadd>
 800a074:	4681      	mov	r9, r0
 800a076:	4606      	mov	r6, r0
 800a078:	9505      	str	r5, [sp, #20]
 800a07a:	e776      	b.n	8009f6a <_dtoa_r+0x992>
 800a07c:	f000 f98f 	bl	800a39e <__multadd>
 800a080:	4631      	mov	r1, r6
 800a082:	4681      	mov	r9, r0
 800a084:	2300      	movs	r3, #0
 800a086:	220a      	movs	r2, #10
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 f988 	bl	800a39e <__multadd>
 800a08e:	4606      	mov	r6, r0
 800a090:	e7f2      	b.n	800a078 <_dtoa_r+0xaa0>
 800a092:	f04f 0900 	mov.w	r9, #0
 800a096:	2201      	movs	r2, #1
 800a098:	9904      	ldr	r1, [sp, #16]
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 faf6 	bl	800a68c <__lshift>
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	9004      	str	r0, [sp, #16]
 800a0a4:	f000 fb46 	bl	800a734 <__mcmp>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	dcb6      	bgt.n	800a01a <_dtoa_r+0xa42>
 800a0ac:	d102      	bne.n	800a0b4 <_dtoa_r+0xadc>
 800a0ae:	f018 0f01 	tst.w	r8, #1
 800a0b2:	d1b2      	bne.n	800a01a <_dtoa_r+0xa42>
 800a0b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0b8:	2b30      	cmp	r3, #48	; 0x30
 800a0ba:	f105 32ff 	add.w	r2, r5, #4294967295
 800a0be:	f47f af0a 	bne.w	8009ed6 <_dtoa_r+0x8fe>
 800a0c2:	4615      	mov	r5, r2
 800a0c4:	e7f6      	b.n	800a0b4 <_dtoa_r+0xadc>
 800a0c6:	4593      	cmp	fp, r2
 800a0c8:	d105      	bne.n	800a0d6 <_dtoa_r+0xafe>
 800a0ca:	2331      	movs	r3, #49	; 0x31
 800a0cc:	f10a 0a01 	add.w	sl, sl, #1
 800a0d0:	f88b 3000 	strb.w	r3, [fp]
 800a0d4:	e6ff      	b.n	8009ed6 <_dtoa_r+0x8fe>
 800a0d6:	4615      	mov	r5, r2
 800a0d8:	e79f      	b.n	800a01a <_dtoa_r+0xa42>
 800a0da:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a140 <_dtoa_r+0xb68>
 800a0de:	e007      	b.n	800a0f0 <_dtoa_r+0xb18>
 800a0e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a144 <_dtoa_r+0xb6c>
 800a0e6:	b11b      	cbz	r3, 800a0f0 <_dtoa_r+0xb18>
 800a0e8:	f10b 0308 	add.w	r3, fp, #8
 800a0ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	4658      	mov	r0, fp
 800a0f2:	b017      	add	sp, #92	; 0x5c
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	f77f ae35 	ble.w	8009d6a <_dtoa_r+0x792>
 800a100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a102:	9307      	str	r3, [sp, #28]
 800a104:	e649      	b.n	8009d9a <_dtoa_r+0x7c2>
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dc03      	bgt.n	800a114 <_dtoa_r+0xb3c>
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	f73f aecc 	bgt.w	8009eac <_dtoa_r+0x8d4>
 800a114:	465d      	mov	r5, fp
 800a116:	4639      	mov	r1, r7
 800a118:	9804      	ldr	r0, [sp, #16]
 800a11a:	f7ff f9cf 	bl	80094bc <quorem>
 800a11e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a122:	f805 8b01 	strb.w	r8, [r5], #1
 800a126:	9a02      	ldr	r2, [sp, #8]
 800a128:	eba5 030b 	sub.w	r3, r5, fp
 800a12c:	429a      	cmp	r2, r3
 800a12e:	ddb0      	ble.n	800a092 <_dtoa_r+0xaba>
 800a130:	2300      	movs	r3, #0
 800a132:	220a      	movs	r2, #10
 800a134:	9904      	ldr	r1, [sp, #16]
 800a136:	4620      	mov	r0, r4
 800a138:	f000 f931 	bl	800a39e <__multadd>
 800a13c:	9004      	str	r0, [sp, #16]
 800a13e:	e7ea      	b.n	800a116 <_dtoa_r+0xb3e>
 800a140:	0800c334 	.word	0x0800c334
 800a144:	0800c358 	.word	0x0800c358

0800a148 <std>:
 800a148:	2300      	movs	r3, #0
 800a14a:	b510      	push	{r4, lr}
 800a14c:	4604      	mov	r4, r0
 800a14e:	e9c0 3300 	strd	r3, r3, [r0]
 800a152:	6083      	str	r3, [r0, #8]
 800a154:	8181      	strh	r1, [r0, #12]
 800a156:	6643      	str	r3, [r0, #100]	; 0x64
 800a158:	81c2      	strh	r2, [r0, #14]
 800a15a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a15e:	6183      	str	r3, [r0, #24]
 800a160:	4619      	mov	r1, r3
 800a162:	2208      	movs	r2, #8
 800a164:	305c      	adds	r0, #92	; 0x5c
 800a166:	f7fe fd2c 	bl	8008bc2 <memset>
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x38>)
 800a16c:	6263      	str	r3, [r4, #36]	; 0x24
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x3c>)
 800a170:	62a3      	str	r3, [r4, #40]	; 0x28
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <std+0x40>)
 800a174:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <std+0x44>)
 800a178:	6224      	str	r4, [r4, #32]
 800a17a:	6323      	str	r3, [r4, #48]	; 0x30
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	bf00      	nop
 800a180:	0800accd 	.word	0x0800accd
 800a184:	0800acef 	.word	0x0800acef
 800a188:	0800ad27 	.word	0x0800ad27
 800a18c:	0800ad4b 	.word	0x0800ad4b

0800a190 <_cleanup_r>:
 800a190:	4901      	ldr	r1, [pc, #4]	; (800a198 <_cleanup_r+0x8>)
 800a192:	f000 b885 	b.w	800a2a0 <_fwalk_reent>
 800a196:	bf00      	nop
 800a198:	0800b025 	.word	0x0800b025

0800a19c <__sfmoreglue>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	1e4a      	subs	r2, r1, #1
 800a1a0:	2568      	movs	r5, #104	; 0x68
 800a1a2:	4355      	muls	r5, r2
 800a1a4:	460e      	mov	r6, r1
 800a1a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1aa:	f000 fbe5 	bl	800a978 <_malloc_r>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	b140      	cbz	r0, 800a1c4 <__sfmoreglue+0x28>
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	60a0      	str	r0, [r4, #8]
 800a1bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1c0:	f7fe fcff 	bl	8008bc2 <memset>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}

0800a1c8 <__sinit>:
 800a1c8:	6983      	ldr	r3, [r0, #24]
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	bb33      	cbnz	r3, 800a21e <__sinit+0x56>
 800a1d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a1d4:	6503      	str	r3, [r0, #80]	; 0x50
 800a1d6:	4b12      	ldr	r3, [pc, #72]	; (800a220 <__sinit+0x58>)
 800a1d8:	4a12      	ldr	r2, [pc, #72]	; (800a224 <__sinit+0x5c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6282      	str	r2, [r0, #40]	; 0x28
 800a1de:	4298      	cmp	r0, r3
 800a1e0:	bf04      	itt	eq
 800a1e2:	2301      	moveq	r3, #1
 800a1e4:	6183      	streq	r3, [r0, #24]
 800a1e6:	f000 f81f 	bl	800a228 <__sfp>
 800a1ea:	6060      	str	r0, [r4, #4]
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 f81b 	bl	800a228 <__sfp>
 800a1f2:	60a0      	str	r0, [r4, #8]
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 f817 	bl	800a228 <__sfp>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	60e0      	str	r0, [r4, #12]
 800a1fe:	2104      	movs	r1, #4
 800a200:	6860      	ldr	r0, [r4, #4]
 800a202:	f7ff ffa1 	bl	800a148 <std>
 800a206:	2201      	movs	r2, #1
 800a208:	2109      	movs	r1, #9
 800a20a:	68a0      	ldr	r0, [r4, #8]
 800a20c:	f7ff ff9c 	bl	800a148 <std>
 800a210:	2202      	movs	r2, #2
 800a212:	2112      	movs	r1, #18
 800a214:	68e0      	ldr	r0, [r4, #12]
 800a216:	f7ff ff97 	bl	800a148 <std>
 800a21a:	2301      	movs	r3, #1
 800a21c:	61a3      	str	r3, [r4, #24]
 800a21e:	bd10      	pop	{r4, pc}
 800a220:	0800c320 	.word	0x0800c320
 800a224:	0800a191 	.word	0x0800a191

0800a228 <__sfp>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <__sfp+0x70>)
 800a22c:	681e      	ldr	r6, [r3, #0]
 800a22e:	69b3      	ldr	r3, [r6, #24]
 800a230:	4607      	mov	r7, r0
 800a232:	b913      	cbnz	r3, 800a23a <__sfp+0x12>
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff ffc7 	bl	800a1c8 <__sinit>
 800a23a:	3648      	adds	r6, #72	; 0x48
 800a23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a240:	3b01      	subs	r3, #1
 800a242:	d503      	bpl.n	800a24c <__sfp+0x24>
 800a244:	6833      	ldr	r3, [r6, #0]
 800a246:	b133      	cbz	r3, 800a256 <__sfp+0x2e>
 800a248:	6836      	ldr	r6, [r6, #0]
 800a24a:	e7f7      	b.n	800a23c <__sfp+0x14>
 800a24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a250:	b16d      	cbz	r5, 800a26e <__sfp+0x46>
 800a252:	3468      	adds	r4, #104	; 0x68
 800a254:	e7f4      	b.n	800a240 <__sfp+0x18>
 800a256:	2104      	movs	r1, #4
 800a258:	4638      	mov	r0, r7
 800a25a:	f7ff ff9f 	bl	800a19c <__sfmoreglue>
 800a25e:	6030      	str	r0, [r6, #0]
 800a260:	2800      	cmp	r0, #0
 800a262:	d1f1      	bne.n	800a248 <__sfp+0x20>
 800a264:	230c      	movs	r3, #12
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	4604      	mov	r4, r0
 800a26a:	4620      	mov	r0, r4
 800a26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <__sfp+0x74>)
 800a270:	6665      	str	r5, [r4, #100]	; 0x64
 800a272:	e9c4 5500 	strd	r5, r5, [r4]
 800a276:	60a5      	str	r5, [r4, #8]
 800a278:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a27c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a280:	2208      	movs	r2, #8
 800a282:	4629      	mov	r1, r5
 800a284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a288:	f7fe fc9b 	bl	8008bc2 <memset>
 800a28c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a294:	e7e9      	b.n	800a26a <__sfp+0x42>
 800a296:	bf00      	nop
 800a298:	0800c320 	.word	0x0800c320
 800a29c:	ffff0001 	.word	0xffff0001

0800a2a0 <_fwalk_reent>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	4689      	mov	r9, r1
 800a2a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2ac:	2600      	movs	r6, #0
 800a2ae:	b914      	cbnz	r4, 800a2b6 <_fwalk_reent+0x16>
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a2ba:	3f01      	subs	r7, #1
 800a2bc:	d501      	bpl.n	800a2c2 <_fwalk_reent+0x22>
 800a2be:	6824      	ldr	r4, [r4, #0]
 800a2c0:	e7f5      	b.n	800a2ae <_fwalk_reent+0xe>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d907      	bls.n	800a2d8 <_fwalk_reent+0x38>
 800a2c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	d003      	beq.n	800a2d8 <_fwalk_reent+0x38>
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	47c8      	blx	r9
 800a2d6:	4306      	orrs	r6, r0
 800a2d8:	3568      	adds	r5, #104	; 0x68
 800a2da:	e7ee      	b.n	800a2ba <_fwalk_reent+0x1a>

0800a2dc <_localeconv_r>:
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <_localeconv_r+0x14>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6a18      	ldr	r0, [r3, #32]
 800a2e2:	4b04      	ldr	r3, [pc, #16]	; (800a2f4 <_localeconv_r+0x18>)
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	bf08      	it	eq
 800a2e8:	4618      	moveq	r0, r3
 800a2ea:	30f0      	adds	r0, #240	; 0xf0
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	2000000c 	.word	0x2000000c
 800a2f4:	20000070 	.word	0x20000070

0800a2f8 <malloc>:
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <malloc+0xc>)
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	f000 bb3b 	b.w	800a978 <_malloc_r>
 800a302:	bf00      	nop
 800a304:	2000000c 	.word	0x2000000c

0800a308 <_Balloc>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a30c:	4604      	mov	r4, r0
 800a30e:	460e      	mov	r6, r1
 800a310:	b93d      	cbnz	r5, 800a322 <_Balloc+0x1a>
 800a312:	2010      	movs	r0, #16
 800a314:	f7ff fff0 	bl	800a2f8 <malloc>
 800a318:	6260      	str	r0, [r4, #36]	; 0x24
 800a31a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a31e:	6005      	str	r5, [r0, #0]
 800a320:	60c5      	str	r5, [r0, #12]
 800a322:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a324:	68eb      	ldr	r3, [r5, #12]
 800a326:	b183      	cbz	r3, 800a34a <_Balloc+0x42>
 800a328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a330:	b9b8      	cbnz	r0, 800a362 <_Balloc+0x5a>
 800a332:	2101      	movs	r1, #1
 800a334:	fa01 f506 	lsl.w	r5, r1, r6
 800a338:	1d6a      	adds	r2, r5, #5
 800a33a:	0092      	lsls	r2, r2, #2
 800a33c:	4620      	mov	r0, r4
 800a33e:	f000 fabf 	bl	800a8c0 <_calloc_r>
 800a342:	b160      	cbz	r0, 800a35e <_Balloc+0x56>
 800a344:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a348:	e00e      	b.n	800a368 <_Balloc+0x60>
 800a34a:	2221      	movs	r2, #33	; 0x21
 800a34c:	2104      	movs	r1, #4
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fab6 	bl	800a8c0 <_calloc_r>
 800a354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a356:	60e8      	str	r0, [r5, #12]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e4      	bne.n	800a328 <_Balloc+0x20>
 800a35e:	2000      	movs	r0, #0
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	6802      	ldr	r2, [r0, #0]
 800a364:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a368:	2300      	movs	r3, #0
 800a36a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a36e:	e7f7      	b.n	800a360 <_Balloc+0x58>

0800a370 <_Bfree>:
 800a370:	b570      	push	{r4, r5, r6, lr}
 800a372:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a374:	4606      	mov	r6, r0
 800a376:	460d      	mov	r5, r1
 800a378:	b93c      	cbnz	r4, 800a38a <_Bfree+0x1a>
 800a37a:	2010      	movs	r0, #16
 800a37c:	f7ff ffbc 	bl	800a2f8 <malloc>
 800a380:	6270      	str	r0, [r6, #36]	; 0x24
 800a382:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a386:	6004      	str	r4, [r0, #0]
 800a388:	60c4      	str	r4, [r0, #12]
 800a38a:	b13d      	cbz	r5, 800a39c <_Bfree+0x2c>
 800a38c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a38e:	686a      	ldr	r2, [r5, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a396:	6029      	str	r1, [r5, #0]
 800a398:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a39c:	bd70      	pop	{r4, r5, r6, pc}

0800a39e <__multadd>:
 800a39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a2:	690d      	ldr	r5, [r1, #16]
 800a3a4:	461f      	mov	r7, r3
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	f101 0c14 	add.w	ip, r1, #20
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f8dc 0000 	ldr.w	r0, [ip]
 800a3b4:	b281      	uxth	r1, r0
 800a3b6:	fb02 7101 	mla	r1, r2, r1, r7
 800a3ba:	0c0f      	lsrs	r7, r1, #16
 800a3bc:	0c00      	lsrs	r0, r0, #16
 800a3be:	fb02 7000 	mla	r0, r2, r0, r7
 800a3c2:	b289      	uxth	r1, r1
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a3ca:	429d      	cmp	r5, r3
 800a3cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a3d0:	f84c 1b04 	str.w	r1, [ip], #4
 800a3d4:	dcec      	bgt.n	800a3b0 <__multadd+0x12>
 800a3d6:	b1d7      	cbz	r7, 800a40e <__multadd+0x70>
 800a3d8:	68a3      	ldr	r3, [r4, #8]
 800a3da:	42ab      	cmp	r3, r5
 800a3dc:	dc12      	bgt.n	800a404 <__multadd+0x66>
 800a3de:	6861      	ldr	r1, [r4, #4]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	3101      	adds	r1, #1
 800a3e4:	f7ff ff90 	bl	800a308 <_Balloc>
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	3202      	adds	r2, #2
 800a3ec:	f104 010c 	add.w	r1, r4, #12
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	f7fe fbd9 	bl	8008bac <memcpy>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff ffb7 	bl	800a370 <_Bfree>
 800a402:	4644      	mov	r4, r8
 800a404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a408:	3501      	adds	r5, #1
 800a40a:	615f      	str	r7, [r3, #20]
 800a40c:	6125      	str	r5, [r4, #16]
 800a40e:	4620      	mov	r0, r4
 800a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a414 <__hi0bits>:
 800a414:	0c02      	lsrs	r2, r0, #16
 800a416:	0412      	lsls	r2, r2, #16
 800a418:	4603      	mov	r3, r0
 800a41a:	b9b2      	cbnz	r2, 800a44a <__hi0bits+0x36>
 800a41c:	0403      	lsls	r3, r0, #16
 800a41e:	2010      	movs	r0, #16
 800a420:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a424:	bf04      	itt	eq
 800a426:	021b      	lsleq	r3, r3, #8
 800a428:	3008      	addeq	r0, #8
 800a42a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a42e:	bf04      	itt	eq
 800a430:	011b      	lsleq	r3, r3, #4
 800a432:	3004      	addeq	r0, #4
 800a434:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a438:	bf04      	itt	eq
 800a43a:	009b      	lsleq	r3, r3, #2
 800a43c:	3002      	addeq	r0, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	db06      	blt.n	800a450 <__hi0bits+0x3c>
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	d503      	bpl.n	800a44e <__hi0bits+0x3a>
 800a446:	3001      	adds	r0, #1
 800a448:	4770      	bx	lr
 800a44a:	2000      	movs	r0, #0
 800a44c:	e7e8      	b.n	800a420 <__hi0bits+0xc>
 800a44e:	2020      	movs	r0, #32
 800a450:	4770      	bx	lr

0800a452 <__lo0bits>:
 800a452:	6803      	ldr	r3, [r0, #0]
 800a454:	f013 0207 	ands.w	r2, r3, #7
 800a458:	4601      	mov	r1, r0
 800a45a:	d00b      	beq.n	800a474 <__lo0bits+0x22>
 800a45c:	07da      	lsls	r2, r3, #31
 800a45e:	d423      	bmi.n	800a4a8 <__lo0bits+0x56>
 800a460:	0798      	lsls	r0, r3, #30
 800a462:	bf49      	itett	mi
 800a464:	085b      	lsrmi	r3, r3, #1
 800a466:	089b      	lsrpl	r3, r3, #2
 800a468:	2001      	movmi	r0, #1
 800a46a:	600b      	strmi	r3, [r1, #0]
 800a46c:	bf5c      	itt	pl
 800a46e:	600b      	strpl	r3, [r1, #0]
 800a470:	2002      	movpl	r0, #2
 800a472:	4770      	bx	lr
 800a474:	b298      	uxth	r0, r3
 800a476:	b9a8      	cbnz	r0, 800a4a4 <__lo0bits+0x52>
 800a478:	0c1b      	lsrs	r3, r3, #16
 800a47a:	2010      	movs	r0, #16
 800a47c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a480:	bf04      	itt	eq
 800a482:	0a1b      	lsreq	r3, r3, #8
 800a484:	3008      	addeq	r0, #8
 800a486:	071a      	lsls	r2, r3, #28
 800a488:	bf04      	itt	eq
 800a48a:	091b      	lsreq	r3, r3, #4
 800a48c:	3004      	addeq	r0, #4
 800a48e:	079a      	lsls	r2, r3, #30
 800a490:	bf04      	itt	eq
 800a492:	089b      	lsreq	r3, r3, #2
 800a494:	3002      	addeq	r0, #2
 800a496:	07da      	lsls	r2, r3, #31
 800a498:	d402      	bmi.n	800a4a0 <__lo0bits+0x4e>
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	d006      	beq.n	800a4ac <__lo0bits+0x5a>
 800a49e:	3001      	adds	r0, #1
 800a4a0:	600b      	str	r3, [r1, #0]
 800a4a2:	4770      	bx	lr
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	e7e9      	b.n	800a47c <__lo0bits+0x2a>
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	4770      	bx	lr
 800a4ac:	2020      	movs	r0, #32
 800a4ae:	4770      	bx	lr

0800a4b0 <__i2b>:
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	f7ff ff27 	bl	800a308 <_Balloc>
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	6144      	str	r4, [r0, #20]
 800a4be:	6102      	str	r2, [r0, #16]
 800a4c0:	bd10      	pop	{r4, pc}

0800a4c2 <__multiply>:
 800a4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	690a      	ldr	r2, [r1, #16]
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	bfb8      	it	lt
 800a4d0:	460b      	movlt	r3, r1
 800a4d2:	4688      	mov	r8, r1
 800a4d4:	bfbc      	itt	lt
 800a4d6:	46a0      	movlt	r8, r4
 800a4d8:	461c      	movlt	r4, r3
 800a4da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4ea:	eb07 0609 	add.w	r6, r7, r9
 800a4ee:	42b3      	cmp	r3, r6
 800a4f0:	bfb8      	it	lt
 800a4f2:	3101      	addlt	r1, #1
 800a4f4:	f7ff ff08 	bl	800a308 <_Balloc>
 800a4f8:	f100 0514 	add.w	r5, r0, #20
 800a4fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a500:	462b      	mov	r3, r5
 800a502:	2200      	movs	r2, #0
 800a504:	4573      	cmp	r3, lr
 800a506:	d316      	bcc.n	800a536 <__multiply+0x74>
 800a508:	f104 0214 	add.w	r2, r4, #20
 800a50c:	f108 0114 	add.w	r1, r8, #20
 800a510:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a514:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	9b00      	ldr	r3, [sp, #0]
 800a51c:	9201      	str	r2, [sp, #4]
 800a51e:	4293      	cmp	r3, r2
 800a520:	d80c      	bhi.n	800a53c <__multiply+0x7a>
 800a522:	2e00      	cmp	r6, #0
 800a524:	dd03      	ble.n	800a52e <__multiply+0x6c>
 800a526:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d05d      	beq.n	800a5ea <__multiply+0x128>
 800a52e:	6106      	str	r6, [r0, #16]
 800a530:	b003      	add	sp, #12
 800a532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a536:	f843 2b04 	str.w	r2, [r3], #4
 800a53a:	e7e3      	b.n	800a504 <__multiply+0x42>
 800a53c:	f8b2 b000 	ldrh.w	fp, [r2]
 800a540:	f1bb 0f00 	cmp.w	fp, #0
 800a544:	d023      	beq.n	800a58e <__multiply+0xcc>
 800a546:	4689      	mov	r9, r1
 800a548:	46ac      	mov	ip, r5
 800a54a:	f04f 0800 	mov.w	r8, #0
 800a54e:	f859 4b04 	ldr.w	r4, [r9], #4
 800a552:	f8dc a000 	ldr.w	sl, [ip]
 800a556:	b2a3      	uxth	r3, r4
 800a558:	fa1f fa8a 	uxth.w	sl, sl
 800a55c:	fb0b a303 	mla	r3, fp, r3, sl
 800a560:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a564:	f8dc 4000 	ldr.w	r4, [ip]
 800a568:	4443      	add	r3, r8
 800a56a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a56e:	fb0b 840a 	mla	r4, fp, sl, r8
 800a572:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a576:	46e2      	mov	sl, ip
 800a578:	b29b      	uxth	r3, r3
 800a57a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a57e:	454f      	cmp	r7, r9
 800a580:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a584:	f84a 3b04 	str.w	r3, [sl], #4
 800a588:	d82b      	bhi.n	800a5e2 <__multiply+0x120>
 800a58a:	f8cc 8004 	str.w	r8, [ip, #4]
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a594:	3204      	adds	r2, #4
 800a596:	f1ba 0f00 	cmp.w	sl, #0
 800a59a:	d020      	beq.n	800a5de <__multiply+0x11c>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	4689      	mov	r9, r1
 800a5a0:	46a8      	mov	r8, r5
 800a5a2:	f04f 0b00 	mov.w	fp, #0
 800a5a6:	f8b9 c000 	ldrh.w	ip, [r9]
 800a5aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a5ae:	fb0a 440c 	mla	r4, sl, ip, r4
 800a5b2:	445c      	add	r4, fp
 800a5b4:	46c4      	mov	ip, r8
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a5bc:	f84c 3b04 	str.w	r3, [ip], #4
 800a5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5c4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a5c8:	0c1b      	lsrs	r3, r3, #16
 800a5ca:	fb0a b303 	mla	r3, sl, r3, fp
 800a5ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a5d2:	454f      	cmp	r7, r9
 800a5d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a5d8:	d805      	bhi.n	800a5e6 <__multiply+0x124>
 800a5da:	f8c8 3004 	str.w	r3, [r8, #4]
 800a5de:	3504      	adds	r5, #4
 800a5e0:	e79b      	b.n	800a51a <__multiply+0x58>
 800a5e2:	46d4      	mov	ip, sl
 800a5e4:	e7b3      	b.n	800a54e <__multiply+0x8c>
 800a5e6:	46e0      	mov	r8, ip
 800a5e8:	e7dd      	b.n	800a5a6 <__multiply+0xe4>
 800a5ea:	3e01      	subs	r6, #1
 800a5ec:	e799      	b.n	800a522 <__multiply+0x60>
	...

0800a5f0 <__pow5mult>:
 800a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	4615      	mov	r5, r2
 800a5f6:	f012 0203 	ands.w	r2, r2, #3
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	d007      	beq.n	800a610 <__pow5mult+0x20>
 800a600:	3a01      	subs	r2, #1
 800a602:	4c21      	ldr	r4, [pc, #132]	; (800a688 <__pow5mult+0x98>)
 800a604:	2300      	movs	r3, #0
 800a606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a60a:	f7ff fec8 	bl	800a39e <__multadd>
 800a60e:	4607      	mov	r7, r0
 800a610:	10ad      	asrs	r5, r5, #2
 800a612:	d035      	beq.n	800a680 <__pow5mult+0x90>
 800a614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a616:	b93c      	cbnz	r4, 800a628 <__pow5mult+0x38>
 800a618:	2010      	movs	r0, #16
 800a61a:	f7ff fe6d 	bl	800a2f8 <malloc>
 800a61e:	6270      	str	r0, [r6, #36]	; 0x24
 800a620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a624:	6004      	str	r4, [r0, #0]
 800a626:	60c4      	str	r4, [r0, #12]
 800a628:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a62c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a630:	b94c      	cbnz	r4, 800a646 <__pow5mult+0x56>
 800a632:	f240 2171 	movw	r1, #625	; 0x271
 800a636:	4630      	mov	r0, r6
 800a638:	f7ff ff3a 	bl	800a4b0 <__i2b>
 800a63c:	2300      	movs	r3, #0
 800a63e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a642:	4604      	mov	r4, r0
 800a644:	6003      	str	r3, [r0, #0]
 800a646:	f04f 0800 	mov.w	r8, #0
 800a64a:	07eb      	lsls	r3, r5, #31
 800a64c:	d50a      	bpl.n	800a664 <__pow5mult+0x74>
 800a64e:	4639      	mov	r1, r7
 800a650:	4622      	mov	r2, r4
 800a652:	4630      	mov	r0, r6
 800a654:	f7ff ff35 	bl	800a4c2 <__multiply>
 800a658:	4639      	mov	r1, r7
 800a65a:	4681      	mov	r9, r0
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff fe87 	bl	800a370 <_Bfree>
 800a662:	464f      	mov	r7, r9
 800a664:	106d      	asrs	r5, r5, #1
 800a666:	d00b      	beq.n	800a680 <__pow5mult+0x90>
 800a668:	6820      	ldr	r0, [r4, #0]
 800a66a:	b938      	cbnz	r0, 800a67c <__pow5mult+0x8c>
 800a66c:	4622      	mov	r2, r4
 800a66e:	4621      	mov	r1, r4
 800a670:	4630      	mov	r0, r6
 800a672:	f7ff ff26 	bl	800a4c2 <__multiply>
 800a676:	6020      	str	r0, [r4, #0]
 800a678:	f8c0 8000 	str.w	r8, [r0]
 800a67c:	4604      	mov	r4, r0
 800a67e:	e7e4      	b.n	800a64a <__pow5mult+0x5a>
 800a680:	4638      	mov	r0, r7
 800a682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a686:	bf00      	nop
 800a688:	0800c4b8 	.word	0x0800c4b8

0800a68c <__lshift>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	460c      	mov	r4, r1
 800a692:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	6849      	ldr	r1, [r1, #4]
 800a69a:	eb0a 0903 	add.w	r9, sl, r3
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	4607      	mov	r7, r0
 800a6a2:	4616      	mov	r6, r2
 800a6a4:	f109 0501 	add.w	r5, r9, #1
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	db32      	blt.n	800a712 <__lshift+0x86>
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f7ff fe2b 	bl	800a308 <_Balloc>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	4680      	mov	r8, r0
 800a6b6:	f100 0114 	add.w	r1, r0, #20
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	4553      	cmp	r3, sl
 800a6be:	db2b      	blt.n	800a718 <__lshift+0x8c>
 800a6c0:	6920      	ldr	r0, [r4, #16]
 800a6c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6c6:	f104 0314 	add.w	r3, r4, #20
 800a6ca:	f016 021f 	ands.w	r2, r6, #31
 800a6ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6d6:	d025      	beq.n	800a724 <__lshift+0x98>
 800a6d8:	f1c2 0e20 	rsb	lr, r2, #32
 800a6dc:	2000      	movs	r0, #0
 800a6de:	681e      	ldr	r6, [r3, #0]
 800a6e0:	468a      	mov	sl, r1
 800a6e2:	4096      	lsls	r6, r2
 800a6e4:	4330      	orrs	r0, r6
 800a6e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6ea:	f853 0b04 	ldr.w	r0, [r3], #4
 800a6ee:	459c      	cmp	ip, r3
 800a6f0:	fa20 f00e 	lsr.w	r0, r0, lr
 800a6f4:	d814      	bhi.n	800a720 <__lshift+0x94>
 800a6f6:	6048      	str	r0, [r1, #4]
 800a6f8:	b108      	cbz	r0, 800a6fe <__lshift+0x72>
 800a6fa:	f109 0502 	add.w	r5, r9, #2
 800a6fe:	3d01      	subs	r5, #1
 800a700:	4638      	mov	r0, r7
 800a702:	f8c8 5010 	str.w	r5, [r8, #16]
 800a706:	4621      	mov	r1, r4
 800a708:	f7ff fe32 	bl	800a370 <_Bfree>
 800a70c:	4640      	mov	r0, r8
 800a70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a712:	3101      	adds	r1, #1
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	e7c7      	b.n	800a6a8 <__lshift+0x1c>
 800a718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a71c:	3301      	adds	r3, #1
 800a71e:	e7cd      	b.n	800a6bc <__lshift+0x30>
 800a720:	4651      	mov	r1, sl
 800a722:	e7dc      	b.n	800a6de <__lshift+0x52>
 800a724:	3904      	subs	r1, #4
 800a726:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a72e:	459c      	cmp	ip, r3
 800a730:	d8f9      	bhi.n	800a726 <__lshift+0x9a>
 800a732:	e7e4      	b.n	800a6fe <__lshift+0x72>

0800a734 <__mcmp>:
 800a734:	6903      	ldr	r3, [r0, #16]
 800a736:	690a      	ldr	r2, [r1, #16]
 800a738:	1a9b      	subs	r3, r3, r2
 800a73a:	b530      	push	{r4, r5, lr}
 800a73c:	d10c      	bne.n	800a758 <__mcmp+0x24>
 800a73e:	0092      	lsls	r2, r2, #2
 800a740:	3014      	adds	r0, #20
 800a742:	3114      	adds	r1, #20
 800a744:	1884      	adds	r4, r0, r2
 800a746:	4411      	add	r1, r2
 800a748:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a74c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a750:	4295      	cmp	r5, r2
 800a752:	d003      	beq.n	800a75c <__mcmp+0x28>
 800a754:	d305      	bcc.n	800a762 <__mcmp+0x2e>
 800a756:	2301      	movs	r3, #1
 800a758:	4618      	mov	r0, r3
 800a75a:	bd30      	pop	{r4, r5, pc}
 800a75c:	42a0      	cmp	r0, r4
 800a75e:	d3f3      	bcc.n	800a748 <__mcmp+0x14>
 800a760:	e7fa      	b.n	800a758 <__mcmp+0x24>
 800a762:	f04f 33ff 	mov.w	r3, #4294967295
 800a766:	e7f7      	b.n	800a758 <__mcmp+0x24>

0800a768 <__mdiff>:
 800a768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76c:	460d      	mov	r5, r1
 800a76e:	4607      	mov	r7, r0
 800a770:	4611      	mov	r1, r2
 800a772:	4628      	mov	r0, r5
 800a774:	4614      	mov	r4, r2
 800a776:	f7ff ffdd 	bl	800a734 <__mcmp>
 800a77a:	1e06      	subs	r6, r0, #0
 800a77c:	d108      	bne.n	800a790 <__mdiff+0x28>
 800a77e:	4631      	mov	r1, r6
 800a780:	4638      	mov	r0, r7
 800a782:	f7ff fdc1 	bl	800a308 <_Balloc>
 800a786:	2301      	movs	r3, #1
 800a788:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a790:	bfa4      	itt	ge
 800a792:	4623      	movge	r3, r4
 800a794:	462c      	movge	r4, r5
 800a796:	4638      	mov	r0, r7
 800a798:	6861      	ldr	r1, [r4, #4]
 800a79a:	bfa6      	itte	ge
 800a79c:	461d      	movge	r5, r3
 800a79e:	2600      	movge	r6, #0
 800a7a0:	2601      	movlt	r6, #1
 800a7a2:	f7ff fdb1 	bl	800a308 <_Balloc>
 800a7a6:	692b      	ldr	r3, [r5, #16]
 800a7a8:	60c6      	str	r6, [r0, #12]
 800a7aa:	6926      	ldr	r6, [r4, #16]
 800a7ac:	f105 0914 	add.w	r9, r5, #20
 800a7b0:	f104 0214 	add.w	r2, r4, #20
 800a7b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a7b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a7bc:	f100 0514 	add.w	r5, r0, #20
 800a7c0:	f04f 0e00 	mov.w	lr, #0
 800a7c4:	f852 ab04 	ldr.w	sl, [r2], #4
 800a7c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a7cc:	fa1e f18a 	uxtah	r1, lr, sl
 800a7d0:	b2a3      	uxth	r3, r4
 800a7d2:	1ac9      	subs	r1, r1, r3
 800a7d4:	0c23      	lsrs	r3, r4, #16
 800a7d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a7da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a7de:	b289      	uxth	r1, r1
 800a7e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a7e4:	45c8      	cmp	r8, r9
 800a7e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a7ea:	4694      	mov	ip, r2
 800a7ec:	f845 3b04 	str.w	r3, [r5], #4
 800a7f0:	d8e8      	bhi.n	800a7c4 <__mdiff+0x5c>
 800a7f2:	45bc      	cmp	ip, r7
 800a7f4:	d304      	bcc.n	800a800 <__mdiff+0x98>
 800a7f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a7fa:	b183      	cbz	r3, 800a81e <__mdiff+0xb6>
 800a7fc:	6106      	str	r6, [r0, #16]
 800a7fe:	e7c5      	b.n	800a78c <__mdiff+0x24>
 800a800:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a804:	fa1e f381 	uxtah	r3, lr, r1
 800a808:	141a      	asrs	r2, r3, #16
 800a80a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a80e:	b29b      	uxth	r3, r3
 800a810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a814:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a818:	f845 3b04 	str.w	r3, [r5], #4
 800a81c:	e7e9      	b.n	800a7f2 <__mdiff+0x8a>
 800a81e:	3e01      	subs	r6, #1
 800a820:	e7e9      	b.n	800a7f6 <__mdiff+0x8e>

0800a822 <__d2b>:
 800a822:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a826:	460e      	mov	r6, r1
 800a828:	2101      	movs	r1, #1
 800a82a:	ec59 8b10 	vmov	r8, r9, d0
 800a82e:	4615      	mov	r5, r2
 800a830:	f7ff fd6a 	bl	800a308 <_Balloc>
 800a834:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a838:	4607      	mov	r7, r0
 800a83a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a83e:	bb34      	cbnz	r4, 800a88e <__d2b+0x6c>
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	f1b8 0300 	subs.w	r3, r8, #0
 800a846:	d027      	beq.n	800a898 <__d2b+0x76>
 800a848:	a802      	add	r0, sp, #8
 800a84a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a84e:	f7ff fe00 	bl	800a452 <__lo0bits>
 800a852:	9900      	ldr	r1, [sp, #0]
 800a854:	b1f0      	cbz	r0, 800a894 <__d2b+0x72>
 800a856:	9a01      	ldr	r2, [sp, #4]
 800a858:	f1c0 0320 	rsb	r3, r0, #32
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	430b      	orrs	r3, r1
 800a862:	40c2      	lsrs	r2, r0
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	9201      	str	r2, [sp, #4]
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	61bb      	str	r3, [r7, #24]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bf14      	ite	ne
 800a870:	2102      	movne	r1, #2
 800a872:	2101      	moveq	r1, #1
 800a874:	6139      	str	r1, [r7, #16]
 800a876:	b1c4      	cbz	r4, 800a8aa <__d2b+0x88>
 800a878:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a87c:	4404      	add	r4, r0
 800a87e:	6034      	str	r4, [r6, #0]
 800a880:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a884:	6028      	str	r0, [r5, #0]
 800a886:	4638      	mov	r0, r7
 800a888:	b003      	add	sp, #12
 800a88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a88e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a892:	e7d5      	b.n	800a840 <__d2b+0x1e>
 800a894:	6179      	str	r1, [r7, #20]
 800a896:	e7e7      	b.n	800a868 <__d2b+0x46>
 800a898:	a801      	add	r0, sp, #4
 800a89a:	f7ff fdda 	bl	800a452 <__lo0bits>
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	617b      	str	r3, [r7, #20]
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	6139      	str	r1, [r7, #16]
 800a8a6:	3020      	adds	r0, #32
 800a8a8:	e7e5      	b.n	800a876 <__d2b+0x54>
 800a8aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a8ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8b2:	6030      	str	r0, [r6, #0]
 800a8b4:	6918      	ldr	r0, [r3, #16]
 800a8b6:	f7ff fdad 	bl	800a414 <__hi0bits>
 800a8ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a8be:	e7e1      	b.n	800a884 <__d2b+0x62>

0800a8c0 <_calloc_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	fb02 f401 	mul.w	r4, r2, r1
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f000 f856 	bl	800a978 <_malloc_r>
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	b118      	cbz	r0, 800a8d8 <_calloc_r+0x18>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	f7fe f975 	bl	8008bc2 <memset>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	bd38      	pop	{r3, r4, r5, pc}

0800a8dc <_free_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4605      	mov	r5, r0
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	d045      	beq.n	800a970 <_free_r+0x94>
 800a8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e8:	1f0c      	subs	r4, r1, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	bfb8      	it	lt
 800a8ee:	18e4      	addlt	r4, r4, r3
 800a8f0:	f000 fc4a 	bl	800b188 <__malloc_lock>
 800a8f4:	4a1f      	ldr	r2, [pc, #124]	; (800a974 <_free_r+0x98>)
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	b933      	cbnz	r3, 800a90a <_free_r+0x2e>
 800a8fc:	6063      	str	r3, [r4, #4]
 800a8fe:	6014      	str	r4, [r2, #0]
 800a900:	4628      	mov	r0, r5
 800a902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a906:	f000 bc40 	b.w	800b18a <__malloc_unlock>
 800a90a:	42a3      	cmp	r3, r4
 800a90c:	d90c      	bls.n	800a928 <_free_r+0x4c>
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	1862      	adds	r2, r4, r1
 800a912:	4293      	cmp	r3, r2
 800a914:	bf04      	itt	eq
 800a916:	681a      	ldreq	r2, [r3, #0]
 800a918:	685b      	ldreq	r3, [r3, #4]
 800a91a:	6063      	str	r3, [r4, #4]
 800a91c:	bf04      	itt	eq
 800a91e:	1852      	addeq	r2, r2, r1
 800a920:	6022      	streq	r2, [r4, #0]
 800a922:	6004      	str	r4, [r0, #0]
 800a924:	e7ec      	b.n	800a900 <_free_r+0x24>
 800a926:	4613      	mov	r3, r2
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	b10a      	cbz	r2, 800a930 <_free_r+0x54>
 800a92c:	42a2      	cmp	r2, r4
 800a92e:	d9fa      	bls.n	800a926 <_free_r+0x4a>
 800a930:	6819      	ldr	r1, [r3, #0]
 800a932:	1858      	adds	r0, r3, r1
 800a934:	42a0      	cmp	r0, r4
 800a936:	d10b      	bne.n	800a950 <_free_r+0x74>
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	4401      	add	r1, r0
 800a93c:	1858      	adds	r0, r3, r1
 800a93e:	4282      	cmp	r2, r0
 800a940:	6019      	str	r1, [r3, #0]
 800a942:	d1dd      	bne.n	800a900 <_free_r+0x24>
 800a944:	6810      	ldr	r0, [r2, #0]
 800a946:	6852      	ldr	r2, [r2, #4]
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	4401      	add	r1, r0
 800a94c:	6019      	str	r1, [r3, #0]
 800a94e:	e7d7      	b.n	800a900 <_free_r+0x24>
 800a950:	d902      	bls.n	800a958 <_free_r+0x7c>
 800a952:	230c      	movs	r3, #12
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	e7d3      	b.n	800a900 <_free_r+0x24>
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	1821      	adds	r1, r4, r0
 800a95c:	428a      	cmp	r2, r1
 800a95e:	bf04      	itt	eq
 800a960:	6811      	ldreq	r1, [r2, #0]
 800a962:	6852      	ldreq	r2, [r2, #4]
 800a964:	6062      	str	r2, [r4, #4]
 800a966:	bf04      	itt	eq
 800a968:	1809      	addeq	r1, r1, r0
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	605c      	str	r4, [r3, #4]
 800a96e:	e7c7      	b.n	800a900 <_free_r+0x24>
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	20009800 	.word	0x20009800

0800a978 <_malloc_r>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	1ccd      	adds	r5, r1, #3
 800a97c:	f025 0503 	bic.w	r5, r5, #3
 800a980:	3508      	adds	r5, #8
 800a982:	2d0c      	cmp	r5, #12
 800a984:	bf38      	it	cc
 800a986:	250c      	movcc	r5, #12
 800a988:	2d00      	cmp	r5, #0
 800a98a:	4606      	mov	r6, r0
 800a98c:	db01      	blt.n	800a992 <_malloc_r+0x1a>
 800a98e:	42a9      	cmp	r1, r5
 800a990:	d903      	bls.n	800a99a <_malloc_r+0x22>
 800a992:	230c      	movs	r3, #12
 800a994:	6033      	str	r3, [r6, #0]
 800a996:	2000      	movs	r0, #0
 800a998:	bd70      	pop	{r4, r5, r6, pc}
 800a99a:	f000 fbf5 	bl	800b188 <__malloc_lock>
 800a99e:	4a21      	ldr	r2, [pc, #132]	; (800aa24 <_malloc_r+0xac>)
 800a9a0:	6814      	ldr	r4, [r2, #0]
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	b991      	cbnz	r1, 800a9cc <_malloc_r+0x54>
 800a9a6:	4c20      	ldr	r4, [pc, #128]	; (800aa28 <_malloc_r+0xb0>)
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	b91b      	cbnz	r3, 800a9b4 <_malloc_r+0x3c>
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 f97d 	bl	800acac <_sbrk_r>
 800a9b2:	6020      	str	r0, [r4, #0]
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f000 f978 	bl	800acac <_sbrk_r>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d124      	bne.n	800aa0a <_malloc_r+0x92>
 800a9c0:	230c      	movs	r3, #12
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 fbe0 	bl	800b18a <__malloc_unlock>
 800a9ca:	e7e4      	b.n	800a996 <_malloc_r+0x1e>
 800a9cc:	680b      	ldr	r3, [r1, #0]
 800a9ce:	1b5b      	subs	r3, r3, r5
 800a9d0:	d418      	bmi.n	800aa04 <_malloc_r+0x8c>
 800a9d2:	2b0b      	cmp	r3, #11
 800a9d4:	d90f      	bls.n	800a9f6 <_malloc_r+0x7e>
 800a9d6:	600b      	str	r3, [r1, #0]
 800a9d8:	50cd      	str	r5, [r1, r3]
 800a9da:	18cc      	adds	r4, r1, r3
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f000 fbd4 	bl	800b18a <__malloc_unlock>
 800a9e2:	f104 000b 	add.w	r0, r4, #11
 800a9e6:	1d23      	adds	r3, r4, #4
 800a9e8:	f020 0007 	bic.w	r0, r0, #7
 800a9ec:	1ac3      	subs	r3, r0, r3
 800a9ee:	d0d3      	beq.n	800a998 <_malloc_r+0x20>
 800a9f0:	425a      	negs	r2, r3
 800a9f2:	50e2      	str	r2, [r4, r3]
 800a9f4:	e7d0      	b.n	800a998 <_malloc_r+0x20>
 800a9f6:	428c      	cmp	r4, r1
 800a9f8:	684b      	ldr	r3, [r1, #4]
 800a9fa:	bf16      	itet	ne
 800a9fc:	6063      	strne	r3, [r4, #4]
 800a9fe:	6013      	streq	r3, [r2, #0]
 800aa00:	460c      	movne	r4, r1
 800aa02:	e7eb      	b.n	800a9dc <_malloc_r+0x64>
 800aa04:	460c      	mov	r4, r1
 800aa06:	6849      	ldr	r1, [r1, #4]
 800aa08:	e7cc      	b.n	800a9a4 <_malloc_r+0x2c>
 800aa0a:	1cc4      	adds	r4, r0, #3
 800aa0c:	f024 0403 	bic.w	r4, r4, #3
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d005      	beq.n	800aa20 <_malloc_r+0xa8>
 800aa14:	1a21      	subs	r1, r4, r0
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f948 	bl	800acac <_sbrk_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d0cf      	beq.n	800a9c0 <_malloc_r+0x48>
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	e7db      	b.n	800a9dc <_malloc_r+0x64>
 800aa24:	20009800 	.word	0x20009800
 800aa28:	20009804 	.word	0x20009804

0800aa2c <__sfputc_r>:
 800aa2c:	6893      	ldr	r3, [r2, #8]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	b410      	push	{r4}
 800aa34:	6093      	str	r3, [r2, #8]
 800aa36:	da08      	bge.n	800aa4a <__sfputc_r+0x1e>
 800aa38:	6994      	ldr	r4, [r2, #24]
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	db01      	blt.n	800aa42 <__sfputc_r+0x16>
 800aa3e:	290a      	cmp	r1, #10
 800aa40:	d103      	bne.n	800aa4a <__sfputc_r+0x1e>
 800aa42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa46:	f000 b985 	b.w	800ad54 <__swbuf_r>
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	1c58      	adds	r0, r3, #1
 800aa4e:	6010      	str	r0, [r2, #0]
 800aa50:	7019      	strb	r1, [r3, #0]
 800aa52:	4608      	mov	r0, r1
 800aa54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <__sfputs_r>:
 800aa5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4614      	mov	r4, r2
 800aa62:	18d5      	adds	r5, r2, r3
 800aa64:	42ac      	cmp	r4, r5
 800aa66:	d101      	bne.n	800aa6c <__sfputs_r+0x12>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e007      	b.n	800aa7c <__sfputs_r+0x22>
 800aa6c:	463a      	mov	r2, r7
 800aa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ffda 	bl	800aa2c <__sfputc_r>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d1f3      	bne.n	800aa64 <__sfputs_r+0xa>
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa80 <_vfiprintf_r>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	460c      	mov	r4, r1
 800aa86:	b09d      	sub	sp, #116	; 0x74
 800aa88:	4617      	mov	r7, r2
 800aa8a:	461d      	mov	r5, r3
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b118      	cbz	r0, 800aa98 <_vfiprintf_r+0x18>
 800aa90:	6983      	ldr	r3, [r0, #24]
 800aa92:	b90b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x18>
 800aa94:	f7ff fb98 	bl	800a1c8 <__sinit>
 800aa98:	4b7c      	ldr	r3, [pc, #496]	; (800ac8c <_vfiprintf_r+0x20c>)
 800aa9a:	429c      	cmp	r4, r3
 800aa9c:	d158      	bne.n	800ab50 <_vfiprintf_r+0xd0>
 800aa9e:	6874      	ldr	r4, [r6, #4]
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	0718      	lsls	r0, r3, #28
 800aaa4:	d55e      	bpl.n	800ab64 <_vfiprintf_r+0xe4>
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d05b      	beq.n	800ab64 <_vfiprintf_r+0xe4>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9309      	str	r3, [sp, #36]	; 0x24
 800aab0:	2320      	movs	r3, #32
 800aab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aab6:	2330      	movs	r3, #48	; 0x30
 800aab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aabc:	9503      	str	r5, [sp, #12]
 800aabe:	f04f 0b01 	mov.w	fp, #1
 800aac2:	46b8      	mov	r8, r7
 800aac4:	4645      	mov	r5, r8
 800aac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aaca:	b10b      	cbz	r3, 800aad0 <_vfiprintf_r+0x50>
 800aacc:	2b25      	cmp	r3, #37	; 0x25
 800aace:	d154      	bne.n	800ab7a <_vfiprintf_r+0xfa>
 800aad0:	ebb8 0a07 	subs.w	sl, r8, r7
 800aad4:	d00b      	beq.n	800aaee <_vfiprintf_r+0x6e>
 800aad6:	4653      	mov	r3, sl
 800aad8:	463a      	mov	r2, r7
 800aada:	4621      	mov	r1, r4
 800aadc:	4630      	mov	r0, r6
 800aade:	f7ff ffbc 	bl	800aa5a <__sfputs_r>
 800aae2:	3001      	adds	r0, #1
 800aae4:	f000 80c2 	beq.w	800ac6c <_vfiprintf_r+0x1ec>
 800aae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaea:	4453      	add	r3, sl
 800aaec:	9309      	str	r3, [sp, #36]	; 0x24
 800aaee:	f898 3000 	ldrb.w	r3, [r8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 80ba 	beq.w	800ac6c <_vfiprintf_r+0x1ec>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f04f 32ff 	mov.w	r2, #4294967295
 800aafe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab02:	9304      	str	r3, [sp, #16]
 800ab04:	9307      	str	r3, [sp, #28]
 800ab06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab0c:	46a8      	mov	r8, r5
 800ab0e:	2205      	movs	r2, #5
 800ab10:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ab14:	485e      	ldr	r0, [pc, #376]	; (800ac90 <_vfiprintf_r+0x210>)
 800ab16:	f7f5 fb63 	bl	80001e0 <memchr>
 800ab1a:	9b04      	ldr	r3, [sp, #16]
 800ab1c:	bb78      	cbnz	r0, 800ab7e <_vfiprintf_r+0xfe>
 800ab1e:	06d9      	lsls	r1, r3, #27
 800ab20:	bf44      	itt	mi
 800ab22:	2220      	movmi	r2, #32
 800ab24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab28:	071a      	lsls	r2, r3, #28
 800ab2a:	bf44      	itt	mi
 800ab2c:	222b      	movmi	r2, #43	; 0x2b
 800ab2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab32:	782a      	ldrb	r2, [r5, #0]
 800ab34:	2a2a      	cmp	r2, #42	; 0x2a
 800ab36:	d02a      	beq.n	800ab8e <_vfiprintf_r+0x10e>
 800ab38:	9a07      	ldr	r2, [sp, #28]
 800ab3a:	46a8      	mov	r8, r5
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	250a      	movs	r5, #10
 800ab40:	4641      	mov	r1, r8
 800ab42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab46:	3b30      	subs	r3, #48	; 0x30
 800ab48:	2b09      	cmp	r3, #9
 800ab4a:	d969      	bls.n	800ac20 <_vfiprintf_r+0x1a0>
 800ab4c:	b360      	cbz	r0, 800aba8 <_vfiprintf_r+0x128>
 800ab4e:	e024      	b.n	800ab9a <_vfiprintf_r+0x11a>
 800ab50:	4b50      	ldr	r3, [pc, #320]	; (800ac94 <_vfiprintf_r+0x214>)
 800ab52:	429c      	cmp	r4, r3
 800ab54:	d101      	bne.n	800ab5a <_vfiprintf_r+0xda>
 800ab56:	68b4      	ldr	r4, [r6, #8]
 800ab58:	e7a2      	b.n	800aaa0 <_vfiprintf_r+0x20>
 800ab5a:	4b4f      	ldr	r3, [pc, #316]	; (800ac98 <_vfiprintf_r+0x218>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	bf08      	it	eq
 800ab60:	68f4      	ldreq	r4, [r6, #12]
 800ab62:	e79d      	b.n	800aaa0 <_vfiprintf_r+0x20>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 f958 	bl	800ae1c <__swsetup_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d09d      	beq.n	800aaac <_vfiprintf_r+0x2c>
 800ab70:	f04f 30ff 	mov.w	r0, #4294967295
 800ab74:	b01d      	add	sp, #116	; 0x74
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7a:	46a8      	mov	r8, r5
 800ab7c:	e7a2      	b.n	800aac4 <_vfiprintf_r+0x44>
 800ab7e:	4a44      	ldr	r2, [pc, #272]	; (800ac90 <_vfiprintf_r+0x210>)
 800ab80:	1a80      	subs	r0, r0, r2
 800ab82:	fa0b f000 	lsl.w	r0, fp, r0
 800ab86:	4318      	orrs	r0, r3
 800ab88:	9004      	str	r0, [sp, #16]
 800ab8a:	4645      	mov	r5, r8
 800ab8c:	e7be      	b.n	800ab0c <_vfiprintf_r+0x8c>
 800ab8e:	9a03      	ldr	r2, [sp, #12]
 800ab90:	1d11      	adds	r1, r2, #4
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	9103      	str	r1, [sp, #12]
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	db01      	blt.n	800ab9e <_vfiprintf_r+0x11e>
 800ab9a:	9207      	str	r2, [sp, #28]
 800ab9c:	e004      	b.n	800aba8 <_vfiprintf_r+0x128>
 800ab9e:	4252      	negs	r2, r2
 800aba0:	f043 0302 	orr.w	r3, r3, #2
 800aba4:	9207      	str	r2, [sp, #28]
 800aba6:	9304      	str	r3, [sp, #16]
 800aba8:	f898 3000 	ldrb.w	r3, [r8]
 800abac:	2b2e      	cmp	r3, #46	; 0x2e
 800abae:	d10e      	bne.n	800abce <_vfiprintf_r+0x14e>
 800abb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800abb4:	2b2a      	cmp	r3, #42	; 0x2a
 800abb6:	d138      	bne.n	800ac2a <_vfiprintf_r+0x1aa>
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	1d1a      	adds	r2, r3, #4
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	9203      	str	r2, [sp, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bfb8      	it	lt
 800abc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800abc8:	f108 0802 	add.w	r8, r8, #2
 800abcc:	9305      	str	r3, [sp, #20]
 800abce:	4d33      	ldr	r5, [pc, #204]	; (800ac9c <_vfiprintf_r+0x21c>)
 800abd0:	f898 1000 	ldrb.w	r1, [r8]
 800abd4:	2203      	movs	r2, #3
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7f5 fb02 	bl	80001e0 <memchr>
 800abdc:	b140      	cbz	r0, 800abf0 <_vfiprintf_r+0x170>
 800abde:	2340      	movs	r3, #64	; 0x40
 800abe0:	1b40      	subs	r0, r0, r5
 800abe2:	fa03 f000 	lsl.w	r0, r3, r0
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	4303      	orrs	r3, r0
 800abea:	f108 0801 	add.w	r8, r8, #1
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	f898 1000 	ldrb.w	r1, [r8]
 800abf4:	482a      	ldr	r0, [pc, #168]	; (800aca0 <_vfiprintf_r+0x220>)
 800abf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abfa:	2206      	movs	r2, #6
 800abfc:	f108 0701 	add.w	r7, r8, #1
 800ac00:	f7f5 faee 	bl	80001e0 <memchr>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d037      	beq.n	800ac78 <_vfiprintf_r+0x1f8>
 800ac08:	4b26      	ldr	r3, [pc, #152]	; (800aca4 <_vfiprintf_r+0x224>)
 800ac0a:	bb1b      	cbnz	r3, 800ac54 <_vfiprintf_r+0x1d4>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	3307      	adds	r3, #7
 800ac10:	f023 0307 	bic.w	r3, r3, #7
 800ac14:	3308      	adds	r3, #8
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1a:	444b      	add	r3, r9
 800ac1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1e:	e750      	b.n	800aac2 <_vfiprintf_r+0x42>
 800ac20:	fb05 3202 	mla	r2, r5, r2, r3
 800ac24:	2001      	movs	r0, #1
 800ac26:	4688      	mov	r8, r1
 800ac28:	e78a      	b.n	800ab40 <_vfiprintf_r+0xc0>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f108 0801 	add.w	r8, r8, #1
 800ac30:	9305      	str	r3, [sp, #20]
 800ac32:	4619      	mov	r1, r3
 800ac34:	250a      	movs	r5, #10
 800ac36:	4640      	mov	r0, r8
 800ac38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3c:	3a30      	subs	r2, #48	; 0x30
 800ac3e:	2a09      	cmp	r2, #9
 800ac40:	d903      	bls.n	800ac4a <_vfiprintf_r+0x1ca>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0c3      	beq.n	800abce <_vfiprintf_r+0x14e>
 800ac46:	9105      	str	r1, [sp, #20]
 800ac48:	e7c1      	b.n	800abce <_vfiprintf_r+0x14e>
 800ac4a:	fb05 2101 	mla	r1, r5, r1, r2
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4680      	mov	r8, r0
 800ac52:	e7f0      	b.n	800ac36 <_vfiprintf_r+0x1b6>
 800ac54:	ab03      	add	r3, sp, #12
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4b13      	ldr	r3, [pc, #76]	; (800aca8 <_vfiprintf_r+0x228>)
 800ac5c:	a904      	add	r1, sp, #16
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7fe f84c 	bl	8008cfc <_printf_float>
 800ac64:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac68:	4681      	mov	r9, r0
 800ac6a:	d1d5      	bne.n	800ac18 <_vfiprintf_r+0x198>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	065b      	lsls	r3, r3, #25
 800ac70:	f53f af7e 	bmi.w	800ab70 <_vfiprintf_r+0xf0>
 800ac74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac76:	e77d      	b.n	800ab74 <_vfiprintf_r+0xf4>
 800ac78:	ab03      	add	r3, sp, #12
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <_vfiprintf_r+0x228>)
 800ac80:	a904      	add	r1, sp, #16
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7fe faf0 	bl	8009268 <_printf_i>
 800ac88:	e7ec      	b.n	800ac64 <_vfiprintf_r+0x1e4>
 800ac8a:	bf00      	nop
 800ac8c:	0800c388 	.word	0x0800c388
 800ac90:	0800c4c4 	.word	0x0800c4c4
 800ac94:	0800c3a8 	.word	0x0800c3a8
 800ac98:	0800c368 	.word	0x0800c368
 800ac9c:	0800c4ca 	.word	0x0800c4ca
 800aca0:	0800c4ce 	.word	0x0800c4ce
 800aca4:	08008cfd 	.word	0x08008cfd
 800aca8:	0800aa5b 	.word	0x0800aa5b

0800acac <_sbrk_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4c06      	ldr	r4, [pc, #24]	; (800acc8 <_sbrk_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4605      	mov	r5, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	f7f8 ffe6 	bl	8003c88 <_sbrk>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_sbrk_r+0x1a>
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_sbrk_r+0x1a>
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20009e68 	.word	0x20009e68

0800accc <__sread>:
 800accc:	b510      	push	{r4, lr}
 800acce:	460c      	mov	r4, r1
 800acd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd4:	f000 fa5a 	bl	800b18c <_read_r>
 800acd8:	2800      	cmp	r0, #0
 800acda:	bfab      	itete	ge
 800acdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acde:	89a3      	ldrhlt	r3, [r4, #12]
 800ace0:	181b      	addge	r3, r3, r0
 800ace2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ace6:	bfac      	ite	ge
 800ace8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acea:	81a3      	strhlt	r3, [r4, #12]
 800acec:	bd10      	pop	{r4, pc}

0800acee <__swrite>:
 800acee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf2:	461f      	mov	r7, r3
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	05db      	lsls	r3, r3, #23
 800acf8:	4605      	mov	r5, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	4616      	mov	r6, r2
 800acfe:	d505      	bpl.n	800ad0c <__swrite+0x1e>
 800ad00:	2302      	movs	r3, #2
 800ad02:	2200      	movs	r2, #0
 800ad04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad08:	f000 f9b6 	bl	800b078 <_lseek_r>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	4632      	mov	r2, r6
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	f000 b869 	b.w	800adf8 <_write_r>

0800ad26 <__sseek>:
 800ad26:	b510      	push	{r4, lr}
 800ad28:	460c      	mov	r4, r1
 800ad2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2e:	f000 f9a3 	bl	800b078 <_lseek_r>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	bf15      	itete	ne
 800ad38:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad42:	81a3      	strheq	r3, [r4, #12]
 800ad44:	bf18      	it	ne
 800ad46:	81a3      	strhne	r3, [r4, #12]
 800ad48:	bd10      	pop	{r4, pc}

0800ad4a <__sclose>:
 800ad4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4e:	f000 b8d3 	b.w	800aef8 <_close_r>
	...

0800ad54 <__swbuf_r>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	460e      	mov	r6, r1
 800ad58:	4614      	mov	r4, r2
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	b118      	cbz	r0, 800ad66 <__swbuf_r+0x12>
 800ad5e:	6983      	ldr	r3, [r0, #24]
 800ad60:	b90b      	cbnz	r3, 800ad66 <__swbuf_r+0x12>
 800ad62:	f7ff fa31 	bl	800a1c8 <__sinit>
 800ad66:	4b21      	ldr	r3, [pc, #132]	; (800adec <__swbuf_r+0x98>)
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	d12a      	bne.n	800adc2 <__swbuf_r+0x6e>
 800ad6c:	686c      	ldr	r4, [r5, #4]
 800ad6e:	69a3      	ldr	r3, [r4, #24]
 800ad70:	60a3      	str	r3, [r4, #8]
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	071a      	lsls	r2, r3, #28
 800ad76:	d52e      	bpl.n	800add6 <__swbuf_r+0x82>
 800ad78:	6923      	ldr	r3, [r4, #16]
 800ad7a:	b363      	cbz	r3, 800add6 <__swbuf_r+0x82>
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	6820      	ldr	r0, [r4, #0]
 800ad80:	1ac0      	subs	r0, r0, r3
 800ad82:	6963      	ldr	r3, [r4, #20]
 800ad84:	b2f6      	uxtb	r6, r6
 800ad86:	4283      	cmp	r3, r0
 800ad88:	4637      	mov	r7, r6
 800ad8a:	dc04      	bgt.n	800ad96 <__swbuf_r+0x42>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f000 f948 	bl	800b024 <_fflush_r>
 800ad94:	bb28      	cbnz	r0, 800ade2 <__swbuf_r+0x8e>
 800ad96:	68a3      	ldr	r3, [r4, #8]
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	60a3      	str	r3, [r4, #8]
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	6022      	str	r2, [r4, #0]
 800ada2:	701e      	strb	r6, [r3, #0]
 800ada4:	6963      	ldr	r3, [r4, #20]
 800ada6:	3001      	adds	r0, #1
 800ada8:	4283      	cmp	r3, r0
 800adaa:	d004      	beq.n	800adb6 <__swbuf_r+0x62>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	07db      	lsls	r3, r3, #31
 800adb0:	d519      	bpl.n	800ade6 <__swbuf_r+0x92>
 800adb2:	2e0a      	cmp	r6, #10
 800adb4:	d117      	bne.n	800ade6 <__swbuf_r+0x92>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 f933 	bl	800b024 <_fflush_r>
 800adbe:	b190      	cbz	r0, 800ade6 <__swbuf_r+0x92>
 800adc0:	e00f      	b.n	800ade2 <__swbuf_r+0x8e>
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <__swbuf_r+0x9c>)
 800adc4:	429c      	cmp	r4, r3
 800adc6:	d101      	bne.n	800adcc <__swbuf_r+0x78>
 800adc8:	68ac      	ldr	r4, [r5, #8]
 800adca:	e7d0      	b.n	800ad6e <__swbuf_r+0x1a>
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <__swbuf_r+0xa0>)
 800adce:	429c      	cmp	r4, r3
 800add0:	bf08      	it	eq
 800add2:	68ec      	ldreq	r4, [r5, #12]
 800add4:	e7cb      	b.n	800ad6e <__swbuf_r+0x1a>
 800add6:	4621      	mov	r1, r4
 800add8:	4628      	mov	r0, r5
 800adda:	f000 f81f 	bl	800ae1c <__swsetup_r>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d0cc      	beq.n	800ad7c <__swbuf_r+0x28>
 800ade2:	f04f 37ff 	mov.w	r7, #4294967295
 800ade6:	4638      	mov	r0, r7
 800ade8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adea:	bf00      	nop
 800adec:	0800c388 	.word	0x0800c388
 800adf0:	0800c3a8 	.word	0x0800c3a8
 800adf4:	0800c368 	.word	0x0800c368

0800adf8 <_write_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4c07      	ldr	r4, [pc, #28]	; (800ae18 <_write_r+0x20>)
 800adfc:	4605      	mov	r5, r0
 800adfe:	4608      	mov	r0, r1
 800ae00:	4611      	mov	r1, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	6022      	str	r2, [r4, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f7f6 ff94 	bl	8001d34 <_write>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_write_r+0x1e>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_write_r+0x1e>
 800ae14:	602b      	str	r3, [r5, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	20009e68 	.word	0x20009e68

0800ae1c <__swsetup_r>:
 800ae1c:	4b32      	ldr	r3, [pc, #200]	; (800aee8 <__swsetup_r+0xcc>)
 800ae1e:	b570      	push	{r4, r5, r6, lr}
 800ae20:	681d      	ldr	r5, [r3, #0]
 800ae22:	4606      	mov	r6, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	b125      	cbz	r5, 800ae32 <__swsetup_r+0x16>
 800ae28:	69ab      	ldr	r3, [r5, #24]
 800ae2a:	b913      	cbnz	r3, 800ae32 <__swsetup_r+0x16>
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f7ff f9cb 	bl	800a1c8 <__sinit>
 800ae32:	4b2e      	ldr	r3, [pc, #184]	; (800aeec <__swsetup_r+0xd0>)
 800ae34:	429c      	cmp	r4, r3
 800ae36:	d10f      	bne.n	800ae58 <__swsetup_r+0x3c>
 800ae38:	686c      	ldr	r4, [r5, #4]
 800ae3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	0715      	lsls	r5, r2, #28
 800ae42:	d42c      	bmi.n	800ae9e <__swsetup_r+0x82>
 800ae44:	06d0      	lsls	r0, r2, #27
 800ae46:	d411      	bmi.n	800ae6c <__swsetup_r+0x50>
 800ae48:	2209      	movs	r2, #9
 800ae4a:	6032      	str	r2, [r6, #0]
 800ae4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	f04f 30ff 	mov.w	r0, #4294967295
 800ae56:	e03e      	b.n	800aed6 <__swsetup_r+0xba>
 800ae58:	4b25      	ldr	r3, [pc, #148]	; (800aef0 <__swsetup_r+0xd4>)
 800ae5a:	429c      	cmp	r4, r3
 800ae5c:	d101      	bne.n	800ae62 <__swsetup_r+0x46>
 800ae5e:	68ac      	ldr	r4, [r5, #8]
 800ae60:	e7eb      	b.n	800ae3a <__swsetup_r+0x1e>
 800ae62:	4b24      	ldr	r3, [pc, #144]	; (800aef4 <__swsetup_r+0xd8>)
 800ae64:	429c      	cmp	r4, r3
 800ae66:	bf08      	it	eq
 800ae68:	68ec      	ldreq	r4, [r5, #12]
 800ae6a:	e7e6      	b.n	800ae3a <__swsetup_r+0x1e>
 800ae6c:	0751      	lsls	r1, r2, #29
 800ae6e:	d512      	bpl.n	800ae96 <__swsetup_r+0x7a>
 800ae70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae72:	b141      	cbz	r1, 800ae86 <__swsetup_r+0x6a>
 800ae74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	d002      	beq.n	800ae82 <__swsetup_r+0x66>
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff fd2d 	bl	800a8dc <_free_r>
 800ae82:	2300      	movs	r3, #0
 800ae84:	6363      	str	r3, [r4, #52]	; 0x34
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f043 0308 	orr.w	r3, r3, #8
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	b94b      	cbnz	r3, 800aeb6 <__swsetup_r+0x9a>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeac:	d003      	beq.n	800aeb6 <__swsetup_r+0x9a>
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 f917 	bl	800b0e4 <__smakebuf_r>
 800aeb6:	89a2      	ldrh	r2, [r4, #12]
 800aeb8:	f012 0301 	ands.w	r3, r2, #1
 800aebc:	d00c      	beq.n	800aed8 <__swsetup_r+0xbc>
 800aebe:	2300      	movs	r3, #0
 800aec0:	60a3      	str	r3, [r4, #8]
 800aec2:	6963      	ldr	r3, [r4, #20]
 800aec4:	425b      	negs	r3, r3
 800aec6:	61a3      	str	r3, [r4, #24]
 800aec8:	6923      	ldr	r3, [r4, #16]
 800aeca:	b953      	cbnz	r3, 800aee2 <__swsetup_r+0xc6>
 800aecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aed4:	d1ba      	bne.n	800ae4c <__swsetup_r+0x30>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	0792      	lsls	r2, r2, #30
 800aeda:	bf58      	it	pl
 800aedc:	6963      	ldrpl	r3, [r4, #20]
 800aede:	60a3      	str	r3, [r4, #8]
 800aee0:	e7f2      	b.n	800aec8 <__swsetup_r+0xac>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e7f7      	b.n	800aed6 <__swsetup_r+0xba>
 800aee6:	bf00      	nop
 800aee8:	2000000c 	.word	0x2000000c
 800aeec:	0800c388 	.word	0x0800c388
 800aef0:	0800c3a8 	.word	0x0800c3a8
 800aef4:	0800c368 	.word	0x0800c368

0800aef8 <_close_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4c06      	ldr	r4, [pc, #24]	; (800af14 <_close_r+0x1c>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4605      	mov	r5, r0
 800af00:	4608      	mov	r0, r1
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	f7f8 fe8b 	bl	8003c1e <_close>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_close_r+0x1a>
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_close_r+0x1a>
 800af10:	602b      	str	r3, [r5, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20009e68 	.word	0x20009e68

0800af18 <__sflush_r>:
 800af18:	898a      	ldrh	r2, [r1, #12]
 800af1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1e:	4605      	mov	r5, r0
 800af20:	0710      	lsls	r0, r2, #28
 800af22:	460c      	mov	r4, r1
 800af24:	d458      	bmi.n	800afd8 <__sflush_r+0xc0>
 800af26:	684b      	ldr	r3, [r1, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dc05      	bgt.n	800af38 <__sflush_r+0x20>
 800af2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dc02      	bgt.n	800af38 <__sflush_r+0x20>
 800af32:	2000      	movs	r0, #0
 800af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d0f9      	beq.n	800af32 <__sflush_r+0x1a>
 800af3e:	2300      	movs	r3, #0
 800af40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af44:	682f      	ldr	r7, [r5, #0]
 800af46:	6a21      	ldr	r1, [r4, #32]
 800af48:	602b      	str	r3, [r5, #0]
 800af4a:	d032      	beq.n	800afb2 <__sflush_r+0x9a>
 800af4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	075a      	lsls	r2, r3, #29
 800af52:	d505      	bpl.n	800af60 <__sflush_r+0x48>
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	1ac0      	subs	r0, r0, r3
 800af58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af5a:	b10b      	cbz	r3, 800af60 <__sflush_r+0x48>
 800af5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af5e:	1ac0      	subs	r0, r0, r3
 800af60:	2300      	movs	r3, #0
 800af62:	4602      	mov	r2, r0
 800af64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af66:	6a21      	ldr	r1, [r4, #32]
 800af68:	4628      	mov	r0, r5
 800af6a:	47b0      	blx	r6
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	d106      	bne.n	800af80 <__sflush_r+0x68>
 800af72:	6829      	ldr	r1, [r5, #0]
 800af74:	291d      	cmp	r1, #29
 800af76:	d848      	bhi.n	800b00a <__sflush_r+0xf2>
 800af78:	4a29      	ldr	r2, [pc, #164]	; (800b020 <__sflush_r+0x108>)
 800af7a:	40ca      	lsrs	r2, r1
 800af7c:	07d6      	lsls	r6, r2, #31
 800af7e:	d544      	bpl.n	800b00a <__sflush_r+0xf2>
 800af80:	2200      	movs	r2, #0
 800af82:	6062      	str	r2, [r4, #4]
 800af84:	04d9      	lsls	r1, r3, #19
 800af86:	6922      	ldr	r2, [r4, #16]
 800af88:	6022      	str	r2, [r4, #0]
 800af8a:	d504      	bpl.n	800af96 <__sflush_r+0x7e>
 800af8c:	1c42      	adds	r2, r0, #1
 800af8e:	d101      	bne.n	800af94 <__sflush_r+0x7c>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b903      	cbnz	r3, 800af96 <__sflush_r+0x7e>
 800af94:	6560      	str	r0, [r4, #84]	; 0x54
 800af96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af98:	602f      	str	r7, [r5, #0]
 800af9a:	2900      	cmp	r1, #0
 800af9c:	d0c9      	beq.n	800af32 <__sflush_r+0x1a>
 800af9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afa2:	4299      	cmp	r1, r3
 800afa4:	d002      	beq.n	800afac <__sflush_r+0x94>
 800afa6:	4628      	mov	r0, r5
 800afa8:	f7ff fc98 	bl	800a8dc <_free_r>
 800afac:	2000      	movs	r0, #0
 800afae:	6360      	str	r0, [r4, #52]	; 0x34
 800afb0:	e7c0      	b.n	800af34 <__sflush_r+0x1c>
 800afb2:	2301      	movs	r3, #1
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b0      	blx	r6
 800afb8:	1c41      	adds	r1, r0, #1
 800afba:	d1c8      	bne.n	800af4e <__sflush_r+0x36>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0c5      	beq.n	800af4e <__sflush_r+0x36>
 800afc2:	2b1d      	cmp	r3, #29
 800afc4:	d001      	beq.n	800afca <__sflush_r+0xb2>
 800afc6:	2b16      	cmp	r3, #22
 800afc8:	d101      	bne.n	800afce <__sflush_r+0xb6>
 800afca:	602f      	str	r7, [r5, #0]
 800afcc:	e7b1      	b.n	800af32 <__sflush_r+0x1a>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	e7ad      	b.n	800af34 <__sflush_r+0x1c>
 800afd8:	690f      	ldr	r7, [r1, #16]
 800afda:	2f00      	cmp	r7, #0
 800afdc:	d0a9      	beq.n	800af32 <__sflush_r+0x1a>
 800afde:	0793      	lsls	r3, r2, #30
 800afe0:	680e      	ldr	r6, [r1, #0]
 800afe2:	bf08      	it	eq
 800afe4:	694b      	ldreq	r3, [r1, #20]
 800afe6:	600f      	str	r7, [r1, #0]
 800afe8:	bf18      	it	ne
 800afea:	2300      	movne	r3, #0
 800afec:	eba6 0807 	sub.w	r8, r6, r7
 800aff0:	608b      	str	r3, [r1, #8]
 800aff2:	f1b8 0f00 	cmp.w	r8, #0
 800aff6:	dd9c      	ble.n	800af32 <__sflush_r+0x1a>
 800aff8:	4643      	mov	r3, r8
 800affa:	463a      	mov	r2, r7
 800affc:	6a21      	ldr	r1, [r4, #32]
 800affe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b000:	4628      	mov	r0, r5
 800b002:	47b0      	blx	r6
 800b004:	2800      	cmp	r0, #0
 800b006:	dc06      	bgt.n	800b016 <__sflush_r+0xfe>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00e:	81a3      	strh	r3, [r4, #12]
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	e78e      	b.n	800af34 <__sflush_r+0x1c>
 800b016:	4407      	add	r7, r0
 800b018:	eba8 0800 	sub.w	r8, r8, r0
 800b01c:	e7e9      	b.n	800aff2 <__sflush_r+0xda>
 800b01e:	bf00      	nop
 800b020:	20400001 	.word	0x20400001

0800b024 <_fflush_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	690b      	ldr	r3, [r1, #16]
 800b028:	4605      	mov	r5, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	b1db      	cbz	r3, 800b066 <_fflush_r+0x42>
 800b02e:	b118      	cbz	r0, 800b038 <_fflush_r+0x14>
 800b030:	6983      	ldr	r3, [r0, #24]
 800b032:	b90b      	cbnz	r3, 800b038 <_fflush_r+0x14>
 800b034:	f7ff f8c8 	bl	800a1c8 <__sinit>
 800b038:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <_fflush_r+0x48>)
 800b03a:	429c      	cmp	r4, r3
 800b03c:	d109      	bne.n	800b052 <_fflush_r+0x2e>
 800b03e:	686c      	ldr	r4, [r5, #4]
 800b040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b044:	b17b      	cbz	r3, 800b066 <_fflush_r+0x42>
 800b046:	4621      	mov	r1, r4
 800b048:	4628      	mov	r0, r5
 800b04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b04e:	f7ff bf63 	b.w	800af18 <__sflush_r>
 800b052:	4b07      	ldr	r3, [pc, #28]	; (800b070 <_fflush_r+0x4c>)
 800b054:	429c      	cmp	r4, r3
 800b056:	d101      	bne.n	800b05c <_fflush_r+0x38>
 800b058:	68ac      	ldr	r4, [r5, #8]
 800b05a:	e7f1      	b.n	800b040 <_fflush_r+0x1c>
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <_fflush_r+0x50>)
 800b05e:	429c      	cmp	r4, r3
 800b060:	bf08      	it	eq
 800b062:	68ec      	ldreq	r4, [r5, #12]
 800b064:	e7ec      	b.n	800b040 <_fflush_r+0x1c>
 800b066:	2000      	movs	r0, #0
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	bf00      	nop
 800b06c:	0800c388 	.word	0x0800c388
 800b070:	0800c3a8 	.word	0x0800c3a8
 800b074:	0800c368 	.word	0x0800c368

0800b078 <_lseek_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4c07      	ldr	r4, [pc, #28]	; (800b098 <_lseek_r+0x20>)
 800b07c:	4605      	mov	r5, r0
 800b07e:	4608      	mov	r0, r1
 800b080:	4611      	mov	r1, r2
 800b082:	2200      	movs	r2, #0
 800b084:	6022      	str	r2, [r4, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f7f8 fdf0 	bl	8003c6c <_lseek>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_lseek_r+0x1e>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	b103      	cbz	r3, 800b096 <_lseek_r+0x1e>
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	20009e68 	.word	0x20009e68

0800b09c <__swhatbuf_r>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	460e      	mov	r6, r1
 800b0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	b096      	sub	sp, #88	; 0x58
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	461d      	mov	r5, r3
 800b0ac:	da07      	bge.n	800b0be <__swhatbuf_r+0x22>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	89b3      	ldrh	r3, [r6, #12]
 800b0b4:	061a      	lsls	r2, r3, #24
 800b0b6:	d410      	bmi.n	800b0da <__swhatbuf_r+0x3e>
 800b0b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0bc:	e00e      	b.n	800b0dc <__swhatbuf_r+0x40>
 800b0be:	466a      	mov	r2, sp
 800b0c0:	f000 f884 	bl	800b1cc <_fstat_r>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dbf2      	blt.n	800b0ae <__swhatbuf_r+0x12>
 800b0c8:	9a01      	ldr	r2, [sp, #4]
 800b0ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0d2:	425a      	negs	r2, r3
 800b0d4:	415a      	adcs	r2, r3
 800b0d6:	602a      	str	r2, [r5, #0]
 800b0d8:	e7ee      	b.n	800b0b8 <__swhatbuf_r+0x1c>
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	2000      	movs	r0, #0
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	b016      	add	sp, #88	; 0x58
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}

0800b0e4 <__smakebuf_r>:
 800b0e4:	898b      	ldrh	r3, [r1, #12]
 800b0e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0e8:	079d      	lsls	r5, r3, #30
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	d507      	bpl.n	800b100 <__smakebuf_r+0x1c>
 800b0f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	6163      	str	r3, [r4, #20]
 800b0fc:	b002      	add	sp, #8
 800b0fe:	bd70      	pop	{r4, r5, r6, pc}
 800b100:	ab01      	add	r3, sp, #4
 800b102:	466a      	mov	r2, sp
 800b104:	f7ff ffca 	bl	800b09c <__swhatbuf_r>
 800b108:	9900      	ldr	r1, [sp, #0]
 800b10a:	4605      	mov	r5, r0
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7ff fc33 	bl	800a978 <_malloc_r>
 800b112:	b948      	cbnz	r0, 800b128 <__smakebuf_r+0x44>
 800b114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d4ef      	bmi.n	800b0fc <__smakebuf_r+0x18>
 800b11c:	f023 0303 	bic.w	r3, r3, #3
 800b120:	f043 0302 	orr.w	r3, r3, #2
 800b124:	81a3      	strh	r3, [r4, #12]
 800b126:	e7e3      	b.n	800b0f0 <__smakebuf_r+0xc>
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <__smakebuf_r+0x7c>)
 800b12a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b134:	81a3      	strh	r3, [r4, #12]
 800b136:	9b00      	ldr	r3, [sp, #0]
 800b138:	6163      	str	r3, [r4, #20]
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	6120      	str	r0, [r4, #16]
 800b13e:	b15b      	cbz	r3, 800b158 <__smakebuf_r+0x74>
 800b140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b144:	4630      	mov	r0, r6
 800b146:	f000 f853 	bl	800b1f0 <_isatty_r>
 800b14a:	b128      	cbz	r0, 800b158 <__smakebuf_r+0x74>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f023 0303 	bic.w	r3, r3, #3
 800b152:	f043 0301 	orr.w	r3, r3, #1
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	431d      	orrs	r5, r3
 800b15c:	81a5      	strh	r5, [r4, #12]
 800b15e:	e7cd      	b.n	800b0fc <__smakebuf_r+0x18>
 800b160:	0800a191 	.word	0x0800a191

0800b164 <__ascii_mbtowc>:
 800b164:	b082      	sub	sp, #8
 800b166:	b901      	cbnz	r1, 800b16a <__ascii_mbtowc+0x6>
 800b168:	a901      	add	r1, sp, #4
 800b16a:	b142      	cbz	r2, 800b17e <__ascii_mbtowc+0x1a>
 800b16c:	b14b      	cbz	r3, 800b182 <__ascii_mbtowc+0x1e>
 800b16e:	7813      	ldrb	r3, [r2, #0]
 800b170:	600b      	str	r3, [r1, #0]
 800b172:	7812      	ldrb	r2, [r2, #0]
 800b174:	1c10      	adds	r0, r2, #0
 800b176:	bf18      	it	ne
 800b178:	2001      	movne	r0, #1
 800b17a:	b002      	add	sp, #8
 800b17c:	4770      	bx	lr
 800b17e:	4610      	mov	r0, r2
 800b180:	e7fb      	b.n	800b17a <__ascii_mbtowc+0x16>
 800b182:	f06f 0001 	mvn.w	r0, #1
 800b186:	e7f8      	b.n	800b17a <__ascii_mbtowc+0x16>

0800b188 <__malloc_lock>:
 800b188:	4770      	bx	lr

0800b18a <__malloc_unlock>:
 800b18a:	4770      	bx	lr

0800b18c <_read_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4c07      	ldr	r4, [pc, #28]	; (800b1ac <_read_r+0x20>)
 800b190:	4605      	mov	r5, r0
 800b192:	4608      	mov	r0, r1
 800b194:	4611      	mov	r1, r2
 800b196:	2200      	movs	r2, #0
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	f7f8 fd22 	bl	8003be4 <_read>
 800b1a0:	1c43      	adds	r3, r0, #1
 800b1a2:	d102      	bne.n	800b1aa <_read_r+0x1e>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	b103      	cbz	r3, 800b1aa <_read_r+0x1e>
 800b1a8:	602b      	str	r3, [r5, #0]
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	20009e68 	.word	0x20009e68

0800b1b0 <__ascii_wctomb>:
 800b1b0:	b149      	cbz	r1, 800b1c6 <__ascii_wctomb+0x16>
 800b1b2:	2aff      	cmp	r2, #255	; 0xff
 800b1b4:	bf85      	ittet	hi
 800b1b6:	238a      	movhi	r3, #138	; 0x8a
 800b1b8:	6003      	strhi	r3, [r0, #0]
 800b1ba:	700a      	strbls	r2, [r1, #0]
 800b1bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1c0:	bf98      	it	ls
 800b1c2:	2001      	movls	r0, #1
 800b1c4:	4770      	bx	lr
 800b1c6:	4608      	mov	r0, r1
 800b1c8:	4770      	bx	lr
	...

0800b1cc <_fstat_r>:
 800b1cc:	b538      	push	{r3, r4, r5, lr}
 800b1ce:	4c07      	ldr	r4, [pc, #28]	; (800b1ec <_fstat_r+0x20>)
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	f7f8 fd2c 	bl	8003c36 <_fstat>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d102      	bne.n	800b1e8 <_fstat_r+0x1c>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	b103      	cbz	r3, 800b1e8 <_fstat_r+0x1c>
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20009e68 	.word	0x20009e68

0800b1f0 <_isatty_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4c06      	ldr	r4, [pc, #24]	; (800b20c <_isatty_r+0x1c>)
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	f7f8 fd2b 	bl	8003c56 <_isatty>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_isatty_r+0x1a>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	b103      	cbz	r3, 800b20a <_isatty_r+0x1a>
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	20009e68 	.word	0x20009e68

0800b210 <tan>:
 800b210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b212:	ec51 0b10 	vmov	r0, r1, d0
 800b216:	4a14      	ldr	r2, [pc, #80]	; (800b268 <tan+0x58>)
 800b218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b21c:	4293      	cmp	r3, r2
 800b21e:	dc05      	bgt.n	800b22c <tan+0x1c>
 800b220:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800b260 <tan+0x50>
 800b224:	2001      	movs	r0, #1
 800b226:	f000 fd57 	bl	800bcd8 <__kernel_tan>
 800b22a:	e009      	b.n	800b240 <tan+0x30>
 800b22c:	4a0f      	ldr	r2, [pc, #60]	; (800b26c <tan+0x5c>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	dd09      	ble.n	800b246 <tan+0x36>
 800b232:	ee10 2a10 	vmov	r2, s0
 800b236:	460b      	mov	r3, r1
 800b238:	f7f5 f826 	bl	8000288 <__aeabi_dsub>
 800b23c:	ec41 0b10 	vmov	d0, r0, r1
 800b240:	b005      	add	sp, #20
 800b242:	f85d fb04 	ldr.w	pc, [sp], #4
 800b246:	4668      	mov	r0, sp
 800b248:	f000 f812 	bl	800b270 <__ieee754_rem_pio2>
 800b24c:	0040      	lsls	r0, r0, #1
 800b24e:	f000 0002 	and.w	r0, r0, #2
 800b252:	f1c0 0001 	rsb	r0, r0, #1
 800b256:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b25a:	ed9d 0b00 	vldr	d0, [sp]
 800b25e:	e7e2      	b.n	800b226 <tan+0x16>
	...
 800b268:	3fe921fb 	.word	0x3fe921fb
 800b26c:	7fefffff 	.word	0x7fefffff

0800b270 <__ieee754_rem_pio2>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	ec57 6b10 	vmov	r6, r7, d0
 800b278:	4bc3      	ldr	r3, [pc, #780]	; (800b588 <__ieee754_rem_pio2+0x318>)
 800b27a:	b08d      	sub	sp, #52	; 0x34
 800b27c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b280:	4598      	cmp	r8, r3
 800b282:	4604      	mov	r4, r0
 800b284:	9704      	str	r7, [sp, #16]
 800b286:	dc07      	bgt.n	800b298 <__ieee754_rem_pio2+0x28>
 800b288:	2200      	movs	r2, #0
 800b28a:	2300      	movs	r3, #0
 800b28c:	ed84 0b00 	vstr	d0, [r4]
 800b290:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b294:	2500      	movs	r5, #0
 800b296:	e027      	b.n	800b2e8 <__ieee754_rem_pio2+0x78>
 800b298:	4bbc      	ldr	r3, [pc, #752]	; (800b58c <__ieee754_rem_pio2+0x31c>)
 800b29a:	4598      	cmp	r8, r3
 800b29c:	dc75      	bgt.n	800b38a <__ieee754_rem_pio2+0x11a>
 800b29e:	9b04      	ldr	r3, [sp, #16]
 800b2a0:	4dbb      	ldr	r5, [pc, #748]	; (800b590 <__ieee754_rem_pio2+0x320>)
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	ee10 0a10 	vmov	r0, s0
 800b2a8:	a3a9      	add	r3, pc, #676	; (adr r3, 800b550 <__ieee754_rem_pio2+0x2e0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	dd36      	ble.n	800b320 <__ieee754_rem_pio2+0xb0>
 800b2b2:	f7f4 ffe9 	bl	8000288 <__aeabi_dsub>
 800b2b6:	45a8      	cmp	r8, r5
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	460f      	mov	r7, r1
 800b2bc:	d018      	beq.n	800b2f0 <__ieee754_rem_pio2+0x80>
 800b2be:	a3a6      	add	r3, pc, #664	; (adr r3, 800b558 <__ieee754_rem_pio2+0x2e8>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f4 ffe0 	bl	8000288 <__aeabi_dsub>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	e9c4 2300 	strd	r2, r3, [r4]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	a39f      	add	r3, pc, #636	; (adr r3, 800b558 <__ieee754_rem_pio2+0x2e8>)
 800b2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2de:	f7f4 ffd3 	bl	8000288 <__aeabi_dsub>
 800b2e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2e6:	2501      	movs	r5, #1
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	b00d      	add	sp, #52	; 0x34
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	a39b      	add	r3, pc, #620	; (adr r3, 800b560 <__ieee754_rem_pio2+0x2f0>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f7f4 ffc7 	bl	8000288 <__aeabi_dsub>
 800b2fa:	a39b      	add	r3, pc, #620	; (adr r3, 800b568 <__ieee754_rem_pio2+0x2f8>)
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	4606      	mov	r6, r0
 800b302:	460f      	mov	r7, r1
 800b304:	f7f4 ffc0 	bl	8000288 <__aeabi_dsub>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	e9c4 2300 	strd	r2, r3, [r4]
 800b310:	4630      	mov	r0, r6
 800b312:	4639      	mov	r1, r7
 800b314:	f7f4 ffb8 	bl	8000288 <__aeabi_dsub>
 800b318:	a393      	add	r3, pc, #588	; (adr r3, 800b568 <__ieee754_rem_pio2+0x2f8>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	e7de      	b.n	800b2de <__ieee754_rem_pio2+0x6e>
 800b320:	f7f4 ffb4 	bl	800028c <__adddf3>
 800b324:	45a8      	cmp	r8, r5
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	d016      	beq.n	800b35a <__ieee754_rem_pio2+0xea>
 800b32c:	a38a      	add	r3, pc, #552	; (adr r3, 800b558 <__ieee754_rem_pio2+0x2e8>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	f7f4 ffab 	bl	800028c <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	e9c4 2300 	strd	r2, r3, [r4]
 800b33e:	4630      	mov	r0, r6
 800b340:	4639      	mov	r1, r7
 800b342:	f7f4 ffa1 	bl	8000288 <__aeabi_dsub>
 800b346:	a384      	add	r3, pc, #528	; (adr r3, 800b558 <__ieee754_rem_pio2+0x2e8>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f4 ff9e 	bl	800028c <__adddf3>
 800b350:	f04f 35ff 	mov.w	r5, #4294967295
 800b354:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b358:	e7c6      	b.n	800b2e8 <__ieee754_rem_pio2+0x78>
 800b35a:	a381      	add	r3, pc, #516	; (adr r3, 800b560 <__ieee754_rem_pio2+0x2f0>)
 800b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b360:	f7f4 ff94 	bl	800028c <__adddf3>
 800b364:	a380      	add	r3, pc, #512	; (adr r3, 800b568 <__ieee754_rem_pio2+0x2f8>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	f7f4 ff8d 	bl	800028c <__adddf3>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	e9c4 2300 	strd	r2, r3, [r4]
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f4 ff83 	bl	8000288 <__aeabi_dsub>
 800b382:	a379      	add	r3, pc, #484	; (adr r3, 800b568 <__ieee754_rem_pio2+0x2f8>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	e7e0      	b.n	800b34c <__ieee754_rem_pio2+0xdc>
 800b38a:	4b82      	ldr	r3, [pc, #520]	; (800b594 <__ieee754_rem_pio2+0x324>)
 800b38c:	4598      	cmp	r8, r3
 800b38e:	f300 80d0 	bgt.w	800b532 <__ieee754_rem_pio2+0x2c2>
 800b392:	f000 fe6d 	bl	800c070 <fabs>
 800b396:	ec57 6b10 	vmov	r6, r7, d0
 800b39a:	ee10 0a10 	vmov	r0, s0
 800b39e:	a374      	add	r3, pc, #464	; (adr r3, 800b570 <__ieee754_rem_pio2+0x300>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f5 f927 	bl	80005f8 <__aeabi_dmul>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4b7a      	ldr	r3, [pc, #488]	; (800b598 <__ieee754_rem_pio2+0x328>)
 800b3ae:	f7f4 ff6d 	bl	800028c <__adddf3>
 800b3b2:	f7f5 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	f7f5 f8b4 	bl	8000524 <__aeabi_i2d>
 800b3bc:	a364      	add	r3, pc, #400	; (adr r3, 800b550 <__ieee754_rem_pio2+0x2e0>)
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3c6:	f7f5 f917 	bl	80005f8 <__aeabi_dmul>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	f7f4 ff59 	bl	8000288 <__aeabi_dsub>
 800b3d6:	a360      	add	r3, pc, #384	; (adr r3, 800b558 <__ieee754_rem_pio2+0x2e8>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	4682      	mov	sl, r0
 800b3de:	468b      	mov	fp, r1
 800b3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e4:	f7f5 f908 	bl	80005f8 <__aeabi_dmul>
 800b3e8:	2d1f      	cmp	r5, #31
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	460f      	mov	r7, r1
 800b3ee:	dc0c      	bgt.n	800b40a <__ieee754_rem_pio2+0x19a>
 800b3f0:	1e6a      	subs	r2, r5, #1
 800b3f2:	4b6a      	ldr	r3, [pc, #424]	; (800b59c <__ieee754_rem_pio2+0x32c>)
 800b3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f8:	4543      	cmp	r3, r8
 800b3fa:	d006      	beq.n	800b40a <__ieee754_rem_pio2+0x19a>
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	463b      	mov	r3, r7
 800b400:	4650      	mov	r0, sl
 800b402:	4659      	mov	r1, fp
 800b404:	f7f4 ff40 	bl	8000288 <__aeabi_dsub>
 800b408:	e00e      	b.n	800b428 <__ieee754_rem_pio2+0x1b8>
 800b40a:	4632      	mov	r2, r6
 800b40c:	463b      	mov	r3, r7
 800b40e:	4650      	mov	r0, sl
 800b410:	4659      	mov	r1, fp
 800b412:	f7f4 ff39 	bl	8000288 <__aeabi_dsub>
 800b416:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b41a:	9305      	str	r3, [sp, #20]
 800b41c:	9a05      	ldr	r2, [sp, #20]
 800b41e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	2b10      	cmp	r3, #16
 800b426:	dc02      	bgt.n	800b42e <__ieee754_rem_pio2+0x1be>
 800b428:	e9c4 0100 	strd	r0, r1, [r4]
 800b42c:	e039      	b.n	800b4a2 <__ieee754_rem_pio2+0x232>
 800b42e:	a34c      	add	r3, pc, #304	; (adr r3, 800b560 <__ieee754_rem_pio2+0x2f0>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4650      	mov	r0, sl
 800b446:	4659      	mov	r1, fp
 800b448:	f7f4 ff1e 	bl	8000288 <__aeabi_dsub>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4680      	mov	r8, r0
 800b452:	4689      	mov	r9, r1
 800b454:	4650      	mov	r0, sl
 800b456:	4659      	mov	r1, fp
 800b458:	f7f4 ff16 	bl	8000288 <__aeabi_dsub>
 800b45c:	4632      	mov	r2, r6
 800b45e:	463b      	mov	r3, r7
 800b460:	f7f4 ff12 	bl	8000288 <__aeabi_dsub>
 800b464:	a340      	add	r3, pc, #256	; (adr r3, 800b568 <__ieee754_rem_pio2+0x2f8>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	4606      	mov	r6, r0
 800b46c:	460f      	mov	r7, r1
 800b46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b472:	f7f5 f8c1 	bl	80005f8 <__aeabi_dmul>
 800b476:	4632      	mov	r2, r6
 800b478:	463b      	mov	r3, r7
 800b47a:	f7f4 ff05 	bl	8000288 <__aeabi_dsub>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4606      	mov	r6, r0
 800b484:	460f      	mov	r7, r1
 800b486:	4640      	mov	r0, r8
 800b488:	4649      	mov	r1, r9
 800b48a:	f7f4 fefd 	bl	8000288 <__aeabi_dsub>
 800b48e:	9a05      	ldr	r2, [sp, #20]
 800b490:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	2b31      	cmp	r3, #49	; 0x31
 800b498:	dc20      	bgt.n	800b4dc <__ieee754_rem_pio2+0x26c>
 800b49a:	e9c4 0100 	strd	r0, r1, [r4]
 800b49e:	46c2      	mov	sl, r8
 800b4a0:	46cb      	mov	fp, r9
 800b4a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f4 feeb 	bl	8000288 <__aeabi_dsub>
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	9b04      	ldr	r3, [sp, #16]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4c2:	f6bf af11 	bge.w	800b2e8 <__ieee754_rem_pio2+0x78>
 800b4c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b4ca:	6063      	str	r3, [r4, #4]
 800b4cc:	f8c4 8000 	str.w	r8, [r4]
 800b4d0:	60a0      	str	r0, [r4, #8]
 800b4d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4d6:	60e3      	str	r3, [r4, #12]
 800b4d8:	426d      	negs	r5, r5
 800b4da:	e705      	b.n	800b2e8 <__ieee754_rem_pio2+0x78>
 800b4dc:	a326      	add	r3, pc, #152	; (adr r3, 800b578 <__ieee754_rem_pio2+0x308>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e6:	f7f5 f887 	bl	80005f8 <__aeabi_dmul>
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	4649      	mov	r1, r9
 800b4f6:	f7f4 fec7 	bl	8000288 <__aeabi_dsub>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4682      	mov	sl, r0
 800b500:	468b      	mov	fp, r1
 800b502:	4640      	mov	r0, r8
 800b504:	4649      	mov	r1, r9
 800b506:	f7f4 febf 	bl	8000288 <__aeabi_dsub>
 800b50a:	4632      	mov	r2, r6
 800b50c:	463b      	mov	r3, r7
 800b50e:	f7f4 febb 	bl	8000288 <__aeabi_dsub>
 800b512:	a31b      	add	r3, pc, #108	; (adr r3, 800b580 <__ieee754_rem_pio2+0x310>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	4606      	mov	r6, r0
 800b51a:	460f      	mov	r7, r1
 800b51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b520:	f7f5 f86a 	bl	80005f8 <__aeabi_dmul>
 800b524:	4632      	mov	r2, r6
 800b526:	463b      	mov	r3, r7
 800b528:	f7f4 feae 	bl	8000288 <__aeabi_dsub>
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	e764      	b.n	800b3fc <__ieee754_rem_pio2+0x18c>
 800b532:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <__ieee754_rem_pio2+0x330>)
 800b534:	4598      	cmp	r8, r3
 800b536:	dd35      	ble.n	800b5a4 <__ieee754_rem_pio2+0x334>
 800b538:	ee10 2a10 	vmov	r2, s0
 800b53c:	463b      	mov	r3, r7
 800b53e:	4630      	mov	r0, r6
 800b540:	4639      	mov	r1, r7
 800b542:	f7f4 fea1 	bl	8000288 <__aeabi_dsub>
 800b546:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b54a:	e9c4 0100 	strd	r0, r1, [r4]
 800b54e:	e6a1      	b.n	800b294 <__ieee754_rem_pio2+0x24>
 800b550:	54400000 	.word	0x54400000
 800b554:	3ff921fb 	.word	0x3ff921fb
 800b558:	1a626331 	.word	0x1a626331
 800b55c:	3dd0b461 	.word	0x3dd0b461
 800b560:	1a600000 	.word	0x1a600000
 800b564:	3dd0b461 	.word	0x3dd0b461
 800b568:	2e037073 	.word	0x2e037073
 800b56c:	3ba3198a 	.word	0x3ba3198a
 800b570:	6dc9c883 	.word	0x6dc9c883
 800b574:	3fe45f30 	.word	0x3fe45f30
 800b578:	2e000000 	.word	0x2e000000
 800b57c:	3ba3198a 	.word	0x3ba3198a
 800b580:	252049c1 	.word	0x252049c1
 800b584:	397b839a 	.word	0x397b839a
 800b588:	3fe921fb 	.word	0x3fe921fb
 800b58c:	4002d97b 	.word	0x4002d97b
 800b590:	3ff921fb 	.word	0x3ff921fb
 800b594:	413921fb 	.word	0x413921fb
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	0800c5e0 	.word	0x0800c5e0
 800b5a0:	7fefffff 	.word	0x7fefffff
 800b5a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b5a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b5ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	460f      	mov	r7, r1
 800b5b4:	f7f5 fad0 	bl	8000b58 <__aeabi_d2iz>
 800b5b8:	f7f4 ffb4 	bl	8000524 <__aeabi_i2d>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5c8:	f7f4 fe5e 	bl	8000288 <__aeabi_dsub>
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4b1f      	ldr	r3, [pc, #124]	; (800b64c <__ieee754_rem_pio2+0x3dc>)
 800b5d0:	f7f5 f812 	bl	80005f8 <__aeabi_dmul>
 800b5d4:	460f      	mov	r7, r1
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	f7f5 fabe 	bl	8000b58 <__aeabi_d2iz>
 800b5dc:	f7f4 ffa2 	bl	8000524 <__aeabi_i2d>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b5ec:	f7f4 fe4c 	bl	8000288 <__aeabi_dsub>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4b16      	ldr	r3, [pc, #88]	; (800b64c <__ieee754_rem_pio2+0x3dc>)
 800b5f4:	f7f5 f800 	bl	80005f8 <__aeabi_dmul>
 800b5f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b5fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b600:	f04f 0803 	mov.w	r8, #3
 800b604:	2600      	movs	r6, #0
 800b606:	2700      	movs	r7, #0
 800b608:	4632      	mov	r2, r6
 800b60a:	463b      	mov	r3, r7
 800b60c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b610:	f108 3aff 	add.w	sl, r8, #4294967295
 800b614:	f7f5 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 800b618:	b9b0      	cbnz	r0, 800b648 <__ieee754_rem_pio2+0x3d8>
 800b61a:	4b0d      	ldr	r3, [pc, #52]	; (800b650 <__ieee754_rem_pio2+0x3e0>)
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	2302      	movs	r3, #2
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	462a      	mov	r2, r5
 800b624:	4643      	mov	r3, r8
 800b626:	4621      	mov	r1, r4
 800b628:	a806      	add	r0, sp, #24
 800b62a:	f000 f815 	bl	800b658 <__kernel_rem_pio2>
 800b62e:	9b04      	ldr	r3, [sp, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	4605      	mov	r5, r0
 800b634:	f6bf ae58 	bge.w	800b2e8 <__ieee754_rem_pio2+0x78>
 800b638:	6863      	ldr	r3, [r4, #4]
 800b63a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b63e:	6063      	str	r3, [r4, #4]
 800b640:	68e3      	ldr	r3, [r4, #12]
 800b642:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b646:	e746      	b.n	800b4d6 <__ieee754_rem_pio2+0x266>
 800b648:	46d0      	mov	r8, sl
 800b64a:	e7dd      	b.n	800b608 <__ieee754_rem_pio2+0x398>
 800b64c:	41700000 	.word	0x41700000
 800b650:	0800c660 	.word	0x0800c660
 800b654:	00000000 	.word	0x00000000

0800b658 <__kernel_rem_pio2>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	ed2d 8b02 	vpush	{d8}
 800b660:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b664:	1ed4      	subs	r4, r2, #3
 800b666:	9308      	str	r3, [sp, #32]
 800b668:	9101      	str	r1, [sp, #4]
 800b66a:	4bc5      	ldr	r3, [pc, #788]	; (800b980 <__kernel_rem_pio2+0x328>)
 800b66c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b66e:	9009      	str	r0, [sp, #36]	; 0x24
 800b670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	9b08      	ldr	r3, [sp, #32]
 800b678:	3b01      	subs	r3, #1
 800b67a:	9307      	str	r3, [sp, #28]
 800b67c:	2318      	movs	r3, #24
 800b67e:	fb94 f4f3 	sdiv	r4, r4, r3
 800b682:	f06f 0317 	mvn.w	r3, #23
 800b686:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b68a:	fb04 3303 	mla	r3, r4, r3, r3
 800b68e:	eb03 0a02 	add.w	sl, r3, r2
 800b692:	9b04      	ldr	r3, [sp, #16]
 800b694:	9a07      	ldr	r2, [sp, #28]
 800b696:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b970 <__kernel_rem_pio2+0x318>
 800b69a:	eb03 0802 	add.w	r8, r3, r2
 800b69e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b6a0:	1aa7      	subs	r7, r4, r2
 800b6a2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b6a6:	ae22      	add	r6, sp, #136	; 0x88
 800b6a8:	2500      	movs	r5, #0
 800b6aa:	4545      	cmp	r5, r8
 800b6ac:	dd13      	ble.n	800b6d6 <__kernel_rem_pio2+0x7e>
 800b6ae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b970 <__kernel_rem_pio2+0x318>
 800b6b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b6b6:	2600      	movs	r6, #0
 800b6b8:	9b04      	ldr	r3, [sp, #16]
 800b6ba:	429e      	cmp	r6, r3
 800b6bc:	dc32      	bgt.n	800b724 <__kernel_rem_pio2+0xcc>
 800b6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c0:	9302      	str	r3, [sp, #8]
 800b6c2:	9b08      	ldr	r3, [sp, #32]
 800b6c4:	199d      	adds	r5, r3, r6
 800b6c6:	ab22      	add	r3, sp, #136	; 0x88
 800b6c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b6cc:	9306      	str	r3, [sp, #24]
 800b6ce:	ec59 8b18 	vmov	r8, r9, d8
 800b6d2:	2700      	movs	r7, #0
 800b6d4:	e01f      	b.n	800b716 <__kernel_rem_pio2+0xbe>
 800b6d6:	42ef      	cmn	r7, r5
 800b6d8:	d407      	bmi.n	800b6ea <__kernel_rem_pio2+0x92>
 800b6da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b6de:	f7f4 ff21 	bl	8000524 <__aeabi_i2d>
 800b6e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b6e6:	3501      	adds	r5, #1
 800b6e8:	e7df      	b.n	800b6aa <__kernel_rem_pio2+0x52>
 800b6ea:	ec51 0b18 	vmov	r0, r1, d8
 800b6ee:	e7f8      	b.n	800b6e2 <__kernel_rem_pio2+0x8a>
 800b6f0:	9906      	ldr	r1, [sp, #24]
 800b6f2:	9d02      	ldr	r5, [sp, #8]
 800b6f4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b6f8:	9106      	str	r1, [sp, #24]
 800b6fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b6fe:	9502      	str	r5, [sp, #8]
 800b700:	f7f4 ff7a 	bl	80005f8 <__aeabi_dmul>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4640      	mov	r0, r8
 800b70a:	4649      	mov	r1, r9
 800b70c:	f7f4 fdbe 	bl	800028c <__adddf3>
 800b710:	3701      	adds	r7, #1
 800b712:	4680      	mov	r8, r0
 800b714:	4689      	mov	r9, r1
 800b716:	9b07      	ldr	r3, [sp, #28]
 800b718:	429f      	cmp	r7, r3
 800b71a:	dde9      	ble.n	800b6f0 <__kernel_rem_pio2+0x98>
 800b71c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b720:	3601      	adds	r6, #1
 800b722:	e7c9      	b.n	800b6b8 <__kernel_rem_pio2+0x60>
 800b724:	9b04      	ldr	r3, [sp, #16]
 800b726:	aa0e      	add	r2, sp, #56	; 0x38
 800b728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b72c:	930c      	str	r3, [sp, #48]	; 0x30
 800b72e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b730:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b734:	9c04      	ldr	r4, [sp, #16]
 800b736:	930b      	str	r3, [sp, #44]	; 0x2c
 800b738:	ab9a      	add	r3, sp, #616	; 0x268
 800b73a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b73e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b742:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b746:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b74a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b74e:	ab9a      	add	r3, sp, #616	; 0x268
 800b750:	445b      	add	r3, fp
 800b752:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b756:	2500      	movs	r5, #0
 800b758:	1b63      	subs	r3, r4, r5
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dc78      	bgt.n	800b850 <__kernel_rem_pio2+0x1f8>
 800b75e:	4650      	mov	r0, sl
 800b760:	ec49 8b10 	vmov	d0, r8, r9
 800b764:	f000 fd14 	bl	800c190 <scalbn>
 800b768:	ec57 6b10 	vmov	r6, r7, d0
 800b76c:	2200      	movs	r2, #0
 800b76e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b772:	ee10 0a10 	vmov	r0, s0
 800b776:	4639      	mov	r1, r7
 800b778:	f7f4 ff3e 	bl	80005f8 <__aeabi_dmul>
 800b77c:	ec41 0b10 	vmov	d0, r0, r1
 800b780:	f000 fc82 	bl	800c088 <floor>
 800b784:	2200      	movs	r2, #0
 800b786:	ec51 0b10 	vmov	r0, r1, d0
 800b78a:	4b7e      	ldr	r3, [pc, #504]	; (800b984 <__kernel_rem_pio2+0x32c>)
 800b78c:	f7f4 ff34 	bl	80005f8 <__aeabi_dmul>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4630      	mov	r0, r6
 800b796:	4639      	mov	r1, r7
 800b798:	f7f4 fd76 	bl	8000288 <__aeabi_dsub>
 800b79c:	460f      	mov	r7, r1
 800b79e:	4606      	mov	r6, r0
 800b7a0:	f7f5 f9da 	bl	8000b58 <__aeabi_d2iz>
 800b7a4:	9006      	str	r0, [sp, #24]
 800b7a6:	f7f4 febd 	bl	8000524 <__aeabi_i2d>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 fd69 	bl	8000288 <__aeabi_dsub>
 800b7b6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460f      	mov	r7, r1
 800b7be:	dd6c      	ble.n	800b89a <__kernel_rem_pio2+0x242>
 800b7c0:	1e62      	subs	r2, r4, #1
 800b7c2:	ab0e      	add	r3, sp, #56	; 0x38
 800b7c4:	f1ca 0118 	rsb	r1, sl, #24
 800b7c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b7cc:	9d06      	ldr	r5, [sp, #24]
 800b7ce:	fa40 f301 	asr.w	r3, r0, r1
 800b7d2:	441d      	add	r5, r3
 800b7d4:	408b      	lsls	r3, r1
 800b7d6:	1ac0      	subs	r0, r0, r3
 800b7d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b7da:	9506      	str	r5, [sp, #24]
 800b7dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b7e0:	f1ca 0317 	rsb	r3, sl, #23
 800b7e4:	fa40 f303 	asr.w	r3, r0, r3
 800b7e8:	9302      	str	r3, [sp, #8]
 800b7ea:	9b02      	ldr	r3, [sp, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dd62      	ble.n	800b8b6 <__kernel_rem_pio2+0x25e>
 800b7f0:	9b06      	ldr	r3, [sp, #24]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	9306      	str	r3, [sp, #24]
 800b7f8:	4615      	mov	r5, r2
 800b7fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b7fe:	4294      	cmp	r4, r2
 800b800:	f300 8095 	bgt.w	800b92e <__kernel_rem_pio2+0x2d6>
 800b804:	f1ba 0f00 	cmp.w	sl, #0
 800b808:	dd07      	ble.n	800b81a <__kernel_rem_pio2+0x1c2>
 800b80a:	f1ba 0f01 	cmp.w	sl, #1
 800b80e:	f000 80a2 	beq.w	800b956 <__kernel_rem_pio2+0x2fe>
 800b812:	f1ba 0f02 	cmp.w	sl, #2
 800b816:	f000 80c1 	beq.w	800b99c <__kernel_rem_pio2+0x344>
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	d14a      	bne.n	800b8b6 <__kernel_rem_pio2+0x25e>
 800b820:	4632      	mov	r2, r6
 800b822:	463b      	mov	r3, r7
 800b824:	2000      	movs	r0, #0
 800b826:	4958      	ldr	r1, [pc, #352]	; (800b988 <__kernel_rem_pio2+0x330>)
 800b828:	f7f4 fd2e 	bl	8000288 <__aeabi_dsub>
 800b82c:	4606      	mov	r6, r0
 800b82e:	460f      	mov	r7, r1
 800b830:	2d00      	cmp	r5, #0
 800b832:	d040      	beq.n	800b8b6 <__kernel_rem_pio2+0x25e>
 800b834:	4650      	mov	r0, sl
 800b836:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b978 <__kernel_rem_pio2+0x320>
 800b83a:	f000 fca9 	bl	800c190 <scalbn>
 800b83e:	4630      	mov	r0, r6
 800b840:	4639      	mov	r1, r7
 800b842:	ec53 2b10 	vmov	r2, r3, d0
 800b846:	f7f4 fd1f 	bl	8000288 <__aeabi_dsub>
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	e032      	b.n	800b8b6 <__kernel_rem_pio2+0x25e>
 800b850:	2200      	movs	r2, #0
 800b852:	4b4e      	ldr	r3, [pc, #312]	; (800b98c <__kernel_rem_pio2+0x334>)
 800b854:	4640      	mov	r0, r8
 800b856:	4649      	mov	r1, r9
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	f7f5 f97c 	bl	8000b58 <__aeabi_d2iz>
 800b860:	f7f4 fe60 	bl	8000524 <__aeabi_i2d>
 800b864:	2200      	movs	r2, #0
 800b866:	4b4a      	ldr	r3, [pc, #296]	; (800b990 <__kernel_rem_pio2+0x338>)
 800b868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f4 fd06 	bl	8000288 <__aeabi_dsub>
 800b87c:	f7f5 f96c 	bl	8000b58 <__aeabi_d2iz>
 800b880:	ab0e      	add	r3, sp, #56	; 0x38
 800b882:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b886:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88e:	f7f4 fcfd 	bl	800028c <__adddf3>
 800b892:	3501      	adds	r5, #1
 800b894:	4680      	mov	r8, r0
 800b896:	4689      	mov	r9, r1
 800b898:	e75e      	b.n	800b758 <__kernel_rem_pio2+0x100>
 800b89a:	d105      	bne.n	800b8a8 <__kernel_rem_pio2+0x250>
 800b89c:	1e63      	subs	r3, r4, #1
 800b89e:	aa0e      	add	r2, sp, #56	; 0x38
 800b8a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b8a4:	15c3      	asrs	r3, r0, #23
 800b8a6:	e79f      	b.n	800b7e8 <__kernel_rem_pio2+0x190>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4b3a      	ldr	r3, [pc, #232]	; (800b994 <__kernel_rem_pio2+0x33c>)
 800b8ac:	f7f5 f92a 	bl	8000b04 <__aeabi_dcmpge>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d139      	bne.n	800b928 <__kernel_rem_pio2+0x2d0>
 800b8b4:	9002      	str	r0, [sp, #8]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f5 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f000 80c7 	beq.w	800ba56 <__kernel_rem_pio2+0x3fe>
 800b8c8:	1e65      	subs	r5, r4, #1
 800b8ca:	462b      	mov	r3, r5
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	9904      	ldr	r1, [sp, #16]
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	da6a      	bge.n	800b9aa <__kernel_rem_pio2+0x352>
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	f000 8088 	beq.w	800b9ea <__kernel_rem_pio2+0x392>
 800b8da:	ab0e      	add	r3, sp, #56	; 0x38
 800b8dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b8e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 80b4 	beq.w	800ba52 <__kernel_rem_pio2+0x3fa>
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b978 <__kernel_rem_pio2+0x320>
 800b8f0:	f000 fc4e 	bl	800c190 <scalbn>
 800b8f4:	00ec      	lsls	r4, r5, #3
 800b8f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b8f8:	191e      	adds	r6, r3, r4
 800b8fa:	ec59 8b10 	vmov	r8, r9, d0
 800b8fe:	f106 0a08 	add.w	sl, r6, #8
 800b902:	462f      	mov	r7, r5
 800b904:	2f00      	cmp	r7, #0
 800b906:	f280 80df 	bge.w	800bac8 <__kernel_rem_pio2+0x470>
 800b90a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b970 <__kernel_rem_pio2+0x318>
 800b90e:	f04f 0a00 	mov.w	sl, #0
 800b912:	eba5 030a 	sub.w	r3, r5, sl
 800b916:	2b00      	cmp	r3, #0
 800b918:	f2c0 810a 	blt.w	800bb30 <__kernel_rem_pio2+0x4d8>
 800b91c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b998 <__kernel_rem_pio2+0x340>
 800b920:	ec59 8b18 	vmov	r8, r9, d8
 800b924:	2700      	movs	r7, #0
 800b926:	e0f5      	b.n	800bb14 <__kernel_rem_pio2+0x4bc>
 800b928:	2302      	movs	r3, #2
 800b92a:	9302      	str	r3, [sp, #8]
 800b92c:	e760      	b.n	800b7f0 <__kernel_rem_pio2+0x198>
 800b92e:	ab0e      	add	r3, sp, #56	; 0x38
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	b94d      	cbnz	r5, 800b94a <__kernel_rem_pio2+0x2f2>
 800b936:	b12b      	cbz	r3, 800b944 <__kernel_rem_pio2+0x2ec>
 800b938:	a80e      	add	r0, sp, #56	; 0x38
 800b93a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b93e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b942:	2301      	movs	r3, #1
 800b944:	3201      	adds	r2, #1
 800b946:	461d      	mov	r5, r3
 800b948:	e759      	b.n	800b7fe <__kernel_rem_pio2+0x1a6>
 800b94a:	a80e      	add	r0, sp, #56	; 0x38
 800b94c:	1acb      	subs	r3, r1, r3
 800b94e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b952:	462b      	mov	r3, r5
 800b954:	e7f6      	b.n	800b944 <__kernel_rem_pio2+0x2ec>
 800b956:	1e62      	subs	r2, r4, #1
 800b958:	ab0e      	add	r3, sp, #56	; 0x38
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b962:	a90e      	add	r1, sp, #56	; 0x38
 800b964:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b968:	e757      	b.n	800b81a <__kernel_rem_pio2+0x1c2>
 800b96a:	bf00      	nop
 800b96c:	f3af 8000 	nop.w
	...
 800b97c:	3ff00000 	.word	0x3ff00000
 800b980:	0800c7a8 	.word	0x0800c7a8
 800b984:	40200000 	.word	0x40200000
 800b988:	3ff00000 	.word	0x3ff00000
 800b98c:	3e700000 	.word	0x3e700000
 800b990:	41700000 	.word	0x41700000
 800b994:	3fe00000 	.word	0x3fe00000
 800b998:	0800c768 	.word	0x0800c768
 800b99c:	1e62      	subs	r2, r4, #1
 800b99e:	ab0e      	add	r3, sp, #56	; 0x38
 800b9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b9a8:	e7db      	b.n	800b962 <__kernel_rem_pio2+0x30a>
 800b9aa:	a90e      	add	r1, sp, #56	; 0x38
 800b9ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	e78b      	b.n	800b8ce <__kernel_rem_pio2+0x276>
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	d0fa      	beq.n	800b9b6 <__kernel_rem_pio2+0x35e>
 800b9c0:	9a08      	ldr	r2, [sp, #32]
 800b9c2:	4422      	add	r2, r4
 800b9c4:	00d2      	lsls	r2, r2, #3
 800b9c6:	a922      	add	r1, sp, #136	; 0x88
 800b9c8:	18e3      	adds	r3, r4, r3
 800b9ca:	9206      	str	r2, [sp, #24]
 800b9cc:	440a      	add	r2, r1
 800b9ce:	9302      	str	r3, [sp, #8]
 800b9d0:	f10b 0108 	add.w	r1, fp, #8
 800b9d4:	f102 0308 	add.w	r3, r2, #8
 800b9d8:	1c66      	adds	r6, r4, #1
 800b9da:	910a      	str	r1, [sp, #40]	; 0x28
 800b9dc:	2500      	movs	r5, #0
 800b9de:	930d      	str	r3, [sp, #52]	; 0x34
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	42b3      	cmp	r3, r6
 800b9e4:	da04      	bge.n	800b9f0 <__kernel_rem_pio2+0x398>
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	e6a6      	b.n	800b738 <__kernel_rem_pio2+0xe0>
 800b9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e7e3      	b.n	800b9b8 <__kernel_rem_pio2+0x360>
 800b9f0:	9b06      	ldr	r3, [sp, #24]
 800b9f2:	18ef      	adds	r7, r5, r3
 800b9f4:	ab22      	add	r3, sp, #136	; 0x88
 800b9f6:	441f      	add	r7, r3
 800b9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b9fe:	f7f4 fd91 	bl	8000524 <__aeabi_i2d>
 800ba02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba04:	461c      	mov	r4, r3
 800ba06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba08:	e9c7 0100 	strd	r0, r1, [r7]
 800ba0c:	eb03 0b05 	add.w	fp, r3, r5
 800ba10:	2700      	movs	r7, #0
 800ba12:	f04f 0800 	mov.w	r8, #0
 800ba16:	f04f 0900 	mov.w	r9, #0
 800ba1a:	9b07      	ldr	r3, [sp, #28]
 800ba1c:	429f      	cmp	r7, r3
 800ba1e:	dd08      	ble.n	800ba32 <__kernel_rem_pio2+0x3da>
 800ba20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba22:	aa72      	add	r2, sp, #456	; 0x1c8
 800ba24:	18eb      	adds	r3, r5, r3
 800ba26:	4413      	add	r3, r2
 800ba28:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800ba2c:	3601      	adds	r6, #1
 800ba2e:	3508      	adds	r5, #8
 800ba30:	e7d6      	b.n	800b9e0 <__kernel_rem_pio2+0x388>
 800ba32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ba36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ba3a:	f7f4 fddd 	bl	80005f8 <__aeabi_dmul>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4640      	mov	r0, r8
 800ba44:	4649      	mov	r1, r9
 800ba46:	f7f4 fc21 	bl	800028c <__adddf3>
 800ba4a:	3701      	adds	r7, #1
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4689      	mov	r9, r1
 800ba50:	e7e3      	b.n	800ba1a <__kernel_rem_pio2+0x3c2>
 800ba52:	3d01      	subs	r5, #1
 800ba54:	e741      	b.n	800b8da <__kernel_rem_pio2+0x282>
 800ba56:	f1ca 0000 	rsb	r0, sl, #0
 800ba5a:	ec47 6b10 	vmov	d0, r6, r7
 800ba5e:	f000 fb97 	bl	800c190 <scalbn>
 800ba62:	ec57 6b10 	vmov	r6, r7, d0
 800ba66:	2200      	movs	r2, #0
 800ba68:	4b99      	ldr	r3, [pc, #612]	; (800bcd0 <__kernel_rem_pio2+0x678>)
 800ba6a:	ee10 0a10 	vmov	r0, s0
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f5 f848 	bl	8000b04 <__aeabi_dcmpge>
 800ba74:	b1f8      	cbz	r0, 800bab6 <__kernel_rem_pio2+0x45e>
 800ba76:	2200      	movs	r2, #0
 800ba78:	4b96      	ldr	r3, [pc, #600]	; (800bcd4 <__kernel_rem_pio2+0x67c>)
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	4639      	mov	r1, r7
 800ba7e:	f7f4 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ba82:	f7f5 f869 	bl	8000b58 <__aeabi_d2iz>
 800ba86:	4680      	mov	r8, r0
 800ba88:	f7f4 fd4c 	bl	8000524 <__aeabi_i2d>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4b90      	ldr	r3, [pc, #576]	; (800bcd0 <__kernel_rem_pio2+0x678>)
 800ba90:	f7f4 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ba94:	460b      	mov	r3, r1
 800ba96:	4602      	mov	r2, r0
 800ba98:	4639      	mov	r1, r7
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f7f4 fbf4 	bl	8000288 <__aeabi_dsub>
 800baa0:	f7f5 f85a 	bl	8000b58 <__aeabi_d2iz>
 800baa4:	1c65      	adds	r5, r4, #1
 800baa6:	ab0e      	add	r3, sp, #56	; 0x38
 800baa8:	f10a 0a18 	add.w	sl, sl, #24
 800baac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bab0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bab4:	e719      	b.n	800b8ea <__kernel_rem_pio2+0x292>
 800bab6:	4630      	mov	r0, r6
 800bab8:	4639      	mov	r1, r7
 800baba:	f7f5 f84d 	bl	8000b58 <__aeabi_d2iz>
 800babe:	ab0e      	add	r3, sp, #56	; 0x38
 800bac0:	4625      	mov	r5, r4
 800bac2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bac6:	e710      	b.n	800b8ea <__kernel_rem_pio2+0x292>
 800bac8:	ab0e      	add	r3, sp, #56	; 0x38
 800baca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bace:	f7f4 fd29 	bl	8000524 <__aeabi_i2d>
 800bad2:	4642      	mov	r2, r8
 800bad4:	464b      	mov	r3, r9
 800bad6:	f7f4 fd8f 	bl	80005f8 <__aeabi_dmul>
 800bada:	2200      	movs	r2, #0
 800badc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bae0:	4b7c      	ldr	r3, [pc, #496]	; (800bcd4 <__kernel_rem_pio2+0x67c>)
 800bae2:	4640      	mov	r0, r8
 800bae4:	4649      	mov	r1, r9
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	3f01      	subs	r7, #1
 800baec:	4680      	mov	r8, r0
 800baee:	4689      	mov	r9, r1
 800baf0:	e708      	b.n	800b904 <__kernel_rem_pio2+0x2ac>
 800baf2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4640      	mov	r0, r8
 800bb08:	4649      	mov	r1, r9
 800bb0a:	f7f4 fbbf 	bl	800028c <__adddf3>
 800bb0e:	3701      	adds	r7, #1
 800bb10:	4680      	mov	r8, r0
 800bb12:	4689      	mov	r9, r1
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	429f      	cmp	r7, r3
 800bb18:	dc01      	bgt.n	800bb1e <__kernel_rem_pio2+0x4c6>
 800bb1a:	45ba      	cmp	sl, r7
 800bb1c:	dae9      	bge.n	800baf2 <__kernel_rem_pio2+0x49a>
 800bb1e:	ab4a      	add	r3, sp, #296	; 0x128
 800bb20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb24:	e9c3 8900 	strd	r8, r9, [r3]
 800bb28:	f10a 0a01 	add.w	sl, sl, #1
 800bb2c:	3e08      	subs	r6, #8
 800bb2e:	e6f0      	b.n	800b912 <__kernel_rem_pio2+0x2ba>
 800bb30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d85b      	bhi.n	800bbee <__kernel_rem_pio2+0x596>
 800bb36:	e8df f003 	tbb	[pc, r3]
 800bb3a:	264a      	.short	0x264a
 800bb3c:	0226      	.short	0x0226
 800bb3e:	ab9a      	add	r3, sp, #616	; 0x268
 800bb40:	441c      	add	r4, r3
 800bb42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bb46:	46a2      	mov	sl, r4
 800bb48:	46ab      	mov	fp, r5
 800bb4a:	f1bb 0f00 	cmp.w	fp, #0
 800bb4e:	dc6c      	bgt.n	800bc2a <__kernel_rem_pio2+0x5d2>
 800bb50:	46a2      	mov	sl, r4
 800bb52:	46ab      	mov	fp, r5
 800bb54:	f1bb 0f01 	cmp.w	fp, #1
 800bb58:	f300 8086 	bgt.w	800bc68 <__kernel_rem_pio2+0x610>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	2100      	movs	r1, #0
 800bb60:	2d01      	cmp	r5, #1
 800bb62:	f300 80a0 	bgt.w	800bca6 <__kernel_rem_pio2+0x64e>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bb6c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f040 809e 	bne.w	800bcb2 <__kernel_rem_pio2+0x65a>
 800bb76:	9b01      	ldr	r3, [sp, #4]
 800bb78:	e9c3 7800 	strd	r7, r8, [r3]
 800bb7c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bb80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bb84:	e033      	b.n	800bbee <__kernel_rem_pio2+0x596>
 800bb86:	3408      	adds	r4, #8
 800bb88:	ab4a      	add	r3, sp, #296	; 0x128
 800bb8a:	441c      	add	r4, r3
 800bb8c:	462e      	mov	r6, r5
 800bb8e:	2000      	movs	r0, #0
 800bb90:	2100      	movs	r1, #0
 800bb92:	2e00      	cmp	r6, #0
 800bb94:	da3a      	bge.n	800bc0c <__kernel_rem_pio2+0x5b4>
 800bb96:	9b02      	ldr	r3, [sp, #8]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d03d      	beq.n	800bc18 <__kernel_rem_pio2+0x5c0>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bba2:	9c01      	ldr	r4, [sp, #4]
 800bba4:	e9c4 2300 	strd	r2, r3, [r4]
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bbb0:	f7f4 fb6a 	bl	8000288 <__aeabi_dsub>
 800bbb4:	ae4c      	add	r6, sp, #304	; 0x130
 800bbb6:	2401      	movs	r4, #1
 800bbb8:	42a5      	cmp	r5, r4
 800bbba:	da30      	bge.n	800bc1e <__kernel_rem_pio2+0x5c6>
 800bbbc:	9b02      	ldr	r3, [sp, #8]
 800bbbe:	b113      	cbz	r3, 800bbc6 <__kernel_rem_pio2+0x56e>
 800bbc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	9b01      	ldr	r3, [sp, #4]
 800bbc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bbcc:	e00f      	b.n	800bbee <__kernel_rem_pio2+0x596>
 800bbce:	ab9a      	add	r3, sp, #616	; 0x268
 800bbd0:	441c      	add	r4, r3
 800bbd2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	2100      	movs	r1, #0
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	da10      	bge.n	800bc00 <__kernel_rem_pio2+0x5a8>
 800bbde:	9b02      	ldr	r3, [sp, #8]
 800bbe0:	b113      	cbz	r3, 800bbe8 <__kernel_rem_pio2+0x590>
 800bbe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	e9c3 0100 	strd	r0, r1, [r3]
 800bbee:	9b06      	ldr	r3, [sp, #24]
 800bbf0:	f003 0007 	and.w	r0, r3, #7
 800bbf4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bbf8:	ecbd 8b02 	vpop	{d8}
 800bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc00:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc04:	f7f4 fb42 	bl	800028c <__adddf3>
 800bc08:	3d01      	subs	r5, #1
 800bc0a:	e7e6      	b.n	800bbda <__kernel_rem_pio2+0x582>
 800bc0c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc10:	f7f4 fb3c 	bl	800028c <__adddf3>
 800bc14:	3e01      	subs	r6, #1
 800bc16:	e7bc      	b.n	800bb92 <__kernel_rem_pio2+0x53a>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	e7c1      	b.n	800bba2 <__kernel_rem_pio2+0x54a>
 800bc1e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bc22:	f7f4 fb33 	bl	800028c <__adddf3>
 800bc26:	3401      	adds	r4, #1
 800bc28:	e7c6      	b.n	800bbb8 <__kernel_rem_pio2+0x560>
 800bc2a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bc2e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bc32:	4640      	mov	r0, r8
 800bc34:	ec53 2b17 	vmov	r2, r3, d7
 800bc38:	4649      	mov	r1, r9
 800bc3a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc3e:	f7f4 fb25 	bl	800028c <__adddf3>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4606      	mov	r6, r0
 800bc48:	460f      	mov	r7, r1
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fb1b 	bl	8000288 <__aeabi_dsub>
 800bc52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc56:	f7f4 fb19 	bl	800028c <__adddf3>
 800bc5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc5e:	e9ca 0100 	strd	r0, r1, [sl]
 800bc62:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bc66:	e770      	b.n	800bb4a <__kernel_rem_pio2+0x4f2>
 800bc68:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bc6c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bc70:	4630      	mov	r0, r6
 800bc72:	ec53 2b17 	vmov	r2, r3, d7
 800bc76:	4639      	mov	r1, r7
 800bc78:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc7c:	f7f4 fb06 	bl	800028c <__adddf3>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4680      	mov	r8, r0
 800bc86:	4689      	mov	r9, r1
 800bc88:	4630      	mov	r0, r6
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	f7f4 fafc 	bl	8000288 <__aeabi_dsub>
 800bc90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc94:	f7f4 fafa 	bl	800028c <__adddf3>
 800bc98:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc9c:	e9ca 0100 	strd	r0, r1, [sl]
 800bca0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bca4:	e756      	b.n	800bb54 <__kernel_rem_pio2+0x4fc>
 800bca6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bcaa:	f7f4 faef 	bl	800028c <__adddf3>
 800bcae:	3d01      	subs	r5, #1
 800bcb0:	e756      	b.n	800bb60 <__kernel_rem_pio2+0x508>
 800bcb2:	9b01      	ldr	r3, [sp, #4]
 800bcb4:	9a01      	ldr	r2, [sp, #4]
 800bcb6:	601f      	str	r7, [r3, #0]
 800bcb8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bcbc:	605c      	str	r4, [r3, #4]
 800bcbe:	609d      	str	r5, [r3, #8]
 800bcc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bcc4:	60d3      	str	r3, [r2, #12]
 800bcc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcca:	6110      	str	r0, [r2, #16]
 800bccc:	6153      	str	r3, [r2, #20]
 800bcce:	e78e      	b.n	800bbee <__kernel_rem_pio2+0x596>
 800bcd0:	41700000 	.word	0x41700000
 800bcd4:	3e700000 	.word	0x3e700000

0800bcd8 <__kernel_tan>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	ec5b ab10 	vmov	sl, fp, d0
 800bce0:	4bbf      	ldr	r3, [pc, #764]	; (800bfe0 <__kernel_tan+0x308>)
 800bce2:	b089      	sub	sp, #36	; 0x24
 800bce4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800bce8:	429f      	cmp	r7, r3
 800bcea:	ec59 8b11 	vmov	r8, r9, d1
 800bcee:	4606      	mov	r6, r0
 800bcf0:	f8cd b008 	str.w	fp, [sp, #8]
 800bcf4:	dc22      	bgt.n	800bd3c <__kernel_tan+0x64>
 800bcf6:	ee10 0a10 	vmov	r0, s0
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	f7f4 ff2c 	bl	8000b58 <__aeabi_d2iz>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d145      	bne.n	800bd90 <__kernel_tan+0xb8>
 800bd04:	1c73      	adds	r3, r6, #1
 800bd06:	4652      	mov	r2, sl
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	433b      	orrs	r3, r7
 800bd0c:	d110      	bne.n	800bd30 <__kernel_tan+0x58>
 800bd0e:	ec4b ab10 	vmov	d0, sl, fp
 800bd12:	f000 f9ad 	bl	800c070 <fabs>
 800bd16:	49b3      	ldr	r1, [pc, #716]	; (800bfe4 <__kernel_tan+0x30c>)
 800bd18:	ec53 2b10 	vmov	r2, r3, d0
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	f7f4 fd95 	bl	800084c <__aeabi_ddiv>
 800bd22:	4682      	mov	sl, r0
 800bd24:	468b      	mov	fp, r1
 800bd26:	ec4b ab10 	vmov	d0, sl, fp
 800bd2a:	b009      	add	sp, #36	; 0x24
 800bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd30:	2e01      	cmp	r6, #1
 800bd32:	d0f8      	beq.n	800bd26 <__kernel_tan+0x4e>
 800bd34:	465b      	mov	r3, fp
 800bd36:	2000      	movs	r0, #0
 800bd38:	49ab      	ldr	r1, [pc, #684]	; (800bfe8 <__kernel_tan+0x310>)
 800bd3a:	e7f0      	b.n	800bd1e <__kernel_tan+0x46>
 800bd3c:	4bab      	ldr	r3, [pc, #684]	; (800bfec <__kernel_tan+0x314>)
 800bd3e:	429f      	cmp	r7, r3
 800bd40:	dd26      	ble.n	800bd90 <__kernel_tan+0xb8>
 800bd42:	9b02      	ldr	r3, [sp, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	da09      	bge.n	800bd5c <__kernel_tan+0x84>
 800bd48:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd4c:	469b      	mov	fp, r3
 800bd4e:	ee10 aa10 	vmov	sl, s0
 800bd52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd56:	ee11 8a10 	vmov	r8, s2
 800bd5a:	4699      	mov	r9, r3
 800bd5c:	4652      	mov	r2, sl
 800bd5e:	465b      	mov	r3, fp
 800bd60:	a181      	add	r1, pc, #516	; (adr r1, 800bf68 <__kernel_tan+0x290>)
 800bd62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd66:	f7f4 fa8f 	bl	8000288 <__aeabi_dsub>
 800bd6a:	4642      	mov	r2, r8
 800bd6c:	464b      	mov	r3, r9
 800bd6e:	4604      	mov	r4, r0
 800bd70:	460d      	mov	r5, r1
 800bd72:	a17f      	add	r1, pc, #508	; (adr r1, 800bf70 <__kernel_tan+0x298>)
 800bd74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd78:	f7f4 fa86 	bl	8000288 <__aeabi_dsub>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	462b      	mov	r3, r5
 800bd80:	f7f4 fa84 	bl	800028c <__adddf3>
 800bd84:	f04f 0800 	mov.w	r8, #0
 800bd88:	4682      	mov	sl, r0
 800bd8a:	468b      	mov	fp, r1
 800bd8c:	f04f 0900 	mov.w	r9, #0
 800bd90:	4652      	mov	r2, sl
 800bd92:	465b      	mov	r3, fp
 800bd94:	4650      	mov	r0, sl
 800bd96:	4659      	mov	r1, fp
 800bd98:	f7f4 fc2e 	bl	80005f8 <__aeabi_dmul>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	e9cd 0100 	strd	r0, r1, [sp]
 800bda4:	f7f4 fc28 	bl	80005f8 <__aeabi_dmul>
 800bda8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdac:	4604      	mov	r4, r0
 800bdae:	460d      	mov	r5, r1
 800bdb0:	4650      	mov	r0, sl
 800bdb2:	4659      	mov	r1, fp
 800bdb4:	f7f4 fc20 	bl	80005f8 <__aeabi_dmul>
 800bdb8:	a36f      	add	r3, pc, #444	; (adr r3, 800bf78 <__kernel_tan+0x2a0>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 fc17 	bl	80005f8 <__aeabi_dmul>
 800bdca:	a36d      	add	r3, pc, #436	; (adr r3, 800bf80 <__kernel_tan+0x2a8>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fa5c 	bl	800028c <__adddf3>
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	f7f4 fc0e 	bl	80005f8 <__aeabi_dmul>
 800bddc:	a36a      	add	r3, pc, #424	; (adr r3, 800bf88 <__kernel_tan+0x2b0>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f7f4 fa53 	bl	800028c <__adddf3>
 800bde6:	4622      	mov	r2, r4
 800bde8:	462b      	mov	r3, r5
 800bdea:	f7f4 fc05 	bl	80005f8 <__aeabi_dmul>
 800bdee:	a368      	add	r3, pc, #416	; (adr r3, 800bf90 <__kernel_tan+0x2b8>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f7f4 fa4a 	bl	800028c <__adddf3>
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	462b      	mov	r3, r5
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	a365      	add	r3, pc, #404	; (adr r3, 800bf98 <__kernel_tan+0x2c0>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fa41 	bl	800028c <__adddf3>
 800be0a:	4622      	mov	r2, r4
 800be0c:	462b      	mov	r3, r5
 800be0e:	f7f4 fbf3 	bl	80005f8 <__aeabi_dmul>
 800be12:	a363      	add	r3, pc, #396	; (adr r3, 800bfa0 <__kernel_tan+0x2c8>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	f7f4 fa38 	bl	800028c <__adddf3>
 800be1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be20:	f7f4 fbea 	bl	80005f8 <__aeabi_dmul>
 800be24:	a360      	add	r3, pc, #384	; (adr r3, 800bfa8 <__kernel_tan+0x2d0>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be2e:	4620      	mov	r0, r4
 800be30:	4629      	mov	r1, r5
 800be32:	f7f4 fbe1 	bl	80005f8 <__aeabi_dmul>
 800be36:	a35e      	add	r3, pc, #376	; (adr r3, 800bfb0 <__kernel_tan+0x2d8>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	f7f4 fa26 	bl	800028c <__adddf3>
 800be40:	4622      	mov	r2, r4
 800be42:	462b      	mov	r3, r5
 800be44:	f7f4 fbd8 	bl	80005f8 <__aeabi_dmul>
 800be48:	a35b      	add	r3, pc, #364	; (adr r3, 800bfb8 <__kernel_tan+0x2e0>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fa1d 	bl	800028c <__adddf3>
 800be52:	4622      	mov	r2, r4
 800be54:	462b      	mov	r3, r5
 800be56:	f7f4 fbcf 	bl	80005f8 <__aeabi_dmul>
 800be5a:	a359      	add	r3, pc, #356	; (adr r3, 800bfc0 <__kernel_tan+0x2e8>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f7f4 fa14 	bl	800028c <__adddf3>
 800be64:	4622      	mov	r2, r4
 800be66:	462b      	mov	r3, r5
 800be68:	f7f4 fbc6 	bl	80005f8 <__aeabi_dmul>
 800be6c:	a356      	add	r3, pc, #344	; (adr r3, 800bfc8 <__kernel_tan+0x2f0>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 fa0b 	bl	800028c <__adddf3>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	f7f4 fbbd 	bl	80005f8 <__aeabi_dmul>
 800be7e:	a354      	add	r3, pc, #336	; (adr r3, 800bfd0 <__kernel_tan+0x2f8>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fa02 	bl	800028c <__adddf3>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be90:	f7f4 f9fc 	bl	800028c <__adddf3>
 800be94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	4642      	mov	r2, r8
 800be9e:	464b      	mov	r3, r9
 800bea0:	f7f4 f9f4 	bl	800028c <__adddf3>
 800bea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bea8:	f7f4 fba6 	bl	80005f8 <__aeabi_dmul>
 800beac:	4642      	mov	r2, r8
 800beae:	464b      	mov	r3, r9
 800beb0:	f7f4 f9ec 	bl	800028c <__adddf3>
 800beb4:	a348      	add	r3, pc, #288	; (adr r3, 800bfd8 <__kernel_tan+0x300>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	4604      	mov	r4, r0
 800bebc:	460d      	mov	r5, r1
 800bebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bec2:	f7f4 fb99 	bl	80005f8 <__aeabi_dmul>
 800bec6:	4622      	mov	r2, r4
 800bec8:	462b      	mov	r3, r5
 800beca:	f7f4 f9df 	bl	800028c <__adddf3>
 800bece:	e9cd 0100 	strd	r0, r1, [sp]
 800bed2:	460b      	mov	r3, r1
 800bed4:	4602      	mov	r2, r0
 800bed6:	4659      	mov	r1, fp
 800bed8:	4650      	mov	r0, sl
 800beda:	f7f4 f9d7 	bl	800028c <__adddf3>
 800bede:	4b43      	ldr	r3, [pc, #268]	; (800bfec <__kernel_tan+0x314>)
 800bee0:	429f      	cmp	r7, r3
 800bee2:	4604      	mov	r4, r0
 800bee4:	460d      	mov	r5, r1
 800bee6:	f340 8083 	ble.w	800bff0 <__kernel_tan+0x318>
 800beea:	4630      	mov	r0, r6
 800beec:	f7f4 fb1a 	bl	8000524 <__aeabi_i2d>
 800bef0:	4622      	mov	r2, r4
 800bef2:	4680      	mov	r8, r0
 800bef4:	4689      	mov	r9, r1
 800bef6:	462b      	mov	r3, r5
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	4642      	mov	r2, r8
 800bf02:	4606      	mov	r6, r0
 800bf04:	460f      	mov	r7, r1
 800bf06:	464b      	mov	r3, r9
 800bf08:	4620      	mov	r0, r4
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f7f4 f9be 	bl	800028c <__adddf3>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 fc98 	bl	800084c <__aeabi_ddiv>
 800bf1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf20:	f7f4 f9b2 	bl	8000288 <__aeabi_dsub>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4650      	mov	r0, sl
 800bf2a:	4659      	mov	r1, fp
 800bf2c:	f7f4 f9ac 	bl	8000288 <__aeabi_dsub>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	f7f4 f9aa 	bl	800028c <__adddf3>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f7f4 f9a2 	bl	8000288 <__aeabi_dsub>
 800bf44:	9b02      	ldr	r3, [sp, #8]
 800bf46:	4604      	mov	r4, r0
 800bf48:	1798      	asrs	r0, r3, #30
 800bf4a:	f000 0002 	and.w	r0, r0, #2
 800bf4e:	f1c0 0001 	rsb	r0, r0, #1
 800bf52:	460d      	mov	r5, r1
 800bf54:	f7f4 fae6 	bl	8000524 <__aeabi_i2d>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 fb4a 	bl	80005f8 <__aeabi_dmul>
 800bf64:	e6dd      	b.n	800bd22 <__kernel_tan+0x4a>
 800bf66:	bf00      	nop
 800bf68:	54442d18 	.word	0x54442d18
 800bf6c:	3fe921fb 	.word	0x3fe921fb
 800bf70:	33145c07 	.word	0x33145c07
 800bf74:	3c81a626 	.word	0x3c81a626
 800bf78:	74bf7ad4 	.word	0x74bf7ad4
 800bf7c:	3efb2a70 	.word	0x3efb2a70
 800bf80:	32f0a7e9 	.word	0x32f0a7e9
 800bf84:	3f12b80f 	.word	0x3f12b80f
 800bf88:	1a8d1068 	.word	0x1a8d1068
 800bf8c:	3f3026f7 	.word	0x3f3026f7
 800bf90:	fee08315 	.word	0xfee08315
 800bf94:	3f57dbc8 	.word	0x3f57dbc8
 800bf98:	e96e8493 	.word	0xe96e8493
 800bf9c:	3f8226e3 	.word	0x3f8226e3
 800bfa0:	1bb341fe 	.word	0x1bb341fe
 800bfa4:	3faba1ba 	.word	0x3faba1ba
 800bfa8:	db605373 	.word	0xdb605373
 800bfac:	bef375cb 	.word	0xbef375cb
 800bfb0:	a03792a6 	.word	0xa03792a6
 800bfb4:	3f147e88 	.word	0x3f147e88
 800bfb8:	f2f26501 	.word	0xf2f26501
 800bfbc:	3f4344d8 	.word	0x3f4344d8
 800bfc0:	c9560328 	.word	0xc9560328
 800bfc4:	3f6d6d22 	.word	0x3f6d6d22
 800bfc8:	8406d637 	.word	0x8406d637
 800bfcc:	3f9664f4 	.word	0x3f9664f4
 800bfd0:	1110fe7a 	.word	0x1110fe7a
 800bfd4:	3fc11111 	.word	0x3fc11111
 800bfd8:	55555563 	.word	0x55555563
 800bfdc:	3fd55555 	.word	0x3fd55555
 800bfe0:	3e2fffff 	.word	0x3e2fffff
 800bfe4:	3ff00000 	.word	0x3ff00000
 800bfe8:	bff00000 	.word	0xbff00000
 800bfec:	3fe59427 	.word	0x3fe59427
 800bff0:	2e01      	cmp	r6, #1
 800bff2:	d036      	beq.n	800c062 <__kernel_tan+0x38a>
 800bff4:	460f      	mov	r7, r1
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	2000      	movs	r0, #0
 800bffc:	491a      	ldr	r1, [pc, #104]	; (800c068 <__kernel_tan+0x390>)
 800bffe:	f7f4 fc25 	bl	800084c <__aeabi_ddiv>
 800c002:	2600      	movs	r6, #0
 800c004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c008:	4652      	mov	r2, sl
 800c00a:	465b      	mov	r3, fp
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	f7f4 f93a 	bl	8000288 <__aeabi_dsub>
 800c014:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c020:	f7f4 f932 	bl	8000288 <__aeabi_dsub>
 800c024:	4632      	mov	r2, r6
 800c026:	462b      	mov	r3, r5
 800c028:	f7f4 fae6 	bl	80005f8 <__aeabi_dmul>
 800c02c:	4632      	mov	r2, r6
 800c02e:	4682      	mov	sl, r0
 800c030:	468b      	mov	fp, r1
 800c032:	462b      	mov	r3, r5
 800c034:	4630      	mov	r0, r6
 800c036:	4639      	mov	r1, r7
 800c038:	f7f4 fade 	bl	80005f8 <__aeabi_dmul>
 800c03c:	2200      	movs	r2, #0
 800c03e:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <__kernel_tan+0x394>)
 800c040:	f7f4 f924 	bl	800028c <__adddf3>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4650      	mov	r0, sl
 800c04a:	4659      	mov	r1, fp
 800c04c:	f7f4 f91e 	bl	800028c <__adddf3>
 800c050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c054:	f7f4 fad0 	bl	80005f8 <__aeabi_dmul>
 800c058:	4632      	mov	r2, r6
 800c05a:	462b      	mov	r3, r5
 800c05c:	f7f4 f916 	bl	800028c <__adddf3>
 800c060:	e65f      	b.n	800bd22 <__kernel_tan+0x4a>
 800c062:	4682      	mov	sl, r0
 800c064:	468b      	mov	fp, r1
 800c066:	e65e      	b.n	800bd26 <__kernel_tan+0x4e>
 800c068:	bff00000 	.word	0xbff00000
 800c06c:	3ff00000 	.word	0x3ff00000

0800c070 <fabs>:
 800c070:	ec51 0b10 	vmov	r0, r1, d0
 800c074:	ee10 2a10 	vmov	r2, s0
 800c078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c07c:	ec43 2b10 	vmov	d0, r2, r3
 800c080:	4770      	bx	lr
 800c082:	0000      	movs	r0, r0
 800c084:	0000      	movs	r0, r0
	...

0800c088 <floor>:
 800c088:	ec51 0b10 	vmov	r0, r1, d0
 800c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c090:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c094:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c098:	2e13      	cmp	r6, #19
 800c09a:	460c      	mov	r4, r1
 800c09c:	ee10 5a10 	vmov	r5, s0
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	dc34      	bgt.n	800c10e <floor+0x86>
 800c0a4:	2e00      	cmp	r6, #0
 800c0a6:	da16      	bge.n	800c0d6 <floor+0x4e>
 800c0a8:	a335      	add	r3, pc, #212	; (adr r3, 800c180 <floor+0xf8>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 f8ed 	bl	800028c <__adddf3>
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f7f4 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 800c0ba:	b148      	cbz	r0, 800c0d0 <floor+0x48>
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	da59      	bge.n	800c174 <floor+0xec>
 800c0c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c0c4:	4a30      	ldr	r2, [pc, #192]	; (800c188 <floor+0x100>)
 800c0c6:	432b      	orrs	r3, r5
 800c0c8:	2500      	movs	r5, #0
 800c0ca:	42ab      	cmp	r3, r5
 800c0cc:	bf18      	it	ne
 800c0ce:	4614      	movne	r4, r2
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	e025      	b.n	800c122 <floor+0x9a>
 800c0d6:	4f2d      	ldr	r7, [pc, #180]	; (800c18c <floor+0x104>)
 800c0d8:	4137      	asrs	r7, r6
 800c0da:	ea01 0307 	and.w	r3, r1, r7
 800c0de:	4303      	orrs	r3, r0
 800c0e0:	d01f      	beq.n	800c122 <floor+0x9a>
 800c0e2:	a327      	add	r3, pc, #156	; (adr r3, 800c180 <floor+0xf8>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f8d0 	bl	800028c <__adddf3>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f7f4 fd12 	bl	8000b18 <__aeabi_dcmpgt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d0eb      	beq.n	800c0d0 <floor+0x48>
 800c0f8:	2c00      	cmp	r4, #0
 800c0fa:	bfbe      	ittt	lt
 800c0fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c100:	fa43 f606 	asrlt.w	r6, r3, r6
 800c104:	19a4      	addlt	r4, r4, r6
 800c106:	ea24 0407 	bic.w	r4, r4, r7
 800c10a:	2500      	movs	r5, #0
 800c10c:	e7e0      	b.n	800c0d0 <floor+0x48>
 800c10e:	2e33      	cmp	r6, #51	; 0x33
 800c110:	dd0b      	ble.n	800c12a <floor+0xa2>
 800c112:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c116:	d104      	bne.n	800c122 <floor+0x9a>
 800c118:	ee10 2a10 	vmov	r2, s0
 800c11c:	460b      	mov	r3, r1
 800c11e:	f7f4 f8b5 	bl	800028c <__adddf3>
 800c122:	ec41 0b10 	vmov	d0, r0, r1
 800c126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c12e:	f04f 33ff 	mov.w	r3, #4294967295
 800c132:	fa23 f707 	lsr.w	r7, r3, r7
 800c136:	4207      	tst	r7, r0
 800c138:	d0f3      	beq.n	800c122 <floor+0x9a>
 800c13a:	a311      	add	r3, pc, #68	; (adr r3, 800c180 <floor+0xf8>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f7f4 f8a4 	bl	800028c <__adddf3>
 800c144:	2200      	movs	r2, #0
 800c146:	2300      	movs	r3, #0
 800c148:	f7f4 fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d0bf      	beq.n	800c0d0 <floor+0x48>
 800c150:	2c00      	cmp	r4, #0
 800c152:	da02      	bge.n	800c15a <floor+0xd2>
 800c154:	2e14      	cmp	r6, #20
 800c156:	d103      	bne.n	800c160 <floor+0xd8>
 800c158:	3401      	adds	r4, #1
 800c15a:	ea25 0507 	bic.w	r5, r5, r7
 800c15e:	e7b7      	b.n	800c0d0 <floor+0x48>
 800c160:	2301      	movs	r3, #1
 800c162:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c166:	fa03 f606 	lsl.w	r6, r3, r6
 800c16a:	4435      	add	r5, r6
 800c16c:	4545      	cmp	r5, r8
 800c16e:	bf38      	it	cc
 800c170:	18e4      	addcc	r4, r4, r3
 800c172:	e7f2      	b.n	800c15a <floor+0xd2>
 800c174:	2500      	movs	r5, #0
 800c176:	462c      	mov	r4, r5
 800c178:	e7aa      	b.n	800c0d0 <floor+0x48>
 800c17a:	bf00      	nop
 800c17c:	f3af 8000 	nop.w
 800c180:	8800759c 	.word	0x8800759c
 800c184:	7e37e43c 	.word	0x7e37e43c
 800c188:	bff00000 	.word	0xbff00000
 800c18c:	000fffff 	.word	0x000fffff

0800c190 <scalbn>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	ec55 4b10 	vmov	r4, r5, d0
 800c196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c19a:	4606      	mov	r6, r0
 800c19c:	462b      	mov	r3, r5
 800c19e:	b9aa      	cbnz	r2, 800c1cc <scalbn+0x3c>
 800c1a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1a4:	4323      	orrs	r3, r4
 800c1a6:	d03b      	beq.n	800c220 <scalbn+0x90>
 800c1a8:	4b31      	ldr	r3, [pc, #196]	; (800c270 <scalbn+0xe0>)
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	ee10 0a10 	vmov	r0, s0
 800c1b2:	f7f4 fa21 	bl	80005f8 <__aeabi_dmul>
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <scalbn+0xe4>)
 800c1b8:	429e      	cmp	r6, r3
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460d      	mov	r5, r1
 800c1be:	da12      	bge.n	800c1e6 <scalbn+0x56>
 800c1c0:	a327      	add	r3, pc, #156	; (adr r3, 800c260 <scalbn+0xd0>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	e009      	b.n	800c1e0 <scalbn+0x50>
 800c1cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c1d0:	428a      	cmp	r2, r1
 800c1d2:	d10c      	bne.n	800c1ee <scalbn+0x5e>
 800c1d4:	ee10 2a10 	vmov	r2, s0
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 f856 	bl	800028c <__adddf3>
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	e01c      	b.n	800c220 <scalbn+0x90>
 800c1e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	3a36      	subs	r2, #54	; 0x36
 800c1ee:	4432      	add	r2, r6
 800c1f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c1f4:	428a      	cmp	r2, r1
 800c1f6:	dd0b      	ble.n	800c210 <scalbn+0x80>
 800c1f8:	ec45 4b11 	vmov	d1, r4, r5
 800c1fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c268 <scalbn+0xd8>
 800c200:	f000 f83c 	bl	800c27c <copysign>
 800c204:	a318      	add	r3, pc, #96	; (adr r3, 800c268 <scalbn+0xd8>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	ec51 0b10 	vmov	r0, r1, d0
 800c20e:	e7da      	b.n	800c1c6 <scalbn+0x36>
 800c210:	2a00      	cmp	r2, #0
 800c212:	dd08      	ble.n	800c226 <scalbn+0x96>
 800c214:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c21c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c220:	ec45 4b10 	vmov	d0, r4, r5
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c22a:	da0d      	bge.n	800c248 <scalbn+0xb8>
 800c22c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c230:	429e      	cmp	r6, r3
 800c232:	ec45 4b11 	vmov	d1, r4, r5
 800c236:	dce1      	bgt.n	800c1fc <scalbn+0x6c>
 800c238:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c260 <scalbn+0xd0>
 800c23c:	f000 f81e 	bl	800c27c <copysign>
 800c240:	a307      	add	r3, pc, #28	; (adr r3, 800c260 <scalbn+0xd0>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	e7e0      	b.n	800c20a <scalbn+0x7a>
 800c248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c24c:	3236      	adds	r2, #54	; 0x36
 800c24e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	2200      	movs	r2, #0
 800c25c:	4b06      	ldr	r3, [pc, #24]	; (800c278 <scalbn+0xe8>)
 800c25e:	e7b2      	b.n	800c1c6 <scalbn+0x36>
 800c260:	c2f8f359 	.word	0xc2f8f359
 800c264:	01a56e1f 	.word	0x01a56e1f
 800c268:	8800759c 	.word	0x8800759c
 800c26c:	7e37e43c 	.word	0x7e37e43c
 800c270:	43500000 	.word	0x43500000
 800c274:	ffff3cb0 	.word	0xffff3cb0
 800c278:	3c900000 	.word	0x3c900000

0800c27c <copysign>:
 800c27c:	ec51 0b10 	vmov	r0, r1, d0
 800c280:	ee11 0a90 	vmov	r0, s3
 800c284:	ee10 2a10 	vmov	r2, s0
 800c288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c28c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c290:	ea41 0300 	orr.w	r3, r1, r0
 800c294:	ec43 2b10 	vmov	d0, r2, r3
 800c298:	4770      	bx	lr
	...

0800c29c <_init>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	bf00      	nop
 800c2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a2:	bc08      	pop	{r3}
 800c2a4:	469e      	mov	lr, r3
 800c2a6:	4770      	bx	lr

0800c2a8 <_fini>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr
